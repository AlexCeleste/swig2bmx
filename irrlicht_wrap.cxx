/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCFFI


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>


#include "include/irrlicht.h"
using namespace irr;
using namespace core;
using namespace scene;
using namespace quake3;

EXPORT irr::f32 _wrap_radToDeg__SWIG_0 (irr::f32 larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)irr::core::radToDeg(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f64 _wrap_radToDeg__SWIG_1 (irr::f64 larg1) {
  irr::f64 lresult = (irr::f64)0 ;
  irr::f64 arg1 ;
  irr::f64 result;
  
  arg1 = larg1;
  try {
    result = (irr::f64)irr::core::radToDeg(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT irr::f32 _wrap_degToRad__SWIG_0 (irr::f32 larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)irr::core::degToRad(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f64 _wrap_degToRad__SWIG_1 (irr::f64 larg1) {
  irr::f64 lresult = (irr::f64)0 ;
  irr::f64 arg1 ;
  irr::f64 result;
  
  arg1 = larg1;
  try {
    result = (irr::f64)irr::core::degToRad(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT int _wrap_equals__SWIG_0 (irr::f64 larg1, irr::f64 larg2, irr::f64 larg3) {
  int lresult = (int)0 ;
  irr::f64 arg1 ;
  irr::f64 arg2 ;
  irr::f64 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)irr::core::equals(arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_equals__SWIG_1 (irr::f64 larg1, irr::f64 larg2) {
  int lresult = (int)0 ;
  irr::f64 arg1 ;
  irr::f64 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)irr::core::equals(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_equals__SWIG_2 (irr::f32 larg1, irr::f32 larg2, irr::f32 larg3) {
  int lresult = (int)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)irr::core::equals(arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_equals__SWIG_3 (irr::f32 larg1, irr::f32 larg2) {
  int lresult = (int)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)irr::core::equals(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_equalsByUlp (irr::f32 larg1, irr::f32 larg2, int larg3) {
  int lresult = (int)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)irr::core::equalsByUlp(arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_equals__SWIG_4 (irr::s32 larg1, irr::s32 larg2, irr::s32 larg3) {
  int lresult = (int)0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)irr::core::equals(arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_equals__SWIG_5 (irr::s32 larg1, irr::s32 larg2) {
  int lresult = (int)0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)irr::core::equals(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_equals__SWIG_6 (irr::u32 larg1, irr::u32 larg2, irr::s32 larg3) {
  int lresult = (int)0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)irr::core::equals(arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_equals__SWIG_7 (irr::u32 larg1, irr::u32 larg2) {
  int lresult = (int)0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)irr::core::equals(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_equals__SWIG_8 (irr::s64 const *larg1, irr::s64 const *larg2, irr::s64 const *larg3) {
  int lresult = (int)0 ;
  irr::s64 arg1 ;
  irr::s64 arg2 ;
  irr::s64 arg3 ;
  bool result;
  
  arg1 = *larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  try {
    result = (bool)irr::core::equals(arg1,arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_equals__SWIG_9 (irr::s64 const *larg1, irr::s64 const *larg2) {
  int lresult = (int)0 ;
  irr::s64 arg1 ;
  irr::s64 arg2 ;
  bool result;
  
  arg1 = *larg1;
  arg2 = *larg2;
  try {
    result = (bool)irr::core::equals(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_iszero__SWIG_0 (irr::f64 larg1, irr::f64 larg2) {
  int lresult = (int)0 ;
  irr::f64 arg1 ;
  irr::f64 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)irr::core::iszero(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_iszero__SWIG_1 (irr::f64 larg1) {
  int lresult = (int)0 ;
  irr::f64 arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)irr::core::iszero(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_iszero__SWIG_2 (irr::f32 larg1, irr::f32 larg2) {
  int lresult = (int)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)irr::core::iszero(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_iszero__SWIG_3 (irr::f32 larg1) {
  int lresult = (int)0 ;
  irr::f32 arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)irr::core::iszero(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_isnotzero__SWIG_0 (irr::f32 larg1, irr::f32 larg2) {
  int lresult = (int)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)irr::core::isnotzero(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_isnotzero__SWIG_1 (irr::f32 larg1) {
  int lresult = (int)0 ;
  irr::f32 arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)irr::core::isnotzero(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_iszero__SWIG_4 (irr::s32 larg1, irr::s32 larg2) {
  int lresult = (int)0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)irr::core::iszero(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_iszero__SWIG_5 (irr::s32 larg1) {
  int lresult = (int)0 ;
  irr::s32 arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)irr::core::iszero(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_iszero__SWIG_6 (irr::u32 larg1, irr::u32 larg2) {
  int lresult = (int)0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)irr::core::iszero(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_iszero__SWIG_7 (irr::u32 larg1) {
  int lresult = (int)0 ;
  irr::u32 arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)irr::core::iszero(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_iszero__SWIG_8 (irr::s64 const *larg1, irr::s64 const *larg2) {
  int lresult = (int)0 ;
  irr::s64 arg1 ;
  irr::s64 arg2 ;
  bool result;
  
  arg1 = *larg1;
  arg2 = *larg2;
  try {
    result = (bool)irr::core::iszero(arg1,arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_iszero__SWIG_9 (irr::s64 const *larg1) {
  int lresult = (int)0 ;
  irr::s64 arg1 ;
  bool result;
  
  arg1 = *larg1;
  try {
    result = (bool)irr::core::iszero(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::s32 _wrap_s32_min (irr::s32 larg1, irr::s32 larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)irr::core::s32_min(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_s32_max (irr::s32 larg1, irr::s32 larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)irr::core::s32_max(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_s32_clamp (irr::s32 larg1, irr::s32 larg2, irr::s32 larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::s32 arg1 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)irr::core::s32_clamp(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::u32 _wrap_IR (irr::f32 larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::f32 arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::core::IR(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::f32 _wrap_FR__SWIG_0 (irr::u32 larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::u32 arg1 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)irr::core::FR(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_FR__SWIG_1 (irr::s32 larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::s32 arg1 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)irr::core::FR(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::u32 _wrap_if_c_a_else_b__SWIG_0 (irr::s32 larg1, irr::u32 larg2, irr::u32 larg3) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::s32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::u32)irr::core::if_c_a_else_b(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u16 _wrap_if_c_a_else_b__SWIG_1 (irr::s16 larg1, irr::u16 larg2, irr::u16 larg3) {
  irr::u16 lresult = (irr::u16)0 ;
  irr::s16 arg1 ;
  irr::u16 arg2 ;
  irr::u16 arg3 ;
  irr::u16 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::u16)irr::core::if_c_a_else_b(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16)0;
  }
}


EXPORT irr::u32 _wrap_if_c_a_else_0 (irr::s32 larg1, irr::u32 larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::s32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)irr::core::if_c_a_else_0(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_setbit_cond (irr::u32 *larg1, irr::s32 larg2, irr::u32 larg3) {
  irr::u32 *arg1 = 0 ;
  irr::s32 arg2 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    irr::core::setbit_cond(*arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_round_ (irr::f32 larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)irr::core::round_(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_clearFPUException () {
  try {
    irr::core::clearFPUException();
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_squareroot__SWIG_0 (irr::f32 larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)irr::core::squareroot(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f64 _wrap_squareroot__SWIG_1 (irr::f64 larg1) {
  irr::f64 lresult = (irr::f64)0 ;
  irr::f64 arg1 ;
  irr::f64 result;
  
  arg1 = larg1;
  try {
    result = (irr::f64)irr::core::squareroot(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT irr::s32 _wrap_squareroot__SWIG_2 (irr::s32 larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::s32 arg1 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)irr::core::squareroot(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s64 *_wrap_squareroot__SWIG_3 (irr::s64 const *larg1) {
  irr::s64 * lresult = (irr::s64 *)0 ;
  irr::s64 arg1 ;
  irr::s64 result;
  
  arg1 = *larg1;
  try {
    result = (irr::s64)irr::core::squareroot(arg1);
    lresult = new irr::s64(result);
    return lresult;
  } catch (...) {
    return (irr::s64 *)0;
  }
}


EXPORT irr::f64 _wrap_reciprocal_squareroot__SWIG_0 (irr::f64 larg1) {
  irr::f64 lresult = (irr::f64)0 ;
  irr::f64 arg1 ;
  irr::f64 result;
  
  arg1 = larg1;
  try {
    result = (irr::f64)irr::core::reciprocal_squareroot(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT irr::f32 _wrap_reciprocal_squareroot__SWIG_1 (irr::f32 larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)irr::core::reciprocal_squareroot(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::s32 _wrap_reciprocal_squareroot__SWIG_2 (irr::s32 larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::s32 arg1 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)irr::core::reciprocal_squareroot(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::f32 _wrap_reciprocal__SWIG_0 (irr::f32 larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)irr::core::reciprocal(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f64 _wrap_reciprocal__SWIG_1 (irr::f64 larg1) {
  irr::f64 lresult = (irr::f64)0 ;
  irr::f64 arg1 ;
  irr::f64 result;
  
  arg1 = larg1;
  try {
    result = (irr::f64)irr::core::reciprocal(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT irr::f32 _wrap_reciprocal_approxim (irr::f32 larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)irr::core::reciprocal_approxim(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::s32 _wrap_floor32 (irr::f32 larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::f32 arg1 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)irr::core::floor32(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_ceil32 (irr::f32 larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::f32 arg1 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)irr::core::ceil32(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_round32 (irr::f32 larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::f32 arg1 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)irr::core::round32(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::f32 _wrap_f32_max3 (irr::f32 larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::f32)irr::core::f32_max3(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_f32_min3 (irr::f32 larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::f32)irr::core::f32_min3(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_fract (irr::f32 larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::f32 arg1 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)irr::core::fract(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::IReferenceCounted *_wrap_new_IReferenceCounted () {
  irr::IReferenceCounted * lresult = (irr::IReferenceCounted *)0 ;
  irr::IReferenceCounted *result = 0 ;
  
  try {
    result = (irr::IReferenceCounted *)new irr::IReferenceCounted();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::IReferenceCounted *)0;
  }
}


EXPORT void _wrap_delete_IReferenceCounted (irr::IReferenceCounted *larg1) {
  irr::IReferenceCounted *arg1 = (irr::IReferenceCounted *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IReferenceCounted_grab (irr::IReferenceCounted *larg1) {
  irr::IReferenceCounted *arg1 = (irr::IReferenceCounted *) 0 ;
  
  arg1 = larg1;
  try {
    ((irr::IReferenceCounted const *)arg1)->grab();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IReferenceCounted_drop (irr::IReferenceCounted *larg1) {
  int lresult = (int)0 ;
  irr::IReferenceCounted *arg1 = (irr::IReferenceCounted *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::IReferenceCounted const *)arg1)->drop();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::s32 _wrap_IReferenceCounted_getReferenceCount (irr::IReferenceCounted *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::IReferenceCounted *arg1 = (irr::IReferenceCounted *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::IReferenceCounted const *)arg1)->getReferenceCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::c8 *_wrap_IReferenceCounted_getDebugName (irr::IReferenceCounted *larg1) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::IReferenceCounted *arg1 = (irr::IReferenceCounted *) 0 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::c8 *)((irr::IReferenceCounted const *)arg1)->getDebugName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT irr::u16 _wrap_RGBA16__SWIG_0 (irr::u32 larg1, irr::u32 larg2, irr::u32 larg3, irr::u32 larg4) {
  irr::u16 lresult = (irr::u16)0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::u16 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::u16)irr::video::RGBA16(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16)0;
  }
}


EXPORT irr::u16 _wrap_RGBA16__SWIG_1 (irr::u32 larg1, irr::u32 larg2, irr::u32 larg3) {
  irr::u16 lresult = (irr::u16)0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u16 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::u16)irr::video::RGBA16(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16)0;
  }
}


EXPORT irr::u16 _wrap_RGB16 (irr::u32 larg1, irr::u32 larg2, irr::u32 larg3) {
  irr::u16 lresult = (irr::u16)0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u16 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::u16)irr::video::RGB16(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16)0;
  }
}


EXPORT irr::u16 _wrap_RGB16from16 (irr::u16 larg1, irr::u16 larg2, irr::u16 larg3) {
  irr::u16 lresult = (irr::u16)0 ;
  irr::u16 arg1 ;
  irr::u16 arg2 ;
  irr::u16 arg3 ;
  irr::u16 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::u16)irr::video::RGB16from16(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16)0;
  }
}


EXPORT irr::u16 _wrap_X8R8G8B8toA1R5G5B5 (irr::u32 larg1) {
  irr::u16 lresult = (irr::u16)0 ;
  irr::u32 arg1 ;
  irr::u16 result;
  
  arg1 = larg1;
  try {
    result = (irr::u16)irr::video::X8R8G8B8toA1R5G5B5(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16)0;
  }
}


EXPORT irr::u16 _wrap_A8R8G8B8toA1R5G5B5 (irr::u32 larg1) {
  irr::u16 lresult = (irr::u16)0 ;
  irr::u32 arg1 ;
  irr::u16 result;
  
  arg1 = larg1;
  try {
    result = (irr::u16)irr::video::A8R8G8B8toA1R5G5B5(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16)0;
  }
}


EXPORT irr::u16 _wrap_A8R8G8B8toR5G6B5 (irr::u32 larg1) {
  irr::u16 lresult = (irr::u16)0 ;
  irr::u32 arg1 ;
  irr::u16 result;
  
  arg1 = larg1;
  try {
    result = (irr::u16)irr::video::A8R8G8B8toR5G6B5(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16)0;
  }
}


EXPORT irr::u32 _wrap_A1R5G5B5toA8R8G8B8 (irr::u16 larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::video::A1R5G5B5toA8R8G8B8(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_R5G6B5toA8R8G8B8 (irr::u16 larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::video::R5G6B5toA8R8G8B8(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u16 _wrap_R5G6B5toA1R5G5B5 (irr::u16 larg1) {
  irr::u16 lresult = (irr::u16)0 ;
  irr::u16 arg1 ;
  irr::u16 result;
  
  arg1 = larg1;
  try {
    result = (irr::u16)irr::video::R5G6B5toA1R5G5B5(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16)0;
  }
}


EXPORT irr::u16 _wrap_A1R5G5B5toR5G6B5 (irr::u16 larg1) {
  irr::u16 lresult = (irr::u16)0 ;
  irr::u16 arg1 ;
  irr::u16 result;
  
  arg1 = larg1;
  try {
    result = (irr::u16)irr::video::A1R5G5B5toR5G6B5(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16)0;
  }
}


EXPORT irr::u32 _wrap_getAlpha (irr::u16 larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::video::getAlpha(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_getRed (irr::u16 larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::video::getRed(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_getGreen (irr::u16 larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::video::getGreen(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_getBlue (irr::u16 larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::u16 arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::video::getBlue(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::s32 _wrap_getAverage (irr::s16 larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::s16 arg1 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)irr::video::getAverage(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::video::SColor *_wrap_new_SColor__SWIG_0 () {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::video::SColor *result = 0 ;
  
  try {
    result = (irr::video::SColor *)new irr::video::SColor();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::video::SColor *_wrap_new_SColor__SWIG_1 (irr::u32 larg1, irr::u32 larg2, irr::u32 larg3, irr::u32 larg4) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::video::SColor *)new irr::video::SColor(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::video::SColor *_wrap_new_SColor__SWIG_2 (irr::u32 larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::u32 arg1 ;
  irr::video::SColor *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SColor *)new irr::video::SColor(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::u32 _wrap_SColor_getAlpha (irr::video::SColor *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::SColor const *)arg1)->getAlpha();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_SColor_getRed (irr::video::SColor *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::SColor const *)arg1)->getRed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_SColor_getGreen (irr::video::SColor *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::SColor const *)arg1)->getGreen();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_SColor_getBlue (irr::video::SColor *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::SColor const *)arg1)->getBlue();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::f32 _wrap_SColor_getLightness (irr::video::SColor *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::video::SColor const *)arg1)->getLightness();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_SColor_getLuminance (irr::video::SColor *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::video::SColor const *)arg1)->getLuminance();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::u32 _wrap_SColor_getAverage (irr::video::SColor *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::SColor const *)arg1)->getAverage();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_SColor_setAlpha (irr::video::SColor *larg1, irr::u32 larg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAlpha(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SColor_setRed (irr::video::SColor *larg1, irr::u32 larg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SColor_setGreen (irr::video::SColor *larg1, irr::u32 larg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setGreen(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SColor_setBlue (irr::video::SColor *larg1, irr::u32 larg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setBlue(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u16 _wrap_SColor_toA1R5G5B5 (irr::video::SColor *larg1) {
  irr::u16 lresult = (irr::u16)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u16 result;
  
  arg1 = larg1;
  try {
    result = (irr::u16)((irr::video::SColor const *)arg1)->toA1R5G5B5();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16)0;
  }
}


EXPORT void _wrap_SColor_toOpenGLColor (irr::video::SColor *larg1, irr::u8 *larg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u8 *arg2 = (irr::u8 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::video::SColor const *)arg1)->toOpenGLColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SColor_set__SWIG_0 (irr::video::SColor *larg1, irr::u32 larg2, irr::u32 larg3, irr::u32 larg4, irr::u32 larg5) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->set(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SColor_set__SWIG_1 (irr::video::SColor *larg1, irr::u32 larg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SColor___eq__ (irr::video::SColor *larg1, irr::video::SColor *larg2) {
  int lresult = (int)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::SColor const *)arg1)->operator ==((irr::video::SColor const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SColor___ne__ (irr::video::SColor *larg1, irr::video::SColor *larg2) {
  int lresult = (int)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::SColor const *)arg1)->operator !=((irr::video::SColor const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SColor___lt__ (irr::video::SColor *larg1, irr::video::SColor *larg2) {
  int lresult = (int)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::SColor const *)arg1)->operator <((irr::video::SColor const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::video::SColor *_wrap_SColor___add__ (irr::video::SColor *larg1, irr::video::SColor *larg2) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::video::SColor const *)arg1)->operator +((irr::video::SColor const &)*arg2);
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::video::SColor *_wrap_SColor_getInterpolated (irr::video::SColor *larg1, irr::video::SColor *larg2, irr::f32 larg3) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((irr::video::SColor const *)arg1)->getInterpolated((irr::video::SColor const &)*arg2,arg3);
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::video::SColor *_wrap_SColor_getInterpolated_quadratic (irr::video::SColor *larg1, irr::video::SColor *larg2, irr::video::SColor *larg3, irr::f32 larg4) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::video::SColor *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = ((irr::video::SColor const *)arg1)->getInterpolated_quadratic((irr::video::SColor const &)*arg2,(irr::video::SColor const &)*arg3,arg4);
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_SColor_setData (irr::video::SColor *larg1, void *larg2, irr::video::ECOLOR_FORMAT larg3) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::video::ECOLOR_FORMAT arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setData((void const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SColor_getData (irr::video::SColor *larg1, void *larg2, irr::video::ECOLOR_FORMAT larg3) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::video::ECOLOR_FORMAT arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->getData(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SColor_color_set (irr::video::SColor *larg1, irr::u32 larg2) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->color = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_SColor_color_get (irr::video::SColor *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32) ((arg1)->color);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_delete_SColor (irr::video::SColor *larg1) {
  irr::video::SColor *arg1 = (irr::video::SColor *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColorf *_wrap_new_SColorf__SWIG_0 () {
  irr::video::SColorf * lresult = (irr::video::SColorf *)0 ;
  irr::video::SColorf *result = 0 ;
  
  try {
    result = (irr::video::SColorf *)new irr::video::SColorf();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColorf *)0;
  }
}


EXPORT irr::video::SColorf *_wrap_new_SColorf__SWIG_1 (irr::f32 larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4) {
  irr::video::SColorf * lresult = (irr::video::SColorf *)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::video::SColorf *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::video::SColorf *)new irr::video::SColorf(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColorf *)0;
  }
}


EXPORT irr::video::SColorf *_wrap_new_SColorf__SWIG_2 (irr::f32 larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::video::SColorf * lresult = (irr::video::SColorf *)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::video::SColorf *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::video::SColorf *)new irr::video::SColorf(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColorf *)0;
  }
}


EXPORT irr::video::SColorf *_wrap_new_SColorf__SWIG_3 (irr::video::SColor *larg1) {
  irr::video::SColorf * lresult = (irr::video::SColorf *)0 ;
  irr::video::SColor arg1 ;
  irr::video::SColorf *result = 0 ;
  
  arg1 = *larg1;
  try {
    result = (irr::video::SColorf *)new irr::video::SColorf(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColorf *)0;
  }
}


EXPORT irr::video::SColor *_wrap_SColorf_toSColor (irr::video::SColorf *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  try {
    result = ((irr::video::SColorf const *)arg1)->toSColor();
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_SColorf_set__SWIG_0 (irr::video::SColorf *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->set(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SColorf_set__SWIG_1 (irr::video::SColorf *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->set(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColorf *_wrap_SColorf_getInterpolated (irr::video::SColorf *larg1, irr::video::SColorf *larg2, irr::f32 larg3) {
  irr::video::SColorf * lresult = (irr::video::SColorf *)0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::video::SColorf result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((irr::video::SColorf const *)arg1)->getInterpolated((irr::video::SColorf const &)*arg2,arg3);
    lresult = new irr::video::SColorf(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColorf *)0;
  }
}


EXPORT irr::video::SColorf *_wrap_SColorf_getInterpolated_quadratic (irr::video::SColorf *larg1, irr::video::SColorf *larg2, irr::video::SColorf *larg3, irr::f32 larg4) {
  irr::video::SColorf * lresult = (irr::video::SColorf *)0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  irr::video::SColorf *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::video::SColorf result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = ((irr::video::SColorf const *)arg1)->getInterpolated_quadratic((irr::video::SColorf const &)*arg2,(irr::video::SColorf const &)*arg3,arg4);
    lresult = new irr::video::SColorf(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColorf *)0;
  }
}


EXPORT void _wrap_SColorf_setColorComponentValue (irr::video::SColorf *larg1, irr::s32 larg2, irr::f32 larg3) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::s32 arg2 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setColorComponentValue(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SColorf_getAlpha (irr::video::SColorf *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::video::SColorf const *)arg1)->getAlpha();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_SColorf_getRed (irr::video::SColorf *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::video::SColorf const *)arg1)->getRed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_SColorf_getGreen (irr::video::SColorf *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::video::SColorf const *)arg1)->getGreen();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_SColorf_getBlue (irr::video::SColorf *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::video::SColorf const *)arg1)->getBlue();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_SColorf_r_set (irr::video::SColorf *larg1, irr::f32 larg2) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->r = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SColorf_r_get (irr::video::SColorf *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->r);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_SColorf_g_set (irr::video::SColorf *larg1, irr::f32 larg2) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->g = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SColorf_g_get (irr::video::SColorf *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->g);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_SColorf_b_set (irr::video::SColorf *larg1, irr::f32 larg2) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->b = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SColorf_b_get (irr::video::SColorf *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->b);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_SColorf_a_set (irr::video::SColorf *larg1, irr::f32 larg2) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->a = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SColorf_a_get (irr::video::SColorf *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->a);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_delete_SColorf (irr::video::SColorf *larg1) {
  irr::video::SColorf *arg1 = (irr::video::SColorf *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColorHSL *_wrap_new_SColorHSL__SWIG_0 (irr::f32 larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::video::SColorHSL * lresult = (irr::video::SColorHSL *)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::video::SColorHSL *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::video::SColorHSL *)new irr::video::SColorHSL(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColorHSL *)0;
  }
}


EXPORT irr::video::SColorHSL *_wrap_new_SColorHSL__SWIG_1 (irr::f32 larg1, irr::f32 larg2) {
  irr::video::SColorHSL * lresult = (irr::video::SColorHSL *)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::video::SColorHSL *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::SColorHSL *)new irr::video::SColorHSL(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColorHSL *)0;
  }
}


EXPORT irr::video::SColorHSL *_wrap_new_SColorHSL__SWIG_2 (irr::f32 larg1) {
  irr::video::SColorHSL * lresult = (irr::video::SColorHSL *)0 ;
  irr::f32 arg1 ;
  irr::video::SColorHSL *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SColorHSL *)new irr::video::SColorHSL(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColorHSL *)0;
  }
}


EXPORT irr::video::SColorHSL *_wrap_new_SColorHSL__SWIG_3 () {
  irr::video::SColorHSL * lresult = (irr::video::SColorHSL *)0 ;
  irr::video::SColorHSL *result = 0 ;
  
  try {
    result = (irr::video::SColorHSL *)new irr::video::SColorHSL();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColorHSL *)0;
  }
}


EXPORT void _wrap_SColorHSL_fromRGB (irr::video::SColorHSL *larg1, irr::video::SColorf *larg2) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->fromRGB((irr::video::SColorf const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SColorHSL_toRGB (irr::video::SColorHSL *larg1, irr::video::SColorf *larg2) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::video::SColorHSL const *)arg1)->toRGB(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SColorHSL_Hue_set (irr::video::SColorHSL *larg1, irr::f32 larg2) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Hue = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SColorHSL_Hue_get (irr::video::SColorHSL *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->Hue);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_SColorHSL_Saturation_set (irr::video::SColorHSL *larg1, irr::f32 larg2) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Saturation = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SColorHSL_Saturation_get (irr::video::SColorHSL *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->Saturation);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_SColorHSL_Luminance_set (irr::video::SColorHSL *larg1, irr::f32 larg2) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Luminance = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SColorHSL_Luminance_get (irr::video::SColorHSL *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->Luminance);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_delete_SColorHSL (irr::video::SColorHSL *larg1) {
  irr::video::SColorHSL *arg1 = (irr::video::SColorHSL *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_locale_set (irr::core::eLocaleID larg1) {
  irr::core::eLocaleID arg1 ;
  
  arg1 = larg1;
  try {
    irr::core::locale_set(arg1);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_locale_lower (irr::u32 larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::u32 arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::core::locale_lower(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_locale_upper (irr::u32 larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::u32 arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::core::locale_upper(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::video::SMaterialLayer *_wrap_new_SMaterialLayer__SWIG_0 () {
  irr::video::SMaterialLayer * lresult = (irr::video::SMaterialLayer *)0 ;
  irr::video::SMaterialLayer *result = 0 ;
  
  try {
    result = (irr::video::SMaterialLayer *)new irr::video::SMaterialLayer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterialLayer *)0;
  }
}


EXPORT irr::video::SMaterialLayer *_wrap_new_SMaterialLayer__SWIG_1 (irr::video::SMaterialLayer *larg1) {
  irr::video::SMaterialLayer * lresult = (irr::video::SMaterialLayer *)0 ;
  irr::video::SMaterialLayer *arg1 = 0 ;
  irr::video::SMaterialLayer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterialLayer *)new irr::video::SMaterialLayer((irr::video::SMaterialLayer const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterialLayer *)0;
  }
}


EXPORT void _wrap_delete_SMaterialLayer (irr::video::SMaterialLayer *larg1) {
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SMaterialLayer *_wrap_SMaterialLayer___assign__ (irr::video::SMaterialLayer *larg1, irr::video::SMaterialLayer *larg2) {
  irr::video::SMaterialLayer * lresult = (irr::video::SMaterialLayer *)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::video::SMaterialLayer *arg2 = 0 ;
  irr::video::SMaterialLayer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::SMaterialLayer *) &(arg1)->operator =((irr::video::SMaterialLayer const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterialLayer *)0;
  }
}


EXPORT irr::core::matrix4 *_wrap_SMaterialLayer_getTextureMatrix__SWIG_0 (irr::video::SMaterialLayer *larg1) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::matrix4 *) &(arg1)->getTextureMatrix();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT irr::core::matrix4 *_wrap_SMaterialLayer_getTextureMatrix__SWIG_1 (irr::video::SMaterialLayer *larg1) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::matrix4 *) &((irr::video::SMaterialLayer const *)arg1)->getTextureMatrix();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT void _wrap_SMaterialLayer_setTextureMatrix (irr::video::SMaterialLayer *larg1, irr::core::matrix4 *larg2) {
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTextureMatrix((irr::core::matrix4 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterialLayer___ne__ (irr::video::SMaterialLayer *larg1, irr::video::SMaterialLayer *larg2) {
  int lresult = (int)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::video::SMaterialLayer *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::SMaterialLayer const *)arg1)->operator !=((irr::video::SMaterialLayer const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SMaterialLayer___eq__ (irr::video::SMaterialLayer *larg1, irr::video::SMaterialLayer *larg2) {
  int lresult = (int)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::video::SMaterialLayer *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::SMaterialLayer const *)arg1)->operator ==((irr::video::SMaterialLayer const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterialLayer_Texture_set (irr::video::SMaterialLayer *larg1, irr::video::ITexture *larg2) {
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Texture = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::ITexture *_wrap_SMaterialLayer_Texture_get (irr::video::SMaterialLayer *larg1) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::ITexture *) ((arg1)->Texture);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT void _wrap_SMaterialLayer_TextureWrapU_set (irr::video::SMaterialLayer *larg1, irr::u8 larg2) {
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::u8 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->TextureWrapU = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u8 _wrap_SMaterialLayer_TextureWrapU_get (irr::video::SMaterialLayer *larg1) {
  irr::u8 lresult = (irr::u8)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::u8 result;
  
  arg1 = larg1;
  try {
    result = (irr::u8) ((arg1)->TextureWrapU);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u8)0;
  }
}


EXPORT void _wrap_SMaterialLayer_TextureWrapV_set (irr::video::SMaterialLayer *larg1, irr::u8 larg2) {
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::u8 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->TextureWrapV = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u8 _wrap_SMaterialLayer_TextureWrapV_get (irr::video::SMaterialLayer *larg1) {
  irr::u8 lresult = (irr::u8)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::u8 result;
  
  arg1 = larg1;
  try {
    result = (irr::u8) ((arg1)->TextureWrapV);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u8)0;
  }
}


EXPORT void _wrap_SMaterialLayer_BilinearFilter_set (irr::video::SMaterialLayer *larg1, int larg2) {
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->BilinearFilter = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterialLayer_BilinearFilter_get (irr::video::SMaterialLayer *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->BilinearFilter);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterialLayer_TrilinearFilter_set (irr::video::SMaterialLayer *larg1, int larg2) {
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->TrilinearFilter = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterialLayer_TrilinearFilter_get (irr::video::SMaterialLayer *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->TrilinearFilter);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterialLayer_AnisotropicFilter_set (irr::video::SMaterialLayer *larg1, irr::u8 larg2) {
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::u8 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->AnisotropicFilter = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u8 _wrap_SMaterialLayer_AnisotropicFilter_get (irr::video::SMaterialLayer *larg1) {
  irr::u8 lresult = (irr::u8)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::u8 result;
  
  arg1 = larg1;
  try {
    result = (irr::u8) ((arg1)->AnisotropicFilter);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u8)0;
  }
}


EXPORT void _wrap_SMaterialLayer_LODBias_set (irr::video::SMaterialLayer *larg1, irr::s8 larg2) {
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::s8 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->LODBias = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::s8 _wrap_SMaterialLayer_LODBias_get (irr::video::SMaterialLayer *larg1) {
  irr::s8 lresult = (irr::s8)0 ;
  irr::video::SMaterialLayer *arg1 = (irr::video::SMaterialLayer *) 0 ;
  irr::s8 result;
  
  arg1 = larg1;
  try {
    result = (irr::s8) ((arg1)->LODBias);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s8)0;
  }
}


EXPORT irr::f32 _wrap_pack_textureBlendFunc__SWIG_0 (irr::video::E_BLEND_FACTOR larg1, irr::video::E_BLEND_FACTOR larg2, irr::video::E_MODULATE_FUNC larg3, irr::u32 larg4) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::E_BLEND_FACTOR arg1 ;
  irr::video::E_BLEND_FACTOR arg2 ;
  irr::video::E_MODULATE_FUNC arg3 ;
  irr::u32 arg4 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::f32)irr::video::pack_textureBlendFunc(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_pack_textureBlendFunc__SWIG_1 (irr::video::E_BLEND_FACTOR larg1, irr::video::E_BLEND_FACTOR larg2, irr::video::E_MODULATE_FUNC larg3) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::E_BLEND_FACTOR arg1 ;
  irr::video::E_BLEND_FACTOR arg2 ;
  irr::video::E_MODULATE_FUNC arg3 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::f32)irr::video::pack_textureBlendFunc(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_pack_textureBlendFunc__SWIG_2 (irr::video::E_BLEND_FACTOR larg1, irr::video::E_BLEND_FACTOR larg2) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::E_BLEND_FACTOR arg1 ;
  irr::video::E_BLEND_FACTOR arg2 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f32)irr::video::pack_textureBlendFunc(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_unpack_textureBlendFunc (irr::video::E_BLEND_FACTOR *larg1, irr::video::E_BLEND_FACTOR *larg2, irr::video::E_MODULATE_FUNC *larg3, irr::u32 *larg4, irr::f32 larg5) {
  irr::video::E_BLEND_FACTOR *arg1 = 0 ;
  irr::video::E_BLEND_FACTOR *arg2 = 0 ;
  irr::video::E_MODULATE_FUNC *arg3 = 0 ;
  irr::u32 *arg4 = 0 ;
  irr::f32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    irr::video::unpack_textureBlendFunc(*arg1,*arg2,*arg3,*arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_textureBlendFunc_hasAlpha (irr::video::E_BLEND_FACTOR larg1) {
  int lresult = (int)0 ;
  irr::video::E_BLEND_FACTOR arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)irr::video::textureBlendFunc_hasAlpha(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::video::SMaterial *_wrap_new_SMaterial__SWIG_0 () {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::video::SMaterial *result = 0 ;
  
  try {
    result = (irr::video::SMaterial *)new irr::video::SMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT irr::video::SMaterial *_wrap_new_SMaterial__SWIG_1 (irr::video::SMaterial *larg1) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::video::SMaterial *arg1 = 0 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterial *)new irr::video::SMaterial((irr::video::SMaterial const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT irr::video::SMaterial *_wrap_SMaterial___assign__ (irr::video::SMaterial *larg1, irr::video::SMaterial *larg2) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::SMaterial *) &(arg1)->operator =((irr::video::SMaterial const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT void _wrap_SMaterial_TextureLayer_set (irr::video::SMaterial *larg1, irr::video::SMaterialLayer *larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SMaterialLayer *arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      size_t ii;
      irr::video::SMaterialLayer *b = (irr::video::SMaterialLayer *) arg1->TextureLayer;
      for (ii = 0; ii < (size_t)irr::video::MATERIAL_MAX_TEXTURES; ii++) b[ii] = *((irr::video::SMaterialLayer *) arg2 + ii);
    }
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SMaterialLayer *_wrap_SMaterial_TextureLayer_get (irr::video::SMaterial *larg1) {
  irr::video::SMaterialLayer * lresult = (irr::video::SMaterialLayer *)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SMaterialLayer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterialLayer *)(irr::video::SMaterialLayer *) ((arg1)->TextureLayer);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterialLayer *)0;
  }
}


EXPORT void _wrap_SMaterial_MaterialType_set (irr::video::SMaterial *larg1, irr::video::E_MATERIAL_TYPE larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_MATERIAL_TYPE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MaterialType = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::E_MATERIAL_TYPE _wrap_SMaterial_MaterialType_get (irr::video::SMaterial *larg1) {
  irr::video::E_MATERIAL_TYPE lresult = (irr::video::E_MATERIAL_TYPE)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_MATERIAL_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::video::E_MATERIAL_TYPE) ((arg1)->MaterialType);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::E_MATERIAL_TYPE)0;
  }
}


EXPORT void _wrap_SMaterial_AmbientColor_set (irr::video::SMaterial *larg1, irr::video::SColor *larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *arg2 = (irr::video::SColor *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->AmbientColor = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_SMaterial_AmbientColor_get (irr::video::SMaterial *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SColor *)& ((arg1)->AmbientColor);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_SMaterial_DiffuseColor_set (irr::video::SMaterial *larg1, irr::video::SColor *larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *arg2 = (irr::video::SColor *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->DiffuseColor = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_SMaterial_DiffuseColor_get (irr::video::SMaterial *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SColor *)& ((arg1)->DiffuseColor);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_SMaterial_EmissiveColor_set (irr::video::SMaterial *larg1, irr::video::SColor *larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *arg2 = (irr::video::SColor *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->EmissiveColor = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_SMaterial_EmissiveColor_get (irr::video::SMaterial *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SColor *)& ((arg1)->EmissiveColor);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_SMaterial_SpecularColor_set (irr::video::SMaterial *larg1, irr::video::SColor *larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *arg2 = (irr::video::SColor *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->SpecularColor = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_SMaterial_SpecularColor_get (irr::video::SMaterial *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SColor *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SColor *)& ((arg1)->SpecularColor);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_SMaterial_Shininess_set (irr::video::SMaterial *larg1, irr::f32 larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Shininess = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SMaterial_Shininess_get (irr::video::SMaterial *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->Shininess);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_SMaterial_MaterialTypeParam_set (irr::video::SMaterial *larg1, irr::f32 larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MaterialTypeParam = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SMaterial_MaterialTypeParam_get (irr::video::SMaterial *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->MaterialTypeParam);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_SMaterial_MaterialTypeParam2_set (irr::video::SMaterial *larg1, irr::f32 larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MaterialTypeParam2 = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SMaterial_MaterialTypeParam2_get (irr::video::SMaterial *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->MaterialTypeParam2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_SMaterial_Thickness_set (irr::video::SMaterial *larg1, irr::f32 larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Thickness = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_SMaterial_Thickness_get (irr::video::SMaterial *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->Thickness);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_SMaterial_ZBuffer_set (irr::video::SMaterial *larg1, irr::u8 larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ZBuffer = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u8 _wrap_SMaterial_ZBuffer_get (irr::video::SMaterial *larg1) {
  irr::u8 lresult = (irr::u8)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 result;
  
  arg1 = larg1;
  try {
    result = (irr::u8) ((arg1)->ZBuffer);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u8)0;
  }
}


EXPORT void _wrap_SMaterial_AntiAliasing_set (irr::video::SMaterial *larg1, irr::u8 larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->AntiAliasing = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u8 _wrap_SMaterial_AntiAliasing_get (irr::video::SMaterial *larg1) {
  irr::u8 lresult = (irr::u8)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 result;
  
  arg1 = larg1;
  try {
    result = (irr::u8) ((arg1)->AntiAliasing);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u8)0;
  }
}


EXPORT void _wrap_SMaterial_ColorMask_set (irr::video::SMaterial *larg1, irr::u8 larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ColorMask = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u8 _wrap_SMaterial_ColorMask_get (irr::video::SMaterial *larg1) {
  irr::u8 lresult = (irr::u8)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 result;
  
  arg1 = larg1;
  try {
    result = (irr::u8) ((arg1)->ColorMask);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u8)0;
  }
}


EXPORT void _wrap_SMaterial_ColorMaterial_set (irr::video::SMaterial *larg1, irr::u8 larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ColorMaterial = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u8 _wrap_SMaterial_ColorMaterial_get (irr::video::SMaterial *larg1) {
  irr::u8 lresult = (irr::u8)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 result;
  
  arg1 = larg1;
  try {
    result = (irr::u8) ((arg1)->ColorMaterial);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u8)0;
  }
}


EXPORT void _wrap_SMaterial_BlendOperation_set (irr::video::SMaterial *larg1, irr::video::E_BLEND_OPERATION larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_BLEND_OPERATION arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->BlendOperation = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::E_BLEND_OPERATION _wrap_SMaterial_BlendOperation_get (irr::video::SMaterial *larg1) {
  irr::video::E_BLEND_OPERATION lresult = (irr::video::E_BLEND_OPERATION)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_BLEND_OPERATION result;
  
  arg1 = larg1;
  try {
    result = (irr::video::E_BLEND_OPERATION) ((arg1)->BlendOperation);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::E_BLEND_OPERATION)0;
  }
}


EXPORT void _wrap_SMaterial_PolygonOffsetFactor_set (irr::video::SMaterial *larg1, irr::u8 larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->PolygonOffsetFactor = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u8 _wrap_SMaterial_PolygonOffsetFactor_get (irr::video::SMaterial *larg1) {
  irr::u8 lresult = (irr::u8)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u8 result;
  
  arg1 = larg1;
  try {
    result = (irr::u8) ((arg1)->PolygonOffsetFactor);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u8)0;
  }
}


EXPORT void _wrap_SMaterial_PolygonOffsetDirection_set (irr::video::SMaterial *larg1, irr::video::E_POLYGON_OFFSET larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_POLYGON_OFFSET arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->PolygonOffsetDirection = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::E_POLYGON_OFFSET _wrap_SMaterial_PolygonOffsetDirection_get (irr::video::SMaterial *larg1) {
  irr::video::E_POLYGON_OFFSET lresult = (irr::video::E_POLYGON_OFFSET)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_POLYGON_OFFSET result;
  
  arg1 = larg1;
  try {
    result = (irr::video::E_POLYGON_OFFSET) ((arg1)->PolygonOffsetDirection);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::E_POLYGON_OFFSET)0;
  }
}


EXPORT void _wrap_SMaterial_Wireframe_set (irr::video::SMaterial *larg1, int larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->Wireframe = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterial_Wireframe_get (irr::video::SMaterial *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->Wireframe);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterial_PointCloud_set (irr::video::SMaterial *larg1, int larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->PointCloud = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterial_PointCloud_get (irr::video::SMaterial *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->PointCloud);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterial_GouraudShading_set (irr::video::SMaterial *larg1, int larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->GouraudShading = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterial_GouraudShading_get (irr::video::SMaterial *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->GouraudShading);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterial_Lighting_set (irr::video::SMaterial *larg1, int larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->Lighting = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterial_Lighting_get (irr::video::SMaterial *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->Lighting);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterial_ZWriteEnable_set (irr::video::SMaterial *larg1, int larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->ZWriteEnable = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterial_ZWriteEnable_get (irr::video::SMaterial *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->ZWriteEnable);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterial_BackfaceCulling_set (irr::video::SMaterial *larg1, int larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->BackfaceCulling = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterial_BackfaceCulling_get (irr::video::SMaterial *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->BackfaceCulling);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterial_FrontfaceCulling_set (irr::video::SMaterial *larg1, int larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->FrontfaceCulling = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterial_FrontfaceCulling_get (irr::video::SMaterial *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->FrontfaceCulling);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterial_FogEnable_set (irr::video::SMaterial *larg1, int larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->FogEnable = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterial_FogEnable_get (irr::video::SMaterial *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->FogEnable);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterial_NormalizeNormals_set (irr::video::SMaterial *larg1, int larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->NormalizeNormals = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterial_NormalizeNormals_get (irr::video::SMaterial *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->NormalizeNormals);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_SMaterial_UseMipMaps_set (irr::video::SMaterial *larg1, int larg2) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->UseMipMaps = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterial_UseMipMaps_get (irr::video::SMaterial *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->UseMipMaps);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::matrix4 *_wrap_SMaterial_getTextureMatrix__SWIG_0 (irr::video::SMaterial *larg1, irr::u32 larg2) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u32 arg2 ;
  irr::core::matrix4 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::matrix4 *) &(arg1)->getTextureMatrix(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT irr::core::matrix4 *_wrap_SMaterial_getTextureMatrix__SWIG_1 (irr::video::SMaterial *larg1, irr::u32 larg2) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u32 arg2 ;
  irr::core::matrix4 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::matrix4 *) &((irr::video::SMaterial const *)arg1)->getTextureMatrix(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT void _wrap_SMaterial_setTextureMatrix (irr::video::SMaterial *larg1, irr::u32 larg2, irr::core::matrix4 *larg3) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u32 arg2 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setTextureMatrix(arg2,(irr::core::matrix4 const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::ITexture *_wrap_SMaterial_getTexture (irr::video::SMaterial *larg1, irr::u32 larg2) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::ITexture *)((irr::video::SMaterial const *)arg1)->getTexture(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT void _wrap_SMaterial_setTexture (irr::video::SMaterial *larg1, irr::u32 larg2, irr::video::ITexture *larg3) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setTexture(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMaterial_setFlag (irr::video::SMaterial *larg1, irr::video::E_MATERIAL_FLAG larg2, int larg3) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_MATERIAL_FLAG arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->setFlag(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_SMaterial_getFlag (irr::video::SMaterial *larg1, irr::video::E_MATERIAL_FLAG larg2) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::E_MATERIAL_FLAG arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::SMaterial const *)arg1)->getFlag(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SMaterial___ne__ (irr::video::SMaterial *larg1, irr::video::SMaterial *larg2) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::SMaterial const *)arg1)->operator !=((irr::video::SMaterial const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SMaterial___eq__ (irr::video::SMaterial *larg1, irr::video::SMaterial *larg2) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::SMaterial const *)arg1)->operator ==((irr::video::SMaterial const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_SMaterial_isTransparent (irr::video::SMaterial *larg1) {
  int lresult = (int)0 ;
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::video::SMaterial const *)arg1)->isTransparent();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_SMaterial (irr::video::SMaterial *larg1) {
  irr::video::SMaterial *arg1 = (irr::video::SMaterial *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_getVertexPitchFromType (irr::video::E_VERTEX_TYPE larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::E_VERTEX_TYPE arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::video::getVertexPitchFromType(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::video::SMaterial *_wrap_IMeshBuffer_getMaterial__SWIG_0 (irr::scene::IMeshBuffer *larg1) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterial *) &(arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT irr::video::SMaterial *_wrap_IMeshBuffer_getMaterial__SWIG_1 (irr::scene::IMeshBuffer *larg1) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterial *) &((irr::scene::IMeshBuffer const *)arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT irr::video::E_VERTEX_TYPE _wrap_IMeshBuffer_getVertexType (irr::scene::IMeshBuffer *larg1) {
  irr::video::E_VERTEX_TYPE lresult = (irr::video::E_VERTEX_TYPE)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::video::E_VERTEX_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::video::E_VERTEX_TYPE)((irr::scene::IMeshBuffer const *)arg1)->getVertexType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::E_VERTEX_TYPE)0;
  }
}


EXPORT void *_wrap_IMeshBuffer_getVertices__SWIG_0 (irr::scene::IMeshBuffer *larg1) {
  void * lresult = (void *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((irr::scene::IMeshBuffer const *)arg1)->getVertices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void *_wrap_IMeshBuffer_getVertices__SWIG_1 (irr::scene::IMeshBuffer *larg1) {
  void * lresult = (void *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)(arg1)->getVertices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT irr::u32 _wrap_IMeshBuffer_getVertexCount (irr::scene::IMeshBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IMeshBuffer const *)arg1)->getVertexCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::video::E_INDEX_TYPE _wrap_IMeshBuffer_getIndexType (irr::scene::IMeshBuffer *larg1) {
  irr::video::E_INDEX_TYPE lresult = (irr::video::E_INDEX_TYPE)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::video::E_INDEX_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::video::E_INDEX_TYPE)((irr::scene::IMeshBuffer const *)arg1)->getIndexType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::E_INDEX_TYPE)0;
  }
}


EXPORT irr::u16 *_wrap_IMeshBuffer_getIndices__SWIG_0 (irr::scene::IMeshBuffer *larg1) {
  irr::u16 * lresult = (irr::u16 *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u16 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::u16 *)((irr::scene::IMeshBuffer const *)arg1)->getIndices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16 *)0;
  }
}


EXPORT irr::u16 *_wrap_IMeshBuffer_getIndices__SWIG_1 (irr::scene::IMeshBuffer *larg1) {
  irr::u16 * lresult = (irr::u16 *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u16 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::u16 *)(arg1)->getIndices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16 *)0;
  }
}


EXPORT irr::u32 _wrap_IMeshBuffer_getIndexCount (irr::scene::IMeshBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IMeshBuffer const *)arg1)->getIndexCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::core::aabbox3df *_wrap_IMeshBuffer_getBoundingBox (irr::scene::IMeshBuffer *larg1) {
  irr::core::aabbox3df * lresult = (irr::core::aabbox3df *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::aabbox3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::aabbox3df *) &((irr::scene::IMeshBuffer const *)arg1)->getBoundingBox();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3df *)0;
  }
}


EXPORT void _wrap_IMeshBuffer_setBoundingBox (irr::scene::IMeshBuffer *larg1, irr::core::aabbox3df *larg2) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setBoundingBox((irr::core::aabbox3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshBuffer_recalculateBoundingBox (irr::scene::IMeshBuffer *larg1) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->recalculateBoundingBox();
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_IMeshBuffer_getPosition__SWIG_0 (irr::scene::IMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IMeshBuffer const *)arg1)->getPosition(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_IMeshBuffer_getPosition__SWIG_1 (irr::scene::IMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3df *) &(arg1)->getPosition(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_IMeshBuffer_getNormal__SWIG_0 (irr::scene::IMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IMeshBuffer const *)arg1)->getNormal(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_IMeshBuffer_getNormal__SWIG_1 (irr::scene::IMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3df *) &(arg1)->getNormal(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector2df *_wrap_IMeshBuffer_getTCoords__SWIG_0 (irr::scene::IMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector2df * lresult = (irr::core::vector2df *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector2df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2df *) &((irr::scene::IMeshBuffer const *)arg1)->getTCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2df *)0;
  }
}


EXPORT irr::core::vector2df *_wrap_IMeshBuffer_getTCoords__SWIG_1 (irr::scene::IMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector2df * lresult = (irr::core::vector2df *)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector2df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2df *) &(arg1)->getTCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2df *)0;
  }
}


EXPORT void _wrap_IMeshBuffer_append__SWIG_0 (irr::scene::IMeshBuffer *larg1, void *larg2, irr::u32 larg3, irr::u16 *larg4, irr::u32 larg5) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) (irr::u16 *)0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->append((void const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshBuffer_append__SWIG_1 (irr::scene::IMeshBuffer *larg1, irr::scene::IMeshBuffer *larg2) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) (irr::scene::IMeshBuffer *)0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->append((irr::scene::IMeshBuffer const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_IMeshBuffer_getHardwareMappingHint_Vertex (irr::scene::IMeshBuffer *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING)((irr::scene::IMeshBuffer const *)arg1)->getHardwareMappingHint_Vertex();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_IMeshBuffer_getHardwareMappingHint_Index (irr::scene::IMeshBuffer *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING)((irr::scene::IMeshBuffer const *)arg1)->getHardwareMappingHint_Index();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT void _wrap_IMeshBuffer_setHardwareMappingHint__SWIG_0 (irr::scene::IMeshBuffer *larg1, irr::scene::E_HARDWARE_MAPPING larg2, irr::scene::E_BUFFER_TYPE larg3) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  irr::scene::E_BUFFER_TYPE arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setHardwareMappingHint(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshBuffer_setHardwareMappingHint__SWIG_1 (irr::scene::IMeshBuffer *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setHardwareMappingHint(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshBuffer_setDirty__SWIG_0 (irr::scene::IMeshBuffer *larg1, irr::scene::E_BUFFER_TYPE larg2) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::E_BUFFER_TYPE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDirty(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshBuffer_setDirty__SWIG_1 (irr::scene::IMeshBuffer *larg1) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setDirty();
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IMeshBuffer_getChangedID_Vertex (irr::scene::IMeshBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IMeshBuffer const *)arg1)->getChangedID_Vertex();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IMeshBuffer_getChangedID_Index (irr::scene::IMeshBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IMeshBuffer const *)arg1)->getChangedID_Index();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_delete_IMeshBuffer (irr::scene::IMeshBuffer *larg1) {
  irr::scene::IMeshBuffer *arg1 = (irr::scene::IMeshBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_IVertexBuffer_getData (irr::scene::IVertexBuffer *larg1) {
  void * lresult = (void *)0 ;
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)(arg1)->getData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT irr::video::E_VERTEX_TYPE _wrap_IVertexBuffer_getType (irr::scene::IVertexBuffer *larg1) {
  irr::video::E_VERTEX_TYPE lresult = (irr::video::E_VERTEX_TYPE)0 ;
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::video::E_VERTEX_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::video::E_VERTEX_TYPE)((irr::scene::IVertexBuffer const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::E_VERTEX_TYPE)0;
  }
}


EXPORT void _wrap_IVertexBuffer_setType (irr::scene::IVertexBuffer *larg1, irr::video::E_VERTEX_TYPE larg2) {
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::video::E_VERTEX_TYPE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setType(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IVertexBuffer_stride (irr::scene::IVertexBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IVertexBuffer const *)arg1)->stride();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IVertexBuffer_size (irr::scene::IVertexBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IVertexBuffer const *)arg1)->size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IVertexBuffer_push_back (irr::scene::IVertexBuffer *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->push_back((irr::video::S3DVertex const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::S3DVertex *_wrap_IVertexBuffer___aref__ (irr::scene::IVertexBuffer *larg1, irr::u32 larg2) {
  irr::video::S3DVertex * lresult = (irr::video::S3DVertex *)0 ;
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::video::S3DVertex *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::S3DVertex *) &((irr::scene::IVertexBuffer const *)arg1)->operator [](arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::S3DVertex *)0;
  }
}


EXPORT irr::video::S3DVertex *_wrap_IVertexBuffer_getLast (irr::scene::IVertexBuffer *larg1) {
  irr::video::S3DVertex * lresult = (irr::video::S3DVertex *)0 ;
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::video::S3DVertex *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::S3DVertex *) &(arg1)->getLast();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::S3DVertex *)0;
  }
}


EXPORT void _wrap_IVertexBuffer_set_used (irr::scene::IVertexBuffer *larg1, irr::u32 larg2) {
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_used(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVertexBuffer_reallocate (irr::scene::IVertexBuffer *larg1, irr::u32 larg2) {
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reallocate(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IVertexBuffer_allocated_size (irr::scene::IVertexBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IVertexBuffer const *)arg1)->allocated_size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::video::S3DVertex *_wrap_IVertexBuffer_pointer (irr::scene::IVertexBuffer *larg1) {
  irr::video::S3DVertex * lresult = (irr::video::S3DVertex *)0 ;
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::video::S3DVertex *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::S3DVertex *)(arg1)->pointer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::S3DVertex *)0;
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_IVertexBuffer_getHardwareMappingHint (irr::scene::IVertexBuffer *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING)((irr::scene::IVertexBuffer const *)arg1)->getHardwareMappingHint();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT void _wrap_IVertexBuffer_setHardwareMappingHint (irr::scene::IVertexBuffer *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setHardwareMappingHint(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVertexBuffer_setDirty (irr::scene::IVertexBuffer *larg1) {
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setDirty();
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IVertexBuffer_getChangedID (irr::scene::IVertexBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IVertexBuffer const *)arg1)->getChangedID();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_delete_IVertexBuffer (irr::scene::IVertexBuffer *larg1) {
  irr::scene::IVertexBuffer *arg1 = (irr::scene::IVertexBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_IIndexBuffer_getData (irr::scene::IIndexBuffer *larg1) {
  void * lresult = (void *)0 ;
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)(arg1)->getData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT irr::video::E_INDEX_TYPE _wrap_IIndexBuffer_getType (irr::scene::IIndexBuffer *larg1) {
  irr::video::E_INDEX_TYPE lresult = (irr::video::E_INDEX_TYPE)0 ;
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::video::E_INDEX_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::video::E_INDEX_TYPE)((irr::scene::IIndexBuffer const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::E_INDEX_TYPE)0;
  }
}


EXPORT void _wrap_IIndexBuffer_setType (irr::scene::IIndexBuffer *larg1, irr::video::E_INDEX_TYPE larg2) {
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::video::E_INDEX_TYPE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setType(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IIndexBuffer_stride (irr::scene::IIndexBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IIndexBuffer const *)arg1)->stride();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IIndexBuffer_size (irr::scene::IIndexBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IIndexBuffer const *)arg1)->size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IIndexBuffer_push_back (irr::scene::IIndexBuffer *larg1, irr::u32 *larg2) {
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::u32 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->push_back((irr::u32 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IIndexBuffer___aref__ (irr::scene::IIndexBuffer *larg1, irr::u32 larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)((irr::scene::IIndexBuffer const *)arg1)->operator [](arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IIndexBuffer_getLast (irr::scene::IIndexBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)(arg1)->getLast();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IIndexBuffer_setValue (irr::scene::IIndexBuffer *larg1, irr::u32 larg2, irr::u32 larg3) {
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setValue(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IIndexBuffer_set_used (irr::scene::IIndexBuffer *larg1, irr::u32 larg2) {
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_used(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IIndexBuffer_reallocate (irr::scene::IIndexBuffer *larg1, irr::u32 larg2) {
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reallocate(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IIndexBuffer_allocated_size (irr::scene::IIndexBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IIndexBuffer const *)arg1)->allocated_size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void *_wrap_IIndexBuffer_pointer (irr::scene::IIndexBuffer *larg1) {
  void * lresult = (void *)0 ;
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)(arg1)->pointer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_IIndexBuffer_getHardwareMappingHint (irr::scene::IIndexBuffer *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING)((irr::scene::IIndexBuffer const *)arg1)->getHardwareMappingHint();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT void _wrap_IIndexBuffer_setHardwareMappingHint (irr::scene::IIndexBuffer *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setHardwareMappingHint(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IIndexBuffer_setDirty (irr::scene::IIndexBuffer *larg1) {
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setDirty();
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IIndexBuffer_getChangedID (irr::scene::IIndexBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IIndexBuffer const *)arg1)->getChangedID();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_delete_IIndexBuffer (irr::scene::IIndexBuffer *larg1) {
  irr::scene::IIndexBuffer *arg1 = (irr::scene::IIndexBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IVertexBuffer *_wrap_IDynamicMeshBuffer_getVertexBuffer (irr::scene::IDynamicMeshBuffer *larg1) {
  irr::scene::IVertexBuffer * lresult = (irr::scene::IVertexBuffer *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::scene::IVertexBuffer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IVertexBuffer *) &((irr::scene::IDynamicMeshBuffer const *)arg1)->getVertexBuffer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVertexBuffer *)0;
  }
}


EXPORT irr::scene::IIndexBuffer *_wrap_IDynamicMeshBuffer_getIndexBuffer (irr::scene::IDynamicMeshBuffer *larg1) {
  irr::scene::IIndexBuffer * lresult = (irr::scene::IIndexBuffer *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::scene::IIndexBuffer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IIndexBuffer *) &((irr::scene::IDynamicMeshBuffer const *)arg1)->getIndexBuffer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IIndexBuffer *)0;
  }
}


EXPORT void _wrap_IDynamicMeshBuffer_setVertexBuffer (irr::scene::IDynamicMeshBuffer *larg1, irr::scene::IVertexBuffer *larg2) {
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::scene::IVertexBuffer *arg2 = (irr::scene::IVertexBuffer *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setVertexBuffer(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IDynamicMeshBuffer_setIndexBuffer (irr::scene::IDynamicMeshBuffer *larg1, irr::scene::IIndexBuffer *larg2) {
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::scene::IIndexBuffer *arg2 = (irr::scene::IIndexBuffer *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setIndexBuffer(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SMaterial *_wrap_IDynamicMeshBuffer_getMaterial__SWIG_0 (irr::scene::IDynamicMeshBuffer *larg1) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterial *) &(arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT irr::video::SMaterial *_wrap_IDynamicMeshBuffer_getMaterial__SWIG_1 (irr::scene::IDynamicMeshBuffer *larg1) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterial *) &((irr::scene::IDynamicMeshBuffer const *)arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT void _wrap_IDynamicMeshBuffer_append__SWIG_0 (irr::scene::IDynamicMeshBuffer *larg1, void *larg2, irr::u32 larg3, irr::u16 *larg4, irr::u32 larg5) {
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) (irr::u16 *)0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->append((void const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IDynamicMeshBuffer_append__SWIG_1 (irr::scene::IDynamicMeshBuffer *larg1, irr::scene::IMeshBuffer *larg2) {
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) (irr::scene::IMeshBuffer *)0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->append((irr::scene::IMeshBuffer const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IDynamicMeshBuffer_setHardwareMappingHint__SWIG_0 (irr::scene::IDynamicMeshBuffer *larg1, irr::scene::E_HARDWARE_MAPPING larg2, irr::scene::E_BUFFER_TYPE larg3) {
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  irr::scene::E_BUFFER_TYPE arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setHardwareMappingHint(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IDynamicMeshBuffer_setHardwareMappingHint__SWIG_1 (irr::scene::IDynamicMeshBuffer *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setHardwareMappingHint(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IDynamicMeshBuffer_setDirty__SWIG_0 (irr::scene::IDynamicMeshBuffer *larg1, irr::scene::E_BUFFER_TYPE larg2) {
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::scene::E_BUFFER_TYPE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDirty(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IDynamicMeshBuffer_setDirty__SWIG_1 (irr::scene::IDynamicMeshBuffer *larg1) {
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setDirty();
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_IDynamicMeshBuffer_getVertices__SWIG_0 (irr::scene::IDynamicMeshBuffer *larg1) {
  void * lresult = (void *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((irr::scene::IDynamicMeshBuffer const *)arg1)->getVertices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void *_wrap_IDynamicMeshBuffer_getVertices__SWIG_1 (irr::scene::IDynamicMeshBuffer *larg1) {
  void * lresult = (void *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)(arg1)->getVertices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT irr::u16 *_wrap_IDynamicMeshBuffer_getIndices__SWIG_0 (irr::scene::IDynamicMeshBuffer *larg1) {
  irr::u16 * lresult = (irr::u16 *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::u16 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::u16 *)((irr::scene::IDynamicMeshBuffer const *)arg1)->getIndices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16 *)0;
  }
}


EXPORT irr::u16 *_wrap_IDynamicMeshBuffer_getIndices__SWIG_1 (irr::scene::IDynamicMeshBuffer *larg1) {
  irr::u16 * lresult = (irr::u16 *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::u16 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::u16 *)(arg1)->getIndices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16 *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_IDynamicMeshBuffer_getPosition__SWIG_0 (irr::scene::IDynamicMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IDynamicMeshBuffer const *)arg1)->getPosition(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_IDynamicMeshBuffer_getPosition__SWIG_1 (irr::scene::IDynamicMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3df *) &(arg1)->getPosition(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector2df *_wrap_IDynamicMeshBuffer_getTCoords__SWIG_0 (irr::scene::IDynamicMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector2df * lresult = (irr::core::vector2df *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector2df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2df *) &((irr::scene::IDynamicMeshBuffer const *)arg1)->getTCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2df *)0;
  }
}


EXPORT irr::core::vector2df *_wrap_IDynamicMeshBuffer_getTCoords__SWIG_1 (irr::scene::IDynamicMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector2df * lresult = (irr::core::vector2df *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector2df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2df *) &(arg1)->getTCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_IDynamicMeshBuffer_getNormal__SWIG_0 (irr::scene::IDynamicMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IDynamicMeshBuffer const *)arg1)->getNormal(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_IDynamicMeshBuffer_getNormal__SWIG_1 (irr::scene::IDynamicMeshBuffer *larg1, irr::u32 larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  irr::u32 arg2 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3df *) &(arg1)->getNormal(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_delete_IDynamicMeshBuffer (irr::scene::IDynamicMeshBuffer *larg1) {
  irr::scene::IDynamicMeshBuffer *arg1 = (irr::scene::IDynamicMeshBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::CVertexBuffer *_wrap_new_CVertexBuffer__SWIG_0 (irr::video::E_VERTEX_TYPE larg1) {
  irr::scene::CVertexBuffer * lresult = (irr::scene::CVertexBuffer *)0 ;
  irr::video::E_VERTEX_TYPE arg1 ;
  irr::scene::CVertexBuffer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::CVertexBuffer *)new irr::scene::CVertexBuffer(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::CVertexBuffer *)0;
  }
}


EXPORT irr::scene::CVertexBuffer *_wrap_new_CVertexBuffer__SWIG_1 (irr::scene::IVertexBuffer *larg1) {
  irr::scene::CVertexBuffer * lresult = (irr::scene::CVertexBuffer *)0 ;
  irr::scene::IVertexBuffer *arg1 = 0 ;
  irr::scene::CVertexBuffer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::CVertexBuffer *)new irr::scene::CVertexBuffer((irr::scene::IVertexBuffer const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::CVertexBuffer *)0;
  }
}


EXPORT void _wrap_delete_CVertexBuffer (irr::scene::CVertexBuffer *larg1) {
  irr::scene::CVertexBuffer *arg1 = (irr::scene::CVertexBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_CVertexBuffer_MappingHint_set (irr::scene::CVertexBuffer *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  irr::scene::CVertexBuffer *arg1 = (irr::scene::CVertexBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MappingHint = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_CVertexBuffer_MappingHint_get (irr::scene::CVertexBuffer *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  irr::scene::CVertexBuffer *arg1 = (irr::scene::CVertexBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING) ((arg1)->MappingHint);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT void _wrap_CVertexBuffer_ChangedID_set (irr::scene::CVertexBuffer *larg1, irr::u32 larg2) {
  irr::scene::CVertexBuffer *arg1 = (irr::scene::CVertexBuffer *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ChangedID = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_CVertexBuffer_ChangedID_get (irr::scene::CVertexBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::CVertexBuffer *arg1 = (irr::scene::CVertexBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32) ((arg1)->ChangedID);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::scene::CIndexBuffer *_wrap_new_CIndexBuffer__SWIG_0 (irr::video::E_INDEX_TYPE larg1) {
  irr::scene::CIndexBuffer * lresult = (irr::scene::CIndexBuffer *)0 ;
  irr::video::E_INDEX_TYPE arg1 ;
  irr::scene::CIndexBuffer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::CIndexBuffer *)new irr::scene::CIndexBuffer(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::CIndexBuffer *)0;
  }
}


EXPORT irr::scene::CIndexBuffer *_wrap_new_CIndexBuffer__SWIG_1 (irr::scene::IIndexBuffer *larg1) {
  irr::scene::CIndexBuffer * lresult = (irr::scene::CIndexBuffer *)0 ;
  irr::scene::IIndexBuffer *arg1 = 0 ;
  irr::scene::CIndexBuffer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::CIndexBuffer *)new irr::scene::CIndexBuffer((irr::scene::IIndexBuffer const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::CIndexBuffer *)0;
  }
}


EXPORT void _wrap_delete_CIndexBuffer (irr::scene::CIndexBuffer *larg1) {
  irr::scene::CIndexBuffer *arg1 = (irr::scene::CIndexBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_CIndexBuffer_MappingHint_set (irr::scene::CIndexBuffer *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  irr::scene::CIndexBuffer *arg1 = (irr::scene::CIndexBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MappingHint = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_CIndexBuffer_MappingHint_get (irr::scene::CIndexBuffer *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  irr::scene::CIndexBuffer *arg1 = (irr::scene::CIndexBuffer *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING) ((arg1)->MappingHint);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT void _wrap_CIndexBuffer_ChangedID_set (irr::scene::CIndexBuffer *larg1, irr::u32 larg2) {
  irr::scene::CIndexBuffer *arg1 = (irr::scene::CIndexBuffer *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ChangedID = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_CIndexBuffer_ChangedID_get (irr::scene::CIndexBuffer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::CIndexBuffer *arg1 = (irr::scene::CIndexBuffer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32) ((arg1)->ChangedID);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::scene::CDynamicMeshBuffer *_wrap_new_CDynamicMeshBuffer (irr::video::E_VERTEX_TYPE larg1, irr::video::E_INDEX_TYPE larg2) {
  irr::scene::CDynamicMeshBuffer * lresult = (irr::scene::CDynamicMeshBuffer *)0 ;
  irr::video::E_VERTEX_TYPE arg1 ;
  irr::video::E_INDEX_TYPE arg2 ;
  irr::scene::CDynamicMeshBuffer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::CDynamicMeshBuffer *)new irr::scene::CDynamicMeshBuffer(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::CDynamicMeshBuffer *)0;
  }
}


EXPORT void _wrap_delete_CDynamicMeshBuffer (irr::scene::CDynamicMeshBuffer *larg1) {
  irr::scene::CDynamicMeshBuffer *arg1 = (irr::scene::CDynamicMeshBuffer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SMaterial *_wrap_CDynamicMeshBuffer_getMaterial__SWIG_0 (irr::scene::CDynamicMeshBuffer *larg1) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::scene::CDynamicMeshBuffer *arg1 = (irr::scene::CDynamicMeshBuffer *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterial *) &((irr::scene::CDynamicMeshBuffer const *)arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT irr::video::SMaterial *_wrap_CDynamicMeshBuffer_getMaterial__SWIG_1 (irr::scene::CDynamicMeshBuffer *larg1) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::scene::CDynamicMeshBuffer *arg1 = (irr::scene::CDynamicMeshBuffer *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterial *) &(arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT void _wrap_CDynamicMeshBuffer_Material_set (irr::scene::CDynamicMeshBuffer *larg1, irr::video::SMaterial *larg2) {
  irr::scene::CDynamicMeshBuffer *arg1 = (irr::scene::CDynamicMeshBuffer *) 0 ;
  irr::video::SMaterial *arg2 = (irr::video::SMaterial *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Material = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SMaterial *_wrap_CDynamicMeshBuffer_Material_get (irr::scene::CDynamicMeshBuffer *larg1) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::scene::CDynamicMeshBuffer *arg1 = (irr::scene::CDynamicMeshBuffer *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterial *)& ((arg1)->Material);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT void _wrap_CDynamicMeshBuffer_BoundingBox_set (irr::scene::CDynamicMeshBuffer *larg1, irr::core::aabbox3d< irr::f32 > *larg2) {
  irr::scene::CDynamicMeshBuffer *arg1 = (irr::scene::CDynamicMeshBuffer *) 0 ;
  irr::core::aabbox3d< irr::f32 > *arg2 = (irr::core::aabbox3d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->BoundingBox = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::aabbox3d< irr::f32 > *_wrap_CDynamicMeshBuffer_BoundingBox_get (irr::scene::CDynamicMeshBuffer *larg1) {
  irr::core::aabbox3d< irr::f32 > * lresult = (irr::core::aabbox3d< irr::f32 > *)0 ;
  irr::scene::CDynamicMeshBuffer *arg1 = (irr::scene::CDynamicMeshBuffer *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::aabbox3d< irr::f32 > *)& ((arg1)->BoundingBox);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3d< irr::f32 > *)0;
  }
}


EXPORT irr::s32 _wrap_isFileExtension (irr::io::path *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::io::path *larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::io::path *arg1 = 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)irr::core::isFileExtension((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg3,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT int _wrap_hasFileExtension__SWIG_0 (irr::io::path *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::io::path *larg4) {
  int lresult = (int)0 ;
  irr::io::path *arg1 = 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)irr::core::hasFileExtension((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg3,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_hasFileExtension__SWIG_1 (irr::io::path *larg1, irr::io::path *larg2, irr::io::path *larg3) {
  int lresult = (int)0 ;
  irr::io::path *arg1 = 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)irr::core::hasFileExtension((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_hasFileExtension__SWIG_2 (irr::io::path *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::io::path *arg1 = 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)irr::core::hasFileExtension((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::io::path *_wrap_cutFilenameExtension (irr::io::path *larg1, irr::io::path *larg2) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::path *arg1 = 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::path *) &irr::core::cutFilenameExtension(*arg1,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::path *_wrap_getFileNameExtension (irr::io::path *larg1, irr::io::path *larg2) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::path *arg1 = 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::path *) &irr::core::getFileNameExtension(*arg1,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::path *_wrap_deletePathFromFilename (irr::io::path *larg1) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::path *arg1 = 0 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::path *) &irr::core::deletePathFromFilename(*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::path *_wrap_deletePathFromPath (irr::io::path *larg1, irr::s32 larg2) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::path *arg1 = 0 ;
  irr::s32 arg2 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::path *) &irr::core::deletePathFromPath(*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::s32 _wrap_isInSameDirectory (irr::io::path *larg1, irr::io::path *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::io::path *arg1 = 0 ;
  irr::io::path *arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)irr::core::isInSameDirectory((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_splitFilename__SWIG_0 (irr::io::path *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::io::path *larg4, int larg5) {
  irr::io::path *arg1 = 0 ;
  irr::io::path *arg2 = (irr::io::path *) 0 ;
  irr::io::path *arg3 = (irr::io::path *) 0 ;
  irr::io::path *arg4 = (irr::io::path *) 0 ;
  bool arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    irr::core::splitFilename((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_splitFilename__SWIG_1 (irr::io::path *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::io::path *larg4) {
  irr::io::path *arg1 = 0 ;
  irr::io::path *arg2 = (irr::io::path *) 0 ;
  irr::io::path *arg3 = (irr::io::path *) 0 ;
  irr::io::path *arg4 = (irr::io::path *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    irr::core::splitFilename((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_splitFilename__SWIG_2 (irr::io::path *larg1, irr::io::path *larg2, irr::io::path *larg3) {
  irr::io::path *arg1 = 0 ;
  irr::io::path *arg2 = (irr::io::path *) 0 ;
  irr::io::path *arg3 = (irr::io::path *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    irr::core::splitFilename((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_splitFilename__SWIG_3 (irr::io::path *larg1, irr::io::path *larg2) {
  irr::io::path *arg1 = 0 ;
  irr::io::path *arg2 = (irr::io::path *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    irr::core::splitFilename((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_splitFilename__SWIG_4 (irr::io::path *larg1) {
  irr::io::path *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    irr::core::splitFilename((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_isdigit (irr::s32 larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::s32 arg1 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)irr::core::isdigit(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_isspace (irr::s32 larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::s32 arg1 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)irr::core::isspace(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_isupper (irr::s32 larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::s32 arg1 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)irr::core::isupper(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::u32 _wrap_strtoul10__SWIG_0 (char *larg1, char **larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)irr::core::strtoul10((char const *)arg1,(char const **)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_strtoul10__SWIG_1 (char *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  char *arg1 = (char *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::core::strtoul10((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::s32 _wrap_strtol10__SWIG_0 (char *larg1, char **larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)irr::core::strtol10((char const *)arg1,(char const **)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_strtol10__SWIG_1 (char *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  char *arg1 = (char *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)irr::core::strtol10((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::u32 _wrap_ctoul16 (char larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  char arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::core::ctoul16(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_strtoul16__SWIG_0 (char *larg1, char **larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)irr::core::strtoul16((char const *)arg1,(char const **)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_strtoul16__SWIG_1 (char *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  char *arg1 = (char *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::core::strtoul16((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_strtoul8__SWIG_0 (char *larg1, char **larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)irr::core::strtoul8((char const *)arg1,(char const **)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_strtoul8__SWIG_1 (char *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  char *arg1 = (char *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::core::strtoul8((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_strtoul_prefix__SWIG_0 (char *larg1, char **larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)irr::core::strtoul_prefix((char const *)arg1,(char const **)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_strtoul_prefix__SWIG_1 (char *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  char *arg1 = (char *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::core::strtoul_prefix((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::f32 _wrap_strtof10__SWIG_0 (char *larg1, char **larg2) {
  irr::f32 lresult = (irr::f32)0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f32)irr::core::strtof10((char const *)arg1,(char const **)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_strtof10__SWIG_1 (char *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  char *arg1 = (char *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)irr::core::strtof10((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT char *_wrap_fast_atof_move (char *larg1, irr::f32 *larg2) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  irr::f32 *arg2 = 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (char *)irr::core::fast_atof_move((char const *)arg1,*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT float _wrap_fast_atof__SWIG_0 (char *larg1, char **larg2) {
  float lresult = (float)0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)irr::core::fast_atof((char const *)arg1,(char const **)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_fast_atof__SWIG_1 (char *larg1) {
  float lresult = (float)0 ;
  char *arg1 = (char *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)irr::core::fast_atof((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT irr::u32 _wrap_IMesh_getMeshBufferCount (irr::scene::IMesh *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IMesh const *)arg1)->getMeshBufferCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::scene::IMeshBuffer *_wrap_IMesh_getMeshBuffer__SWIG_0 (irr::scene::IMesh *larg1, irr::u32 larg2) {
  irr::scene::IMeshBuffer * lresult = (irr::scene::IMeshBuffer *)0 ;
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::u32 arg2 ;
  irr::scene::IMeshBuffer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMeshBuffer *)((irr::scene::IMesh const *)arg1)->getMeshBuffer(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshBuffer *)0;
  }
}


EXPORT irr::scene::IMeshBuffer *_wrap_IMesh_getMeshBuffer__SWIG_1 (irr::scene::IMesh *larg1, irr::video::SMaterial *larg2) {
  irr::scene::IMeshBuffer * lresult = (irr::scene::IMeshBuffer *)0 ;
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::scene::IMeshBuffer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMeshBuffer *)((irr::scene::IMesh const *)arg1)->getMeshBuffer((irr::video::SMaterial const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshBuffer *)0;
  }
}


EXPORT irr::core::aabbox3d< irr::f32 > *_wrap_IMesh_getBoundingBox (irr::scene::IMesh *larg1) {
  irr::core::aabbox3d< irr::f32 > * lresult = (irr::core::aabbox3d< irr::f32 > *)0 ;
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::aabbox3d< irr::f32 > *) &((irr::scene::IMesh const *)arg1)->getBoundingBox();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3d< irr::f32 > *)0;
  }
}


EXPORT void _wrap_IMesh_setBoundingBox (irr::scene::IMesh *larg1, irr::core::aabbox3df *larg2) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setBoundingBox((irr::core::aabbox3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMesh_setMaterialFlag (irr::scene::IMesh *larg1, irr::video::E_MATERIAL_FLAG larg2, int larg3) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::video::E_MATERIAL_FLAG arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->setMaterialFlag(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMesh_setHardwareMappingHint__SWIG_0 (irr::scene::IMesh *larg1, irr::scene::E_HARDWARE_MAPPING larg2, irr::scene::E_BUFFER_TYPE larg3) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  irr::scene::E_BUFFER_TYPE arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setHardwareMappingHint(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMesh_setHardwareMappingHint__SWIG_1 (irr::scene::IMesh *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setHardwareMappingHint(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMesh_setDirty__SWIG_0 (irr::scene::IMesh *larg1, irr::scene::E_BUFFER_TYPE larg2) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  irr::scene::E_BUFFER_TYPE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDirty(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMesh_setDirty__SWIG_1 (irr::scene::IMesh *larg1) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setDirty();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IMesh (irr::scene::IMesh *larg1) {
  irr::scene::IMesh *arg1 = (irr::scene::IMesh *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IAnimatedMesh_getFrameCount (irr::scene::IAnimatedMesh *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IAnimatedMesh const *)arg1)->getFrameCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::f32 _wrap_IAnimatedMesh_getAnimationSpeed (irr::scene::IAnimatedMesh *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::IAnimatedMesh const *)arg1)->getAnimationSpeed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_IAnimatedMesh_setAnimationSpeed (irr::scene::IAnimatedMesh *larg1, irr::f32 larg2) {
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAnimationSpeed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IMesh *_wrap_IAnimatedMesh_getMesh__SWIG_0 (irr::scene::IAnimatedMesh *larg1, irr::s32 larg2, irr::s32 larg3, irr::s32 larg4, irr::s32 larg5) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMesh *)(arg1)->getMesh(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IAnimatedMesh_getMesh__SWIG_1 (irr::scene::IAnimatedMesh *larg1, irr::s32 larg2, irr::s32 larg3, irr::s32 larg4) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMesh *)(arg1)->getMesh(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IAnimatedMesh_getMesh__SWIG_2 (irr::scene::IAnimatedMesh *larg1, irr::s32 larg2, irr::s32 larg3) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMesh *)(arg1)->getMesh(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IAnimatedMesh_getMesh__SWIG_3 (irr::scene::IAnimatedMesh *larg1, irr::s32 larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::s32 arg2 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)(arg1)->getMesh(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::E_ANIMATED_MESH_TYPE _wrap_IAnimatedMesh_getMeshType (irr::scene::IAnimatedMesh *larg1) {
  irr::scene::E_ANIMATED_MESH_TYPE lresult = (irr::scene::E_ANIMATED_MESH_TYPE)0 ;
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::E_ANIMATED_MESH_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_ANIMATED_MESH_TYPE)((irr::scene::IAnimatedMesh const *)arg1)->getMeshType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_ANIMATED_MESH_TYPE)0;
  }
}


EXPORT void _wrap_delete_IAnimatedMesh (irr::scene::IAnimatedMesh *larg1) {
  irr::scene::IAnimatedMesh *arg1 = (irr::scene::IAnimatedMesh *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAnimatedMeshMD2_getFrameLoop__SWIG_0 (irr::scene::IAnimatedMeshMD2 *larg1, irr::scene::EMD2_ANIMATION_TYPE larg2, irr::s32 *larg3, irr::s32 *larg4, irr::s32 *larg5) {
  irr::scene::IAnimatedMeshMD2 *arg1 = (irr::scene::IAnimatedMeshMD2 *) 0 ;
  irr::scene::EMD2_ANIMATION_TYPE arg2 ;
  irr::s32 *arg3 = 0 ;
  irr::s32 *arg4 = 0 ;
  irr::s32 *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ((irr::scene::IAnimatedMeshMD2 const *)arg1)->getFrameLoop(arg2,*arg3,*arg4,*arg5);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IAnimatedMeshMD2_getFrameLoop__SWIG_1 (irr::scene::IAnimatedMeshMD2 *larg1, irr::c8 *larg2, irr::s32 *larg3, irr::s32 *larg4, irr::s32 *larg5) {
  int lresult = (int)0 ;
  irr::scene::IAnimatedMeshMD2 *arg1 = (irr::scene::IAnimatedMeshMD2 *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 *arg3 = 0 ;
  irr::s32 *arg4 = 0 ;
  irr::s32 *arg5 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)((irr::scene::IAnimatedMeshMD2 const *)arg1)->getFrameLoop((irr::c8 const *)arg2,*arg3,*arg4,*arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::s32 _wrap_IAnimatedMeshMD2_getAnimationCount (irr::scene::IAnimatedMeshMD2 *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IAnimatedMeshMD2 *arg1 = (irr::scene::IAnimatedMeshMD2 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::scene::IAnimatedMeshMD2 const *)arg1)->getAnimationCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::c8 *_wrap_IAnimatedMeshMD2_getAnimationName (irr::scene::IAnimatedMeshMD2 *larg1, irr::s32 larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::scene::IAnimatedMeshMD2 *arg1 = (irr::scene::IAnimatedMeshMD2 *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)((irr::scene::IAnimatedMeshMD2 const *)arg1)->getAnimationName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT void _wrap_delete_IAnimatedMeshMD2 (irr::scene::IAnimatedMeshMD2 *larg1) {
  irr::scene::IAnimatedMeshMD2 *arg1 = (irr::scene::IAnimatedMeshMD2 *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IFileReadCallBack (irr::io::IFileReadCallBack *larg1) {
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IFileReadCallBack_read (irr::io::IFileReadCallBack *larg1, void *larg2, int larg3) {
  int lresult = (int)0 ;
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (int)(arg1)->read(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT long _wrap_IFileReadCallBack_getSize (irr::io::IFileReadCallBack *larg1) {
  long lresult = (long)0 ;
  irr::io::IFileReadCallBack *arg1 = (irr::io::IFileReadCallBack *) 0 ;
  long result;
  
  arg1 = larg1;
  try {
    result = (long)((irr::io::IFileReadCallBack const *)arg1)->getSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (long)0;
  }
}


EXPORT irr::io::IXMLBase *_wrap_new_IXMLBase () {
  irr::io::IXMLBase * lresult = (irr::io::IXMLBase *)0 ;
  irr::io::IXMLBase *result = 0 ;
  
  try {
    result = (irr::io::IXMLBase *)new irr::io::IXMLBase();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IXMLBase *)0;
  }
}


EXPORT void _wrap_delete_IXMLBase (irr::io::IXMLBase *larg1) {
  irr::io::IXMLBase *arg1 = (irr::io::IXMLBase *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IReadFile_read (irr::io::IReadFile *larg1, void *larg2, irr::u32 larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->read(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT int _wrap_IReadFile_seek__SWIG_0 (irr::io::IReadFile *larg1, long larg2, int larg3) {
  int lresult = (int)0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  long arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->seek(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IReadFile_seek__SWIG_1 (irr::io::IReadFile *larg1, long larg2) {
  int lresult = (int)0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  long arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->seek(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT long _wrap_IReadFile_getSize (irr::io::IReadFile *larg1) {
  long lresult = (long)0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  long result;
  
  arg1 = larg1;
  try {
    result = (long)((irr::io::IReadFile const *)arg1)->getSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (long)0;
  }
}


EXPORT long _wrap_IReadFile_getPos (irr::io::IReadFile *larg1) {
  long lresult = (long)0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  long result;
  
  arg1 = larg1;
  try {
    result = (long)((irr::io::IReadFile const *)arg1)->getPos();
    lresult = result;
    return lresult;
  } catch (...) {
    return (long)0;
  }
}


EXPORT irr::io::path *_wrap_IReadFile_getFileName (irr::io::IReadFile *larg1) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::path *) &((irr::io::IReadFile const *)arg1)->getFileName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT void _wrap_delete_IReadFile (irr::io::IReadFile *larg1) {
  irr::io::IReadFile *arg1 = (irr::io::IReadFile *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IFileList_getFileCount (irr::io::IFileList *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::io::IFileList const *)arg1)->getFileCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::io::path *_wrap_IFileList_getFileName (irr::io::IFileList *larg1, irr::u32 larg2) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::path *) &((irr::io::IFileList const *)arg1)->getFileName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::path *_wrap_IFileList_getFullFileName (irr::io::IFileList *larg1, irr::u32 larg2) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::path *) &((irr::io::IFileList const *)arg1)->getFullFileName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::u32 _wrap_IFileList_getFileSize (irr::io::IFileList *larg1, irr::u32 larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)((irr::io::IFileList const *)arg1)->getFileSize(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IFileList_getFileOffset (irr::io::IFileList *larg1, irr::u32 larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)((irr::io::IFileList const *)arg1)->getFileOffset(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IFileList_getID (irr::io::IFileList *larg1, irr::u32 larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)((irr::io::IFileList const *)arg1)->getID(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT int _wrap_IFileList_isDirectory (irr::io::IFileList *larg1, irr::u32 larg2) {
  int lresult = (int)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::u32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::io::IFileList const *)arg1)->isDirectory(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::s32 _wrap_IFileList_findFile__SWIG_0 (irr::io::IFileList *larg1, irr::io::path *larg2, int larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (irr::s32)((irr::io::IFileList const *)arg1)->findFile((irr::io::path const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IFileList_findFile__SWIG_1 (irr::io::IFileList *larg1, irr::io::path *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::io::IFileList const *)arg1)->findFile((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::io::path *_wrap_IFileList_getPath (irr::io::IFileList *larg1) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::path *) &((irr::io::IFileList const *)arg1)->getPath();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::u32 _wrap_IFileList_addItem__SWIG_0 (irr::io::IFileList *larg1, irr::io::path *larg2, irr::u32 larg3, irr::u32 larg4, int larg5, irr::u32 larg6) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  bool arg5 ;
  irr::u32 arg6 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (irr::u32)(arg1)->addItem((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IFileList_addItem__SWIG_1 (irr::io::IFileList *larg1, irr::io::path *larg2, irr::u32 larg3, irr::u32 larg4, int larg5) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  bool arg5 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::u32)(arg1)->addItem((irr::io::path const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IFileList_sort (irr::io::IFileList *larg1) {
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->sort();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IFileList (irr::io::IFileList *larg1) {
  irr::io::IFileList *arg1 = (irr::io::IFileList *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::io::IReadFile *_wrap_IFileArchive_createAndOpenFile__SWIG_0 (irr::io::IFileArchive *larg1, irr::io::path *larg2) {
  irr::io::IReadFile * lresult = (irr::io::IReadFile *)0 ;
  irr::io::IFileArchive *arg1 = (irr::io::IFileArchive *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::IReadFile *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IReadFile *)(arg1)->createAndOpenFile((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IReadFile *)0;
  }
}


EXPORT irr::io::IReadFile *_wrap_IFileArchive_createAndOpenFile__SWIG_1 (irr::io::IFileArchive *larg1, irr::u32 larg2) {
  irr::io::IReadFile * lresult = (irr::io::IReadFile *)0 ;
  irr::io::IFileArchive *arg1 = (irr::io::IFileArchive *) 0 ;
  irr::u32 arg2 ;
  irr::io::IReadFile *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IReadFile *)(arg1)->createAndOpenFile(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IReadFile *)0;
  }
}


EXPORT irr::io::IFileList *_wrap_IFileArchive_getFileList (irr::io::IFileArchive *larg1) {
  irr::io::IFileList * lresult = (irr::io::IFileList *)0 ;
  irr::io::IFileArchive *arg1 = (irr::io::IFileArchive *) 0 ;
  irr::io::IFileList *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::IFileList *)((irr::io::IFileArchive const *)arg1)->getFileList();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IFileList *)0;
  }
}


EXPORT irr::io::E_FILE_ARCHIVE_TYPE _wrap_IFileArchive_getType (irr::io::IFileArchive *larg1) {
  irr::io::E_FILE_ARCHIVE_TYPE lresult = (irr::io::E_FILE_ARCHIVE_TYPE)0 ;
  irr::io::IFileArchive *arg1 = (irr::io::IFileArchive *) 0 ;
  irr::io::E_FILE_ARCHIVE_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::io::E_FILE_ARCHIVE_TYPE)((irr::io::IFileArchive const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::E_FILE_ARCHIVE_TYPE)0;
  }
}


EXPORT void _wrap_IFileArchive_Password_set (irr::io::IFileArchive *larg1, irr::core::stringc *larg2) {
  irr::io::IFileArchive *arg1 = (irr::io::IFileArchive *) 0 ;
  irr::core::stringc *arg2 = (irr::core::stringc *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Password = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::stringc *_wrap_IFileArchive_Password_get (irr::io::IFileArchive *larg1) {
  irr::core::stringc * lresult = (irr::core::stringc *)0 ;
  irr::io::IFileArchive *arg1 = (irr::io::IFileArchive *) 0 ;
  irr::core::stringc *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::stringc *)& ((arg1)->Password);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::stringc *)0;
  }
}


EXPORT void _wrap_delete_IFileArchive (irr::io::IFileArchive *larg1) {
  irr::io::IFileArchive *arg1 = (irr::io::IFileArchive *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IArchiveLoader_isALoadableFileFormat__SWIG_0 (irr::io::IArchiveLoader *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::io::IArchiveLoader *arg1 = (irr::io::IArchiveLoader *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::io::IArchiveLoader const *)arg1)->isALoadableFileFormat((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IArchiveLoader_isALoadableFileFormat__SWIG_1 (irr::io::IArchiveLoader *larg1, irr::io::IReadFile *larg2) {
  int lresult = (int)0 ;
  irr::io::IArchiveLoader *arg1 = (irr::io::IArchiveLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::io::IArchiveLoader const *)arg1)->isALoadableFileFormat(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IArchiveLoader_isALoadableFileFormat__SWIG_2 (irr::io::IArchiveLoader *larg1, irr::io::E_FILE_ARCHIVE_TYPE larg2) {
  int lresult = (int)0 ;
  irr::io::IArchiveLoader *arg1 = (irr::io::IArchiveLoader *) 0 ;
  irr::io::E_FILE_ARCHIVE_TYPE arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::io::IArchiveLoader const *)arg1)->isALoadableFileFormat(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::io::IFileArchive *_wrap_IArchiveLoader_createArchive__SWIG_0 (irr::io::IArchiveLoader *larg1, irr::io::path *larg2, int larg3, int larg4) {
  irr::io::IFileArchive * lresult = (irr::io::IFileArchive *)0 ;
  irr::io::IArchiveLoader *arg1 = (irr::io::IArchiveLoader *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::io::IFileArchive *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::io::IFileArchive *)((irr::io::IArchiveLoader const *)arg1)->createArchive((irr::io::path const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IFileArchive *)0;
  }
}


EXPORT irr::io::IFileArchive *_wrap_IArchiveLoader_createArchive__SWIG_1 (irr::io::IArchiveLoader *larg1, irr::io::IReadFile *larg2, int larg3, int larg4) {
  irr::io::IFileArchive * lresult = (irr::io::IFileArchive *)0 ;
  irr::io::IArchiveLoader *arg1 = (irr::io::IArchiveLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::io::IFileArchive *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::io::IFileArchive *)((irr::io::IArchiveLoader const *)arg1)->createArchive(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IFileArchive *)0;
  }
}


EXPORT void _wrap_delete_IArchiveLoader (irr::io::IArchiveLoader *larg1) {
  irr::io::IArchiveLoader *arg1 = (irr::io::IArchiveLoader *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::io::IReadFile *_wrap_IFileSystem_createAndOpenFile (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  irr::io::IReadFile * lresult = (irr::io::IReadFile *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::IReadFile *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IReadFile *)(arg1)->createAndOpenFile((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IReadFile *)0;
  }
}


EXPORT irr::io::IWriteFile *_wrap_IFileSystem_createMemoryWriteFile__SWIG_0 (irr::io::IFileSystem *larg1, void *larg2, irr::s32 larg3, irr::io::path *larg4, int larg5) {
  irr::io::IWriteFile * lresult = (irr::io::IWriteFile *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::s32 arg3 ;
  irr::io::path *arg4 = 0 ;
  bool arg5 ;
  irr::io::IWriteFile *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::io::IWriteFile *)(arg1)->createMemoryWriteFile(arg2,arg3,(irr::io::path const &)*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IWriteFile *)0;
  }
}


EXPORT irr::io::IWriteFile *_wrap_IFileSystem_createMemoryWriteFile__SWIG_1 (irr::io::IFileSystem *larg1, void *larg2, irr::s32 larg3, irr::io::path *larg4) {
  irr::io::IWriteFile * lresult = (irr::io::IWriteFile *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::s32 arg3 ;
  irr::io::path *arg4 = 0 ;
  irr::io::IWriteFile *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::io::IWriteFile *)(arg1)->createMemoryWriteFile(arg2,arg3,(irr::io::path const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IWriteFile *)0;
  }
}


EXPORT irr::io::IWriteFile *_wrap_IFileSystem_createAndWriteFile__SWIG_0 (irr::io::IFileSystem *larg1, irr::io::path *larg2, int larg3) {
  irr::io::IWriteFile * lresult = (irr::io::IWriteFile *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  irr::io::IWriteFile *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (irr::io::IWriteFile *)(arg1)->createAndWriteFile((irr::io::path const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IWriteFile *)0;
  }
}


EXPORT irr::io::IWriteFile *_wrap_IFileSystem_createAndWriteFile__SWIG_1 (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  irr::io::IWriteFile * lresult = (irr::io::IWriteFile *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::IWriteFile *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IWriteFile *)(arg1)->createAndWriteFile((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IWriteFile *)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_0 (irr::io::IFileSystem *larg1, irr::io::path *larg2, int larg3, int larg4, irr::io::E_FILE_ARCHIVE_TYPE larg5, irr::core::stringc *larg6, irr::io::IFileArchive **larg7) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::io::E_FILE_ARCHIVE_TYPE arg5 ;
  irr::core::stringc *arg6 = 0 ;
  irr::io::IFileArchive **arg7 = (irr::io::IFileArchive **) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)(arg1)->addFileArchive((irr::io::path const &)*arg2,arg3,arg4,arg5,(irr::core::stringc const &)*arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_1 (irr::io::IFileSystem *larg1, irr::io::path *larg2, int larg3, int larg4, irr::io::E_FILE_ARCHIVE_TYPE larg5, irr::core::stringc *larg6) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::io::E_FILE_ARCHIVE_TYPE arg5 ;
  irr::core::stringc *arg6 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)(arg1)->addFileArchive((irr::io::path const &)*arg2,arg3,arg4,arg5,(irr::core::stringc const &)*arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_2 (irr::io::IFileSystem *larg1, irr::io::path *larg2, int larg3, int larg4, irr::io::E_FILE_ARCHIVE_TYPE larg5) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::io::E_FILE_ARCHIVE_TYPE arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = (bool)(arg1)->addFileArchive((irr::io::path const &)*arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_3 (irr::io::IFileSystem *larg1, irr::io::path *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)(arg1)->addFileArchive((irr::io::path const &)*arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_4 (irr::io::IFileSystem *larg1, irr::io::path *larg2, int larg3) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->addFileArchive((irr::io::path const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_5 (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->addFileArchive((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_6 (irr::io::IFileSystem *larg1, irr::io::IReadFile *larg2, int larg3, int larg4, irr::io::E_FILE_ARCHIVE_TYPE larg5, irr::core::stringc *larg6, irr::io::IFileArchive **larg7) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::io::E_FILE_ARCHIVE_TYPE arg5 ;
  irr::core::stringc *arg6 = 0 ;
  irr::io::IFileArchive **arg7 = (irr::io::IFileArchive **) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (bool)(arg1)->addFileArchive(arg2,arg3,arg4,arg5,(irr::core::stringc const &)*arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_7 (irr::io::IFileSystem *larg1, irr::io::IReadFile *larg2, int larg3, int larg4, irr::io::E_FILE_ARCHIVE_TYPE larg5, irr::core::stringc *larg6) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::io::E_FILE_ARCHIVE_TYPE arg5 ;
  irr::core::stringc *arg6 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)(arg1)->addFileArchive(arg2,arg3,arg4,arg5,(irr::core::stringc const &)*arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_8 (irr::io::IFileSystem *larg1, irr::io::IReadFile *larg2, int larg3, int larg4, irr::io::E_FILE_ARCHIVE_TYPE larg5) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::io::E_FILE_ARCHIVE_TYPE arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = (bool)(arg1)->addFileArchive(arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_9 (irr::io::IFileSystem *larg1, irr::io::IReadFile *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)(arg1)->addFileArchive(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_10 (irr::io::IFileSystem *larg1, irr::io::IReadFile *larg2, int larg3) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->addFileArchive(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_11 (irr::io::IFileSystem *larg1, irr::io::IReadFile *larg2) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->addFileArchive(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFileArchive__SWIG_12 (irr::io::IFileSystem *larg1, irr::io::IFileArchive *larg2) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IFileArchive *arg2 = (irr::io::IFileArchive *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->addFileArchive(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::u32 _wrap_IFileSystem_getFileArchiveCount (irr::io::IFileSystem *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::io::IFileSystem const *)arg1)->getFileArchiveCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT int _wrap_IFileSystem_removeFileArchive__SWIG_0 (irr::io::IFileSystem *larg1, irr::u32 larg2) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->removeFileArchive(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_removeFileArchive__SWIG_1 (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->removeFileArchive((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_removeFileArchive__SWIG_2 (irr::io::IFileSystem *larg1, irr::io::IFileArchive *larg2) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IFileArchive *arg2 = (irr::io::IFileArchive *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->removeFileArchive((irr::io::IFileArchive const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_moveFileArchive (irr::io::IFileSystem *larg1, irr::u32 larg2, irr::s32 larg3) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->moveFileArchive(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::io::IFileArchive *_wrap_IFileSystem_getFileArchive (irr::io::IFileSystem *larg1, irr::u32 larg2) {
  irr::io::IFileArchive * lresult = (irr::io::IFileArchive *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 arg2 ;
  irr::io::IFileArchive *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IFileArchive *)(arg1)->getFileArchive(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IFileArchive *)0;
  }
}


EXPORT void _wrap_IFileSystem_addArchiveLoader (irr::io::IFileSystem *larg1, irr::io::IArchiveLoader *larg2) {
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IArchiveLoader *arg2 = (irr::io::IArchiveLoader *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addArchiveLoader(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IFileSystem_getArchiveLoaderCount (irr::io::IFileSystem *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::io::IFileSystem const *)arg1)->getArchiveLoaderCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::io::IArchiveLoader *_wrap_IFileSystem_getArchiveLoader (irr::io::IFileSystem *larg1, irr::u32 larg2) {
  irr::io::IArchiveLoader * lresult = (irr::io::IArchiveLoader *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::u32 arg2 ;
  irr::io::IArchiveLoader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IArchiveLoader *)((irr::io::IFileSystem const *)arg1)->getArchiveLoader(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IArchiveLoader *)0;
  }
}


EXPORT int _wrap_IFileSystem_addZipFileArchive__SWIG_0 (irr::io::IFileSystem *larg1, irr::c8 *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)(arg1)->addZipFileArchive((irr::c8 const *)arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addZipFileArchive__SWIG_1 (irr::io::IFileSystem *larg1, irr::c8 *larg2, int larg3) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->addZipFileArchive((irr::c8 const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addZipFileArchive__SWIG_2 (irr::io::IFileSystem *larg1, irr::c8 *larg2) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->addZipFileArchive((irr::c8 const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFolderFileArchive__SWIG_0 (irr::io::IFileSystem *larg1, irr::c8 *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)(arg1)->addFolderFileArchive((irr::c8 const *)arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFolderFileArchive__SWIG_1 (irr::io::IFileSystem *larg1, irr::c8 *larg2, int larg3) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->addFolderFileArchive((irr::c8 const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addFolderFileArchive__SWIG_2 (irr::io::IFileSystem *larg1, irr::c8 *larg2) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->addFolderFileArchive((irr::c8 const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addPakFileArchive__SWIG_0 (irr::io::IFileSystem *larg1, irr::c8 *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)(arg1)->addPakFileArchive((irr::c8 const *)arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addPakFileArchive__SWIG_1 (irr::io::IFileSystem *larg1, irr::c8 *larg2, int larg3) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->addPakFileArchive((irr::c8 const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IFileSystem_addPakFileArchive__SWIG_2 (irr::io::IFileSystem *larg1, irr::c8 *larg2) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->addPakFileArchive((irr::c8 const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::io::path *_wrap_IFileSystem_getWorkingDirectory (irr::io::IFileSystem *larg1) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::path *) &(arg1)->getWorkingDirectory();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT int _wrap_IFileSystem_changeWorkingDirectoryTo (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->changeWorkingDirectoryTo((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::io::path *_wrap_IFileSystem_getAbsolutePath (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::io::IFileSystem const *)arg1)->getAbsolutePath((irr::io::path const &)*arg2);
    lresult = new irr::io::path(result);
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::path *_wrap_IFileSystem_getFileDir (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::io::IFileSystem const *)arg1)->getFileDir((irr::io::path const &)*arg2);
    lresult = new irr::io::path(result);
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::path *_wrap_IFileSystem_getFileBasename__SWIG_0 (irr::io::IFileSystem *larg1, irr::io::path *larg2, int larg3) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  irr::io::path result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = ((irr::io::IFileSystem const *)arg1)->getFileBasename((irr::io::path const &)*arg2,arg3);
    lresult = new irr::io::path(result);
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::path *_wrap_IFileSystem_getFileBasename__SWIG_1 (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::io::IFileSystem const *)arg1)->getFileBasename((irr::io::path const &)*arg2);
    lresult = new irr::io::path(result);
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::path *_wrap_IFileSystem_flattenFilename__SWIG_0 (irr::io::IFileSystem *larg1, irr::io::path *larg2, irr::io::path *larg3) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::io::path *) &((irr::io::IFileSystem const *)arg1)->flattenFilename(*arg2,(irr::io::path const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::path *_wrap_IFileSystem_flattenFilename__SWIG_1 (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::path *) &((irr::io::IFileSystem const *)arg1)->flattenFilename(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::path *_wrap_IFileSystem_getRelativeFilename (irr::io::IFileSystem *larg1, irr::io::path *larg2, irr::io::path *larg3) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((irr::io::IFileSystem const *)arg1)->getRelativeFilename((irr::io::path const &)*arg2,(irr::io::path const &)*arg3);
    lresult = new irr::io::path(result);
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::IFileList *_wrap_IFileSystem_createFileList (irr::io::IFileSystem *larg1) {
  irr::io::IFileList * lresult = (irr::io::IFileList *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IFileList *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::IFileList *)(arg1)->createFileList();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IFileList *)0;
  }
}


EXPORT irr::io::IFileList *_wrap_IFileSystem_createEmptyFileList (irr::io::IFileSystem *larg1, irr::io::path *larg2, int larg3, int larg4) {
  irr::io::IFileList * lresult = (irr::io::IFileList *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::io::IFileList *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::io::IFileList *)(arg1)->createEmptyFileList((irr::io::path const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IFileList *)0;
  }
}


EXPORT irr::io::EFileSystemType _wrap_IFileSystem_setFileListSystem (irr::io::IFileSystem *larg1, irr::io::EFileSystemType larg2) {
  irr::io::EFileSystemType lresult = (irr::io::EFileSystemType)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::EFileSystemType arg2 ;
  irr::io::EFileSystemType result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::EFileSystemType)(arg1)->setFileListSystem(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::EFileSystemType)0;
  }
}


EXPORT int _wrap_IFileSystem_existFile (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::io::IFileSystem const *)arg1)->existFile((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::io::IXMLReader *_wrap_IFileSystem_createXMLReader__SWIG_0 (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  irr::io::IXMLReader * lresult = (irr::io::IXMLReader *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::IXMLReader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IXMLReader *)(arg1)->createXMLReader((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IXMLReader *)0;
  }
}


EXPORT irr::io::IXMLReader *_wrap_IFileSystem_createXMLReader__SWIG_1 (irr::io::IFileSystem *larg1, irr::io::IReadFile *larg2) {
  irr::io::IXMLReader * lresult = (irr::io::IXMLReader *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IXMLReader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IXMLReader *)(arg1)->createXMLReader(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IXMLReader *)0;
  }
}


EXPORT irr::io::IXMLReaderUTF8 *_wrap_IFileSystem_createXMLReaderUTF8__SWIG_0 (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  irr::io::IXMLReaderUTF8 * lresult = (irr::io::IXMLReaderUTF8 *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::IXMLReaderUTF8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IXMLReaderUTF8 *)(arg1)->createXMLReaderUTF8((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IXMLReaderUTF8 *)0;
  }
}


EXPORT irr::io::IXMLReaderUTF8 *_wrap_IFileSystem_createXMLReaderUTF8__SWIG_1 (irr::io::IFileSystem *larg1, irr::io::IReadFile *larg2) {
  irr::io::IXMLReaderUTF8 * lresult = (irr::io::IXMLReaderUTF8 *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IXMLReaderUTF8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IXMLReaderUTF8 *)(arg1)->createXMLReaderUTF8(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IXMLReaderUTF8 *)0;
  }
}


EXPORT irr::io::IXMLWriter *_wrap_IFileSystem_createXMLWriter__SWIG_0 (irr::io::IFileSystem *larg1, irr::io::path *larg2) {
  irr::io::IXMLWriter * lresult = (irr::io::IXMLWriter *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::IXMLWriter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IXMLWriter *)(arg1)->createXMLWriter((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IXMLWriter *)0;
  }
}


EXPORT irr::io::IXMLWriter *_wrap_IFileSystem_createXMLWriter__SWIG_1 (irr::io::IFileSystem *larg1, irr::io::IWriteFile *larg2) {
  irr::io::IXMLWriter * lresult = (irr::io::IXMLWriter *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::io::IXMLWriter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IXMLWriter *)(arg1)->createXMLWriter(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IXMLWriter *)0;
  }
}


EXPORT irr::io::IAttributes *_wrap_IFileSystem_createEmptyAttributes__SWIG_0 (irr::io::IFileSystem *larg1, irr::video::IVideoDriver *larg2) {
  irr::io::IAttributes * lresult = (irr::io::IAttributes *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::video::IVideoDriver *arg2 = (irr::video::IVideoDriver *) 0 ;
  irr::io::IAttributes *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IAttributes *)(arg1)->createEmptyAttributes(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IAttributes *)0;
  }
}


EXPORT irr::io::IAttributes *_wrap_IFileSystem_createEmptyAttributes__SWIG_1 (irr::io::IFileSystem *larg1) {
  irr::io::IAttributes * lresult = (irr::io::IAttributes *)0 ;
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  irr::io::IAttributes *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::IAttributes *)(arg1)->createEmptyAttributes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IAttributes *)0;
  }
}


EXPORT void _wrap_delete_IFileSystem (irr::io::IFileSystem *larg1) {
  irr::io::IFileSystem *arg1 = (irr::io::IFileSystem *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_IImage_lock (irr::video::IImage *larg1) {
  void * lresult = (void *)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)(arg1)->lock();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_IImage_unlock (irr::video::IImage *larg1) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->unlock();
    
  } catch (...) {
    
  }
}


EXPORT irr::core::dimension2d< irr::u32 > *_wrap_IImage_getDimension (irr::video::IImage *larg1) {
  irr::core::dimension2d< irr::u32 > * lresult = (irr::core::dimension2d< irr::u32 > *)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::IImage const *)arg1)->getDimension();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::u32 > *)0;
  }
}


EXPORT irr::u32 _wrap_IImage_getBitsPerPixel (irr::video::IImage *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IImage const *)arg1)->getBitsPerPixel();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IImage_getBytesPerPixel (irr::video::IImage *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IImage const *)arg1)->getBytesPerPixel();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IImage_getImageDataSizeInBytes (irr::video::IImage *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IImage const *)arg1)->getImageDataSizeInBytes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IImage_getImageDataSizeInPixels (irr::video::IImage *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IImage const *)arg1)->getImageDataSizeInPixels();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::video::SColor *_wrap_IImage_getPixel (irr::video::IImage *larg1, irr::u32 larg2, irr::u32 larg3) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((irr::video::IImage const *)arg1)->getPixel(arg2,arg3);
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_IImage_setPixel__SWIG_0 (irr::video::IImage *larg1, irr::u32 larg2, irr::u32 larg3, irr::video::SColor *larg4, int larg5) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    (arg1)->setPixel(arg2,arg3,(irr::video::SColor const &)*arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_setPixel__SWIG_1 (irr::video::IImage *larg1, irr::u32 larg2, irr::u32 larg3, irr::video::SColor *larg4) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setPixel(arg2,arg3,(irr::video::SColor const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::ECOLOR_FORMAT _wrap_IImage_getColorFormat (irr::video::IImage *larg1) {
  irr::video::ECOLOR_FORMAT lresult = (irr::video::ECOLOR_FORMAT)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::ECOLOR_FORMAT result;
  
  arg1 = larg1;
  try {
    result = (irr::video::ECOLOR_FORMAT)((irr::video::IImage const *)arg1)->getColorFormat();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ECOLOR_FORMAT)0;
  }
}


EXPORT irr::u32 _wrap_IImage_getRedMask (irr::video::IImage *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IImage const *)arg1)->getRedMask();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IImage_getGreenMask (irr::video::IImage *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IImage const *)arg1)->getGreenMask();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IImage_getBlueMask (irr::video::IImage *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IImage const *)arg1)->getBlueMask();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IImage_getAlphaMask (irr::video::IImage *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IImage const *)arg1)->getAlphaMask();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IImage_getPitch (irr::video::IImage *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IImage const *)arg1)->getPitch();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IImage_copyToScaling__SWIG_0 (irr::video::IImage *larg1, void *larg2, irr::u32 larg3, irr::u32 larg4, irr::video::ECOLOR_FORMAT larg5, irr::u32 larg6) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::ECOLOR_FORMAT arg5 ;
  irr::u32 arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->copyToScaling(arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyToScaling__SWIG_1 (irr::video::IImage *larg1, void *larg2, irr::u32 larg3, irr::u32 larg4, irr::video::ECOLOR_FORMAT larg5) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::ECOLOR_FORMAT arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->copyToScaling(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyToScaling__SWIG_2 (irr::video::IImage *larg1, void *larg2, irr::u32 larg3, irr::u32 larg4) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->copyToScaling(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyToScaling__SWIG_3 (irr::video::IImage *larg1, irr::video::IImage *larg2) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->copyToScaling(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyTo__SWIG_0 (irr::video::IImage *larg1, irr::video::IImage *larg2, irr::core::vector2d< irr::s32 > *larg3) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->copyTo(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyTo__SWIG_1 (irr::video::IImage *larg1, irr::video::IImage *larg2) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->copyTo(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyTo__SWIG_2 (irr::video::IImage *larg1, irr::video::IImage *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4, irr::core::rect< irr::s32 > *larg5) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->copyTo(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyTo__SWIG_3 (irr::video::IImage *larg1, irr::video::IImage *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->copyTo(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyToWithAlpha__SWIG_0 (irr::video::IImage *larg1, irr::video::IImage *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5, irr::core::rect< irr::s32 > *larg6) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->copyToWithAlpha(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::video::SColor const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyToWithAlpha__SWIG_1 (irr::video::IImage *larg1, irr::video::IImage *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::video::SColor *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->copyToWithAlpha(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::video::SColor const &)*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyToScalingBoxFilter__SWIG_0 (irr::video::IImage *larg1, irr::video::IImage *larg2, irr::s32 larg3, int larg4) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    (arg1)->copyToScalingBoxFilter(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyToScalingBoxFilter__SWIG_1 (irr::video::IImage *larg1, irr::video::IImage *larg2, irr::s32 larg3) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->copyToScalingBoxFilter(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_copyToScalingBoxFilter__SWIG_2 (irr::video::IImage *larg1, irr::video::IImage *larg2) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->copyToScalingBoxFilter(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IImage_fill (irr::video::IImage *larg1, irr::video::SColor *larg2) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->fill((irr::video::SColor const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IImage_getBitsPerPixelFromFormat (irr::video::ECOLOR_FORMAT larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::ECOLOR_FORMAT arg1 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)irr::video::IImage::getBitsPerPixelFromFormat(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT int _wrap_IImage_isRenderTargetOnlyFormat (irr::video::ECOLOR_FORMAT larg1) {
  int lresult = (int)0 ;
  irr::video::ECOLOR_FORMAT arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)irr::video::IImage::isRenderTargetOnlyFormat(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IImage (irr::video::IImage *larg1) {
  irr::video::IImage *arg1 = (irr::video::IImage *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_ITexture_lock__SWIG_0 (irr::video::ITexture *larg1, irr::video::E_TEXTURE_LOCK_MODE larg2, irr::u32 larg3) {
  void * lresult = (void *)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::E_TEXTURE_LOCK_MODE arg2 ;
  irr::u32 arg3 ;
  void *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (void *)(arg1)->lock(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void *_wrap_ITexture_lock__SWIG_1 (irr::video::ITexture *larg1, irr::video::E_TEXTURE_LOCK_MODE larg2) {
  void * lresult = (void *)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::E_TEXTURE_LOCK_MODE arg2 ;
  void *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (void *)(arg1)->lock(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void *_wrap_ITexture_lock__SWIG_2 (irr::video::ITexture *larg1) {
  void * lresult = (void *)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)(arg1)->lock();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_ITexture_unlock (irr::video::ITexture *larg1) {
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->unlock();
    
  } catch (...) {
    
  }
}


EXPORT irr::core::dimension2d< irr::u32 > *_wrap_ITexture_getOriginalSize (irr::video::ITexture *larg1) {
  irr::core::dimension2d< irr::u32 > * lresult = (irr::core::dimension2d< irr::u32 > *)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::ITexture const *)arg1)->getOriginalSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::u32 > *)0;
  }
}


EXPORT irr::core::dimension2d< irr::u32 > *_wrap_ITexture_getSize (irr::video::ITexture *larg1) {
  irr::core::dimension2d< irr::u32 > * lresult = (irr::core::dimension2d< irr::u32 > *)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::ITexture const *)arg1)->getSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::u32 > *)0;
  }
}


EXPORT irr::video::E_DRIVER_TYPE _wrap_ITexture_getDriverType (irr::video::ITexture *larg1) {
  irr::video::E_DRIVER_TYPE lresult = (irr::video::E_DRIVER_TYPE)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::E_DRIVER_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::video::E_DRIVER_TYPE)((irr::video::ITexture const *)arg1)->getDriverType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::E_DRIVER_TYPE)0;
  }
}


EXPORT irr::video::ECOLOR_FORMAT _wrap_ITexture_getColorFormat (irr::video::ITexture *larg1) {
  irr::video::ECOLOR_FORMAT lresult = (irr::video::ECOLOR_FORMAT)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::video::ECOLOR_FORMAT result;
  
  arg1 = larg1;
  try {
    result = (irr::video::ECOLOR_FORMAT)((irr::video::ITexture const *)arg1)->getColorFormat();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ECOLOR_FORMAT)0;
  }
}


EXPORT irr::u32 _wrap_ITexture_getPitch (irr::video::ITexture *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::ITexture const *)arg1)->getPitch();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT int _wrap_ITexture_hasMipMaps (irr::video::ITexture *larg1) {
  int lresult = (int)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::video::ITexture const *)arg1)->hasMipMaps();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ITexture_hasAlpha (irr::video::ITexture *larg1) {
  int lresult = (int)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::video::ITexture const *)arg1)->hasAlpha();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ITexture_regenerateMipMapLevels__SWIG_0 (irr::video::ITexture *larg1, void *larg2) {
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->regenerateMipMapLevels(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITexture_regenerateMipMapLevels__SWIG_1 (irr::video::ITexture *larg1) {
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->regenerateMipMapLevels();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ITexture_isRenderTarget (irr::video::ITexture *larg1) {
  int lresult = (int)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::video::ITexture const *)arg1)->isRenderTarget();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::io::SNamedPath *_wrap_ITexture_getName (irr::video::ITexture *larg1) {
  irr::io::SNamedPath * lresult = (irr::io::SNamedPath *)0 ;
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  irr::io::SNamedPath *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::SNamedPath *) &((irr::video::ITexture const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::SNamedPath *)0;
  }
}


EXPORT void _wrap_delete_ITexture (irr::video::ITexture *larg1) {
  irr::video::ITexture *arg1 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IVideoDriver_beginScene__SWIG_0 (irr::video::IVideoDriver *larg1, int larg2, int larg3, irr::video::SColor *larg4, irr::video::SExposedVideoData *larg5, irr::core::rect< irr::s32 > *larg6) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SExposedVideoData *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)(arg1)->beginScene(arg2,arg3,arg4,(irr::video::SExposedVideoData const &)*arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_beginScene__SWIG_1 (irr::video::IVideoDriver *larg1, int larg2, int larg3, irr::video::SColor *larg4, irr::video::SExposedVideoData *larg5) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SExposedVideoData *arg5 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = *larg4;
  arg5 = larg5;
  try {
    result = (bool)(arg1)->beginScene(arg2,arg3,arg4,(irr::video::SExposedVideoData const &)*arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_beginScene__SWIG_2 (irr::video::IVideoDriver *larg1, int larg2, int larg3, irr::video::SColor *larg4) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = *larg4;
  try {
    result = (bool)(arg1)->beginScene(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_beginScene__SWIG_3 (irr::video::IVideoDriver *larg1, int larg2, int larg3) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->beginScene(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_beginScene__SWIG_4 (irr::video::IVideoDriver *larg1, int larg2) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (bool)(arg1)->beginScene(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_beginScene__SWIG_5 (irr::video::IVideoDriver *larg1) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->beginScene();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_endScene (irr::video::IVideoDriver *larg1) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->endScene();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_queryFeature (irr::video::IVideoDriver *larg1, irr::video::E_VIDEO_DRIVER_FEATURE larg2) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_VIDEO_DRIVER_FEATURE arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::IVideoDriver const *)arg1)->queryFeature(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IVideoDriver_disableFeature__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::E_VIDEO_DRIVER_FEATURE larg2, int larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_VIDEO_DRIVER_FEATURE arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->disableFeature(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_disableFeature__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::E_VIDEO_DRIVER_FEATURE larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_VIDEO_DRIVER_FEATURE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->disableFeature(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::io::IAttributes *_wrap_IVideoDriver_getDriverAttributes (irr::video::IVideoDriver *larg1) {
  irr::io::IAttributes * lresult = (irr::io::IAttributes *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::IAttributes *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::IAttributes *) &((irr::video::IVideoDriver const *)arg1)->getDriverAttributes();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IAttributes *)0;
  }
}


EXPORT int _wrap_IVideoDriver_checkDriverReset (irr::video::IVideoDriver *larg1) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->checkDriverReset();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IVideoDriver_setTransform (irr::video::IVideoDriver *larg1, irr::video::E_TRANSFORMATION_STATE larg2, irr::core::matrix4 *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_TRANSFORMATION_STATE arg2 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setTransform(arg2,(irr::core::matrix4 const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::matrix4 *_wrap_IVideoDriver_getTransform (irr::video::IVideoDriver *larg1, irr::video::E_TRANSFORMATION_STATE larg2) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_TRANSFORMATION_STATE arg2 ;
  irr::core::matrix4 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::matrix4 *) &((irr::video::IVideoDriver const *)arg1)->getTransform(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT irr::u32 _wrap_IVideoDriver_getImageLoaderCount (irr::video::IVideoDriver *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getImageLoaderCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::video::IImageLoader *_wrap_IVideoDriver_getImageLoader (irr::video::IVideoDriver *larg1, irr::u32 larg2) {
  irr::video::IImageLoader * lresult = (irr::video::IImageLoader *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::video::IImageLoader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::IImageLoader *)(arg1)->getImageLoader(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImageLoader *)0;
  }
}


EXPORT irr::u32 _wrap_IVideoDriver_getImageWriterCount (irr::video::IVideoDriver *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getImageWriterCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::video::IImageWriter *_wrap_IVideoDriver_getImageWriter (irr::video::IVideoDriver *larg1, irr::u32 larg2) {
  irr::video::IImageWriter * lresult = (irr::video::IImageWriter *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::video::IImageWriter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::IImageWriter *)(arg1)->getImageWriter(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImageWriter *)0;
  }
}


EXPORT void _wrap_IVideoDriver_setMaterial (irr::video::IVideoDriver *larg1, irr::video::SMaterial *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaterial((irr::video::SMaterial const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::ITexture *_wrap_IVideoDriver_getTexture__SWIG_0 (irr::video::IVideoDriver *larg1, irr::io::path *larg2) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::ITexture *)(arg1)->getTexture((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT irr::video::ITexture *_wrap_IVideoDriver_getTexture__SWIG_1 (irr::video::IVideoDriver *larg1, irr::io::IReadFile *larg2) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::ITexture *)(arg1)->getTexture(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT irr::video::ITexture *_wrap_IVideoDriver_getTextureByIndex (irr::video::IVideoDriver *larg1, irr::u32 larg2) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::ITexture *)(arg1)->getTextureByIndex(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT irr::u32 _wrap_IVideoDriver_getTextureCount (irr::video::IVideoDriver *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getTextureCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IVideoDriver_renameTexture (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::io::path *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::io::path *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->renameTexture(arg2,(irr::io::path const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::ITexture *_wrap_IVideoDriver_addTexture__SWIG_0 (irr::video::IVideoDriver *larg1, irr::core::dimension2d< irr::u32 > *larg2, irr::io::path *larg3, irr::video::ECOLOR_FORMAT larg4) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::ECOLOR_FORMAT arg4 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::video::ITexture *)(arg1)->addTexture((irr::core::dimension2d< irr::u32 > const &)*arg2,(irr::io::path const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT irr::video::ITexture *_wrap_IVideoDriver_addTexture__SWIG_1 (irr::video::IVideoDriver *larg1, irr::core::dimension2d< irr::u32 > *larg2, irr::io::path *larg3) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::video::ITexture *)(arg1)->addTexture((irr::core::dimension2d< irr::u32 > const &)*arg2,(irr::io::path const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT irr::video::ITexture *_wrap_IVideoDriver_addTexture__SWIG_2 (irr::video::IVideoDriver *larg1, irr::io::path *larg2, irr::video::IImage *larg3, void *larg4) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  void *arg4 = (void *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::video::ITexture *)(arg1)->addTexture((irr::io::path const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT irr::video::ITexture *_wrap_IVideoDriver_addTexture__SWIG_3 (irr::video::IVideoDriver *larg1, irr::io::path *larg2, irr::video::IImage *larg3) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::video::ITexture *)(arg1)->addTexture((irr::io::path const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT irr::video::ITexture *_wrap_IVideoDriver_addRenderTargetTexture__SWIG_0 (irr::video::IVideoDriver *larg1, irr::core::dimension2d< irr::u32 > *larg2, irr::io::path *larg3, irr::video::ECOLOR_FORMAT larg4) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::ECOLOR_FORMAT arg4 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::video::ITexture *)(arg1)->addRenderTargetTexture((irr::core::dimension2d< irr::u32 > const &)*arg2,(irr::io::path const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT irr::video::ITexture *_wrap_IVideoDriver_addRenderTargetTexture__SWIG_1 (irr::video::IVideoDriver *larg1, irr::core::dimension2d< irr::u32 > *larg2, irr::io::path *larg3) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::video::ITexture *)(arg1)->addRenderTargetTexture((irr::core::dimension2d< irr::u32 > const &)*arg2,(irr::io::path const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT irr::video::ITexture *_wrap_IVideoDriver_addRenderTargetTexture__SWIG_2 (irr::video::IVideoDriver *larg1, irr::core::dimension2d< irr::u32 > *larg2) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::ITexture *)(arg1)->addRenderTargetTexture((irr::core::dimension2d< irr::u32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT void _wrap_IVideoDriver_removeTexture (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeTexture(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_removeAllTextures (irr::video::IVideoDriver *larg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->removeAllTextures();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_removeHardwareBuffer (irr::video::IVideoDriver *larg1, irr::scene::IMeshBuffer *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeHardwareBuffer((irr::scene::IMeshBuffer const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_removeAllHardwareBuffers (irr::video::IVideoDriver *larg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->removeAllHardwareBuffers();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_addOcclusionQuery__SWIG_0 (irr::video::IVideoDriver *larg1, irr::scene::ISceneNode *larg2, irr::scene::IMesh *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMesh *arg3 = (irr::scene::IMesh *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addOcclusionQuery(arg2,(irr::scene::IMesh const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_addOcclusionQuery__SWIG_1 (irr::video::IVideoDriver *larg1, irr::scene::ISceneNode *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addOcclusionQuery(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_removeOcclusionQuery (irr::video::IVideoDriver *larg1, irr::scene::ISceneNode *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeOcclusionQuery(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_removeAllOcclusionQueries (irr::video::IVideoDriver *larg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->removeAllOcclusionQueries();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_runOcclusionQuery__SWIG_0 (irr::video::IVideoDriver *larg1, irr::scene::ISceneNode *larg2, int larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->runOcclusionQuery(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_runOcclusionQuery__SWIG_1 (irr::video::IVideoDriver *larg1, irr::scene::ISceneNode *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->runOcclusionQuery(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_runAllOcclusionQueries__SWIG_0 (irr::video::IVideoDriver *larg1, int larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->runAllOcclusionQueries(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_runAllOcclusionQueries__SWIG_1 (irr::video::IVideoDriver *larg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->runAllOcclusionQueries();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_updateOcclusionQuery__SWIG_0 (irr::video::IVideoDriver *larg1, irr::scene::ISceneNode *larg2, int larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->updateOcclusionQuery(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_updateOcclusionQuery__SWIG_1 (irr::video::IVideoDriver *larg1, irr::scene::ISceneNode *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->updateOcclusionQuery(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_updateAllOcclusionQueries__SWIG_0 (irr::video::IVideoDriver *larg1, int larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->updateAllOcclusionQueries(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_updateAllOcclusionQueries__SWIG_1 (irr::video::IVideoDriver *larg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->updateAllOcclusionQueries();
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IVideoDriver_getOcclusionQueryResult (irr::video::IVideoDriver *larg1, irr::scene::ISceneNode *larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getOcclusionQueryResult(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IVideoDriver_makeColorKeyTexture__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::video::SColor *larg3, int larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::video::SColor arg3 ;
  bool arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = (bool)larg4;
  try {
    ((irr::video::IVideoDriver const *)arg1)->makeColorKeyTexture(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_makeColorKeyTexture__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::video::SColor *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    ((irr::video::IVideoDriver const *)arg1)->makeColorKeyTexture(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_makeColorKeyTexture__SWIG_2 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, int larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  bool arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = (bool)larg4;
  try {
    ((irr::video::IVideoDriver const *)arg1)->makeColorKeyTexture(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_makeColorKeyTexture__SWIG_3 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    ((irr::video::IVideoDriver const *)arg1)->makeColorKeyTexture(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_makeNormalMapTexture__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::f32 larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::video::IVideoDriver const *)arg1)->makeNormalMapTexture(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_makeNormalMapTexture__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::video::IVideoDriver const *)arg1)->makeNormalMapTexture(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, int larg3, int larg4, irr::video::SColor *larg5) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::video::SColor arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = *larg5;
  try {
    result = (bool)(arg1)->setRenderTarget(arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)(arg1)->setRenderTarget(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_2 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, int larg3) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->setRenderTarget(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_3 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->setRenderTarget(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_4 (irr::video::IVideoDriver *larg1, irr::video::E_RENDER_TARGET larg2, int larg3, int larg4, irr::video::SColor *larg5) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_RENDER_TARGET arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::video::SColor arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = *larg5;
  try {
    result = (bool)(arg1)->setRenderTarget(arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_5 (irr::video::IVideoDriver *larg1, irr::video::E_RENDER_TARGET larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_RENDER_TARGET arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)(arg1)->setRenderTarget(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_6 (irr::video::IVideoDriver *larg1, irr::video::E_RENDER_TARGET larg2, int larg3) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_RENDER_TARGET arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->setRenderTarget(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_7 (irr::video::IVideoDriver *larg1, irr::video::E_RENDER_TARGET larg2) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_RENDER_TARGET arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->setRenderTarget(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_8 (irr::video::IVideoDriver *larg1, irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *larg2, int larg3, int larg4, irr::video::SColor *larg5) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::video::SColor arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = *larg5;
  try {
    result = (bool)(arg1)->setRenderTarget((irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > const &)*arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_9 (irr::video::IVideoDriver *larg1, irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *larg2, int larg3, int larg4) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)(arg1)->setRenderTarget((irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > const &)*arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_10 (irr::video::IVideoDriver *larg1, irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *larg2, int larg3) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->setRenderTarget((irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setRenderTarget__SWIG_11 (irr::video::IVideoDriver *larg1, irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *larg2) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->setRenderTarget((irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IVideoDriver_setViewPort (irr::video::IVideoDriver *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setViewPort((irr::core::rect< irr::s32 > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::rect< irr::s32 > *_wrap_IVideoDriver_getViewPort (irr::video::IVideoDriver *larg1) {
  irr::core::rect< irr::s32 > * lresult = (irr::core::rect< irr::s32 > *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::rect< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::rect< irr::s32 > *) &((irr::video::IVideoDriver const *)arg1)->getViewPort();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::rect< irr::s32 > *)0;
  }
}


EXPORT void _wrap_IVideoDriver_drawVertexPrimitiveList__SWIG_0 (irr::video::IVideoDriver *larg1, void *larg2, irr::u32 larg3, void *larg4, irr::u32 larg5, irr::video::E_VERTEX_TYPE larg6, irr::scene::E_PRIMITIVE_TYPE larg7, irr::video::E_INDEX_TYPE larg8) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  irr::scene::E_PRIMITIVE_TYPE arg7 ;
  irr::video::E_INDEX_TYPE arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    (arg1)->drawVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawVertexPrimitiveList__SWIG_1 (irr::video::IVideoDriver *larg1, void *larg2, irr::u32 larg3, void *larg4, irr::u32 larg5, irr::video::E_VERTEX_TYPE larg6, irr::scene::E_PRIMITIVE_TYPE larg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  irr::scene::E_PRIMITIVE_TYPE arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    (arg1)->drawVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawVertexPrimitiveList__SWIG_2 (irr::video::IVideoDriver *larg1, void *larg2, irr::u32 larg3, void *larg4, irr::u32 larg5, irr::video::E_VERTEX_TYPE larg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->drawVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawVertexPrimitiveList__SWIG_3 (irr::video::IVideoDriver *larg1, void *larg2, irr::u32 larg3, void *larg4, irr::u32 larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->drawVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DVertexPrimitiveList__SWIG_0 (irr::video::IVideoDriver *larg1, void *larg2, irr::u32 larg3, void *larg4, irr::u32 larg5, irr::video::E_VERTEX_TYPE larg6, irr::scene::E_PRIMITIVE_TYPE larg7, irr::video::E_INDEX_TYPE larg8) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  irr::scene::E_PRIMITIVE_TYPE arg7 ;
  irr::video::E_INDEX_TYPE arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    (arg1)->draw2DVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DVertexPrimitiveList__SWIG_1 (irr::video::IVideoDriver *larg1, void *larg2, irr::u32 larg3, void *larg4, irr::u32 larg5, irr::video::E_VERTEX_TYPE larg6, irr::scene::E_PRIMITIVE_TYPE larg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  irr::scene::E_PRIMITIVE_TYPE arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    (arg1)->draw2DVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DVertexPrimitiveList__SWIG_2 (irr::video::IVideoDriver *larg1, void *larg2, irr::u32 larg3, void *larg4, irr::u32 larg5, irr::video::E_VERTEX_TYPE larg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  irr::video::E_VERTEX_TYPE arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->draw2DVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DVertexPrimitiveList__SWIG_3 (irr::video::IVideoDriver *larg1, void *larg2, irr::u32 larg3, void *larg4, irr::u32 larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->draw2DVertexPrimitiveList((void const *)arg2,arg3,(void const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawIndexedTriangleList__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::S3DVertex *larg2, irr::u32 larg3, irr::u16 *larg4, irr::u32 larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertex *arg2 = (irr::video::S3DVertex *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->drawIndexedTriangleList((irr::video::S3DVertex const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawIndexedTriangleList__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::S3DVertex2TCoords *larg2, irr::u32 larg3, irr::u16 *larg4, irr::u32 larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertex2TCoords *arg2 = (irr::video::S3DVertex2TCoords *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->drawIndexedTriangleList((irr::video::S3DVertex2TCoords const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawIndexedTriangleList__SWIG_2 (irr::video::IVideoDriver *larg1, irr::video::S3DVertexTangents *larg2, irr::u32 larg3, irr::u16 *larg4, irr::u32 larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertexTangents *arg2 = (irr::video::S3DVertexTangents *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->drawIndexedTriangleList((irr::video::S3DVertexTangents const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawIndexedTriangleFan__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::S3DVertex *larg2, irr::u32 larg3, irr::u16 *larg4, irr::u32 larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertex *arg2 = (irr::video::S3DVertex *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->drawIndexedTriangleFan((irr::video::S3DVertex const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawIndexedTriangleFan__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::S3DVertex2TCoords *larg2, irr::u32 larg3, irr::u16 *larg4, irr::u32 larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertex2TCoords *arg2 = (irr::video::S3DVertex2TCoords *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->drawIndexedTriangleFan((irr::video::S3DVertex2TCoords const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawIndexedTriangleFan__SWIG_2 (irr::video::IVideoDriver *larg1, irr::video::S3DVertexTangents *larg2, irr::u32 larg3, irr::u16 *larg4, irr::u32 larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::S3DVertexTangents *arg2 = (irr::video::S3DVertexTangents *) 0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) 0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->drawIndexedTriangleFan((irr::video::S3DVertexTangents const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw3DLine__SWIG_0 (irr::video::IVideoDriver *larg1, irr::core::vector3df *larg2, irr::core::vector3df *larg3, irr::video::SColor *larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::video::SColor arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    (arg1)->draw3DLine((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw3DLine__SWIG_1 (irr::video::IVideoDriver *larg1, irr::core::vector3df *larg2, irr::core::vector3df *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->draw3DLine((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw3DTriangle__SWIG_0 (irr::video::IVideoDriver *larg1, irr::core::triangle3df *larg2, irr::video::SColor *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::triangle3df *arg2 = 0 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->draw3DTriangle((irr::core::triangle3df const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw3DTriangle__SWIG_1 (irr::video::IVideoDriver *larg1, irr::core::triangle3df *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::triangle3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->draw3DTriangle((irr::core::triangle3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw3DBox__SWIG_0 (irr::video::IVideoDriver *larg1, irr::core::aabbox3d< irr::f32 > *larg2, irr::video::SColor *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::aabbox3d< irr::f32 > *arg2 = 0 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->draw3DBox((irr::core::aabbox3d< irr::f32 > const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw3DBox__SWIG_1 (irr::video::IVideoDriver *larg1, irr::core::aabbox3d< irr::f32 > *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::aabbox3d< irr::f32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->draw3DBox((irr::core::aabbox3d< irr::f32 > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImage__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImage__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4, irr::core::rect< irr::s32 > *larg5, irr::video::SColor *larg6, int larg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg6 ;
  bool arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  arg7 = (bool)larg7;
  try {
    (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImage__SWIG_2 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4, irr::core::rect< irr::s32 > *larg5, irr::video::SColor *larg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  try {
    (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImage__SWIG_3 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4, irr::core::rect< irr::s32 > *larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImage__SWIG_4 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImageBatch__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *larg4, irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *larg5, irr::s32 larg6, irr::core::rect< irr::s32 > *larg7, irr::video::SColor *larg8, int larg9) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *arg5 = 0 ;
  irr::s32 arg6 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg8 ;
  bool arg9 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = (bool)larg9;
  try {
    (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > const &)*arg5,arg6,(irr::core::rect< irr::s32 > const *)arg7,arg8,arg9);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImageBatch__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *larg4, irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *larg5, irr::s32 larg6, irr::core::rect< irr::s32 > *larg7, irr::video::SColor *larg8) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *arg5 = 0 ;
  irr::s32 arg6 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  try {
    (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > const &)*arg5,arg6,(irr::core::rect< irr::s32 > const *)arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImageBatch__SWIG_2 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *larg4, irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *larg5, irr::s32 larg6, irr::core::rect< irr::s32 > *larg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *arg5 = 0 ;
  irr::s32 arg6 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > const &)*arg5,arg6,(irr::core::rect< irr::s32 > const *)arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImageBatch__SWIG_3 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *larg4, irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *larg5, irr::s32 larg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *arg5 = 0 ;
  irr::s32 arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > const &)*arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImageBatch__SWIG_4 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *larg4, irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > const &)*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImageBatch__SWIG_5 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *larg3, irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *larg4, irr::core::rect< irr::s32 > *larg5, irr::video::SColor *larg6, int larg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg6 ;
  bool arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  arg7 = (bool)larg7;
  try {
    (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImageBatch__SWIG_6 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *larg3, irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *larg4, irr::core::rect< irr::s32 > *larg5, irr::video::SColor *larg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  try {
    (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImageBatch__SWIG_7 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *larg3, irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *larg4, irr::core::rect< irr::s32 > *larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImageBatch__SWIG_8 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *larg3, irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *arg3 = 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw2DImageBatch((irr::video::ITexture const *)arg2,(irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > const &)*arg3,(irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImage__SWIG_5 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::rect< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4, irr::core::rect< irr::s32 > *larg5, irr::video::SColor *larg6, int larg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg6 = (irr::video::SColor *) (irr::video::SColor *)0 ;
  bool arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  try {
    (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,(irr::video::SColor const *)arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImage__SWIG_6 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::rect< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4, irr::core::rect< irr::s32 > *larg5, irr::video::SColor *larg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg6 = (irr::video::SColor *) (irr::video::SColor *)0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,(irr::video::SColor const *)arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImage__SWIG_7 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::rect< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4, irr::core::rect< irr::s32 > *larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DImage__SWIG_8 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::rect< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw2DImage((irr::video::ITexture const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DRectangle__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::SColor *larg2, irr::core::rect< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw2DRectangle(arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DRectangle__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::SColor *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    (arg1)->draw2DRectangle(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DRectangle__SWIG_2 (irr::video::IVideoDriver *larg1, irr::core::rect< irr::s32 > *larg2, irr::video::SColor *larg3, irr::video::SColor *larg4, irr::video::SColor *larg5, irr::video::SColor *larg6, irr::core::rect< irr::s32 > *larg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor arg6 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = *larg5;
  arg6 = *larg6;
  arg7 = larg7;
  try {
    (arg1)->draw2DRectangle((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5,arg6,(irr::core::rect< irr::s32 > const *)arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DRectangle__SWIG_3 (irr::video::IVideoDriver *larg1, irr::core::rect< irr::s32 > *larg2, irr::video::SColor *larg3, irr::video::SColor *larg4, irr::video::SColor *larg5, irr::video::SColor *larg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = *larg5;
  arg6 = *larg6;
  try {
    (arg1)->draw2DRectangle((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DRectangleOutline__SWIG_0 (irr::video::IVideoDriver *larg1, irr::core::recti *larg2, irr::video::SColor *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::recti *arg2 = 0 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->draw2DRectangleOutline((irr::core::recti const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DRectangleOutline__SWIG_1 (irr::video::IVideoDriver *larg1, irr::core::recti *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::recti *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->draw2DRectangleOutline((irr::core::recti const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DLine__SWIG_0 (irr::video::IVideoDriver *larg1, irr::core::vector2d< irr::s32 > *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::video::SColor *larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::video::SColor arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    (arg1)->draw2DLine((irr::core::vector2d< irr::s32 > const &)*arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DLine__SWIG_1 (irr::video::IVideoDriver *larg1, irr::core::vector2d< irr::s32 > *larg2, irr::core::vector2d< irr::s32 > *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->draw2DLine((irr::core::vector2d< irr::s32 > const &)*arg2,(irr::core::vector2d< irr::s32 > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawPixel (irr::video::IVideoDriver *larg1, irr::u32 larg2, irr::u32 larg3, irr::video::SColor *larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->drawPixel(arg2,arg3,(irr::video::SColor const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DPolygon__SWIG_0 (irr::video::IVideoDriver *larg1, irr::core::vector2d< irr::s32 > *larg2, irr::f32 larg3, irr::video::SColor *larg4, irr::s32 larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector2d< irr::s32 > arg2 ;
  irr::f32 arg3 ;
  irr::video::SColor arg4 ;
  irr::s32 arg5 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  try {
    (arg1)->draw2DPolygon(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DPolygon__SWIG_1 (irr::video::IVideoDriver *larg1, irr::core::vector2d< irr::s32 > *larg2, irr::f32 larg3, irr::video::SColor *larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector2d< irr::s32 > arg2 ;
  irr::f32 arg3 ;
  irr::video::SColor arg4 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    (arg1)->draw2DPolygon(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_draw2DPolygon__SWIG_2 (irr::video::IVideoDriver *larg1, irr::core::vector2d< irr::s32 > *larg2, irr::f32 larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::vector2d< irr::s32 > arg2 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    (arg1)->draw2DPolygon(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawStencilShadowVolume__SWIG_0 (irr::video::IVideoDriver *larg1, irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *larg2, int larg3, irr::u32 larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *arg2 = 0 ;
  bool arg3 ;
  irr::u32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    (arg1)->drawStencilShadowVolume((irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > const &)*arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawStencilShadowVolume__SWIG_1 (irr::video::IVideoDriver *larg1, irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *larg2, int larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->drawStencilShadowVolume((irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawStencilShadowVolume__SWIG_2 (irr::video::IVideoDriver *larg1, irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->drawStencilShadowVolume((irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawStencilShadow__SWIG_0 (irr::video::IVideoDriver *larg1, int larg2, irr::video::SColor *larg3, irr::video::SColor *larg4, irr::video::SColor *larg5, irr::video::SColor *larg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor arg6 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = *larg5;
  arg6 = *larg6;
  try {
    (arg1)->drawStencilShadow(arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawStencilShadow__SWIG_1 (irr::video::IVideoDriver *larg1, int larg2, irr::video::SColor *larg3, irr::video::SColor *larg4, irr::video::SColor *larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor arg5 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = *larg5;
  try {
    (arg1)->drawStencilShadow(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawStencilShadow__SWIG_2 (irr::video::IVideoDriver *larg1, int larg2, irr::video::SColor *larg3, irr::video::SColor *larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  try {
    (arg1)->drawStencilShadow(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawStencilShadow__SWIG_3 (irr::video::IVideoDriver *larg1, int larg2, irr::video::SColor *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = *larg3;
  try {
    (arg1)->drawStencilShadow(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawStencilShadow__SWIG_4 (irr::video::IVideoDriver *larg1, int larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->drawStencilShadow(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawStencilShadow__SWIG_5 (irr::video::IVideoDriver *larg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->drawStencilShadow();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawMeshBuffer (irr::video::IVideoDriver *larg1, irr::scene::IMeshBuffer *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->drawMeshBuffer((irr::scene::IMeshBuffer const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawMeshBufferNormals__SWIG_0 (irr::video::IVideoDriver *larg1, irr::scene::IMeshBuffer *larg2, irr::f32 larg3, irr::video::SColor *larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::f32 arg3 ;
  irr::video::SColor arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    (arg1)->drawMeshBufferNormals((irr::scene::IMeshBuffer const *)arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawMeshBufferNormals__SWIG_1 (irr::video::IVideoDriver *larg1, irr::scene::IMeshBuffer *larg2, irr::f32 larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->drawMeshBufferNormals((irr::scene::IMeshBuffer const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_drawMeshBufferNormals__SWIG_2 (irr::video::IVideoDriver *larg1, irr::scene::IMeshBuffer *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->drawMeshBufferNormals((irr::scene::IMeshBuffer const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_setFog__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::SColor *larg2, irr::video::E_FOG_TYPE larg3, irr::f32 larg4, irr::f32 larg5, irr::f32 larg6, int larg7, int larg8) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  bool arg7 ;
  bool arg8 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = (bool)larg8;
  try {
    (arg1)->setFog(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_setFog__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::SColor *larg2, irr::video::E_FOG_TYPE larg3, irr::f32 larg4, irr::f32 larg5, irr::f32 larg6, int larg7) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  bool arg7 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  try {
    (arg1)->setFog(arg2,arg3,arg4,arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_setFog__SWIG_2 (irr::video::IVideoDriver *larg1, irr::video::SColor *larg2, irr::video::E_FOG_TYPE larg3, irr::f32 larg4, irr::f32 larg5, irr::f32 larg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->setFog(arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_setFog__SWIG_3 (irr::video::IVideoDriver *larg1, irr::video::SColor *larg2, irr::video::E_FOG_TYPE larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->setFog(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_setFog__SWIG_4 (irr::video::IVideoDriver *larg1, irr::video::SColor *larg2, irr::video::E_FOG_TYPE larg3, irr::f32 larg4) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  irr::f32 arg4 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setFog(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_setFog__SWIG_5 (irr::video::IVideoDriver *larg1, irr::video::SColor *larg2, irr::video::E_FOG_TYPE larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::E_FOG_TYPE arg3 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    (arg1)->setFog(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_setFog__SWIG_6 (irr::video::IVideoDriver *larg1, irr::video::SColor *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setFog(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_setFog__SWIG_7 (irr::video::IVideoDriver *larg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setFog();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_getFog (irr::video::IVideoDriver *larg1, irr::video::SColor *larg2, irr::video::E_FOG_TYPE *larg3, irr::f32 *larg4, irr::f32 *larg5, irr::f32 *larg6, bool *larg7, bool *larg8) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::video::E_FOG_TYPE *arg3 = 0 ;
  irr::f32 *arg4 = 0 ;
  irr::f32 *arg5 = 0 ;
  irr::f32 *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool *arg8 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    (arg1)->getFog(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7,*arg8);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::ECOLOR_FORMAT _wrap_IVideoDriver_getColorFormat (irr::video::IVideoDriver *larg1) {
  irr::video::ECOLOR_FORMAT lresult = (irr::video::ECOLOR_FORMAT)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT result;
  
  arg1 = larg1;
  try {
    result = (irr::video::ECOLOR_FORMAT)((irr::video::IVideoDriver const *)arg1)->getColorFormat();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ECOLOR_FORMAT)0;
  }
}


EXPORT irr::core::dimension2d< irr::u32 > *_wrap_IVideoDriver_getScreenSize (irr::video::IVideoDriver *larg1) {
  irr::core::dimension2d< irr::u32 > * lresult = (irr::core::dimension2d< irr::u32 > *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::IVideoDriver const *)arg1)->getScreenSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::u32 > *)0;
  }
}


EXPORT irr::core::dimension2d< irr::u32 > *_wrap_IVideoDriver_getCurrentRenderTargetSize (irr::video::IVideoDriver *larg1) {
  irr::core::dimension2d< irr::u32 > * lresult = (irr::core::dimension2d< irr::u32 > *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::IVideoDriver const *)arg1)->getCurrentRenderTargetSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::u32 > *)0;
  }
}


EXPORT irr::s32 _wrap_IVideoDriver_getFPS (irr::video::IVideoDriver *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::video::IVideoDriver const *)arg1)->getFPS();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::u32 _wrap_IVideoDriver_getPrimitiveCountDrawn__SWIG_0 (irr::video::IVideoDriver *larg1, irr::u32 larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getPrimitiveCountDrawn(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IVideoDriver_getPrimitiveCountDrawn__SWIG_1 (irr::video::IVideoDriver *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getPrimitiveCountDrawn();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IVideoDriver_deleteAllDynamicLights (irr::video::IVideoDriver *larg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->deleteAllDynamicLights();
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IVideoDriver_addDynamicLight (irr::video::IVideoDriver *larg1, irr::video::SLight *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SLight *arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)(arg1)->addDynamicLight((irr::video::SLight const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::u32 _wrap_IVideoDriver_getMaximalDynamicLightAmount (irr::video::IVideoDriver *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getMaximalDynamicLightAmount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IVideoDriver_getDynamicLightCount (irr::video::IVideoDriver *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getDynamicLightCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::video::SLight *_wrap_IVideoDriver_getDynamicLight (irr::video::IVideoDriver *larg1, irr::u32 larg2) {
  irr::video::SLight * lresult = (irr::video::SLight *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::video::SLight *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::SLight *) &((irr::video::IVideoDriver const *)arg1)->getDynamicLight(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SLight *)0;
  }
}


EXPORT void _wrap_IVideoDriver_turnLightOn (irr::video::IVideoDriver *larg1, irr::s32 larg2, int larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::s32 arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->turnLightOn(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT wchar_t *_wrap_IVideoDriver_getName (irr::video::IVideoDriver *larg1) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (wchar_t *)((irr::video::IVideoDriver const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT void _wrap_IVideoDriver_addExternalImageLoader (irr::video::IVideoDriver *larg1, irr::video::IImageLoader *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImageLoader *arg2 = (irr::video::IImageLoader *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addExternalImageLoader(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_addExternalImageWriter (irr::video::IVideoDriver *larg1, irr::video::IImageWriter *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImageWriter *arg2 = (irr::video::IImageWriter *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addExternalImageWriter(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IVideoDriver_getMaximalPrimitiveCount (irr::video::IVideoDriver *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getMaximalPrimitiveCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IVideoDriver_setTextureCreationFlag__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::E_TEXTURE_CREATION_FLAG larg2, int larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_TEXTURE_CREATION_FLAG arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->setTextureCreationFlag(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_setTextureCreationFlag__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::E_TEXTURE_CREATION_FLAG larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_TEXTURE_CREATION_FLAG arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTextureCreationFlag(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IVideoDriver_getTextureCreationFlag (irr::video::IVideoDriver *larg1, irr::video::E_TEXTURE_CREATION_FLAG larg2) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_TEXTURE_CREATION_FLAG arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::IVideoDriver const *)arg1)->getTextureCreationFlag(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createImageFromFile__SWIG_0 (irr::video::IVideoDriver *larg1, irr::io::path *larg2) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::IImage *)(arg1)->createImageFromFile((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createImageFromFile__SWIG_1 (irr::video::IVideoDriver *larg1, irr::io::IReadFile *larg2) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::IImage *)(arg1)->createImageFromFile(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT int _wrap_IVideoDriver_writeImageToFile__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::IImage *larg2, irr::io::path *larg3, irr::u32 larg4) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::io::path *arg3 = 0 ;
  irr::u32 arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->writeImageToFile(arg2,(irr::io::path const &)*arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_writeImageToFile__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::IImage *larg2, irr::io::path *larg3) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->writeImageToFile(arg2,(irr::io::path const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_writeImageToFile__SWIG_2 (irr::video::IVideoDriver *larg1, irr::video::IImage *larg2, irr::io::IWriteFile *larg3, irr::u32 larg4) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::io::IWriteFile *arg3 = (irr::io::IWriteFile *) 0 ;
  irr::u32 arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->writeImageToFile(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_writeImageToFile__SWIG_3 (irr::video::IVideoDriver *larg1, irr::video::IImage *larg2, irr::io::IWriteFile *larg3) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::io::IWriteFile *arg3 = (irr::io::IWriteFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->writeImageToFile(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createImageFromData__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::ECOLOR_FORMAT larg2, irr::core::dimension2d< irr::u32 > *larg3, void *larg4, int larg5, int larg6) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  void *arg4 = (void *) 0 ;
  bool arg5 ;
  bool arg6 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::video::IImage *)(arg1)->createImageFromData(arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createImageFromData__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::ECOLOR_FORMAT larg2, irr::core::dimension2d< irr::u32 > *larg3, void *larg4, int larg5) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  void *arg4 = (void *) 0 ;
  bool arg5 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::video::IImage *)(arg1)->createImageFromData(arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createImageFromData__SWIG_2 (irr::video::IVideoDriver *larg1, irr::video::ECOLOR_FORMAT larg2, irr::core::dimension2d< irr::u32 > *larg3, void *larg4) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  void *arg4 = (void *) 0 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::video::IImage *)(arg1)->createImageFromData(arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createImage__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::ECOLOR_FORMAT larg2, irr::core::dimension2d< irr::u32 > *larg3) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::video::IImage *)(arg1)->createImage(arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createImage__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::ECOLOR_FORMAT larg2, irr::video::IImage *larg3) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::video::IImage *)(arg1)->createImage(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createImage__SWIG_2 (irr::video::IVideoDriver *larg1, irr::video::IImage *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::dimension2d< irr::u32 > *larg4) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::video::IImage *)(arg1)->createImage(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createImage__SWIG_3 (irr::video::IVideoDriver *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::dimension2d< irr::u32 > *larg4) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::video::IImage *)(arg1)->createImage(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT void _wrap_IVideoDriver_OnResize (irr::video::IVideoDriver *larg1, irr::core::dimension2d< irr::u32 > *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->OnResize((irr::core::dimension2d< irr::u32 > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IVideoDriver_addMaterialRenderer__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::IMaterialRenderer *larg2, irr::c8 *larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IMaterialRenderer *arg2 = (irr::video::IMaterialRenderer *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->addMaterialRenderer(arg2,(irr::c8 const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IVideoDriver_addMaterialRenderer__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::IMaterialRenderer *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IMaterialRenderer *arg2 = (irr::video::IMaterialRenderer *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)(arg1)->addMaterialRenderer(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::video::IMaterialRenderer *_wrap_IVideoDriver_getMaterialRenderer (irr::video::IVideoDriver *larg1, irr::u32 larg2) {
  irr::video::IMaterialRenderer * lresult = (irr::video::IMaterialRenderer *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::video::IMaterialRenderer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::IMaterialRenderer *)(arg1)->getMaterialRenderer(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IMaterialRenderer *)0;
  }
}


EXPORT irr::u32 _wrap_IVideoDriver_getMaterialRendererCount (irr::video::IVideoDriver *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::video::IVideoDriver const *)arg1)->getMaterialRendererCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::c8 *_wrap_IVideoDriver_getMaterialRendererName (irr::video::IVideoDriver *larg1, irr::u32 larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)((irr::video::IVideoDriver const *)arg1)->getMaterialRendererName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT void _wrap_IVideoDriver_setMaterialRendererName (irr::video::IVideoDriver *larg1, irr::s32 larg2, irr::c8 *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setMaterialRendererName(arg2,(irr::c8 const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::io::IAttributes *_wrap_IVideoDriver_createAttributesFromMaterial__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::SMaterial *larg2, irr::io::SAttributeReadWriteOptions *larg3) {
  irr::io::IAttributes * lresult = (irr::io::IAttributes *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  irr::io::IAttributes *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::io::IAttributes *)(arg1)->createAttributesFromMaterial((irr::video::SMaterial const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IAttributes *)0;
  }
}


EXPORT irr::io::IAttributes *_wrap_IVideoDriver_createAttributesFromMaterial__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::SMaterial *larg2) {
  irr::io::IAttributes * lresult = (irr::io::IAttributes *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::io::IAttributes *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IAttributes *)(arg1)->createAttributesFromMaterial((irr::video::SMaterial const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IAttributes *)0;
  }
}


EXPORT void _wrap_IVideoDriver_fillMaterialStructureFromAttributes (irr::video::IVideoDriver *larg1, irr::video::SMaterial *larg2, irr::io::IAttributes *larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::io::IAttributes *arg3 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->fillMaterialStructureFromAttributes(*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SExposedVideoData *_wrap_IVideoDriver_getExposedVideoData (irr::video::IVideoDriver *larg1) {
  irr::video::SExposedVideoData * lresult = (irr::video::SExposedVideoData *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SExposedVideoData *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SExposedVideoData *) &(arg1)->getExposedVideoData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SExposedVideoData *)0;
  }
}


EXPORT irr::video::E_DRIVER_TYPE _wrap_IVideoDriver_getDriverType (irr::video::IVideoDriver *larg1) {
  irr::video::E_DRIVER_TYPE lresult = (irr::video::E_DRIVER_TYPE)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::E_DRIVER_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::video::E_DRIVER_TYPE)((irr::video::IVideoDriver const *)arg1)->getDriverType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::E_DRIVER_TYPE)0;
  }
}


EXPORT irr::video::IGPUProgrammingServices *_wrap_IVideoDriver_getGPUProgrammingServices (irr::video::IVideoDriver *larg1) {
  irr::video::IGPUProgrammingServices * lresult = (irr::video::IGPUProgrammingServices *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IGPUProgrammingServices *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::IGPUProgrammingServices *)(arg1)->getGPUProgrammingServices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IGPUProgrammingServices *)0;
  }
}


EXPORT irr::scene::IMeshManipulator *_wrap_IVideoDriver_getMeshManipulator (irr::video::IVideoDriver *larg1) {
  irr::scene::IMeshManipulator * lresult = (irr::scene::IMeshManipulator *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::scene::IMeshManipulator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMeshManipulator *)(arg1)->getMeshManipulator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshManipulator *)0;
  }
}


EXPORT void _wrap_IVideoDriver_clearZBuffer (irr::video::IVideoDriver *larg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clearZBuffer();
    
  } catch (...) {
    
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createScreenShot__SWIG_0 (irr::video::IVideoDriver *larg1, irr::video::ECOLOR_FORMAT larg2, irr::video::E_RENDER_TARGET larg3) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::video::E_RENDER_TARGET arg3 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::video::IImage *)(arg1)->createScreenShot(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createScreenShot__SWIG_1 (irr::video::IVideoDriver *larg1, irr::video::ECOLOR_FORMAT larg2) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::ECOLOR_FORMAT arg2 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::IImage *)(arg1)->createScreenShot(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT irr::video::IImage *_wrap_IVideoDriver_createScreenShot__SWIG_2 (irr::video::IVideoDriver *larg1) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::IImage *)(arg1)->createScreenShot();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT irr::video::ITexture *_wrap_IVideoDriver_findTexture (irr::video::IVideoDriver *larg1, irr::io::path *larg2) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::ITexture *)(arg1)->findTexture((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT int _wrap_IVideoDriver_setClipPlane__SWIG_0 (irr::video::IVideoDriver *larg1, irr::u32 larg2, irr::core::plane3df *larg3, int larg4) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::core::plane3df *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)(arg1)->setClipPlane(arg2,(irr::core::plane3df const &)*arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IVideoDriver_setClipPlane__SWIG_1 (irr::video::IVideoDriver *larg1, irr::u32 larg2, irr::core::plane3df *larg3) {
  int lresult = (int)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  irr::core::plane3df *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->setClipPlane(arg2,(irr::core::plane3df const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IVideoDriver_enableClipPlane (irr::video::IVideoDriver *larg1, irr::u32 larg2, int larg3) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->enableClipPlane(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_setMinHardwareBufferVertexCount (irr::video::IVideoDriver *larg1, irr::u32 larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMinHardwareBufferVertexCount(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SOverrideMaterial *_wrap_IVideoDriver_getOverrideMaterial (irr::video::IVideoDriver *larg1) {
  irr::video::SOverrideMaterial * lresult = (irr::video::SOverrideMaterial *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SOverrideMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SOverrideMaterial *) &(arg1)->getOverrideMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SOverrideMaterial *)0;
  }
}


EXPORT irr::video::SMaterial *_wrap_IVideoDriver_getMaterial2D (irr::video::IVideoDriver *larg1) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterial *) &(arg1)->getMaterial2D();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT void _wrap_IVideoDriver_enableMaterial2D__SWIG_0 (irr::video::IVideoDriver *larg1, int larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->enableMaterial2D(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_enableMaterial2D__SWIG_1 (irr::video::IVideoDriver *larg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->enableMaterial2D();
    
  } catch (...) {
    
  }
}


EXPORT irr::core::stringc *_wrap_IVideoDriver_getVendorInfo (irr::video::IVideoDriver *larg1) {
  irr::core::stringc * lresult = (irr::core::stringc *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::stringc result;
  
  arg1 = larg1;
  try {
    result = (arg1)->getVendorInfo();
    lresult = new irr::core::stringc(result);
    return lresult;
  } catch (...) {
    return (irr::core::stringc *)0;
  }
}


EXPORT void _wrap_IVideoDriver_setAmbientLight (irr::video::IVideoDriver *larg1, irr::video::SColorf *larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAmbientLight((irr::video::SColorf const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVideoDriver_setAllowZWriteOnTransparent (irr::video::IVideoDriver *larg1, int larg2) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setAllowZWriteOnTransparent(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::dimension2du *_wrap_IVideoDriver_getMaxTextureSize (irr::video::IVideoDriver *larg1) {
  irr::core::dimension2du * lresult = (irr::core::dimension2du *)0 ;
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2du result;
  
  arg1 = larg1;
  try {
    result = ((irr::video::IVideoDriver const *)arg1)->getMaxTextureSize();
    lresult = new irr::core::dimension2du(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2du *)0;
  }
}


EXPORT void _wrap_IVideoDriver_convertColor (irr::video::IVideoDriver *larg1, void *larg2, irr::video::ECOLOR_FORMAT larg3, irr::s32 larg4, void *larg5, irr::video::ECOLOR_FORMAT larg6) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::video::ECOLOR_FORMAT arg3 ;
  irr::s32 arg4 ;
  void *arg5 = (void *) 0 ;
  irr::video::ECOLOR_FORMAT arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ((irr::video::IVideoDriver const *)arg1)->convertColor((void const *)arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IVideoDriver (irr::video::IVideoDriver *larg1) {
  irr::video::IVideoDriver *arg1 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::s16 _wrap_isEqual (irr::core::stringc *larg1, irr::u32 *larg2, irr::c8 **larg3, irr::u16 larg4) {
  irr::s16 lresult = (irr::s16)0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::u32 *arg2 = 0 ;
  irr::c8 **arg3 ;
  irr::u16 arg4 ;
  irr::s16 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s16)irr::scene::quake3::isEqual((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,*arg2,(char const *(*))arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s16)0;
  }
}


EXPORT irr::f32 _wrap_getAsFloat (irr::core::stringc *larg1, irr::u32 *larg2) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::u32 *arg2 = 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f32)irr::scene::quake3::getAsFloat((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::core::vector3df *_wrap_getAsVector3df (irr::core::stringc *larg1, irr::u32 *larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::u32 *arg2 = 0 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = irr::scene::quake3::getAsVector3df((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,*arg2);
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_getAsStringList (irr::scene::quake3::tStringList *larg1, irr::s32 larg2, irr::core::stringc *larg3, irr::u32 *larg4) {
  irr::scene::quake3::tStringList *arg1 = 0 ;
  irr::s32 arg2 ;
  irr::core::stringc *arg3 = 0 ;
  irr::u32 *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    irr::scene::quake3::getAsStringList(*arg1,arg2,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg3,*arg4);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_getCullingFunction (irr::core::stringc *larg1) {
  int lresult = (int)0 ;
  irr::core::stringc *arg1 = 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)irr::scene::quake3::getCullingFunction((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::u8 _wrap_getDepthFunction (irr::core::stringc *larg1) {
  irr::u8 lresult = (irr::u8)0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::u8 result;
  
  arg1 = larg1;
  try {
    result = (irr::u8)irr::scene::quake3::getDepthFunction((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u8)0;
  }
}


EXPORT void _wrap_getBlendFunc (irr::core::stringc *larg1, irr::scene::quake3::SBlendFunc *larg2) {
  irr::core::stringc *arg1 = 0 ;
  irr::scene::quake3::SBlendFunc *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    irr::scene::quake3::getBlendFunc((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_getMD3Normal (irr::u32 larg1, irr::u32 larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::u32 arg1 ;
  irr::u32 arg2 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = irr::scene::quake3::getMD3Normal(arg1,arg2);
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_getModifierFunc (irr::scene::quake3::SModifierFunction *larg1, irr::core::stringc *larg2, irr::u32 *larg3) {
  irr::scene::quake3::SModifierFunction *arg1 = 0 ;
  irr::core::stringc *arg2 = 0 ;
  irr::u32 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    irr::scene::quake3::getModifierFunc(*arg1,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_dumpVarGroup (irr::core::stringc *larg1, irr::scene::quake3::SVarGroup *larg2, irr::s32 larg3) {
  irr::core::stringc *arg1 = 0 ;
  irr::scene::quake3::SVarGroup *arg2 = (irr::scene::quake3::SVarGroup *) 0 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    irr::scene::quake3::dumpVarGroup(*arg1,(irr::scene::quake3::SVarGroup const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::stringc *_wrap_dumpShader__SWIG_0 (irr::core::stringc *larg1, irr::scene::quake3::IShader *larg2, int larg3) {
  irr::core::stringc * lresult = (irr::core::stringc *)0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::scene::quake3::IShader *arg2 = (irr::scene::quake3::IShader *) 0 ;
  bool arg3 ;
  irr::core::stringc *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (irr::core::stringc *) &irr::scene::quake3::dumpShader(*arg1,(irr::scene::quake3::IShader const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::stringc *)0;
  }
}


EXPORT irr::core::stringc *_wrap_dumpShader__SWIG_1 (irr::core::stringc *larg1, irr::scene::quake3::IShader *larg2) {
  irr::core::stringc * lresult = (irr::core::stringc *)0 ;
  irr::core::stringc *arg1 = 0 ;
  irr::scene::quake3::IShader *arg2 = (irr::scene::quake3::IShader *) 0 ;
  irr::core::stringc *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::stringc *) &irr::scene::quake3::dumpShader(*arg1,(irr::scene::quake3::IShader const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::stringc *)0;
  }
}


EXPORT void _wrap_getTextures (irr::scene::quake3::tTexArray *larg1, irr::core::stringc *larg2, irr::u32 *larg3, irr::io::IFileSystem *larg4, irr::video::IVideoDriver *larg5) {
  irr::scene::quake3::tTexArray *arg1 = 0 ;
  irr::core::stringc *arg2 = 0 ;
  irr::u32 *arg3 = 0 ;
  irr::io::IFileSystem *arg4 = (irr::io::IFileSystem *) 0 ;
  irr::video::IVideoDriver *arg5 = (irr::video::IVideoDriver *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    irr::scene::quake3::getTextures(*arg1,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,*arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::quake3::IShaderManager *_wrap_new_IShaderManager () {
  irr::scene::quake3::IShaderManager * lresult = (irr::scene::quake3::IShaderManager *)0 ;
  irr::scene::quake3::IShaderManager *result = 0 ;
  
  try {
    result = (irr::scene::quake3::IShaderManager *)new irr::scene::quake3::IShaderManager();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::quake3::IShaderManager *)0;
  }
}


EXPORT void _wrap_delete_IShaderManager (irr::scene::quake3::IShaderManager *larg1) {
  irr::scene::quake3::IShaderManager *arg1 = (irr::scene::quake3::IShaderManager *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::quaternion *_wrap_new_quaternion__SWIG_0 () {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *result = 0 ;
  
  try {
    result = (irr::core::quaternion *)new irr::core::quaternion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_new_quaternion__SWIG_1 (irr::f32 larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::core::quaternion *)new irr::core::quaternion(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_new_quaternion__SWIG_2 (irr::f32 larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::f32 arg1 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::quaternion *)new irr::core::quaternion(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_new_quaternion__SWIG_3 (irr::core::vector3df *larg1) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::quaternion *)new irr::core::quaternion((irr::core::vector3df const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_new_quaternion__SWIG_4 (irr::core::matrix4 *larg1) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::matrix4 *arg1 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::quaternion *)new irr::core::quaternion((irr::core::matrix4 const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT int _wrap_quaternion___eq__ (irr::core::quaternion *larg1, irr::core::quaternion *larg2) {
  int lresult = (int)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::quaternion const *)arg1)->operator ==((irr::core::quaternion const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_quaternion___ne__ (irr::core::quaternion *larg1, irr::core::quaternion *larg2) {
  int lresult = (int)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::quaternion const *)arg1)->operator !=((irr::core::quaternion const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion___assign____SWIG_0 (irr::core::quaternion *larg1, irr::core::quaternion *larg2) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::quaternion *) &(arg1)->operator =((irr::core::quaternion const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion___assign____SWIG_1 (irr::core::quaternion *larg1, irr::core::matrix4 *larg2) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::quaternion *) &(arg1)->operator =((irr::core::matrix4 const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion___add__ (irr::core::quaternion *larg1, irr::core::quaternion *larg2) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::core::quaternion result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::core::quaternion const *)arg1)->operator +((irr::core::quaternion const &)*arg2);
    lresult = new irr::core::quaternion(result);
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion___mul____SWIG_0 (irr::core::quaternion *larg1, irr::core::quaternion *larg2) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::core::quaternion result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::core::quaternion const *)arg1)->operator *((irr::core::quaternion const &)*arg2);
    lresult = new irr::core::quaternion(result);
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion___mul____SWIG_1 (irr::core::quaternion *larg1, irr::f32 larg2) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  irr::core::quaternion result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::core::quaternion const *)arg1)->operator *(arg2);
    lresult = new irr::core::quaternion(result);
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion___mul_assign____SWIG_0 (irr::core::quaternion *larg1, irr::f32 larg2) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::quaternion *) &(arg1)->operator *=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_quaternion___mul____SWIG_2 (irr::core::quaternion *larg1, irr::core::vector3df *larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::core::quaternion const *)arg1)->operator *((irr::core::vector3df const &)*arg2);
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion___mul_assign____SWIG_1 (irr::core::quaternion *larg1, irr::core::quaternion *larg2) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::quaternion *) &(arg1)->operator *=((irr::core::quaternion const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::f32 _wrap_quaternion_dotProduct (irr::core::quaternion *larg1, irr::core::quaternion *larg2) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f32)((irr::core::quaternion const *)arg1)->dotProduct((irr::core::quaternion const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_set__SWIG_0 (irr::core::quaternion *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::core::quaternion *) &(arg1)->set(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_set__SWIG_1 (irr::core::quaternion *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::core::quaternion *) &(arg1)->set(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_set__SWIG_2 (irr::core::quaternion *larg1, irr::core::vector3df *larg2) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::quaternion *) &(arg1)->set((irr::core::vector3df const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_set__SWIG_3 (irr::core::quaternion *larg1, irr::core::quaternion *larg2) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::quaternion *) &(arg1)->set((irr::core::quaternion const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT int _wrap_quaternion_equals__SWIG_0 (irr::core::quaternion *larg1, irr::core::quaternion *larg2, irr::f32 larg3) {
  int lresult = (int)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  irr::f32 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((irr::core::quaternion const *)arg1)->equals((irr::core::quaternion const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_quaternion_equals__SWIG_1 (irr::core::quaternion *larg1, irr::core::quaternion *larg2) {
  int lresult = (int)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::quaternion const *)arg1)->equals((irr::core::quaternion const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_normalize (irr::core::quaternion *larg1) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::quaternion *) &(arg1)->normalize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::matrix4 *_wrap_quaternion_getMatrix__SWIG_0 (irr::core::quaternion *larg1) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::matrix4 result;
  
  arg1 = larg1;
  try {
    result = ((irr::core::quaternion const *)arg1)->getMatrix();
    lresult = new irr::core::matrix4(result);
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT void _wrap_quaternion_getMatrix__SWIG_1 (irr::core::quaternion *larg1, irr::core::matrix4 *larg2, irr::core::vector3df *larg3) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::core::quaternion const *)arg1)->getMatrix(*arg2,(irr::core::vector3df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_quaternion_getMatrix__SWIG_2 (irr::core::quaternion *larg1, irr::core::matrix4 *larg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::core::quaternion const *)arg1)->getMatrix(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_quaternion_getMatrixCenter (irr::core::quaternion *larg1, irr::core::matrix4 *larg2, irr::core::vector3df *larg3, irr::core::vector3df *larg4) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((irr::core::quaternion const *)arg1)->getMatrixCenter(*arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_quaternion_getMatrix_transposed (irr::core::quaternion *larg1, irr::core::matrix4 *larg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::core::quaternion const *)arg1)->getMatrix_transposed(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_makeInverse (irr::core::quaternion *larg1) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::quaternion *) &(arg1)->makeInverse();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_lerp (irr::core::quaternion *larg1, irr::core::quaternion *larg2, irr::core::quaternion *larg3, irr::f32 larg4) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion arg2 ;
  irr::core::quaternion arg3 ;
  irr::f32 arg4 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  arg4 = larg4;
  try {
    result = (irr::core::quaternion *) &(arg1)->lerp(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_slerp__SWIG_0 (irr::core::quaternion *larg1, irr::core::quaternion *larg2, irr::core::quaternion *larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion arg2 ;
  irr::core::quaternion arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::core::quaternion *) &(arg1)->slerp(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_slerp__SWIG_1 (irr::core::quaternion *larg1, irr::core::quaternion *larg2, irr::core::quaternion *larg3, irr::f32 larg4) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion arg2 ;
  irr::core::quaternion arg3 ;
  irr::f32 arg4 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  arg4 = larg4;
  try {
    result = (irr::core::quaternion *) &(arg1)->slerp(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_fromAngleAxis (irr::core::quaternion *larg1, irr::f32 larg2, irr::core::vector3df *larg3) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::quaternion *) &(arg1)->fromAngleAxis(arg2,(irr::core::vector3df const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT void _wrap_quaternion_toAngleAxis (irr::core::quaternion *larg1, irr::f32 *larg2, irr::core::vector3df *larg3) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::core::quaternion const *)arg1)->toAngleAxis(*arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_quaternion_toEuler (irr::core::quaternion *larg1, irr::core::vector3df *larg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::core::quaternion const *)arg1)->toEuler(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_makeIdentity (irr::core::quaternion *larg1) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::quaternion *) &(arg1)->makeIdentity();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_quaternion_rotationFromTo (irr::core::quaternion *larg1, irr::core::vector3df *larg2, irr::core::vector3df *larg3) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::quaternion *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::quaternion *) &(arg1)->rotationFromTo((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT void _wrap_quaternion_X_set (irr::core::quaternion *larg1, irr::f32 larg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->X = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_quaternion_X_get (irr::core::quaternion *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->X);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_quaternion_Y_set (irr::core::quaternion *larg1, irr::f32 larg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Y = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_quaternion_Y_get (irr::core::quaternion *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->Y);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_quaternion_Z_set (irr::core::quaternion *larg1, irr::f32 larg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Z = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_quaternion_Z_get (irr::core::quaternion *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->Z);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_quaternion_W_set (irr::core::quaternion *larg1, irr::f32 larg2) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->W = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_quaternion_W_get (irr::core::quaternion *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32) ((arg1)->W);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_delete_quaternion (irr::core::quaternion *larg1) {
  irr::core::quaternion *arg1 = (irr::core::quaternion *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAnimatedMeshMD3_setInterpolationShift (irr::scene::IAnimatedMeshMD3 *larg1, irr::u32 larg2, irr::u32 larg3) {
  irr::scene::IAnimatedMeshMD3 *arg1 = (irr::scene::IAnimatedMeshMD3 *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setInterpolationShift(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SMD3QuaternionTagList *_wrap_IAnimatedMeshMD3_getTagList (irr::scene::IAnimatedMeshMD3 *larg1, irr::s32 larg2, irr::s32 larg3, irr::s32 larg4, irr::s32 larg5) {
  irr::scene::SMD3QuaternionTagList * lresult = (irr::scene::SMD3QuaternionTagList *)0 ;
  irr::scene::IAnimatedMeshMD3 *arg1 = (irr::scene::IAnimatedMeshMD3 *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::SMD3QuaternionTagList *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::SMD3QuaternionTagList *)(arg1)->getTagList(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SMD3QuaternionTagList *)0;
  }
}


EXPORT irr::scene::SMD3Mesh *_wrap_IAnimatedMeshMD3_getOriginalMesh (irr::scene::IAnimatedMeshMD3 *larg1) {
  irr::scene::SMD3Mesh * lresult = (irr::scene::SMD3Mesh *)0 ;
  irr::scene::IAnimatedMeshMD3 *arg1 = (irr::scene::IAnimatedMeshMD3 *) 0 ;
  irr::scene::SMD3Mesh *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SMD3Mesh *)(arg1)->getOriginalMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SMD3Mesh *)0;
  }
}


EXPORT void _wrap_delete_IAnimatedMeshMD3 (irr::scene::IAnimatedMeshMD3 *larg1) {
  irr::scene::IAnimatedMeshMD3 *arg1 = (irr::scene::IAnimatedMeshMD3 *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributeExchangingObject_serializeAttributes__SWIG_0 (irr::io::IAttributeExchangingObject *larg1, irr::io::IAttributes *larg2, irr::io::SAttributeReadWriteOptions *larg3) {
  irr::io::IAttributeExchangingObject *arg1 = (irr::io::IAttributeExchangingObject *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::io::IAttributeExchangingObject const *)arg1)->serializeAttributes(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributeExchangingObject_serializeAttributes__SWIG_1 (irr::io::IAttributeExchangingObject *larg1, irr::io::IAttributes *larg2) {
  irr::io::IAttributeExchangingObject *arg1 = (irr::io::IAttributeExchangingObject *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::io::IAttributeExchangingObject const *)arg1)->serializeAttributes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributeExchangingObject_deserializeAttributes__SWIG_0 (irr::io::IAttributeExchangingObject *larg1, irr::io::IAttributes *larg2, irr::io::SAttributeReadWriteOptions *larg3) {
  irr::io::IAttributeExchangingObject *arg1 = (irr::io::IAttributeExchangingObject *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->deserializeAttributes(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributeExchangingObject_deserializeAttributes__SWIG_1 (irr::io::IAttributeExchangingObject *larg1, irr::io::IAttributes *larg2) {
  irr::io::IAttributeExchangingObject *arg1 = (irr::io::IAttributeExchangingObject *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->deserializeAttributes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::io::IAttributeExchangingObject *_wrap_new_IAttributeExchangingObject () {
  irr::io::IAttributeExchangingObject * lresult = (irr::io::IAttributeExchangingObject *)0 ;
  irr::io::IAttributeExchangingObject *result = 0 ;
  
  try {
    result = (irr::io::IAttributeExchangingObject *)new irr::io::IAttributeExchangingObject();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IAttributeExchangingObject *)0;
  }
}


EXPORT void _wrap_delete_IAttributeExchangingObject (irr::io::IAttributeExchangingObject *larg1) {
  irr::io::IAttributeExchangingObject *arg1 = (irr::io::IAttributeExchangingObject *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_ILogger (irr::ILogger *larg1) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::ELOG_LEVEL _wrap_ILogger_getLogLevel (irr::ILogger *larg1) {
  irr::ELOG_LEVEL lresult = (irr::ELOG_LEVEL)0 ;
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::ELOG_LEVEL result;
  
  arg1 = larg1;
  try {
    result = (irr::ELOG_LEVEL)((irr::ILogger const *)arg1)->getLogLevel();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::ELOG_LEVEL)0;
  }
}


EXPORT void _wrap_ILogger_setLogLevel (irr::ILogger *larg1, irr::ELOG_LEVEL larg2) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::ELOG_LEVEL arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLogLevel(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILogger_log__SWIG_0 (irr::ILogger *larg1, irr::c8 *larg2, irr::ELOG_LEVEL larg3) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::ELOG_LEVEL arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->log((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILogger_log__SWIG_1 (irr::ILogger *larg1, irr::c8 *larg2) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->log((irr::c8 const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILogger_log__SWIG_2 (irr::ILogger *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::ELOG_LEVEL larg4) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::ELOG_LEVEL arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->log((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILogger_log__SWIG_3 (irr::ILogger *larg1, irr::c8 *larg2, irr::c8 *larg3) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->log((irr::c8 const *)arg2,(irr::c8 const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILogger_log__SWIG_4 (irr::ILogger *larg1, irr::c8 *larg2, wchar_t *larg3, irr::ELOG_LEVEL larg4) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::ELOG_LEVEL arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->log((irr::c8 const *)arg2,(wchar_t const *)arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILogger_log__SWIG_5 (irr::ILogger *larg1, irr::c8 *larg2, wchar_t *larg3) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->log((irr::c8 const *)arg2,(wchar_t const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILogger_log__SWIG_6 (irr::ILogger *larg1, wchar_t *larg2, wchar_t *larg3, irr::ELOG_LEVEL larg4) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::ELOG_LEVEL arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->log((wchar_t const *)arg2,(wchar_t const *)arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILogger_log__SWIG_7 (irr::ILogger *larg1, wchar_t *larg2, wchar_t *larg3) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->log((wchar_t const *)arg2,(wchar_t const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILogger_log__SWIG_8 (irr::ILogger *larg1, wchar_t *larg2, irr::ELOG_LEVEL larg3) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::ELOG_LEVEL arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->log((wchar_t const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILogger_log__SWIG_9 (irr::ILogger *larg1, wchar_t *larg2) {
  irr::ILogger *arg1 = (irr::ILogger *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->log((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IEventReceiver (irr::IEventReceiver *larg1) {
  irr::IEventReceiver *arg1 = (irr::IEventReceiver *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IEventReceiver_OnEvent (irr::IEventReceiver *larg1, irr::SEvent *larg2) {
  int lresult = (int)0 ;
  irr::IEventReceiver *arg1 = (irr::IEventReceiver *) 0 ;
  irr::SEvent *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->OnEvent((irr::SEvent const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimator_animateNode (irr::scene::ISceneNodeAnimator *larg1, irr::scene::ISceneNode *larg2, irr::u32 larg3) {
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->animateNode(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneNodeAnimator_createClone__SWIG_0 (irr::scene::ISceneNodeAnimator *larg1, irr::scene::ISceneNode *larg2, irr::scene::ISceneManager *larg3) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg3 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createClone(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneNodeAnimator_createClone__SWIG_1 (irr::scene::ISceneNodeAnimator *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createClone(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT int _wrap_ISceneNodeAnimator_isEventReceiverEnabled (irr::scene::ISceneNodeAnimator *larg1) {
  int lresult = (int)0 ;
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ISceneNodeAnimator const *)arg1)->isEventReceiverEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::scene::ESCENE_NODE_ANIMATOR_TYPE _wrap_ISceneNodeAnimator_getType (irr::scene::ISceneNodeAnimator *larg1) {
  irr::scene::ESCENE_NODE_ANIMATOR_TYPE lresult = (irr::scene::ESCENE_NODE_ANIMATOR_TYPE)0 ;
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  irr::scene::ESCENE_NODE_ANIMATOR_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ESCENE_NODE_ANIMATOR_TYPE)((irr::scene::ISceneNodeAnimator const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ESCENE_NODE_ANIMATOR_TYPE)0;
  }
}


EXPORT int _wrap_ISceneNodeAnimator_hasFinished (irr::scene::ISceneNodeAnimator *larg1) {
  int lresult = (int)0 ;
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ISceneNodeAnimator const *)arg1)->hasFinished();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_ISceneNodeAnimator (irr::scene::ISceneNodeAnimator *larg1) {
  irr::scene::ISceneNodeAnimator *arg1 = (irr::scene::ISceneNodeAnimator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_ITriangleSelector_getTriangleCount (irr::scene::ITriangleSelector *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::scene::ITriangleSelector const *)arg1)->getTriangleCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_ITriangleSelector_getTriangles__SWIG_0 (irr::scene::ITriangleSelector *larg1, irr::core::triangle3df *larg2, irr::s32 larg3, irr::s32 *larg4, irr::core::matrix4 *larg5) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  irr::core::matrix4 *arg5 = (irr::core::matrix4 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4,(irr::core::matrix4 const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITriangleSelector_getTriangles__SWIG_1 (irr::scene::ITriangleSelector *larg1, irr::core::triangle3df *larg2, irr::s32 larg3, irr::s32 *larg4) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITriangleSelector_getTriangles__SWIG_2 (irr::scene::ITriangleSelector *larg1, irr::core::triangle3df *larg2, irr::s32 larg3, irr::s32 *larg4, irr::core::aabbox3d< irr::f32 > *larg5, irr::core::matrix4 *larg6) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  irr::core::aabbox3d< irr::f32 > *arg5 = 0 ;
  irr::core::matrix4 *arg6 = (irr::core::matrix4 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4,(irr::core::aabbox3d< irr::f32 > const &)*arg5,(irr::core::matrix4 const *)arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITriangleSelector_getTriangles__SWIG_3 (irr::scene::ITriangleSelector *larg1, irr::core::triangle3df *larg2, irr::s32 larg3, irr::s32 *larg4, irr::core::aabbox3d< irr::f32 > *larg5) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  irr::core::aabbox3d< irr::f32 > *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4,(irr::core::aabbox3d< irr::f32 > const &)*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITriangleSelector_getTriangles__SWIG_4 (irr::scene::ITriangleSelector *larg1, irr::core::triangle3df *larg2, irr::s32 larg3, irr::s32 *larg4, irr::core::line3d< irr::f32 > *larg5, irr::core::matrix4 *larg6) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  irr::core::line3d< irr::f32 > *arg5 = 0 ;
  irr::core::matrix4 *arg6 = (irr::core::matrix4 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4,(irr::core::line3d< irr::f32 > const &)*arg5,(irr::core::matrix4 const *)arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITriangleSelector_getTriangles__SWIG_5 (irr::scene::ITriangleSelector *larg1, irr::core::triangle3df *larg2, irr::s32 larg3, irr::s32 *larg4, irr::core::line3d< irr::f32 > *larg5) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::triangle3df *arg2 = (irr::core::triangle3df *) 0 ;
  irr::s32 arg3 ;
  irr::s32 *arg4 = 0 ;
  irr::core::line3d< irr::f32 > *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    ((irr::scene::ITriangleSelector const *)arg1)->getTriangles(arg2,arg3,*arg4,(irr::core::line3d< irr::f32 > const &)*arg5);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ITriangleSelector_getSceneNodeForTriangle (irr::scene::ITriangleSelector *larg1, irr::u32 larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)((irr::scene::ITriangleSelector const *)arg1)->getSceneNodeForTriangle(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::u32 _wrap_ITriangleSelector_getSelectorCount (irr::scene::ITriangleSelector *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ITriangleSelector const *)arg1)->getSelectorCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ITriangleSelector_getSelector__SWIG_0 (irr::scene::ITriangleSelector *larg1, irr::u32 larg2) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ITriangleSelector *)(arg1)->getSelector(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ITriangleSelector_getSelector__SWIG_1 (irr::scene::ITriangleSelector *larg1, irr::u32 larg2) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ITriangleSelector *)((irr::scene::ITriangleSelector const *)arg1)->getSelector(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT void _wrap_delete_ITriangleSelector (irr::scene::ITriangleSelector *larg1) {
  irr::scene::ITriangleSelector *arg1 = (irr::scene::ITriangleSelector *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IAttributes_getAttributeCount (irr::io::IAttributes *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::io::IAttributes const *)arg1)->getAttributeCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::c8 *_wrap_IAttributes_getAttributeName (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)(arg1)->getAttributeName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT irr::io::E_ATTRIBUTE_TYPE _wrap_IAttributes_getAttributeType__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::io::E_ATTRIBUTE_TYPE lresult = (irr::io::E_ATTRIBUTE_TYPE)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::io::E_ATTRIBUTE_TYPE result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::E_ATTRIBUTE_TYPE)(arg1)->getAttributeType((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::E_ATTRIBUTE_TYPE)0;
  }
}


EXPORT irr::io::E_ATTRIBUTE_TYPE _wrap_IAttributes_getAttributeType__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::io::E_ATTRIBUTE_TYPE lresult = (irr::io::E_ATTRIBUTE_TYPE)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::io::E_ATTRIBUTE_TYPE result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::E_ATTRIBUTE_TYPE)(arg1)->getAttributeType(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::E_ATTRIBUTE_TYPE)0;
  }
}


EXPORT wchar_t *_wrap_IAttributes_getAttributeTypeString__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (wchar_t *)(arg1)->getAttributeTypeString((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT wchar_t *_wrap_IAttributes_getAttributeTypeString__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (wchar_t *)(arg1)->getAttributeTypeString(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT int _wrap_IAttributes_existsAttribute (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  int lresult = (int)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->existsAttribute((irr::c8 const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::s32 _wrap_IAttributes_findAttribute (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::io::IAttributes const *)arg1)->findAttribute((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IAttributes_clear (irr::io::IAttributes *larg1) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IAttributes_read__SWIG_0 (irr::io::IAttributes *larg1, irr::io::IXMLReader *larg2, int larg3, wchar_t *larg4) {
  int lresult = (int)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLReader *arg2 = (irr::io::IXMLReader *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->read(arg2,arg3,(wchar_t const *)arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IAttributes_read__SWIG_1 (irr::io::IAttributes *larg1, irr::io::IXMLReader *larg2, int larg3) {
  int lresult = (int)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLReader *arg2 = (irr::io::IXMLReader *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->read(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IAttributes_read__SWIG_2 (irr::io::IAttributes *larg1, irr::io::IXMLReader *larg2) {
  int lresult = (int)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLReader *arg2 = (irr::io::IXMLReader *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->read(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IAttributes_write__SWIG_0 (irr::io::IAttributes *larg1, irr::io::IXMLWriter *larg2, int larg3, wchar_t *larg4) {
  int lresult = (int)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->write(arg2,arg3,(wchar_t const *)arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IAttributes_write__SWIG_1 (irr::io::IAttributes *larg1, irr::io::IXMLWriter *larg2, int larg3) {
  int lresult = (int)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->write(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IAttributes_write__SWIG_2 (irr::io::IAttributes *larg1, irr::io::IXMLWriter *larg2) {
  int lresult = (int)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->write(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IAttributes_addInt (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::s32 larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addInt((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::s32 larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IAttributes_getAttributeAsInt__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::io::IAttributes const *)arg1)->getAttributeAsInt((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IAttributes_getAttributeAsInt__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::io::IAttributes const *)arg1)->getAttributeAsInt(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::s32 larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addFloat (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::f32 larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addFloat((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_2 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::f32 larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_IAttributes_getAttributeAsFloat__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f32)(arg1)->getAttributeAsFloat((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_IAttributes_getAttributeAsFloat__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f32)(arg1)->getAttributeAsFloat(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_3 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::f32 larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addString__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::c8 *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addString((irr::c8 const *)arg2,(irr::c8 const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_4 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::c8 *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,(irr::c8 const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::stringc *_wrap_IAttributes_getAttributeAsString__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::stringc * lresult = (irr::core::stringc *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::stringc result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsString((irr::c8 const *)arg2);
    lresult = new irr::core::stringc(result);
    return lresult;
  } catch (...) {
    return (irr::core::stringc *)0;
  }
}


EXPORT void _wrap_IAttributes_getAttributeAsString__SWIG_1 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::c8 *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->getAttributeAsString((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::stringc *_wrap_IAttributes_getAttributeAsString__SWIG_2 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::stringc * lresult = (irr::core::stringc *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::stringc result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsString(arg2);
    lresult = new irr::core::stringc(result);
    return lresult;
  } catch (...) {
    return (irr::core::stringc *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_5 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::c8 *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute(arg2,(irr::c8 const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addString__SWIG_1 (irr::io::IAttributes *larg1, irr::c8 *larg2, wchar_t *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addString((irr::c8 const *)arg2,(wchar_t const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_6 (irr::io::IAttributes *larg1, irr::c8 *larg2, wchar_t *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,(wchar_t const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::stringw *_wrap_IAttributes_getAttributeAsStringW__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::stringw * lresult = (irr::core::stringw *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::string< wchar_t,irr::core::irrAllocator< wchar_t > > > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsStringW((irr::c8 const *)arg2);
    lresult = new irr::core::stringw(result);
    return lresult;
  } catch (...) {
    return (irr::core::stringw *)0;
  }
}


EXPORT void _wrap_IAttributes_getAttributeAsStringW__SWIG_1 (irr::io::IAttributes *larg1, irr::c8 *larg2, wchar_t *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->getAttributeAsStringW((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::stringw *_wrap_IAttributes_getAttributeAsStringW__SWIG_2 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::stringw * lresult = (irr::core::stringw *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  SwigValueWrapper< irr::core::string< wchar_t,irr::core::irrAllocator< wchar_t > > > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsStringW(arg2);
    lresult = new irr::core::stringw(result);
    return lresult;
  } catch (...) {
    return (irr::core::stringw *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_7 (irr::io::IAttributes *larg1, irr::s32 larg2, wchar_t *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute(arg2,(wchar_t const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addBinary (irr::io::IAttributes *larg1, irr::c8 *larg2, void *larg3, irr::s32 larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *arg3 = (void *) 0 ;
  irr::s32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->addBinary((irr::c8 const *)arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_8 (irr::io::IAttributes *larg1, irr::c8 *larg2, void *larg3, irr::s32 larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *arg3 = (void *) 0 ;
  irr::s32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_getAttributeAsBinaryData__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2, void *larg3, irr::s32 larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *arg3 = (void *) 0 ;
  irr::s32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->getAttributeAsBinaryData((irr::c8 const *)arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_getAttributeAsBinaryData__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2, void *larg3, irr::s32 larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  void *arg3 = (void *) 0 ;
  irr::s32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->getAttributeAsBinaryData(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_9 (irr::io::IAttributes *larg1, irr::s32 larg2, void *larg3, irr::s32 larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  void *arg3 = (void *) 0 ;
  irr::s32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setAttribute(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addArray (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addArray((irr::c8 const *)arg2,(irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_10 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,(irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *_wrap_IAttributes_getAttributeAsArray__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > * lresult = (irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  SwigValueWrapper< irr::core::array< irr::core::string< wchar_t,irr::core::irrAllocator< wchar_t > >,irr::core::irrAllocator< irr::core::string< wchar_t,irr::core::irrAllocator< wchar_t > > > > > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsArray((irr::c8 const *)arg2);
    lresult = new irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > >(result);
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *)0;
  }
}


EXPORT irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *_wrap_IAttributes_getAttributeAsArray__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > * lresult = (irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  SwigValueWrapper< irr::core::array< irr::core::string< wchar_t,irr::core::irrAllocator< wchar_t > >,irr::core::irrAllocator< irr::core::string< wchar_t,irr::core::irrAllocator< wchar_t > > > > > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsArray(arg2);
    lresult = new irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > >(result);
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_11 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute(arg2,(irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addBool (irr::io::IAttributes *larg1, irr::c8 *larg2, int larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->addBool((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_12 (irr::io::IAttributes *larg1, irr::c8 *larg2, int larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IAttributes_getAttributeAsBool__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  int lresult = (int)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->getAttributeAsBool((irr::c8 const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IAttributes_getAttributeAsBool__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  int lresult = (int)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->getAttributeAsBool(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_13 (irr::io::IAttributes *larg1, irr::s32 larg2, int larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addEnum__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::c8 **larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 **arg4 = (irr::c8 **) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->addEnum((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addEnum__SWIG_1 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::s32 larg3, irr::c8 **larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 arg3 ;
  irr::c8 **arg4 = (irr::c8 **) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->addEnum((irr::c8 const *)arg2,arg3,(irr::c8 const *const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_14 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::c8 **larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 **arg4 = (irr::c8 **) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT irr::c8 *_wrap_IAttributes_getAttributeAsEnumeration__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)(arg1)->getAttributeAsEnumeration((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT irr::s32 _wrap_IAttributes_getAttributeAsEnumeration__SWIG_1 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::c8 **larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 **arg3 = (irr::c8 **) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->getAttributeAsEnumeration((irr::c8 const *)arg2,(irr::c8 const *const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IAttributes_getAttributeAsEnumeration__SWIG_2 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::c8 **larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::c8 **arg3 = (irr::c8 **) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->getAttributeAsEnumeration(arg2,(irr::c8 const *const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::c8 *_wrap_IAttributes_getAttributeAsEnumeration__SWIG_3 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)(arg1)->getAttributeAsEnumeration(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT void _wrap_IAttributes_getAttributeEnumerationLiteralsOfEnumeration__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::array< irr::core::stringc,irr::core::irrAllocator< irr::core::stringc > > *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::array< irr::core::stringc,irr::core::irrAllocator< irr::core::stringc > > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->getAttributeEnumerationLiteralsOfEnumeration((irr::c8 const *)arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_getAttributeEnumerationLiteralsOfEnumeration__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::array< irr::core::stringc,irr::core::irrAllocator< irr::core::stringc > > *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::stringc,irr::core::irrAllocator< irr::core::stringc > > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->getAttributeEnumerationLiteralsOfEnumeration(arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_15 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::c8 *larg3, irr::c8 **larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 **arg4 = (irr::c8 **) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setAttribute(arg2,(irr::c8 const *)arg3,(irr::c8 const *const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addColor (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::video::SColor *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addColor((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_16 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::video::SColor *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_IAttributes_getAttributeAsColor__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsColor((irr::c8 const *)arg2);
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::video::SColor *_wrap_IAttributes_getAttributeAsColor__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsColor(arg2);
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_17 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::video::SColor *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addColorf (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::video::SColorf *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColorf arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addColorf((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_18 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::video::SColorf *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColorf arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColorf *_wrap_IAttributes_getAttributeAsColorf__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::video::SColorf * lresult = (irr::video::SColorf *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::SColorf result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsColorf((irr::c8 const *)arg2);
    lresult = new irr::video::SColorf(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColorf *)0;
  }
}


EXPORT irr::video::SColorf *_wrap_IAttributes_getAttributeAsColorf__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::video::SColorf * lresult = (irr::video::SColorf *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::SColorf result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsColorf(arg2);
    lresult = new irr::video::SColorf(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColorf *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_19 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::video::SColorf *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::SColorf arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addVector3d (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::vector3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addVector3d((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_20 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::vector3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_IAttributes_getAttributeAsVector3d__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsVector3d((irr::c8 const *)arg2);
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_IAttributes_getAttributeAsVector3d__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsVector3d(arg2);
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_21 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::vector3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::vector3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addVector2d (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::vector2df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector2df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addVector2d((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_22 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::vector2df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector2df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector2df *_wrap_IAttributes_getAttributeAsVector2d__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::vector2df * lresult = (irr::core::vector2df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::vector2df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsVector2d((irr::c8 const *)arg2);
    lresult = new irr::core::vector2df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2df *)0;
  }
}


EXPORT irr::core::vector2df *_wrap_IAttributes_getAttributeAsVector2d__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::vector2df * lresult = (irr::core::vector2df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::vector2df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsVector2d(arg2);
    lresult = new irr::core::vector2df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2df *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_23 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::vector2df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::vector2df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addPosition2d (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::position2di *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::position2di arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addPosition2d((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_24 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::position2di *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::position2di arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::position2di *_wrap_IAttributes_getAttributeAsPosition2d__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::position2di * lresult = (irr::core::position2di *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::position2di result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsPosition2d((irr::c8 const *)arg2);
    lresult = new irr::core::position2di(result);
    return lresult;
  } catch (...) {
    return (irr::core::position2di *)0;
  }
}


EXPORT irr::core::position2di *_wrap_IAttributes_getAttributeAsPosition2d__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::position2di * lresult = (irr::core::position2di *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::position2di result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsPosition2d(arg2);
    lresult = new irr::core::position2di(result);
    return lresult;
  } catch (...) {
    return (irr::core::position2di *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_25 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::position2di *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::position2di arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addRect (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::rect< irr::s32 > arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addRect((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_26 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::rect< irr::s32 > arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::rect< irr::s32 > *_wrap_IAttributes_getAttributeAsRect__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::rect< irr::s32 > * lresult = (irr::core::rect< irr::s32 > *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsRect((irr::c8 const *)arg2);
    lresult = new irr::core::rect< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< irr::s32 > *)0;
  }
}


EXPORT irr::core::rect< irr::s32 > *_wrap_IAttributes_getAttributeAsRect__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::rect< irr::s32 > * lresult = (irr::core::rect< irr::s32 > *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::rect< irr::s32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsRect(arg2);
    lresult = new irr::core::rect< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< irr::s32 > *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_27 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::rect< irr::s32 > arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addDimension2d (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::dimension2d< irr::u32 > *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::dimension2d< irr::u32 > arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addDimension2d((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_28 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::dimension2d< irr::u32 > *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::dimension2d< irr::u32 > arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::dimension2d< irr::u32 > *_wrap_IAttributes_getAttributeAsDimension2d__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::dimension2d< irr::u32 > * lresult = (irr::core::dimension2d< irr::u32 > *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::dimension2d< irr::u32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsDimension2d((irr::c8 const *)arg2);
    lresult = new irr::core::dimension2d< irr::u32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::u32 > *)0;
  }
}


EXPORT irr::core::dimension2d< irr::u32 > *_wrap_IAttributes_getAttributeAsDimension2d__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::dimension2d< irr::u32 > * lresult = (irr::core::dimension2d< irr::u32 > *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::dimension2d< irr::u32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsDimension2d(arg2);
    lresult = new irr::core::dimension2d< irr::u32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::u32 > *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_29 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::dimension2d< irr::u32 > *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::dimension2d< irr::u32 > arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addMatrix (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::matrix4 *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addMatrix((irr::c8 const *)arg2,(irr::core::matrix4 const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_30 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::matrix4 *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,(irr::core::matrix4 const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::matrix4 *_wrap_IAttributes_getAttributeAsMatrix__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::matrix4 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsMatrix((irr::c8 const *)arg2);
    lresult = new irr::core::matrix4(result);
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT irr::core::matrix4 *_wrap_IAttributes_getAttributeAsMatrix__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::matrix4 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsMatrix(arg2);
    lresult = new irr::core::matrix4(result);
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_31 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::matrix4 *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute(arg2,(irr::core::matrix4 const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addQuaternion (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::quaternion *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::quaternion arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addQuaternion((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_32 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::quaternion *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::quaternion arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::quaternion *_wrap_IAttributes_getAttributeAsQuaternion__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::quaternion result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsQuaternion((irr::c8 const *)arg2);
    lresult = new irr::core::quaternion(result);
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT irr::core::quaternion *_wrap_IAttributes_getAttributeAsQuaternion__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::quaternion * lresult = (irr::core::quaternion *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::quaternion result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsQuaternion(arg2);
    lresult = new irr::core::quaternion(result);
    return lresult;
  } catch (...) {
    return (irr::core::quaternion *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_33 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::quaternion *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::quaternion arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addBox3d (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::aabbox3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::aabbox3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addBox3d((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_34 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::aabbox3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::aabbox3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::aabbox3df *_wrap_IAttributes_getAttributeAsBox3d__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::aabbox3df * lresult = (irr::core::aabbox3df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::aabbox3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsBox3d((irr::c8 const *)arg2);
    lresult = new irr::core::aabbox3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3df *)0;
  }
}


EXPORT irr::core::aabbox3df *_wrap_IAttributes_getAttributeAsBox3d__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::aabbox3df * lresult = (irr::core::aabbox3df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::aabbox3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsBox3d(arg2);
    lresult = new irr::core::aabbox3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3df *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_35 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::aabbox3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::aabbox3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addPlane3d (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::plane3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::plane3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addPlane3d((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_36 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::plane3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::plane3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::plane3df *_wrap_IAttributes_getAttributeAsPlane3d__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::plane3df * lresult = (irr::core::plane3df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::plane3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsPlane3d((irr::c8 const *)arg2);
    lresult = new irr::core::plane3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::plane3df *)0;
  }
}


EXPORT irr::core::plane3df *_wrap_IAttributes_getAttributeAsPlane3d__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::plane3df * lresult = (irr::core::plane3df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::plane3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsPlane3d(arg2);
    lresult = new irr::core::plane3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::plane3df *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_37 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::plane3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::plane3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addTriangle3d (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::triangle3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::triangle3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addTriangle3d((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_38 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::triangle3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::triangle3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::triangle3df *_wrap_IAttributes_getAttributeAsTriangle3d__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::triangle3df * lresult = (irr::core::triangle3df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::triangle3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsTriangle3d((irr::c8 const *)arg2);
    lresult = new irr::core::triangle3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::triangle3df *)0;
  }
}


EXPORT irr::core::triangle3df *_wrap_IAttributes_getAttributeAsTriangle3d__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::triangle3df * lresult = (irr::core::triangle3df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::triangle3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsTriangle3d(arg2);
    lresult = new irr::core::triangle3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::triangle3df *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_39 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::triangle3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::triangle3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addLine2d (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::line2df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::line2df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addLine2d((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_40 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::line2df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::line2df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::line2df *_wrap_IAttributes_getAttributeAsLine2d__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::line2df * lresult = (irr::core::line2df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::line2df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsLine2d((irr::c8 const *)arg2);
    lresult = new irr::core::line2df(result);
    return lresult;
  } catch (...) {
    return (irr::core::line2df *)0;
  }
}


EXPORT irr::core::line2df *_wrap_IAttributes_getAttributeAsLine2d__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::line2df * lresult = (irr::core::line2df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::line2df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsLine2d(arg2);
    lresult = new irr::core::line2df(result);
    return lresult;
  } catch (...) {
    return (irr::core::line2df *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_41 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::line2df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::line2df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addLine3d (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::line3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::line3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->addLine3d((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_42 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::core::line3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::line3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::line3df *_wrap_IAttributes_getAttributeAsLine3d__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::core::line3df * lresult = (irr::core::line3df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::core::line3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsLine3d((irr::c8 const *)arg2);
    lresult = new irr::core::line3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::line3df *)0;
  }
}


EXPORT irr::core::line3df *_wrap_IAttributes_getAttributeAsLine3d__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::core::line3df * lresult = (irr::core::line3df *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::line3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getAttributeAsLine3d(arg2);
    lresult = new irr::core::line3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::line3df *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_43 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::core::line3df *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::core::line3df arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addTexture__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::video::ITexture *larg3, irr::io::path *larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::io::path *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->addTexture((irr::c8 const *)arg2,arg3,(irr::io::path const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addTexture__SWIG_1 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::video::ITexture *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addTexture((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_44 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::video::ITexture *larg3, irr::io::path *larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::io::path *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3,(irr::io::path const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_45 (irr::io::IAttributes *larg1, irr::c8 *larg2, irr::video::ITexture *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::ITexture *_wrap_IAttributes_getAttributeAsTexture__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::ITexture *)(arg1)->getAttributeAsTexture((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT irr::video::ITexture *_wrap_IAttributes_getAttributeAsTexture__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::ITexture *)(arg1)->getAttributeAsTexture(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_46 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::video::ITexture *larg3, irr::io::path *larg4) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::io::path *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setAttribute(arg2,arg3,(irr::io::path const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_47 (irr::io::IAttributes *larg1, irr::s32 larg2, irr::video::ITexture *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_addUserPointer (irr::io::IAttributes *larg1, irr::c8 *larg2, void *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addUserPointer((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_48 (irr::io::IAttributes *larg1, irr::c8 *larg2, void *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute((irr::c8 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_IAttributes_getAttributeAsUserPointer__SWIG_0 (irr::io::IAttributes *larg1, irr::c8 *larg2) {
  void * lresult = (void *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (void *)(arg1)->getAttributeAsUserPointer((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void *_wrap_IAttributes_getAttributeAsUserPointer__SWIG_1 (irr::io::IAttributes *larg1, irr::s32 larg2) {
  void * lresult = (void *)0 ;
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  void *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (void *)(arg1)->getAttributeAsUserPointer(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_IAttributes_setAttribute__SWIG_49 (irr::io::IAttributes *larg1, irr::s32 larg2, void *larg3) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  irr::s32 arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setAttribute(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IAttributes (irr::io::IAttributes *larg1) {
  irr::io::IAttributes *arg1 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_ISceneNode (irr::scene::ISceneNode *larg1) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_OnRegisterSceneNode (irr::scene::ISceneNode *larg1) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->OnRegisterSceneNode();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_OnAnimate (irr::scene::ISceneNode *larg1, irr::u32 larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->OnAnimate(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_render (irr::scene::ISceneNode *larg1) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->render();
    
  } catch (...) {
    
  }
}


EXPORT irr::c8 *_wrap_ISceneNode_getName (irr::scene::ISceneNode *larg1) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::c8 *)((irr::scene::ISceneNode const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT void _wrap_ISceneNode_setName__SWIG_0 (irr::scene::ISceneNode *larg1, irr::c8 *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setName((irr::c8 const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_setName__SWIG_1 (irr::scene::ISceneNode *larg1, irr::core::stringc *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::stringc *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setName((irr::core::stringc const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::aabbox3d< irr::f32 > *_wrap_ISceneNode_getBoundingBox (irr::scene::ISceneNode *larg1) {
  irr::core::aabbox3d< irr::f32 > * lresult = (irr::core::aabbox3d< irr::f32 > *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::aabbox3d< irr::f32 > *) &((irr::scene::ISceneNode const *)arg1)->getBoundingBox();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3d< irr::f32 > *)0;
  }
}


EXPORT irr::core::aabbox3d< irr::f32 > const *_wrap_ISceneNode_getTransformedBoundingBox (irr::scene::ISceneNode *larg1) {
  irr::core::aabbox3d< irr::f32 > const * lresult = (irr::core::aabbox3d< irr::f32 > const *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::aabbox3d< irr::f32 > result;
  
  arg1 = larg1;
  try {
    result = ((irr::scene::ISceneNode const *)arg1)->getTransformedBoundingBox();
    lresult = new irr::core::aabbox3d< irr::f32 > const(result);
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3d< irr::f32 > const *)0;
  }
}


EXPORT irr::core::matrix4 *_wrap_ISceneNode_getAbsoluteTransformation (irr::scene::ISceneNode *larg1) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::matrix4 *) &((irr::scene::ISceneNode const *)arg1)->getAbsoluteTransformation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT irr::core::matrix4 *_wrap_ISceneNode_getRelativeTransformation (irr::scene::ISceneNode *larg1) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::matrix4 result;
  
  arg1 = larg1;
  try {
    result = ((irr::scene::ISceneNode const *)arg1)->getRelativeTransformation();
    lresult = new irr::core::matrix4(result);
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT int _wrap_ISceneNode_isVisible (irr::scene::ISceneNode *larg1) {
  int lresult = (int)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ISceneNode const *)arg1)->isVisible();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneNode_isTrulyVisible (irr::scene::ISceneNode *larg1) {
  int lresult = (int)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ISceneNode const *)arg1)->isTrulyVisible();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ISceneNode_setVisible (irr::scene::ISceneNode *larg1, int larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setVisible(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_ISceneNode_getID (irr::scene::ISceneNode *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::scene::ISceneNode const *)arg1)->getID();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_ISceneNode_setID (irr::scene::ISceneNode *larg1, irr::s32 larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setID(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_addChild (irr::scene::ISceneNode *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addChild(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ISceneNode_removeChild (irr::scene::ISceneNode *larg1, irr::scene::ISceneNode *larg2) {
  int lresult = (int)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->removeChild(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ISceneNode_removeAll (irr::scene::ISceneNode *larg1) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->removeAll();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_remove (irr::scene::ISceneNode *larg1) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->remove();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_addAnimator (irr::scene::ISceneNode *larg1, irr::scene::ISceneNodeAnimator *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *arg2 = (irr::scene::ISceneNodeAnimator *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addAnimator(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::list< irr::scene::ISceneNodeAnimator * > *_wrap_ISceneNode_getAnimators (irr::scene::ISceneNode *larg1) {
  irr::core::list< irr::scene::ISceneNodeAnimator * > * lresult = (irr::core::list< irr::scene::ISceneNodeAnimator * > *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) &((irr::scene::ISceneNode const *)arg1)->getAnimators();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::list< irr::scene::ISceneNodeAnimator * > *)0;
  }
}


EXPORT void _wrap_ISceneNode_removeAnimator (irr::scene::ISceneNode *larg1, irr::scene::ISceneNodeAnimator *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *arg2 = (irr::scene::ISceneNodeAnimator *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeAnimator(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_removeAnimators (irr::scene::ISceneNode *larg1) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->removeAnimators();
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SMaterial *_wrap_ISceneNode_getMaterial (irr::scene::ISceneNode *larg1, irr::u32 larg2) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::SMaterial *) &(arg1)->getMaterial(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT irr::u32 _wrap_ISceneNode_getMaterialCount (irr::scene::ISceneNode *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ISceneNode const *)arg1)->getMaterialCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_ISceneNode_setMaterialFlag (irr::scene::ISceneNode *larg1, irr::video::E_MATERIAL_FLAG larg2, int larg3) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::video::E_MATERIAL_FLAG arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->setMaterialFlag(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_setMaterialTexture (irr::scene::ISceneNode *larg1, irr::u32 larg2, irr::video::ITexture *larg3) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setMaterialTexture(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_setMaterialType (irr::scene::ISceneNode *larg1, irr::video::E_MATERIAL_TYPE larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::video::E_MATERIAL_TYPE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaterialType(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneNode_getScale (irr::scene::ISceneNode *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::ISceneNode const *)arg1)->getScale();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_ISceneNode_setScale (irr::scene::ISceneNode *larg1, irr::core::vector3df *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setScale((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneNode_getRotation (irr::scene::ISceneNode *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::ISceneNode const *)arg1)->getRotation();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_ISceneNode_setRotation (irr::scene::ISceneNode *larg1, irr::core::vector3df *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRotation((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneNode_getPosition (irr::scene::ISceneNode *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::ISceneNode const *)arg1)->getPosition();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_ISceneNode_setPosition (irr::scene::ISceneNode *larg1, irr::core::vector3df *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPosition((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneNode_getAbsolutePosition (irr::scene::ISceneNode *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  try {
    result = ((irr::scene::ISceneNode const *)arg1)->getAbsolutePosition();
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_ISceneNode_setAutomaticCulling (irr::scene::ISceneNode *larg1, irr::u32 larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAutomaticCulling(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_ISceneNode_getAutomaticCulling (irr::scene::ISceneNode *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ISceneNode const *)arg1)->getAutomaticCulling();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_ISceneNode_setDebugDataVisible (irr::scene::ISceneNode *larg1, irr::u32 larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDebugDataVisible(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_ISceneNode_isDebugDataVisible (irr::scene::ISceneNode *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ISceneNode const *)arg1)->isDebugDataVisible();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_ISceneNode_setIsDebugObject (irr::scene::ISceneNode *larg1, int larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setIsDebugObject(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ISceneNode_isDebugObject (irr::scene::ISceneNode *larg1) {
  int lresult = (int)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ISceneNode const *)arg1)->isDebugObject();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::list< irr::scene::ISceneNode * > *_wrap_ISceneNode_getChildren (irr::scene::ISceneNode *larg1) {
  irr::core::list< irr::scene::ISceneNode * > * lresult = (irr::core::list< irr::scene::ISceneNode * > *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::core::list< irr::scene::ISceneNode * > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::list< irr::scene::ISceneNode * > *) &((irr::scene::ISceneNode const *)arg1)->getChildren();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::list< irr::scene::ISceneNode * > *)0;
  }
}


EXPORT void _wrap_ISceneNode_setParent (irr::scene::ISceneNode *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setParent(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ISceneNode_getTriangleSelector (irr::scene::ISceneNode *larg1) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ITriangleSelector *)((irr::scene::ISceneNode const *)arg1)->getTriangleSelector();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT void _wrap_ISceneNode_setTriangleSelector (irr::scene::ISceneNode *larg1, irr::scene::ITriangleSelector *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTriangleSelector(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_updateAbsolutePosition (irr::scene::ISceneNode *larg1) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->updateAbsolutePosition();
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneNode_getParent (irr::scene::ISceneNode *larg1) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneNode *)((irr::scene::ISceneNode const *)arg1)->getParent();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ESCENE_NODE_TYPE _wrap_ISceneNode_getType (irr::scene::ISceneNode *larg1) {
  irr::scene::ESCENE_NODE_TYPE lresult = (irr::scene::ESCENE_NODE_TYPE)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ESCENE_NODE_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ESCENE_NODE_TYPE)((irr::scene::ISceneNode const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ESCENE_NODE_TYPE)0;
  }
}


EXPORT void _wrap_ISceneNode_serializeAttributes__SWIG_0 (irr::scene::ISceneNode *larg1, irr::io::IAttributes *larg2, irr::io::SAttributeReadWriteOptions *larg3) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::ISceneNode const *)arg1)->serializeAttributes(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_serializeAttributes__SWIG_1 (irr::scene::ISceneNode *larg1, irr::io::IAttributes *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::ISceneNode const *)arg1)->serializeAttributes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_deserializeAttributes__SWIG_0 (irr::scene::ISceneNode *larg1, irr::io::IAttributes *larg2, irr::io::SAttributeReadWriteOptions *larg3) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->deserializeAttributes(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNode_deserializeAttributes__SWIG_1 (irr::scene::ISceneNode *larg1, irr::io::IAttributes *larg2) {
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->deserializeAttributes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneNode_clone__SWIG_0 (irr::scene::ISceneNode *larg1, irr::scene::ISceneNode *larg2, irr::scene::ISceneManager *larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg3 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->clone(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneNode_clone__SWIG_1 (irr::scene::ISceneNode *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->clone(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneNode_clone__SWIG_2 (irr::scene::ISceneNode *larg1) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->clone();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneManager *_wrap_ISceneNode_getSceneManager (irr::scene::ISceneNode *larg1) {
  irr::scene::ISceneManager * lresult = (irr::scene::ISceneManager *)0 ;
  irr::scene::ISceneNode *arg1 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneManager *)((irr::scene::ISceneNode const *)arg1)->getSceneManager();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneManager *)0;
  }
}


EXPORT irr::c8 *_wrap_IBoneSceneNode_getBoneName (irr::scene::IBoneSceneNode *larg1) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::c8 *)((irr::scene::IBoneSceneNode const *)arg1)->getBoneName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT irr::u32 _wrap_IBoneSceneNode_getBoneIndex (irr::scene::IBoneSceneNode *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IBoneSceneNode const *)arg1)->getBoneIndex();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT int _wrap_IBoneSceneNode_setAnimationMode (irr::scene::IBoneSceneNode *larg1, irr::scene::E_BONE_ANIMATION_MODE larg2) {
  int lresult = (int)0 ;
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::scene::E_BONE_ANIMATION_MODE arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->setAnimationMode(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::scene::E_BONE_ANIMATION_MODE _wrap_IBoneSceneNode_getAnimationMode (irr::scene::IBoneSceneNode *larg1) {
  irr::scene::E_BONE_ANIMATION_MODE lresult = (irr::scene::E_BONE_ANIMATION_MODE)0 ;
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::scene::E_BONE_ANIMATION_MODE result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_BONE_ANIMATION_MODE)((irr::scene::IBoneSceneNode const *)arg1)->getAnimationMode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_BONE_ANIMATION_MODE)0;
  }
}


EXPORT void _wrap_IBoneSceneNode_setSkinningSpace (irr::scene::IBoneSceneNode *larg1, irr::scene::E_BONE_SKINNING_SPACE larg2) {
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::scene::E_BONE_SKINNING_SPACE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSkinningSpace(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_BONE_SKINNING_SPACE _wrap_IBoneSceneNode_getSkinningSpace (irr::scene::IBoneSceneNode *larg1) {
  irr::scene::E_BONE_SKINNING_SPACE lresult = (irr::scene::E_BONE_SKINNING_SPACE)0 ;
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::scene::E_BONE_SKINNING_SPACE result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_BONE_SKINNING_SPACE)((irr::scene::IBoneSceneNode const *)arg1)->getSkinningSpace();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_BONE_SKINNING_SPACE)0;
  }
}


EXPORT void _wrap_IBoneSceneNode_updateAbsolutePositionOfAllChildren (irr::scene::IBoneSceneNode *larg1) {
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->updateAbsolutePositionOfAllChildren();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IBoneSceneNode_positionHint_set (irr::scene::IBoneSceneNode *larg1, irr::s32 larg2) {
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->positionHint = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IBoneSceneNode_positionHint_get (irr::scene::IBoneSceneNode *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32) ((arg1)->positionHint);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IBoneSceneNode_scaleHint_set (irr::scene::IBoneSceneNode *larg1, irr::s32 larg2) {
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->scaleHint = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IBoneSceneNode_scaleHint_get (irr::scene::IBoneSceneNode *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32) ((arg1)->scaleHint);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IBoneSceneNode_rotationHint_set (irr::scene::IBoneSceneNode *larg1, irr::s32 larg2) {
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->rotationHint = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IBoneSceneNode_rotationHint_get (irr::scene::IBoneSceneNode *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32) ((arg1)->rotationHint);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_delete_IBoneSceneNode (irr::scene::IBoneSceneNode *larg1) {
  irr::scene::IBoneSceneNode *arg1 = (irr::scene::IBoneSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAnimationEndCallBack_OnAnimationEnd (irr::scene::IAnimationEndCallBack *larg1, irr::scene::IAnimatedMeshSceneNode *larg2) {
  irr::scene::IAnimationEndCallBack *arg1 = (irr::scene::IAnimationEndCallBack *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->OnAnimationEnd(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IAnimationEndCallBack (irr::scene::IAnimationEndCallBack *larg1) {
  irr::scene::IAnimationEndCallBack *arg1 = (irr::scene::IAnimationEndCallBack *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IAnimatedMeshSceneNode (irr::scene::IAnimatedMeshSceneNode *larg1) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_setCurrentFrame (irr::scene::IAnimatedMeshSceneNode *larg1, irr::f32 larg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCurrentFrame(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IAnimatedMeshSceneNode_setFrameLoop (irr::scene::IAnimatedMeshSceneNode *larg1, irr::s32 larg2, irr::s32 larg3) {
  int lresult = (int)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->setFrameLoop(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_setAnimationSpeed (irr::scene::IAnimatedMeshSceneNode *larg1, irr::f32 larg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAnimationSpeed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_IAnimatedMeshSceneNode_getAnimationSpeed (irr::scene::IAnimatedMeshSceneNode *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getAnimationSpeed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::scene::IShadowVolumeSceneNode *_wrap_IAnimatedMeshSceneNode_addShadowVolumeSceneNode__SWIG_0 (irr::scene::IAnimatedMeshSceneNode *larg1, irr::scene::IMesh *larg2, irr::s32 larg3, int larg4, irr::f32 larg5) {
  irr::scene::IShadowVolumeSceneNode * lresult = (irr::scene::IShadowVolumeSceneNode *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::f32 arg5 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IShadowVolumeSceneNode *)0;
  }
}


EXPORT irr::scene::IShadowVolumeSceneNode *_wrap_IAnimatedMeshSceneNode_addShadowVolumeSceneNode__SWIG_1 (irr::scene::IAnimatedMeshSceneNode *larg1, irr::scene::IMesh *larg2, irr::s32 larg3, int larg4) {
  irr::scene::IShadowVolumeSceneNode * lresult = (irr::scene::IShadowVolumeSceneNode *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IShadowVolumeSceneNode *)0;
  }
}


EXPORT irr::scene::IShadowVolumeSceneNode *_wrap_IAnimatedMeshSceneNode_addShadowVolumeSceneNode__SWIG_2 (irr::scene::IAnimatedMeshSceneNode *larg1, irr::scene::IMesh *larg2, irr::s32 larg3) {
  irr::scene::IShadowVolumeSceneNode * lresult = (irr::scene::IShadowVolumeSceneNode *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IShadowVolumeSceneNode *)0;
  }
}


EXPORT irr::scene::IShadowVolumeSceneNode *_wrap_IAnimatedMeshSceneNode_addShadowVolumeSceneNode__SWIG_3 (irr::scene::IAnimatedMeshSceneNode *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IShadowVolumeSceneNode * lresult = (irr::scene::IShadowVolumeSceneNode *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IShadowVolumeSceneNode *)0;
  }
}


EXPORT irr::scene::IShadowVolumeSceneNode *_wrap_IAnimatedMeshSceneNode_addShadowVolumeSceneNode__SWIG_4 (irr::scene::IAnimatedMeshSceneNode *larg1) {
  irr::scene::IShadowVolumeSceneNode * lresult = (irr::scene::IShadowVolumeSceneNode *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IShadowVolumeSceneNode *)0;
  }
}


EXPORT irr::scene::IBoneSceneNode *_wrap_IAnimatedMeshSceneNode_getJointNode__SWIG_0 (irr::scene::IAnimatedMeshSceneNode *larg1, irr::c8 *larg2) {
  irr::scene::IBoneSceneNode * lresult = (irr::scene::IBoneSceneNode *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::IBoneSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IBoneSceneNode *)(arg1)->getJointNode((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBoneSceneNode *)0;
  }
}


EXPORT irr::scene::IBoneSceneNode *_wrap_IAnimatedMeshSceneNode_getJointNode__SWIG_1 (irr::scene::IAnimatedMeshSceneNode *larg1, irr::u32 larg2) {
  irr::scene::IBoneSceneNode * lresult = (irr::scene::IBoneSceneNode *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::u32 arg2 ;
  irr::scene::IBoneSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IBoneSceneNode *)(arg1)->getJointNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBoneSceneNode *)0;
  }
}


EXPORT irr::u32 _wrap_IAnimatedMeshSceneNode_getJointCount (irr::scene::IAnimatedMeshSceneNode *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getJointCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT int _wrap_IAnimatedMeshSceneNode_setMD2Animation__SWIG_0 (irr::scene::IAnimatedMeshSceneNode *larg1, irr::scene::EMD2_ANIMATION_TYPE larg2) {
  int lresult = (int)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::EMD2_ANIMATION_TYPE arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->setMD2Animation(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IAnimatedMeshSceneNode_setMD2Animation__SWIG_1 (irr::scene::IAnimatedMeshSceneNode *larg1, irr::c8 *larg2) {
  int lresult = (int)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->setMD2Animation((irr::c8 const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::f32 _wrap_IAnimatedMeshSceneNode_getFrameNr (irr::scene::IAnimatedMeshSceneNode *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getFrameNr();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::s32 _wrap_IAnimatedMeshSceneNode_getStartFrame (irr::scene::IAnimatedMeshSceneNode *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getStartFrame();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IAnimatedMeshSceneNode_getEndFrame (irr::scene::IAnimatedMeshSceneNode *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getEndFrame();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_setLoopMode (irr::scene::IAnimatedMeshSceneNode *larg1, int larg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setLoopMode(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IAnimatedMeshSceneNode_getLoopMode (irr::scene::IAnimatedMeshSceneNode *larg1) {
  int lresult = (int)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->getLoopMode();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_setAnimationEndCallback__SWIG_0 (irr::scene::IAnimatedMeshSceneNode *larg1, irr::scene::IAnimationEndCallBack *larg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IAnimationEndCallBack *arg2 = (irr::scene::IAnimationEndCallBack *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAnimationEndCallback(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_setAnimationEndCallback__SWIG_1 (irr::scene::IAnimatedMeshSceneNode *larg1) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setAnimationEndCallback();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_setReadOnlyMaterials (irr::scene::IAnimatedMeshSceneNode *larg1, int larg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setReadOnlyMaterials(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IAnimatedMeshSceneNode_isReadOnlyMaterials (irr::scene::IAnimatedMeshSceneNode *larg1) {
  int lresult = (int)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IAnimatedMeshSceneNode const *)arg1)->isReadOnlyMaterials();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_setMesh (irr::scene::IAnimatedMeshSceneNode *larg1, irr::scene::IAnimatedMesh *larg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMesh(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_IAnimatedMeshSceneNode_getMesh (irr::scene::IAnimatedMeshSceneNode *larg1) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->getMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::SMD3QuaternionTag *_wrap_IAnimatedMeshSceneNode_getMD3TagTransformation (irr::scene::IAnimatedMeshSceneNode *larg1, irr::core::stringc *larg2) {
  irr::scene::SMD3QuaternionTag * lresult = (irr::scene::SMD3QuaternionTag *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::core::stringc *arg2 = 0 ;
  irr::scene::SMD3QuaternionTag *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::SMD3QuaternionTag *)(arg1)->getMD3TagTransformation((irr::core::stringc const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SMD3QuaternionTag *)0;
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_setJointMode (irr::scene::IAnimatedMeshSceneNode *larg1, irr::scene::E_JOINT_UPDATE_ON_RENDER larg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::E_JOINT_UPDATE_ON_RENDER arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setJointMode(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_setTransitionTime (irr::scene::IAnimatedMeshSceneNode *larg1, irr::f32 larg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTransitionTime(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_animateJoints__SWIG_0 (irr::scene::IAnimatedMeshSceneNode *larg1, int larg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->animateJoints(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_animateJoints__SWIG_1 (irr::scene::IAnimatedMeshSceneNode *larg1) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->animateJoints();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IAnimatedMeshSceneNode_setRenderFromIdentity (irr::scene::IAnimatedMeshSceneNode *larg1, int larg2) {
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setRenderFromIdentity(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ISceneNode *_wrap_IAnimatedMeshSceneNode_clone__SWIG_0 (irr::scene::IAnimatedMeshSceneNode *larg1, irr::scene::ISceneNode *larg2, irr::scene::ISceneManager *larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneManager *arg3 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->clone(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_IAnimatedMeshSceneNode_clone__SWIG_1 (irr::scene::IAnimatedMeshSceneNode *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->clone(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_IAnimatedMeshSceneNode_clone__SWIG_2 (irr::scene::IAnimatedMeshSceneNode *larg1) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::IAnimatedMeshSceneNode *arg1 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->clone();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT void _wrap_IBillboardSceneNode_setSize__SWIG_0 (irr::scene::IBillboardSceneNode *larg1, irr::core::dimension2d< irr::f32 > *larg2) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSize((irr::core::dimension2d< irr::f32 > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IBillboardSceneNode_setSize__SWIG_1 (irr::scene::IBillboardSceneNode *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setSize(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::dimension2d< irr::f32 > *_wrap_IBillboardSceneNode_getSize__SWIG_0 (irr::scene::IBillboardSceneNode *larg1) {
  irr::core::dimension2d< irr::f32 > * lresult = (irr::core::dimension2d< irr::f32 > *)0 ;
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::dimension2d< irr::f32 > *) &((irr::scene::IBillboardSceneNode const *)arg1)->getSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::f32 > *)0;
  }
}


EXPORT void _wrap_IBillboardSceneNode_getSize__SWIG_1 (irr::scene::IBillboardSceneNode *larg1, irr::f32 *larg2, irr::f32 *larg3, irr::f32 *larg4) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::f32 *arg2 = 0 ;
  irr::f32 *arg3 = 0 ;
  irr::f32 *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((irr::scene::IBillboardSceneNode const *)arg1)->getSize(*arg2,*arg3,*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IBillboardSceneNode_setColor__SWIG_0 (irr::scene::IBillboardSceneNode *larg1, irr::video::SColor *larg2) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setColor((irr::video::SColor const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IBillboardSceneNode_setColor__SWIG_1 (irr::scene::IBillboardSceneNode *larg1, irr::video::SColor *larg2, irr::video::SColor *larg3) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::video::SColor *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setColor((irr::video::SColor const &)*arg2,(irr::video::SColor const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IBillboardSceneNode_getColor (irr::scene::IBillboardSceneNode *larg1, irr::video::SColor *larg2, irr::video::SColor *larg3) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::video::SColor *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IBillboardSceneNode const *)arg1)->getColor(*arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IBillboardSceneNode (irr::scene::IBillboardSceneNode *larg1) {
  irr::scene::IBillboardSceneNode *arg1 = (irr::scene::IBillboardSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IBillboardTextSceneNode_setColor__SWIG_0 (irr::scene::IBillboardTextSceneNode *larg1, irr::video::SColor *larg2) {
  irr::scene::IBillboardTextSceneNode *arg1 = (irr::scene::IBillboardTextSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setColor((irr::video::SColor const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IBillboardTextSceneNode_setColor__SWIG_1 (irr::scene::IBillboardTextSceneNode *larg1, irr::video::SColor *larg2, irr::video::SColor *larg3) {
  irr::scene::IBillboardTextSceneNode *arg1 = (irr::scene::IBillboardTextSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::video::SColor *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setColor((irr::video::SColor const &)*arg2,(irr::video::SColor const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IBillboardTextSceneNode_setText (irr::scene::IBillboardTextSceneNode *larg1, wchar_t *larg2) {
  irr::scene::IBillboardTextSceneNode *arg1 = (irr::scene::IBillboardTextSceneNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setText((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IBillboardTextSceneNode_setTextColor (irr::scene::IBillboardTextSceneNode *larg1, irr::video::SColor *larg2) {
  irr::scene::IBillboardTextSceneNode *arg1 = (irr::scene::IBillboardTextSceneNode *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setTextColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IBillboardTextSceneNode (irr::scene::IBillboardTextSceneNode *larg1) {
  irr::scene::IBillboardTextSceneNode *arg1 = (irr::scene::IBillboardTextSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICameraSceneNode_setProjectionMatrix__SWIG_0 (irr::scene::ICameraSceneNode *larg1, irr::core::matrix4 *larg2, int larg3) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->setProjectionMatrix((irr::core::matrix4 const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICameraSceneNode_setProjectionMatrix__SWIG_1 (irr::scene::ICameraSceneNode *larg1, irr::core::matrix4 *larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setProjectionMatrix((irr::core::matrix4 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::matrix4 *_wrap_ICameraSceneNode_getProjectionMatrix (irr::scene::ICameraSceneNode *larg1) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::matrix4 *) &((irr::scene::ICameraSceneNode const *)arg1)->getProjectionMatrix();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT irr::core::matrix4 *_wrap_ICameraSceneNode_getViewMatrix (irr::scene::ICameraSceneNode *larg1) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::matrix4 *) &((irr::scene::ICameraSceneNode const *)arg1)->getViewMatrix();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT void _wrap_ICameraSceneNode_setViewMatrixAffector (irr::scene::ICameraSceneNode *larg1, irr::core::matrix4 *larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setViewMatrixAffector((irr::core::matrix4 const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::matrix4 *_wrap_ICameraSceneNode_getViewMatrixAffector (irr::scene::ICameraSceneNode *larg1) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::matrix4 *) &((irr::scene::ICameraSceneNode const *)arg1)->getViewMatrixAffector();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT void _wrap_ICameraSceneNode_setTarget (irr::scene::ICameraSceneNode *larg1, irr::core::vector3df *larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTarget((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_ICameraSceneNode_getTarget (irr::scene::ICameraSceneNode *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::ICameraSceneNode const *)arg1)->getTarget();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_ICameraSceneNode_setUpVector (irr::scene::ICameraSceneNode *larg1, irr::core::vector3df *larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setUpVector((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_ICameraSceneNode_getUpVector (irr::scene::ICameraSceneNode *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::ICameraSceneNode const *)arg1)->getUpVector();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::f32 _wrap_ICameraSceneNode_getNearValue (irr::scene::ICameraSceneNode *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::ICameraSceneNode const *)arg1)->getNearValue();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_ICameraSceneNode_getFarValue (irr::scene::ICameraSceneNode *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::ICameraSceneNode const *)arg1)->getFarValue();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_ICameraSceneNode_getAspectRatio (irr::scene::ICameraSceneNode *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::ICameraSceneNode const *)arg1)->getAspectRatio();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_ICameraSceneNode_getFOV (irr::scene::ICameraSceneNode *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::ICameraSceneNode const *)arg1)->getFOV();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_ICameraSceneNode_setNearValue (irr::scene::ICameraSceneNode *larg1, irr::f32 larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setNearValue(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICameraSceneNode_setFarValue (irr::scene::ICameraSceneNode *larg1, irr::f32 larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setFarValue(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICameraSceneNode_setAspectRatio (irr::scene::ICameraSceneNode *larg1, irr::f32 larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAspectRatio(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICameraSceneNode_setFOV (irr::scene::ICameraSceneNode *larg1, irr::f32 larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setFOV(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SViewFrustum *_wrap_ICameraSceneNode_getViewFrustum (irr::scene::ICameraSceneNode *larg1) {
  irr::scene::SViewFrustum * lresult = (irr::scene::SViewFrustum *)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::scene::SViewFrustum *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SViewFrustum *)((irr::scene::ICameraSceneNode const *)arg1)->getViewFrustum();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SViewFrustum *)0;
  }
}


EXPORT void _wrap_ICameraSceneNode_setInputReceiverEnabled (irr::scene::ICameraSceneNode *larg1, int larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setInputReceiverEnabled(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ICameraSceneNode_isInputReceiverEnabled (irr::scene::ICameraSceneNode *larg1) {
  int lresult = (int)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ICameraSceneNode const *)arg1)->isInputReceiverEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ICameraSceneNode_isOrthogonal (irr::scene::ICameraSceneNode *larg1) {
  int lresult = (int)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ICameraSceneNode const *)arg1)->isOrthogonal();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ICameraSceneNode_bindTargetAndRotation (irr::scene::ICameraSceneNode *larg1, int larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->bindTargetAndRotation(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ICameraSceneNode_getTargetAndRotationBinding (irr::scene::ICameraSceneNode *larg1) {
  int lresult = (int)0 ;
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ICameraSceneNode const *)arg1)->getTargetAndRotationBinding();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ICameraSceneNode_serializeAttributes__SWIG_0 (irr::scene::ICameraSceneNode *larg1, irr::io::IAttributes *larg2, irr::io::SAttributeReadWriteOptions *larg3) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::ICameraSceneNode const *)arg1)->serializeAttributes(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICameraSceneNode_serializeAttributes__SWIG_1 (irr::scene::ICameraSceneNode *larg1, irr::io::IAttributes *larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::ICameraSceneNode const *)arg1)->serializeAttributes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICameraSceneNode_deserializeAttributes__SWIG_0 (irr::scene::ICameraSceneNode *larg1, irr::io::IAttributes *larg2, irr::io::SAttributeReadWriteOptions *larg3) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->deserializeAttributes(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICameraSceneNode_deserializeAttributes__SWIG_1 (irr::scene::ICameraSceneNode *larg1, irr::io::IAttributes *larg2) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->deserializeAttributes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_ICameraSceneNode (irr::scene::ICameraSceneNode *larg1) {
  irr::scene::ICameraSceneNode *arg1 = (irr::scene::ICameraSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICursorControl_setVisible (irr::gui::ICursorControl *larg1, int larg2) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setVisible(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ICursorControl_isVisible (irr::gui::ICursorControl *larg1) {
  int lresult = (int)0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::ICursorControl const *)arg1)->isVisible();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ICursorControl_setPosition__SWIG_0 (irr::gui::ICursorControl *larg1, irr::core::vector2d< irr::f32 > *larg2) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::vector2d< irr::f32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPosition((irr::core::vector2d< irr::f32 > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICursorControl_setPosition__SWIG_1 (irr::gui::ICursorControl *larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setPosition(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICursorControl_setPosition__SWIG_2 (irr::gui::ICursorControl *larg1, irr::core::vector2d< irr::s32 > *larg2) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPosition((irr::core::vector2d< irr::s32 > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICursorControl_setPosition__SWIG_3 (irr::gui::ICursorControl *larg1, irr::s32 larg2, irr::s32 larg3) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setPosition(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector2d< irr::s32 > *_wrap_ICursorControl_getPosition (irr::gui::ICursorControl *larg1) {
  irr::core::vector2d< irr::s32 > * lresult = (irr::core::vector2d< irr::s32 > *)0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::vector2d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector2d< irr::s32 > *) &(arg1)->getPosition();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< irr::s32 > *)0;
  }
}


EXPORT irr::core::vector2d< irr::f32 > *_wrap_ICursorControl_getRelativePosition (irr::gui::ICursorControl *larg1) {
  irr::core::vector2d< irr::f32 > * lresult = (irr::core::vector2d< irr::f32 > *)0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::vector2d< irr::f32 > result;
  
  arg1 = larg1;
  try {
    result = (arg1)->getRelativePosition();
    lresult = new irr::core::vector2d< irr::f32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< irr::f32 > *)0;
  }
}


EXPORT void _wrap_ICursorControl_setReferenceRect__SWIG_0 (irr::gui::ICursorControl *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setReferenceRect(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICursorControl_setReferenceRect__SWIG_1 (irr::gui::ICursorControl *larg1) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setReferenceRect();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ICursorControl_setActiveIcon (irr::gui::ICursorControl *larg1, irr::gui::ECURSOR_ICON larg2) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::ECURSOR_ICON arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setActiveIcon(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::ECURSOR_ICON _wrap_ICursorControl_getActiveIcon (irr::gui::ICursorControl *larg1) {
  irr::gui::ECURSOR_ICON lresult = (irr::gui::ECURSOR_ICON)0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::ECURSOR_ICON result;
  
  arg1 = larg1;
  try {
    result = (irr::gui::ECURSOR_ICON)((irr::gui::ICursorControl const *)arg1)->getActiveIcon();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::ECURSOR_ICON)0;
  }
}


EXPORT irr::gui::ECURSOR_ICON _wrap_ICursorControl_addIcon (irr::gui::ICursorControl *larg1, irr::gui::SCursorSprite *larg2) {
  irr::gui::ECURSOR_ICON lresult = (irr::gui::ECURSOR_ICON)0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::SCursorSprite *arg2 = 0 ;
  irr::gui::ECURSOR_ICON result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::ECURSOR_ICON)(arg1)->addIcon((irr::gui::SCursorSprite const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::ECURSOR_ICON)0;
  }
}


EXPORT void _wrap_ICursorControl_changeIcon (irr::gui::ICursorControl *larg1, irr::gui::ECURSOR_ICON larg2, irr::gui::SCursorSprite *larg3) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::ECURSOR_ICON arg2 ;
  irr::gui::SCursorSprite *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->changeIcon(arg2,(irr::gui::SCursorSprite const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::dimension2di *_wrap_ICursorControl_getSupportedIconSize (irr::gui::ICursorControl *larg1) {
  irr::core::dimension2di * lresult = (irr::core::dimension2di *)0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::core::dimension2di result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::ICursorControl const *)arg1)->getSupportedIconSize();
    lresult = new irr::core::dimension2di(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2di *)0;
  }
}


EXPORT void _wrap_ICursorControl_setPlatformBehavior (irr::gui::ICursorControl *larg1, irr::gui::ECURSOR_PLATFORM_BEHAVIOR larg2) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::ECURSOR_PLATFORM_BEHAVIOR arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPlatformBehavior(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::ECURSOR_PLATFORM_BEHAVIOR _wrap_ICursorControl_getPlatformBehavior (irr::gui::ICursorControl *larg1) {
  irr::gui::ECURSOR_PLATFORM_BEHAVIOR lresult = (irr::gui::ECURSOR_PLATFORM_BEHAVIOR)0 ;
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  irr::gui::ECURSOR_PLATFORM_BEHAVIOR result;
  
  arg1 = larg1;
  try {
    result = (irr::gui::ECURSOR_PLATFORM_BEHAVIOR)((irr::gui::ICursorControl const *)arg1)->getPlatformBehavior();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::ECURSOR_PLATFORM_BEHAVIOR)0;
  }
}


EXPORT void _wrap_delete_ICursorControl (irr::gui::ICursorControl *larg1) {
  irr::gui::ICursorControl *arg1 = (irr::gui::ICursorControl *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::matrix4 *_wrap_IDummyTransformationSceneNode_getRelativeTransformationMatrix (irr::scene::IDummyTransformationSceneNode *larg1) {
  irr::core::matrix4 * lresult = (irr::core::matrix4 *)0 ;
  irr::scene::IDummyTransformationSceneNode *arg1 = (irr::scene::IDummyTransformationSceneNode *) 0 ;
  irr::core::matrix4 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::matrix4 *) &(arg1)->getRelativeTransformationMatrix();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::matrix4 *)0;
  }
}


EXPORT void _wrap_delete_IDummyTransformationSceneNode (irr::scene::IDummyTransformationSceneNode *larg1) {
  irr::scene::IDummyTransformationSceneNode *arg1 = (irr::scene::IDummyTransformationSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createCubeMesh__SWIG_0 (irr::scene::IGeometryCreator *larg1, irr::core::vector3df *larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createCubeMesh((irr::core::vector3df const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createCubeMesh__SWIG_1 (irr::scene::IGeometryCreator *larg1) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createCubeMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createHillPlaneMesh (irr::scene::IGeometryCreator *larg1, irr::core::dimension2d< irr::f32 > *larg2, irr::core::dimension2d< irr::u32 > *larg3, irr::video::SMaterial *larg4, irr::f32 larg5, irr::core::dimension2d< irr::f32 > *larg6, irr::core::dimension2d< irr::f32 > *larg7) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg2 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  irr::video::SMaterial *arg4 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg5 ;
  irr::core::dimension2d< irr::f32 > *arg6 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg7 = 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createHillPlaneMesh((irr::core::dimension2d< irr::f32 > const &)*arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3,arg4,arg5,(irr::core::dimension2d< irr::f32 > const &)*arg6,(irr::core::dimension2d< irr::f32 > const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createPlaneMesh__SWIG_0 (irr::scene::IGeometryCreator *larg1, irr::core::dimension2d< irr::f32 > *larg2, irr::core::dimension2d< irr::u32 > *larg3, irr::video::SMaterial *larg4, irr::core::dimension2df *larg5) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg2 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  irr::video::SMaterial *arg4 = (irr::video::SMaterial *) 0 ;
  irr::core::dimension2df *arg5 = 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createPlaneMesh((irr::core::dimension2d< irr::f32 > const &)*arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3,arg4,(irr::core::dimension2df const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createPlaneMesh__SWIG_1 (irr::scene::IGeometryCreator *larg1, irr::core::dimension2d< irr::f32 > *larg2, irr::core::dimension2d< irr::u32 > *larg3, irr::video::SMaterial *larg4) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg2 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  irr::video::SMaterial *arg4 = (irr::video::SMaterial *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createPlaneMesh((irr::core::dimension2d< irr::f32 > const &)*arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createPlaneMesh__SWIG_2 (irr::scene::IGeometryCreator *larg1, irr::core::dimension2d< irr::f32 > *larg2, irr::core::dimension2d< irr::u32 > *larg3) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg2 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createPlaneMesh((irr::core::dimension2d< irr::f32 > const &)*arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createPlaneMesh__SWIG_3 (irr::scene::IGeometryCreator *larg1, irr::core::dimension2d< irr::f32 > *larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg2 = 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createPlaneMesh((irr::core::dimension2d< irr::f32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createTerrainMesh__SWIG_0 (irr::scene::IGeometryCreator *larg1, irr::video::IImage *larg2, irr::video::IImage *larg3, irr::core::dimension2d< irr::f32 > *larg4, irr::f32 larg5, irr::video::IVideoDriver *larg6, irr::core::dimension2d< irr::u32 > *larg7, int larg8) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::video::IVideoDriver *arg6 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg7 = 0 ;
  bool arg8 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createTerrainMesh(arg2,arg3,(irr::core::dimension2d< irr::f32 > const &)*arg4,arg5,arg6,(irr::core::dimension2d< irr::u32 > const &)*arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createTerrainMesh__SWIG_1 (irr::scene::IGeometryCreator *larg1, irr::video::IImage *larg2, irr::video::IImage *larg3, irr::core::dimension2d< irr::f32 > *larg4, irr::f32 larg5, irr::video::IVideoDriver *larg6, irr::core::dimension2d< irr::u32 > *larg7) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::video::IImage *arg2 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::video::IVideoDriver *arg6 = (irr::video::IVideoDriver *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg7 = 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createTerrainMesh(arg2,arg3,(irr::core::dimension2d< irr::f32 > const &)*arg4,arg5,arg6,(irr::core::dimension2d< irr::u32 > const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createArrowMesh__SWIG_0 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3, irr::f32 larg4, irr::f32 larg5, irr::f32 larg6, irr::f32 larg7, irr::video::SColor const *larg8, irr::video::SColor const *larg9) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::video::SColor arg8 ;
  irr::video::SColor arg9 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = *larg9;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createArrowMesh(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createArrowMesh__SWIG_1 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3, irr::f32 larg4, irr::f32 larg5, irr::f32 larg6, irr::f32 larg7, irr::video::SColor const *larg8) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::video::SColor arg8 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createArrowMesh(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createArrowMesh__SWIG_2 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3, irr::f32 larg4, irr::f32 larg5, irr::f32 larg6, irr::f32 larg7) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createArrowMesh(arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createArrowMesh__SWIG_3 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3, irr::f32 larg4, irr::f32 larg5, irr::f32 larg6) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createArrowMesh(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createArrowMesh__SWIG_4 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createArrowMesh(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createArrowMesh__SWIG_5 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3, irr::f32 larg4) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::f32 arg4 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createArrowMesh(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createArrowMesh__SWIG_6 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createArrowMesh(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createArrowMesh__SWIG_7 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createArrowMesh(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createArrowMesh__SWIG_8 (irr::scene::IGeometryCreator *larg1) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createArrowMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createSphereMesh__SWIG_0 (irr::scene::IGeometryCreator *larg1, irr::f32 larg2, irr::u32 larg3, irr::u32 larg4) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::f32 arg2 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createSphereMesh(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createSphereMesh__SWIG_1 (irr::scene::IGeometryCreator *larg1, irr::f32 larg2, irr::u32 larg3) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::f32 arg2 ;
  irr::u32 arg3 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createSphereMesh(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createSphereMesh__SWIG_2 (irr::scene::IGeometryCreator *larg1, irr::f32 larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::f32 arg2 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createSphereMesh(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createSphereMesh__SWIG_3 (irr::scene::IGeometryCreator *larg1) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createSphereMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createCylinderMesh__SWIG_0 (irr::scene::IGeometryCreator *larg1, irr::f32 larg2, irr::f32 larg3, irr::u32 larg4, irr::video::SColor *larg5, int larg6, irr::f32 larg7) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  bool arg6 ;
  irr::f32 arg7 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createCylinderMesh(arg2,arg3,arg4,(irr::video::SColor const &)*arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createCylinderMesh__SWIG_1 (irr::scene::IGeometryCreator *larg1, irr::f32 larg2, irr::f32 larg3, irr::u32 larg4, irr::video::SColor *larg5, int larg6) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  bool arg6 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createCylinderMesh(arg2,arg3,arg4,(irr::video::SColor const &)*arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createCylinderMesh__SWIG_2 (irr::scene::IGeometryCreator *larg1, irr::f32 larg2, irr::f32 larg3, irr::u32 larg4, irr::video::SColor *larg5) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createCylinderMesh(arg2,arg3,arg4,(irr::video::SColor const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createCylinderMesh__SWIG_3 (irr::scene::IGeometryCreator *larg1, irr::f32 larg2, irr::f32 larg3, irr::u32 larg4) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createCylinderMesh(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createConeMesh__SWIG_0 (irr::scene::IGeometryCreator *larg1, irr::f32 larg2, irr::f32 larg3, irr::u32 larg4, irr::video::SColor *larg5, irr::video::SColor *larg6, irr::f32 larg7) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::f32 arg7 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createConeMesh(arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createConeMesh__SWIG_1 (irr::scene::IGeometryCreator *larg1, irr::f32 larg2, irr::f32 larg3, irr::u32 larg4, irr::video::SColor *larg5, irr::video::SColor *larg6) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createConeMesh(arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createConeMesh__SWIG_2 (irr::scene::IGeometryCreator *larg1, irr::f32 larg2, irr::f32 larg3, irr::u32 larg4, irr::video::SColor *larg5) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createConeMesh(arg2,arg3,arg4,(irr::video::SColor const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createConeMesh__SWIG_3 (irr::scene::IGeometryCreator *larg1, irr::f32 larg2, irr::f32 larg3, irr::u32 larg4) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createConeMesh(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_0 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3, irr::video::SColor const *larg4, irr::video::SColor const *larg5, irr::f32 larg6, irr::core::vector3df *larg7) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor arg5 ;
  irr::f32 arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = *larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createVolumeLightMesh(arg2,arg3,arg4,arg5,arg6,(irr::core::vector3df const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_1 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3, irr::video::SColor const *larg4, irr::video::SColor const *larg5, irr::f32 larg6) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor arg5 ;
  irr::f32 arg6 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = *larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createVolumeLightMesh(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_2 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3, irr::video::SColor const *larg4, irr::video::SColor const *larg5) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor arg4 ;
  irr::video::SColor arg5 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = *larg5;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createVolumeLightMesh(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_3 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3, irr::video::SColor const *larg4) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor arg4 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createVolumeLightMesh(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_4 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2, irr::u32 larg3) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createVolumeLightMesh(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_5 (irr::scene::IGeometryCreator *larg1, irr::u32 larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::u32 arg2 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createVolumeLightMesh(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_6 (irr::scene::IGeometryCreator *larg1) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IGeometryCreator const *)arg1)->createVolumeLightMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT void _wrap_delete_IGeometryCreator (irr::scene::IGeometryCreator *larg1) {
  irr::scene::IGeometryCreator *arg1 = (irr::scene::IGeometryCreator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IGPUProgrammingServices (irr::video::IGPUProgrammingServices *larg1) {
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_0 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::c8 *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14, irr::video::E_MATERIAL_TYPE larg15, irr::s32 larg16, irr::video::E_GPU_SHADING_LANGUAGE larg17) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg17 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  arg16 = larg16;
  arg17 = larg17;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_1 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::c8 *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14, irr::video::E_MATERIAL_TYPE larg15, irr::s32 larg16) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  arg16 = larg16;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_2 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::c8 *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14, irr::video::E_MATERIAL_TYPE larg15) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg15 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_3 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::c8 *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_4 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::c8 *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_5 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::c8 *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11,arg12);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_6 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::c8 *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10,arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_7 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::c8 *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_8 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::c8 *larg8, irr::c8 *larg9) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8,(irr::c8 const *)arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_9 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::c8 *larg8) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::c8 *arg8 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,(irr::c8 const *)arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_10 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9, irr::s32 larg10, irr::video::E_GPU_SHADING_LANGUAGE larg11) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg11 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10,arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_11 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9, irr::s32 larg10) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_12 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_13 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_14 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_15 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5, irr::c8 *larg6) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5,(irr::c8 const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_16 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::c8 *larg5) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::c8 *arg5 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,(irr::c8 const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_17 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_18 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::IShaderConstantSetCallBack *larg4, irr::video::E_MATERIAL_TYPE larg5, irr::s32 larg6) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg5 ;
  irr::s32 arg6 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_19 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::IShaderConstantSetCallBack *larg4, irr::video::E_MATERIAL_TYPE larg5) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg5 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_20 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::IShaderConstantSetCallBack *larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_21 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::c8 *larg4, irr::scene::E_PRIMITIVE_TYPE larg5, irr::scene::E_PRIMITIVE_TYPE larg6, irr::u32 larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9, irr::s32 larg10) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_22 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::c8 *larg4, irr::scene::E_PRIMITIVE_TYPE larg5, irr::scene::E_PRIMITIVE_TYPE larg6, irr::u32 larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_23 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::c8 *larg4, irr::scene::E_PRIMITIVE_TYPE larg5, irr::scene::E_PRIMITIVE_TYPE larg6, irr::u32 larg7, irr::video::IShaderConstantSetCallBack *larg8) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_24 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::c8 *larg4, irr::scene::E_PRIMITIVE_TYPE larg5, irr::scene::E_PRIMITIVE_TYPE larg6, irr::u32 larg7) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_25 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::c8 *larg4, irr::scene::E_PRIMITIVE_TYPE larg5, irr::scene::E_PRIMITIVE_TYPE larg6) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_26 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::c8 *larg4, irr::scene::E_PRIMITIVE_TYPE larg5) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_27 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::c8 *larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::c8 *arg4 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,(irr::c8 const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_0 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::path *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14, irr::video::E_MATERIAL_TYPE larg15, irr::s32 larg16, irr::video::E_GPU_SHADING_LANGUAGE larg17) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg17 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  arg16 = larg16;
  arg17 = larg17;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_1 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::path *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14, irr::video::E_MATERIAL_TYPE larg15, irr::s32 larg16) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  arg16 = larg16;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_2 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::path *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14, irr::video::E_MATERIAL_TYPE larg15) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg15 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_3 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::path *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_4 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::path *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_5 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::path *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11,arg12);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_6 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::path *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10,arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_7 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::path *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_8 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::path *larg8, irr::c8 *larg9) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8,(irr::c8 const *)arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_9 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::path *larg8) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::path *arg8 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,(irr::io::path const &)*arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_10 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9, irr::s32 larg10, irr::video::E_GPU_SHADING_LANGUAGE larg11) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg11 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10,arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_11 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9, irr::s32 larg10) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_12 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_13 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_14 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_15 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5, irr::c8 *larg6) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5,(irr::c8 const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_16 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::path *larg5) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::path *arg5 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4,(irr::io::path const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_17 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_18 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::c8 *larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::c8 const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_19 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::video::IShaderConstantSetCallBack *larg4, irr::video::E_MATERIAL_TYPE larg5, irr::s32 larg6) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg5 ;
  irr::s32 arg6 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_20 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::video::IShaderConstantSetCallBack *larg4, irr::video::E_MATERIAL_TYPE larg5) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg5 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_21 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::video::IShaderConstantSetCallBack *larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_22 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::io::path *larg4, irr::scene::E_PRIMITIVE_TYPE larg5, irr::scene::E_PRIMITIVE_TYPE larg6, irr::u32 larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9, irr::s32 larg10) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_23 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::io::path *larg4, irr::scene::E_PRIMITIVE_TYPE larg5, irr::scene::E_PRIMITIVE_TYPE larg6, irr::u32 larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_24 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::io::path *larg4, irr::scene::E_PRIMITIVE_TYPE larg5, irr::scene::E_PRIMITIVE_TYPE larg6, irr::u32 larg7, irr::video::IShaderConstantSetCallBack *larg8) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_25 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::io::path *larg4, irr::scene::E_PRIMITIVE_TYPE larg5, irr::scene::E_PRIMITIVE_TYPE larg6, irr::u32 larg7) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::u32 arg7 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_26 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::io::path *larg4, irr::scene::E_PRIMITIVE_TYPE larg5, irr::scene::E_PRIMITIVE_TYPE larg6) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::scene::E_PRIMITIVE_TYPE arg6 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_27 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::io::path *larg4, irr::scene::E_PRIMITIVE_TYPE larg5) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::scene::E_PRIMITIVE_TYPE arg5 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_28 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::io::path *larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::io::path *arg4 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,(irr::io::path const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_29 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::IReadFile *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14, irr::video::E_MATERIAL_TYPE larg15, irr::s32 larg16, irr::video::E_GPU_SHADING_LANGUAGE larg17) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg17 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  arg16 = larg16;
  arg17 = larg17;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_30 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::IReadFile *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14, irr::video::E_MATERIAL_TYPE larg15, irr::s32 larg16) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg15 ;
  irr::s32 arg16 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  arg16 = larg16;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_31 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::IReadFile *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14, irr::video::E_MATERIAL_TYPE larg15) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg15 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14,arg15);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_32 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::IReadFile *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13, irr::video::IShaderConstantSetCallBack *larg14) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::video::IShaderConstantSetCallBack *arg14 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13,arg14);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_33 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::IReadFile *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12, irr::u32 larg13) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::u32 arg13 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12,arg13);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_34 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::IReadFile *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11, irr::scene::E_PRIMITIVE_TYPE larg12) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::scene::E_PRIMITIVE_TYPE arg12 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11,arg12);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_35 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::IReadFile *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10, irr::scene::E_PRIMITIVE_TYPE larg11) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::scene::E_PRIMITIVE_TYPE arg11 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10,arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_36 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::IReadFile *larg8, irr::c8 *larg9, irr::video::E_GEOMETRY_SHADER_TYPE larg10) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::video::E_GEOMETRY_SHADER_TYPE arg10 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_37 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::IReadFile *larg8, irr::c8 *larg9) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg9 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,(irr::c8 const *)arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_38 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::io::IReadFile *larg8) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::io::IReadFile *arg8 = (irr::io::IReadFile *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_39 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9, irr::s32 larg10, irr::video::E_GPU_SHADING_LANGUAGE larg11) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::video::E_GPU_SHADING_LANGUAGE arg11 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10,arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_40 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9, irr::s32 larg10) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 arg10 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_41 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8, irr::video::E_MATERIAL_TYPE larg9) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg9 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_42 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7, irr::video::IShaderConstantSetCallBack *larg8) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::video::IShaderConstantSetCallBack *arg8 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_43 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6, irr::video::E_PIXEL_SHADER_TYPE larg7) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::video::E_PIXEL_SHADER_TYPE arg7 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_44 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5, irr::c8 *larg6) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg6 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5,(irr::c8 const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_45 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4, irr::io::IReadFile *larg5) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::io::IReadFile *arg5 = (irr::io::IReadFile *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_46 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3, irr::video::E_VERTEX_SHADER_TYPE larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::E_VERTEX_SHADER_TYPE arg4 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_47 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::c8 *larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2,(irr::c8 const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_48 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)(arg1)->addHighLevelShaderMaterialFromFiles(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_0 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::IShaderConstantSetCallBack *larg4, irr::video::E_MATERIAL_TYPE larg5, irr::s32 larg6) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg5 ;
  irr::s32 arg6 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::s32)(arg1)->addShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_1 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::IShaderConstantSetCallBack *larg4, irr::video::E_MATERIAL_TYPE larg5) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg5 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::s32)(arg1)->addShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_2 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3, irr::video::IShaderConstantSetCallBack *larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->addShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_3 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2, irr::c8 *larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::c8 *arg3 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->addShaderMaterial((irr::c8 const *)arg2,(irr::c8 const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_4 (irr::video::IGPUProgrammingServices *larg1, irr::c8 *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)(arg1)->addShaderMaterial((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_5 (irr::video::IGPUProgrammingServices *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)(arg1)->addShaderMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_0 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::io::IReadFile *larg3, irr::video::IShaderConstantSetCallBack *larg4, irr::video::E_MATERIAL_TYPE larg5, irr::s32 larg6) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IReadFile *arg3 = (irr::io::IReadFile *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg5 ;
  irr::s32 arg6 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::s32)(arg1)->addShaderMaterialFromFiles(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_1 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::io::IReadFile *larg3, irr::video::IShaderConstantSetCallBack *larg4, irr::video::E_MATERIAL_TYPE larg5) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IReadFile *arg3 = (irr::io::IReadFile *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg5 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::s32)(arg1)->addShaderMaterialFromFiles(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_2 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::io::IReadFile *larg3, irr::video::IShaderConstantSetCallBack *larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IReadFile *arg3 = (irr::io::IReadFile *) 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->addShaderMaterialFromFiles(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_3 (irr::video::IGPUProgrammingServices *larg1, irr::io::IReadFile *larg2, irr::io::IReadFile *larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::io::IReadFile *arg3 = (irr::io::IReadFile *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->addShaderMaterialFromFiles(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_4 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::video::IShaderConstantSetCallBack *larg4, irr::video::E_MATERIAL_TYPE larg5, irr::s32 larg6) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg5 ;
  irr::s32 arg6 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::s32)(arg1)->addShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_5 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::video::IShaderConstantSetCallBack *larg4, irr::video::E_MATERIAL_TYPE larg5) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::E_MATERIAL_TYPE arg5 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::s32)(arg1)->addShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_6 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3, irr::video::IShaderConstantSetCallBack *larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::video::IShaderConstantSetCallBack *arg4 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->addShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_7 (irr::video::IGPUProgrammingServices *larg1, irr::io::path *larg2, irr::io::path *larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IGPUProgrammingServices *arg1 = (irr::video::IGPUProgrammingServices *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::io::path *arg3 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->addShaderMaterialFromFiles((irr::io::path const &)*arg2,(irr::io::path const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_new_IGUIElement (irr::gui::EGUI_ELEMENT_TYPE larg1, irr::gui::IGUIEnvironment *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4, irr::core::rect< irr::s32 > *larg5) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::EGUI_ELEMENT_TYPE arg1 ;
  irr::gui::IGUIEnvironment *arg2 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIElement *)new irr::gui::IGUIElement(arg1,arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT void _wrap_delete_IGUIElement (irr::gui::IGUIElement *larg1) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIElement_getParent (irr::gui::IGUIElement *larg1) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIElement *)((irr::gui::IGUIElement const *)arg1)->getParent();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT irr::core::rect< irr::s32 > *_wrap_IGUIElement_getRelativePosition (irr::gui::IGUIElement *larg1) {
  irr::core::rect< irr::s32 > * lresult = (irr::core::rect< irr::s32 > *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUIElement const *)arg1)->getRelativePosition();
    lresult = new irr::core::rect< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< irr::s32 > *)0;
  }
}


EXPORT void _wrap_IGUIElement_setRelativePosition__SWIG_0 (irr::gui::IGUIElement *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRelativePosition((irr::core::rect< irr::s32 > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_setRelativePosition__SWIG_1 (irr::gui::IGUIElement *larg1, irr::core::position2di *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::position2di *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRelativePosition((irr::core::position2di const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_setRelativePositionProportional (irr::gui::IGUIElement *larg1, irr::core::rect< irr::f32 > *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::f32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRelativePositionProportional((irr::core::rect< irr::f32 > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::rect< irr::s32 > *_wrap_IGUIElement_getAbsolutePosition (irr::gui::IGUIElement *larg1) {
  irr::core::rect< irr::s32 > * lresult = (irr::core::rect< irr::s32 > *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUIElement const *)arg1)->getAbsolutePosition();
    lresult = new irr::core::rect< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< irr::s32 > *)0;
  }
}


EXPORT irr::core::rect< irr::s32 > *_wrap_IGUIElement_getAbsoluteClippingRect (irr::gui::IGUIElement *larg1) {
  irr::core::rect< irr::s32 > * lresult = (irr::core::rect< irr::s32 > *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUIElement const *)arg1)->getAbsoluteClippingRect();
    lresult = new irr::core::rect< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< irr::s32 > *)0;
  }
}


EXPORT void _wrap_IGUIElement_setNotClipped (irr::gui::IGUIElement *larg1, int larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setNotClipped(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIElement_isNotClipped (irr::gui::IGUIElement *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIElement const *)arg1)->isNotClipped();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIElement_setMaxSize (irr::gui::IGUIElement *larg1, irr::core::dimension2du *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::dimension2du arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setMaxSize(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_setMinSize (irr::gui::IGUIElement *larg1, irr::core::dimension2du *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::dimension2du arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setMinSize(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_setAlignment (irr::gui::IGUIElement *larg1, irr::gui::EGUI_ALIGNMENT larg2, irr::gui::EGUI_ALIGNMENT larg3, irr::gui::EGUI_ALIGNMENT larg4, irr::gui::EGUI_ALIGNMENT larg5) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_ALIGNMENT arg2 ;
  irr::gui::EGUI_ALIGNMENT arg3 ;
  irr::gui::EGUI_ALIGNMENT arg4 ;
  irr::gui::EGUI_ALIGNMENT arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->setAlignment(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_updateAbsolutePosition (irr::gui::IGUIElement *larg1) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->updateAbsolutePosition();
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIElement_getElementFromPoint (irr::gui::IGUIElement *larg1, irr::core::vector2d< irr::s32 > *larg2) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIElement *)(arg1)->getElementFromPoint((irr::core::vector2d< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT int _wrap_IGUIElement_isPointInside (irr::gui::IGUIElement *larg1, irr::core::vector2d< irr::s32 > *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::gui::IGUIElement const *)arg1)->isPointInside((irr::core::vector2d< irr::s32 > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIElement_addChild (irr::gui::IGUIElement *larg1, irr::gui::IGUIElement *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addChild(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_removeChild (irr::gui::IGUIElement *larg1, irr::gui::IGUIElement *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeChild(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_remove (irr::gui::IGUIElement *larg1) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->remove();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_draw (irr::gui::IGUIElement *larg1) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->draw();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_OnPostRender (irr::gui::IGUIElement *larg1, irr::u32 larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->OnPostRender(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_move (irr::gui::IGUIElement *larg1, irr::core::vector2d< irr::s32 > *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::vector2d< irr::s32 > arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->move(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIElement_isVisible (irr::gui::IGUIElement *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIElement const *)arg1)->isVisible();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIElement_setVisible (irr::gui::IGUIElement *larg1, int larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setVisible(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIElement_isSubElement (irr::gui::IGUIElement *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIElement const *)arg1)->isSubElement();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIElement_setSubElement (irr::gui::IGUIElement *larg1, int larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setSubElement(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_setTabStop (irr::gui::IGUIElement *larg1, int larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setTabStop(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIElement_isTabStop (irr::gui::IGUIElement *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIElement const *)arg1)->isTabStop();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIElement_setTabOrder (irr::gui::IGUIElement *larg1, irr::s32 larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTabOrder(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIElement_getTabOrder (irr::gui::IGUIElement *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIElement const *)arg1)->getTabOrder();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIElement_setTabGroup (irr::gui::IGUIElement *larg1, int larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setTabGroup(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIElement_isTabGroup (irr::gui::IGUIElement *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIElement const *)arg1)->isTabGroup();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIElement_getTabGroup (irr::gui::IGUIElement *larg1) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIElement *)(arg1)->getTabGroup();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT int _wrap_IGUIElement_isEnabled (irr::gui::IGUIElement *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIElement const *)arg1)->isEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIElement_setEnabled (irr::gui::IGUIElement *larg1, int larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setEnabled(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_setText (irr::gui::IGUIElement *larg1, wchar_t *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setText((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT wchar_t *_wrap_IGUIElement_getText (irr::gui::IGUIElement *larg1) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (wchar_t *)((irr::gui::IGUIElement const *)arg1)->getText();
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT void _wrap_IGUIElement_setToolTipText (irr::gui::IGUIElement *larg1, wchar_t *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setToolTipText((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::stringw *_wrap_IGUIElement_getToolTipText (irr::gui::IGUIElement *larg1) {
  irr::core::stringw * lresult = (irr::core::stringw *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::stringw *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::stringw *) &((irr::gui::IGUIElement const *)arg1)->getToolTipText();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::stringw *)0;
  }
}


EXPORT irr::s32 _wrap_IGUIElement_getID (irr::gui::IGUIElement *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIElement const *)arg1)->getID();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIElement_setID (irr::gui::IGUIElement *larg1, irr::s32 larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setID(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIElement_bringToFront (irr::gui::IGUIElement *larg1, irr::gui::IGUIElement *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->bringToFront(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIElement_sendToBack (irr::gui::IGUIElement *larg1, irr::gui::IGUIElement *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->sendToBack(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::list< irr::gui::IGUIElement * > *_wrap_IGUIElement_getChildren (irr::gui::IGUIElement *larg1) {
  irr::core::list< irr::gui::IGUIElement * > * lresult = (irr::core::list< irr::gui::IGUIElement * > *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::list< irr::gui::IGUIElement * > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::list< irr::gui::IGUIElement * > *) &((irr::gui::IGUIElement const *)arg1)->getChildren();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::list< irr::gui::IGUIElement * > *)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIElement_getElementFromId__SWIG_0 (irr::gui::IGUIElement *larg1, irr::s32 larg2, int larg3) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  bool arg3 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (irr::gui::IGUIElement *)((irr::gui::IGUIElement const *)arg1)->getElementFromId(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIElement_getElementFromId__SWIG_1 (irr::gui::IGUIElement *larg1, irr::s32 larg2) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIElement *)((irr::gui::IGUIElement const *)arg1)->getElementFromId(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT int _wrap_IGUIElement_isMyChild (irr::gui::IGUIElement *larg1, irr::gui::IGUIElement *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::gui::IGUIElement const *)arg1)->isMyChild(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIElement_getNextElement__SWIG_0 (irr::gui::IGUIElement *larg1, irr::s32 larg2, int larg3, int larg4, irr::gui::IGUIElement **larg5, irr::gui::IGUIElement **larg6, int larg7) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::gui::IGUIElement **arg5 = 0 ;
  irr::gui::IGUIElement **arg6 = 0 ;
  bool arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  try {
    result = (bool)((irr::gui::IGUIElement const *)arg1)->getNextElement(arg2,arg3,arg4,*arg5,*arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIElement_getNextElement__SWIG_1 (irr::gui::IGUIElement *larg1, irr::s32 larg2, int larg3, int larg4, irr::gui::IGUIElement **larg5, irr::gui::IGUIElement **larg6) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::gui::IGUIElement **arg5 = 0 ;
  irr::gui::IGUIElement **arg6 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)((irr::gui::IGUIElement const *)arg1)->getNextElement(arg2,arg3,arg4,*arg5,*arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::gui::EGUI_ELEMENT_TYPE _wrap_IGUIElement_getType (irr::gui::IGUIElement *larg1) {
  irr::gui::EGUI_ELEMENT_TYPE lresult = (irr::gui::EGUI_ELEMENT_TYPE)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_ELEMENT_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::gui::EGUI_ELEMENT_TYPE)((irr::gui::IGUIElement const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::EGUI_ELEMENT_TYPE)0;
  }
}


EXPORT int _wrap_IGUIElement_hasType (irr::gui::IGUIElement *larg1, irr::gui::EGUI_ELEMENT_TYPE larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_ELEMENT_TYPE arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::gui::IGUIElement const *)arg1)->hasType(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::c8 *_wrap_IGUIElement_getTypeName (irr::gui::IGUIElement *larg1) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::c8 *)((irr::gui::IGUIElement const *)arg1)->getTypeName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT irr::c8 *_wrap_IGUIElement_getName (irr::gui::IGUIElement *larg1) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::c8 *)((irr::gui::IGUIElement const *)arg1)->getName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT void _wrap_IGUIElement_setName__SWIG_0 (irr::gui::IGUIElement *larg1, irr::c8 *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setName((irr::c8 const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_setName__SWIG_1 (irr::gui::IGUIElement *larg1, irr::core::stringc *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::core::stringc *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setName((irr::core::stringc const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_serializeAttributes__SWIG_0 (irr::gui::IGUIElement *larg1, irr::io::IAttributes *larg2, irr::io::SAttributeReadWriteOptions *larg3) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::gui::IGUIElement const *)arg1)->serializeAttributes(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_serializeAttributes__SWIG_1 (irr::gui::IGUIElement *larg1, irr::io::IAttributes *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::gui::IGUIElement const *)arg1)->serializeAttributes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_deserializeAttributes__SWIG_0 (irr::gui::IGUIElement *larg1, irr::io::IAttributes *larg2, irr::io::SAttributeReadWriteOptions *larg3) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->deserializeAttributes(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIElement_deserializeAttributes__SWIG_1 (irr::gui::IGUIElement *larg1, irr::io::IAttributes *larg2) {
  irr::gui::IGUIElement *arg1 = (irr::gui::IGUIElement *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->deserializeAttributes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setOverrideFont__SWIG_0 (irr::gui::IGUIButton *larg1, irr::gui::IGUIFont *larg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setOverrideFont(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setOverrideFont__SWIG_1 (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setOverrideFont();
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIFont *_wrap_IGUIButton_getOverrideFont (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIFont * lresult = (irr::gui::IGUIFont *)0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIFont *)((irr::gui::IGUIButton const *)arg1)->getOverrideFont();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFont *)0;
  }
}


EXPORT irr::gui::IGUIFont *_wrap_IGUIButton_getActiveFont (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIFont * lresult = (irr::gui::IGUIFont *)0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIFont *)((irr::gui::IGUIButton const *)arg1)->getActiveFont();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFont *)0;
  }
}


EXPORT void _wrap_IGUIButton_setImage__SWIG_0 (irr::gui::IGUIButton *larg1, irr::video::ITexture *larg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setImage(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setImage__SWIG_1 (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setImage();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setImage__SWIG_2 (irr::gui::IGUIButton *larg1, irr::video::ITexture *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setImage(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setPressedImage__SWIG_0 (irr::gui::IGUIButton *larg1, irr::video::ITexture *larg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPressedImage(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setPressedImage__SWIG_1 (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setPressedImage();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setPressedImage__SWIG_2 (irr::gui::IGUIButton *larg1, irr::video::ITexture *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setPressedImage(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setSpriteBank__SWIG_0 (irr::gui::IGUIButton *larg1, irr::gui::IGUISpriteBank *larg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::IGUISpriteBank *arg2 = (irr::gui::IGUISpriteBank *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSpriteBank(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setSpriteBank__SWIG_1 (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setSpriteBank();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setSprite__SWIG_0 (irr::gui::IGUIButton *larg1, irr::gui::EGUI_BUTTON_STATE larg2, irr::s32 larg3, irr::video::SColor *larg4, int larg5) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::EGUI_BUTTON_STATE arg2 ;
  irr::s32 arg3 ;
  irr::video::SColor arg4 ;
  bool arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = (bool)larg5;
  try {
    (arg1)->setSprite(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setSprite__SWIG_1 (irr::gui::IGUIButton *larg1, irr::gui::EGUI_BUTTON_STATE larg2, irr::s32 larg3, irr::video::SColor *larg4) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::EGUI_BUTTON_STATE arg2 ;
  irr::s32 arg3 ;
  irr::video::SColor arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    (arg1)->setSprite(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setSprite__SWIG_2 (irr::gui::IGUIButton *larg1, irr::gui::EGUI_BUTTON_STATE larg2, irr::s32 larg3) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  irr::gui::EGUI_BUTTON_STATE arg2 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setSprite(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setIsPushButton__SWIG_0 (irr::gui::IGUIButton *larg1, int larg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setIsPushButton(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setIsPushButton__SWIG_1 (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setIsPushButton();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setPressed__SWIG_0 (irr::gui::IGUIButton *larg1, int larg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setPressed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setPressed__SWIG_1 (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setPressed();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIButton_isPressed (irr::gui::IGUIButton *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIButton const *)arg1)->isPressed();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIButton_setUseAlphaChannel__SWIG_0 (irr::gui::IGUIButton *larg1, int larg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setUseAlphaChannel(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setUseAlphaChannel__SWIG_1 (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setUseAlphaChannel();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIButton_isAlphaChannelUsed (irr::gui::IGUIButton *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIButton const *)arg1)->isAlphaChannelUsed();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIButton_isPushButton (irr::gui::IGUIButton *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIButton const *)arg1)->isPushButton();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIButton_setDrawBorder__SWIG_0 (irr::gui::IGUIButton *larg1, int larg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDrawBorder(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setDrawBorder__SWIG_1 (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setDrawBorder();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIButton_isDrawingBorder (irr::gui::IGUIButton *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIButton const *)arg1)->isDrawingBorder();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIButton_setScaleImage__SWIG_0 (irr::gui::IGUIButton *larg1, int larg2) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setScaleImage(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIButton_setScaleImage__SWIG_1 (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setScaleImage();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIButton_isScalingImage (irr::gui::IGUIButton *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIButton const *)arg1)->isScalingImage();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IGUIButton (irr::gui::IGUIButton *larg1) {
  irr::gui::IGUIButton *arg1 = (irr::gui::IGUIButton *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUICheckBox_setChecked (irr::gui::IGUICheckBox *larg1, int larg2) {
  irr::gui::IGUICheckBox *arg1 = (irr::gui::IGUICheckBox *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setChecked(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUICheckBox_isChecked (irr::gui::IGUICheckBox *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUICheckBox *arg1 = (irr::gui::IGUICheckBox *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUICheckBox const *)arg1)->isChecked();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IGUICheckBox (irr::gui::IGUICheckBox *larg1) {
  irr::gui::IGUICheckBox *arg1 = (irr::gui::IGUICheckBox *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIColorSelectDialog *_wrap_new_IGUIColorSelectDialog (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUIElement *larg2, irr::s32 larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::gui::IGUIColorSelectDialog * lresult = (irr::gui::IGUIColorSelectDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg3 ;
  irr::core::rect< irr::s32 > arg4 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    result = (irr::gui::IGUIColorSelectDialog *)new irr::gui::IGUIColorSelectDialog(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIColorSelectDialog *)0;
  }
}


EXPORT void _wrap_delete_IGUIColorSelectDialog (irr::gui::IGUIColorSelectDialog *larg1) {
  irr::gui::IGUIColorSelectDialog *arg1 = (irr::gui::IGUIColorSelectDialog *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IGUIComboBox_getItemCount (irr::gui::IGUIComboBox *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::gui::IGUIComboBox const *)arg1)->getItemCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT wchar_t *_wrap_IGUIComboBox_getItem (irr::gui::IGUIComboBox *larg1, irr::u32 larg2) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 arg2 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (wchar_t *)((irr::gui::IGUIComboBox const *)arg1)->getItem(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT irr::u32 _wrap_IGUIComboBox_getItemData (irr::gui::IGUIComboBox *larg1, irr::u32 larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)((irr::gui::IGUIComboBox const *)arg1)->getItemData(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIComboBox_getIndexForItemData (irr::gui::IGUIComboBox *larg1, irr::u32 larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 arg2 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::gui::IGUIComboBox const *)arg1)->getIndexForItemData(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIComboBox_addItem__SWIG_0 (irr::gui::IGUIComboBox *larg1, wchar_t *larg2, irr::u32 larg3) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::u32 arg3 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIComboBox_addItem__SWIG_1 (irr::gui::IGUIComboBox *larg1, wchar_t *larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IGUIComboBox_removeItem (irr::gui::IGUIComboBox *larg1, irr::u32 larg2) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeItem(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIComboBox_clear (irr::gui::IGUIComboBox *larg1) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIComboBox_getSelected (irr::gui::IGUIComboBox *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIComboBox const *)arg1)->getSelected();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIComboBox_setSelected (irr::gui::IGUIComboBox *larg1, irr::s32 larg2) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSelected(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIComboBox_setTextAlignment (irr::gui::IGUIComboBox *larg1, irr::gui::EGUI_ALIGNMENT larg2, irr::gui::EGUI_ALIGNMENT larg3) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::gui::EGUI_ALIGNMENT arg2 ;
  irr::gui::EGUI_ALIGNMENT arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setTextAlignment(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIComboBox_setMaxSelectionRows (irr::gui::IGUIComboBox *larg1, irr::u32 larg2) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaxSelectionRows(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IGUIComboBox_getMaxSelectionRows (irr::gui::IGUIComboBox *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::gui::IGUIComboBox const *)arg1)->getMaxSelectionRows();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_delete_IGUIComboBox (irr::gui::IGUIComboBox *larg1) {
  irr::gui::IGUIComboBox *arg1 = (irr::gui::IGUIComboBox *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIContextMenu_setCloseHandling (irr::gui::IGUIContextMenu *larg1, irr::gui::ECONTEXT_MENU_CLOSE larg2) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::gui::ECONTEXT_MENU_CLOSE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCloseHandling(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::ECONTEXT_MENU_CLOSE _wrap_IGUIContextMenu_getCloseHandling (irr::gui::IGUIContextMenu *larg1) {
  irr::gui::ECONTEXT_MENU_CLOSE lresult = (irr::gui::ECONTEXT_MENU_CLOSE)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::gui::ECONTEXT_MENU_CLOSE result;
  
  arg1 = larg1;
  try {
    result = (irr::gui::ECONTEXT_MENU_CLOSE)((irr::gui::IGUIContextMenu const *)arg1)->getCloseHandling();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::ECONTEXT_MENU_CLOSE)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_getItemCount (irr::gui::IGUIContextMenu *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::gui::IGUIContextMenu const *)arg1)->getItemCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_addItem__SWIG_0 (irr::gui::IGUIContextMenu *larg1, wchar_t *larg2, irr::s32 larg3, int larg4, int larg5, int larg6, int larg7) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  try {
    result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_addItem__SWIG_1 (irr::gui::IGUIContextMenu *larg1, wchar_t *larg2, irr::s32 larg3, int larg4, int larg5, int larg6) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_addItem__SWIG_2 (irr::gui::IGUIContextMenu *larg1, wchar_t *larg2, irr::s32 larg3, int larg4, int larg5) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_addItem__SWIG_3 (irr::gui::IGUIContextMenu *larg1, wchar_t *larg2, irr::s32 larg3, int larg4) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_addItem__SWIG_4 (irr::gui::IGUIContextMenu *larg1, wchar_t *larg2, irr::s32 larg3) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_addItem__SWIG_5 (irr::gui::IGUIContextMenu *larg1, wchar_t *larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_insertItem__SWIG_0 (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2, wchar_t *larg3, irr::s32 larg4, int larg5, int larg6, int larg7, int larg8) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  arg8 = (bool)larg8;
  try {
    result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_insertItem__SWIG_1 (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2, wchar_t *larg3, irr::s32 larg4, int larg5, int larg6, int larg7) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  try {
    result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_insertItem__SWIG_2 (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2, wchar_t *larg3, irr::s32 larg4, int larg5, int larg6) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_insertItem__SWIG_3 (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2, wchar_t *larg3, irr::s32 larg4, int larg5) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_insertItem__SWIG_4 (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2, wchar_t *larg3, irr::s32 larg4) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIContextMenu_insertItem__SWIG_5 (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2, wchar_t *larg3) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::u32)(arg1)->insertItem(arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIContextMenu_findItemWithCommandId__SWIG_0 (irr::gui::IGUIContextMenu *larg1, irr::s32 larg2, irr::u32 larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::s32 arg2 ;
  irr::u32 arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)((irr::gui::IGUIContextMenu const *)arg1)->findItemWithCommandId(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIContextMenu_findItemWithCommandId__SWIG_1 (irr::gui::IGUIContextMenu *larg1, irr::s32 larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::s32 arg2 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::gui::IGUIContextMenu const *)arg1)->findItemWithCommandId(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIContextMenu_addSeparator (irr::gui::IGUIContextMenu *larg1) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->addSeparator();
    
  } catch (...) {
    
  }
}


EXPORT wchar_t *_wrap_IGUIContextMenu_getItemText (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (wchar_t *)((irr::gui::IGUIContextMenu const *)arg1)->getItemText(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT void _wrap_IGUIContextMenu_setItemText (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2, wchar_t *larg3) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setItemText(arg2,(wchar_t const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIContextMenu_isItemEnabled (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::gui::IGUIContextMenu const *)arg1)->isItemEnabled(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIContextMenu_setItemEnabled (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2, int larg3) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->setItemEnabled(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIContextMenu_setItemChecked (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2, int larg3) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->setItemChecked(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIContextMenu_isItemChecked (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::gui::IGUIContextMenu const *)arg1)->isItemChecked(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIContextMenu_removeItem (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeItem(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIContextMenu_removeAllItems (irr::gui::IGUIContextMenu *larg1) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->removeAllItems();
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIContextMenu_getSelectedItem (irr::gui::IGUIContextMenu *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIContextMenu const *)arg1)->getSelectedItem();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIContextMenu_getItemCommandId (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::gui::IGUIContextMenu const *)arg1)->getItemCommandId(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIContextMenu_setItemCommandId (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2, irr::s32 larg3) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setItemCommandId(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIContextMenu *_wrap_IGUIContextMenu_getSubMenu (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2) {
  irr::gui::IGUIContextMenu * lresult = (irr::gui::IGUIContextMenu *)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIContextMenu *)((irr::gui::IGUIContextMenu const *)arg1)->getSubMenu(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIContextMenu *)0;
  }
}


EXPORT void _wrap_IGUIContextMenu_setItemAutoChecking (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2, int larg3) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->setItemAutoChecking(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIContextMenu_getItemAutoChecking (irr::gui::IGUIContextMenu *larg1, irr::u32 larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::u32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::gui::IGUIContextMenu const *)arg1)->getItemAutoChecking(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIContextMenu_setEventParent (irr::gui::IGUIContextMenu *larg1, irr::gui::IGUIElement *larg2) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setEventParent(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IGUIContextMenu (irr::gui::IGUIContextMenu *larg1) {
  irr::gui::IGUIContextMenu *arg1 = (irr::gui::IGUIContextMenu *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEditBox_setOverrideFont__SWIG_0 (irr::gui::IGUIEditBox *larg1, irr::gui::IGUIFont *larg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setOverrideFont(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEditBox_setOverrideFont__SWIG_1 (irr::gui::IGUIEditBox *larg1) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setOverrideFont();
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIFont *_wrap_IGUIEditBox_getOverrideFont (irr::gui::IGUIEditBox *larg1) {
  irr::gui::IGUIFont * lresult = (irr::gui::IGUIFont *)0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIFont *)((irr::gui::IGUIEditBox const *)arg1)->getOverrideFont();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFont *)0;
  }
}


EXPORT irr::gui::IGUIFont *_wrap_IGUIEditBox_getActiveFont (irr::gui::IGUIEditBox *larg1) {
  irr::gui::IGUIFont * lresult = (irr::gui::IGUIFont *)0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIFont *)((irr::gui::IGUIEditBox const *)arg1)->getActiveFont();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFont *)0;
  }
}


EXPORT void _wrap_IGUIEditBox_setOverrideColor (irr::gui::IGUIEditBox *larg1, irr::video::SColor *larg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setOverrideColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_IGUIEditBox_getOverrideColor (irr::gui::IGUIEditBox *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUIEditBox const *)arg1)->getOverrideColor();
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_IGUIEditBox_enableOverrideColor (irr::gui::IGUIEditBox *larg1, int larg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->enableOverrideColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIEditBox_isOverrideColorEnabled (irr::gui::IGUIEditBox *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIEditBox const *)arg1)->isOverrideColorEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIEditBox_setDrawBackground (irr::gui::IGUIEditBox *larg1, int larg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDrawBackground(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEditBox_setDrawBorder (irr::gui::IGUIEditBox *larg1, int larg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDrawBorder(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEditBox_setTextAlignment (irr::gui::IGUIEditBox *larg1, irr::gui::EGUI_ALIGNMENT larg2, irr::gui::EGUI_ALIGNMENT larg3) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::gui::EGUI_ALIGNMENT arg2 ;
  irr::gui::EGUI_ALIGNMENT arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setTextAlignment(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEditBox_setWordWrap (irr::gui::IGUIEditBox *larg1, int larg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setWordWrap(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIEditBox_isWordWrapEnabled (irr::gui::IGUIEditBox *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIEditBox const *)arg1)->isWordWrapEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIEditBox_setMultiLine (irr::gui::IGUIEditBox *larg1, int larg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setMultiLine(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIEditBox_isMultiLineEnabled (irr::gui::IGUIEditBox *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIEditBox const *)arg1)->isMultiLineEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIEditBox_setAutoScroll (irr::gui::IGUIEditBox *larg1, int larg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setAutoScroll(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIEditBox_isAutoScrollEnabled (irr::gui::IGUIEditBox *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIEditBox const *)arg1)->isAutoScrollEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIEditBox_setPasswordBox__SWIG_0 (irr::gui::IGUIEditBox *larg1, int larg2, wchar_t *larg3) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  wchar_t arg3 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = *larg3;
  try {
    (arg1)->setPasswordBox(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEditBox_setPasswordBox__SWIG_1 (irr::gui::IGUIEditBox *larg1, int larg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setPasswordBox(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIEditBox_isPasswordBox (irr::gui::IGUIEditBox *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIEditBox const *)arg1)->isPasswordBox();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::dimension2du *_wrap_IGUIEditBox_getTextDimension (irr::gui::IGUIEditBox *larg1) {
  irr::core::dimension2du * lresult = (irr::core::dimension2du *)0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::core::dimension2du result;
  
  arg1 = larg1;
  try {
    result = (arg1)->getTextDimension();
    lresult = new irr::core::dimension2du(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2du *)0;
  }
}


EXPORT void _wrap_IGUIEditBox_setMax (irr::gui::IGUIEditBox *larg1, irr::u32 larg2) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMax(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IGUIEditBox_getMax (irr::gui::IGUIEditBox *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::gui::IGUIEditBox const *)arg1)->getMax();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_delete_IGUIEditBox (irr::gui::IGUIEditBox *larg1) {
  irr::gui::IGUIEditBox *arg1 = (irr::gui::IGUIEditBox *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIElementFactory_addGUIElement__SWIG_0 (irr::gui::IGUIElementFactory *larg1, irr::gui::EGUI_ELEMENT_TYPE larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::gui::EGUI_ELEMENT_TYPE arg2 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIElement *)(arg1)->addGUIElement(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIElementFactory_addGUIElement__SWIG_1 (irr::gui::IGUIElementFactory *larg1, irr::gui::EGUI_ELEMENT_TYPE larg2) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::gui::EGUI_ELEMENT_TYPE arg2 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIElement *)(arg1)->addGUIElement(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIElementFactory_addGUIElement__SWIG_2 (irr::gui::IGUIElementFactory *larg1, irr::c8 *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIElement *)(arg1)->addGUIElement((irr::c8 const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIElementFactory_addGUIElement__SWIG_3 (irr::gui::IGUIElementFactory *larg1, irr::c8 *larg2) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIElement *)(arg1)->addGUIElement((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT irr::s32 _wrap_IGUIElementFactory_getCreatableGUIElementTypeCount (irr::gui::IGUIElementFactory *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIElementFactory const *)arg1)->getCreatableGUIElementTypeCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::gui::EGUI_ELEMENT_TYPE _wrap_IGUIElementFactory_getCreateableGUIElementType (irr::gui::IGUIElementFactory *larg1, irr::s32 larg2) {
  irr::gui::EGUI_ELEMENT_TYPE lresult = (irr::gui::EGUI_ELEMENT_TYPE)0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::s32 arg2 ;
  irr::gui::EGUI_ELEMENT_TYPE result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::EGUI_ELEMENT_TYPE)((irr::gui::IGUIElementFactory const *)arg1)->getCreateableGUIElementType(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::EGUI_ELEMENT_TYPE)0;
  }
}


EXPORT irr::c8 *_wrap_IGUIElementFactory_getCreateableGUIElementTypeName__SWIG_0 (irr::gui::IGUIElementFactory *larg1, irr::s32 larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::s32 arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)((irr::gui::IGUIElementFactory const *)arg1)->getCreateableGUIElementTypeName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT irr::c8 *_wrap_IGUIElementFactory_getCreateableGUIElementTypeName__SWIG_1 (irr::gui::IGUIElementFactory *larg1, irr::gui::EGUI_ELEMENT_TYPE larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  irr::gui::EGUI_ELEMENT_TYPE arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)((irr::gui::IGUIElementFactory const *)arg1)->getCreateableGUIElementTypeName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT void _wrap_delete_IGUIElementFactory (irr::gui::IGUIElementFactory *larg1) {
  irr::gui::IGUIElementFactory *arg1 = (irr::gui::IGUIElementFactory *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_IGUISkin_getColor (irr::gui::IGUISkin *larg1, irr::gui::EGUI_DEFAULT_COLOR larg2) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_COLOR arg2 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::gui::IGUISkin const *)arg1)->getColor(arg2);
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_IGUISkin_setColor (irr::gui::IGUISkin *larg1, irr::gui::EGUI_DEFAULT_COLOR larg2, irr::video::SColor *larg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_COLOR arg2 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setColor(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUISkin_getSize (irr::gui::IGUISkin *larg1, irr::gui::EGUI_DEFAULT_SIZE larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_SIZE arg2 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::gui::IGUISkin const *)arg1)->getSize(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT wchar_t *_wrap_IGUISkin_getDefaultText (irr::gui::IGUISkin *larg1, irr::gui::EGUI_DEFAULT_TEXT larg2) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_TEXT arg2 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (wchar_t *)((irr::gui::IGUISkin const *)arg1)->getDefaultText(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT void _wrap_IGUISkin_setDefaultText (irr::gui::IGUISkin *larg1, irr::gui::EGUI_DEFAULT_TEXT larg2, wchar_t *larg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_TEXT arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setDefaultText(arg2,(wchar_t const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_setSize (irr::gui::IGUISkin *larg1, irr::gui::EGUI_DEFAULT_SIZE larg2, irr::s32 larg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_SIZE arg2 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setSize(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIFont *_wrap_IGUISkin_getFont__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::EGUI_DEFAULT_FONT larg2) {
  irr::gui::IGUIFont * lresult = (irr::gui::IGUIFont *)0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_FONT arg2 ;
  irr::gui::IGUIFont *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIFont *)((irr::gui::IGUISkin const *)arg1)->getFont(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFont *)0;
  }
}


EXPORT irr::gui::IGUIFont *_wrap_IGUISkin_getFont__SWIG_1 (irr::gui::IGUISkin *larg1) {
  irr::gui::IGUIFont * lresult = (irr::gui::IGUIFont *)0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIFont *)((irr::gui::IGUISkin const *)arg1)->getFont();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFont *)0;
  }
}


EXPORT void _wrap_IGUISkin_setFont__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::IGUIFont *larg2, irr::gui::EGUI_DEFAULT_FONT larg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  irr::gui::EGUI_DEFAULT_FONT arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setFont(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_setFont__SWIG_1 (irr::gui::IGUISkin *larg1, irr::gui::IGUIFont *larg2) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setFont(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUISpriteBank *_wrap_IGUISkin_getSpriteBank (irr::gui::IGUISkin *larg1) {
  irr::gui::IGUISpriteBank * lresult = (irr::gui::IGUISpriteBank *)0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUISpriteBank *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUISpriteBank *)((irr::gui::IGUISkin const *)arg1)->getSpriteBank();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUISpriteBank *)0;
  }
}


EXPORT void _wrap_IGUISkin_setSpriteBank (irr::gui::IGUISkin *larg1, irr::gui::IGUISpriteBank *larg2) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUISpriteBank *arg2 = (irr::gui::IGUISpriteBank *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSpriteBank(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IGUISkin_getIcon (irr::gui::IGUISkin *larg1, irr::gui::EGUI_DEFAULT_ICON larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg2 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)((irr::gui::IGUISkin const *)arg1)->getIcon(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IGUISkin_setIcon (irr::gui::IGUISkin *larg1, irr::gui::EGUI_DEFAULT_ICON larg2, irr::u32 larg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg2 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setIcon(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DButtonPaneStandard__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::core::rect< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw3DButtonPaneStandard(arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DButtonPaneStandard__SWIG_1 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->draw3DButtonPaneStandard(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DButtonPanePressed__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::core::rect< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw3DButtonPanePressed(arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DButtonPanePressed__SWIG_1 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->draw3DButtonPanePressed(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DSunkenPane__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::video::SColor *larg3, int larg4, int larg5, irr::core::rect< irr::s32 > *larg6, irr::core::rect< irr::s32 > *larg7) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::video::SColor arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::core::rect< irr::s32 > *arg6 = 0 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    (arg1)->draw3DSunkenPane(arg2,arg3,arg4,arg5,(irr::core::rect< irr::s32 > const &)*arg6,(irr::core::rect< irr::s32 > const *)arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DSunkenPane__SWIG_1 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::video::SColor *larg3, int larg4, int larg5, irr::core::rect< irr::s32 > *larg6) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::video::SColor arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::core::rect< irr::s32 > *arg6 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    (arg1)->draw3DSunkenPane(arg2,arg3,arg4,arg5,(irr::core::rect< irr::s32 > const &)*arg6);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::rect< irr::s32 > *_wrap_IGUISkin_draw3DWindowBackground__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, int larg3, irr::video::SColor *larg4, irr::core::rect< irr::s32 > *larg5, irr::core::rect< irr::s32 > *larg6, irr::core::rect< irr::s32 > *larg7) {
  irr::core::rect< irr::s32 > * lresult = (irr::core::rect< irr::s32 > *)0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (arg1)->draw3DWindowBackground(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6,arg7);
    lresult = new irr::core::rect< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< irr::s32 > *)0;
  }
}


EXPORT irr::core::rect< irr::s32 > *_wrap_IGUISkin_draw3DWindowBackground__SWIG_1 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, int larg3, irr::video::SColor *larg4, irr::core::rect< irr::s32 > *larg5, irr::core::rect< irr::s32 > *larg6) {
  irr::core::rect< irr::s32 > * lresult = (irr::core::rect< irr::s32 > *)0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (arg1)->draw3DWindowBackground(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6);
    lresult = new irr::core::rect< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< irr::s32 > *)0;
  }
}


EXPORT irr::core::rect< irr::s32 > *_wrap_IGUISkin_draw3DWindowBackground__SWIG_2 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, int larg3, irr::video::SColor *larg4, irr::core::rect< irr::s32 > *larg5) {
  irr::core::rect< irr::s32 > * lresult = (irr::core::rect< irr::s32 > *)0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::video::SColor arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::core::rect< irr::s32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = *larg4;
  arg5 = larg5;
  try {
    result = (arg1)->draw3DWindowBackground(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5);
    lresult = new irr::core::rect< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< irr::s32 > *)0;
  }
}


EXPORT void _wrap_IGUISkin_draw3DMenuPane__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::core::rect< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw3DMenuPane(arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DMenuPane__SWIG_1 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->draw3DMenuPane(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DToolBar__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::core::rect< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw3DToolBar(arg2,(irr::core::rect< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DToolBar__SWIG_1 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->draw3DToolBar(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DTabButton__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, int larg3, irr::core::rect< irr::s32 > *larg4, irr::core::rect< irr::s32 > *larg5, irr::gui::EGUI_ALIGNMENT larg6) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::gui::EGUI_ALIGNMENT arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->draw3DTabButton(arg2,arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DTabButton__SWIG_1 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, int larg3, irr::core::rect< irr::s32 > *larg4, irr::core::rect< irr::s32 > *larg5) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->draw3DTabButton(arg2,arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DTabButton__SWIG_2 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, int larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    (arg1)->draw3DTabButton(arg2,arg3,(irr::core::rect< irr::s32 > const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DTabBody__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, int larg3, int larg4, irr::core::rect< irr::s32 > *larg5, irr::core::rect< irr::s32 > *larg6, irr::s32 larg7, irr::gui::EGUI_ALIGNMENT larg8) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::s32 arg7 ;
  irr::gui::EGUI_ALIGNMENT arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    (arg1)->draw3DTabBody(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DTabBody__SWIG_1 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, int larg3, int larg4, irr::core::rect< irr::s32 > *larg5, irr::core::rect< irr::s32 > *larg6, irr::s32 larg7) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::s32 arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    (arg1)->draw3DTabBody(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DTabBody__SWIG_2 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, int larg3, int larg4, irr::core::rect< irr::s32 > *larg5, irr::core::rect< irr::s32 > *larg6) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  irr::core::rect< irr::s32 > *arg6 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->draw3DTabBody(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5,(irr::core::rect< irr::s32 > const *)arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw3DTabBody__SWIG_3 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, int larg3, int larg4, irr::core::rect< irr::s32 > *larg5) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::rect< irr::s32 > *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    (arg1)->draw3DTabBody(arg2,arg3,arg4,(irr::core::rect< irr::s32 > const &)*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_drawIcon__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::gui::EGUI_DEFAULT_ICON larg3, irr::core::position2di const *larg4, irr::u32 larg5, irr::u32 larg6, int larg7, irr::core::rect< irr::s32 > *larg8) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg3 ;
  irr::core::position2di arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  bool arg7 ;
  irr::core::rect< irr::s32 > *arg8 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  try {
    (arg1)->drawIcon(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::rect< irr::s32 > const *)arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_drawIcon__SWIG_1 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::gui::EGUI_DEFAULT_ICON larg3, irr::core::position2di const *larg4, irr::u32 larg5, irr::u32 larg6, int larg7) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg3 ;
  irr::core::position2di arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  bool arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  try {
    (arg1)->drawIcon(arg2,arg3,arg4,arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_drawIcon__SWIG_2 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::gui::EGUI_DEFAULT_ICON larg3, irr::core::position2di const *larg4, irr::u32 larg5, irr::u32 larg6) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg3 ;
  irr::core::position2di arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->drawIcon(arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_drawIcon__SWIG_3 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::gui::EGUI_DEFAULT_ICON larg3, irr::core::position2di const *larg4, irr::u32 larg5) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg3 ;
  irr::core::position2di arg4 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  try {
    (arg1)->drawIcon(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_drawIcon__SWIG_4 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::gui::EGUI_DEFAULT_ICON larg3, irr::core::position2di const *larg4) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::EGUI_DEFAULT_ICON arg3 ;
  irr::core::position2di arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    (arg1)->drawIcon(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw2DRectangle__SWIG_0 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::video::SColor *larg3, irr::core::rect< irr::s32 > *larg4, irr::core::rect< irr::s32 > *larg5) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::video::SColor *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  irr::core::rect< irr::s32 > *arg5 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->draw2DRectangle(arg2,(irr::video::SColor const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4,(irr::core::rect< irr::s32 > const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISkin_draw2DRectangle__SWIG_1 (irr::gui::IGUISkin *larg1, irr::gui::IGUIElement *larg2, irr::video::SColor *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::video::SColor *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw2DRectangle(arg2,(irr::video::SColor const &)*arg3,(irr::core::rect< irr::s32 > const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::EGUI_SKIN_TYPE _wrap_IGUISkin_getType (irr::gui::IGUISkin *larg1) {
  irr::gui::EGUI_SKIN_TYPE lresult = (irr::gui::EGUI_SKIN_TYPE)0 ;
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  irr::gui::EGUI_SKIN_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::gui::EGUI_SKIN_TYPE)((irr::gui::IGUISkin const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::EGUI_SKIN_TYPE)0;
  }
}


EXPORT void _wrap_delete_IGUISkin (irr::gui::IGUISkin *larg1) {
  irr::gui::IGUISkin *arg1 = (irr::gui::IGUISkin *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEnvironment_drawAll (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->drawAll();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIEnvironment_setFocus (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUIElement *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->setFocus(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIEnvironment_getFocus (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIElement *)((irr::gui::IGUIEnvironment const *)arg1)->getFocus();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIEnvironment_getHovered (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIElement *)((irr::gui::IGUIEnvironment const *)arg1)->getHovered();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT int _wrap_IGUIEnvironment_removeFocus (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUIElement *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->removeFocus(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIEnvironment_hasFocus (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUIElement *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::gui::IGUIEnvironment const *)arg1)->hasFocus(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::video::IVideoDriver *_wrap_IGUIEnvironment_getVideoDriver (irr::gui::IGUIEnvironment *larg1) {
  irr::video::IVideoDriver * lresult = (irr::video::IVideoDriver *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::IVideoDriver *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::IVideoDriver *)((irr::gui::IGUIEnvironment const *)arg1)->getVideoDriver();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IVideoDriver *)0;
  }
}


EXPORT irr::io::IFileSystem *_wrap_IGUIEnvironment_getFileSystem (irr::gui::IGUIEnvironment *larg1) {
  irr::io::IFileSystem * lresult = (irr::io::IFileSystem *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IFileSystem *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::IFileSystem *)((irr::gui::IGUIEnvironment const *)arg1)->getFileSystem();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IFileSystem *)0;
  }
}


EXPORT irr::IOSOperator *_wrap_IGUIEnvironment_getOSOperator (irr::gui::IGUIEnvironment *larg1) {
  irr::IOSOperator * lresult = (irr::IOSOperator *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::IOSOperator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::IOSOperator *)((irr::gui::IGUIEnvironment const *)arg1)->getOSOperator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::IOSOperator *)0;
  }
}


EXPORT void _wrap_IGUIEnvironment_clear (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIEnvironment_postEventFromUser (irr::gui::IGUIEnvironment *larg1, irr::SEvent *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::SEvent *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->postEventFromUser((irr::SEvent const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIEnvironment_setUserEventReceiver (irr::gui::IGUIEnvironment *larg1, irr::IEventReceiver *larg2) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::IEventReceiver *arg2 = (irr::IEventReceiver *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setUserEventReceiver(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUISkin *_wrap_IGUIEnvironment_getSkin (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUISkin * lresult = (irr::gui::IGUISkin *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUISkin *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUISkin *)((irr::gui::IGUIEnvironment const *)arg1)->getSkin();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUISkin *)0;
  }
}


EXPORT void _wrap_IGUIEnvironment_setSkin (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUISkin *larg2) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUISkin *arg2 = (irr::gui::IGUISkin *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSkin(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUISkin *_wrap_IGUIEnvironment_createSkin (irr::gui::IGUIEnvironment *larg1, irr::gui::EGUI_SKIN_TYPE larg2) {
  irr::gui::IGUISkin * lresult = (irr::gui::IGUISkin *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::EGUI_SKIN_TYPE arg2 ;
  irr::gui::IGUISkin *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUISkin *)(arg1)->createSkin(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUISkin *)0;
  }
}


EXPORT irr::gui::IGUIImageList *_wrap_IGUIEnvironment_createImageList (irr::gui::IGUIEnvironment *larg1, irr::video::ITexture *larg2, irr::core::dimension2d< irr::s32 > *larg3, int larg4) {
  irr::gui::IGUIImageList * lresult = (irr::gui::IGUIImageList *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::dimension2d< irr::s32 > arg3 ;
  bool arg4 ;
  irr::gui::IGUIImageList *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::gui::IGUIImageList *)(arg1)->createImageList(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImageList *)0;
  }
}


EXPORT irr::gui::IGUIFont *_wrap_IGUIEnvironment_getFont (irr::gui::IGUIEnvironment *larg1, irr::io::path *larg2) {
  irr::gui::IGUIFont * lresult = (irr::gui::IGUIFont *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIFont *)(arg1)->getFont((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFont *)0;
  }
}


EXPORT irr::gui::IGUIFont *_wrap_IGUIEnvironment_addFont (irr::gui::IGUIEnvironment *larg1, irr::io::path *larg2, irr::gui::IGUIFont *larg3) {
  irr::gui::IGUIFont * lresult = (irr::gui::IGUIFont *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUIFont *arg3 = (irr::gui::IGUIFont *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIFont *)(arg1)->addFont((irr::io::path const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFont *)0;
  }
}


EXPORT void _wrap_IGUIEnvironment_removeFont (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUIFont *larg2) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeFont(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIFont *_wrap_IGUIEnvironment_getBuiltInFont (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIFont * lresult = (irr::gui::IGUIFont *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIFont *)((irr::gui::IGUIEnvironment const *)arg1)->getBuiltInFont();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFont *)0;
  }
}


EXPORT irr::gui::IGUISpriteBank *_wrap_IGUIEnvironment_getSpriteBank (irr::gui::IGUIEnvironment *larg1, irr::io::path *larg2) {
  irr::gui::IGUISpriteBank * lresult = (irr::gui::IGUISpriteBank *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUISpriteBank *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUISpriteBank *)(arg1)->getSpriteBank((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUISpriteBank *)0;
  }
}


EXPORT irr::gui::IGUISpriteBank *_wrap_IGUIEnvironment_addEmptySpriteBank (irr::gui::IGUIEnvironment *larg1, irr::io::path *larg2) {
  irr::gui::IGUISpriteBank * lresult = (irr::gui::IGUISpriteBank *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUISpriteBank *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUISpriteBank *)(arg1)->addEmptySpriteBank((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUISpriteBank *)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIEnvironment_getRootGUIElement (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIElement *)(arg1)->getRootGUIElement();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIEnvironment_addButton__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4, wchar_t *larg5, wchar_t *larg6) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,(wchar_t const *)arg5,(wchar_t const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIEnvironment_addButton__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4, wchar_t *larg5) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,(wchar_t const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIEnvironment_addButton__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIEnvironment_addButton__SWIG_3 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton((irr::core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIEnvironment_addButton__SWIG_4 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton((irr::core::rect< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addWindow__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, int larg3, wchar_t *larg4, irr::gui::IGUIElement *larg5, irr::s32 larg6) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg6 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addWindow((irr::core::rect< irr::s32 > const &)*arg2,arg3,(wchar_t const *)arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addWindow__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, int larg3, wchar_t *larg4, irr::gui::IGUIElement *larg5) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addWindow((irr::core::rect< irr::s32 > const &)*arg2,arg3,(wchar_t const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addWindow__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, int larg3, wchar_t *larg4) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addWindow((irr::core::rect< irr::s32 > const &)*arg2,arg3,(wchar_t const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addWindow__SWIG_3 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, int larg3) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  bool arg3 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addWindow((irr::core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addWindow__SWIG_4 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addWindow((irr::core::rect< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIEnvironment_addModalScreen (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUIElement *larg2) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIElement *)(arg1)->addModalScreen(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addMessageBox__SWIG_0 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, wchar_t *larg3, int larg4, irr::s32 larg5, irr::gui::IGUIElement *larg6, irr::s32 larg7, irr::video::ITexture *larg8) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool arg4 ;
  irr::s32 arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg7 ;
  irr::video::ITexture *arg8 = (irr::video::ITexture *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addMessageBox__SWIG_1 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, wchar_t *larg3, int larg4, irr::s32 larg5, irr::gui::IGUIElement *larg6, irr::s32 larg7) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool arg4 ;
  irr::s32 arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg7 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addMessageBox__SWIG_2 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, wchar_t *larg3, int larg4, irr::s32 larg5, irr::gui::IGUIElement *larg6) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool arg4 ;
  irr::s32 arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addMessageBox__SWIG_3 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, wchar_t *larg3, int larg4, irr::s32 larg5) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool arg4 ;
  irr::s32 arg5 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addMessageBox__SWIG_4 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, wchar_t *larg3, int larg4) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  bool arg4 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addMessageBox__SWIG_5 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, wchar_t *larg3) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIWindow *_wrap_IGUIEnvironment_addMessageBox__SWIG_6 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2) {
  irr::gui::IGUIWindow * lresult = (irr::gui::IGUIWindow *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::gui::IGUIWindow *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIWindow *)(arg1)->addMessageBox((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIWindow *)0;
  }
}


EXPORT irr::gui::IGUIScrollBar *_wrap_IGUIEnvironment_addScrollBar__SWIG_0 (irr::gui::IGUIEnvironment *larg1, int larg2, irr::core::rect< irr::s32 > *larg3, irr::gui::IGUIElement *larg4, irr::s32 larg5) {
  irr::gui::IGUIScrollBar * lresult = (irr::gui::IGUIScrollBar *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  irr::gui::IGUIScrollBar *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIScrollBar *)(arg1)->addScrollBar(arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIScrollBar *)0;
  }
}


EXPORT irr::gui::IGUIScrollBar *_wrap_IGUIEnvironment_addScrollBar__SWIG_1 (irr::gui::IGUIEnvironment *larg1, int larg2, irr::core::rect< irr::s32 > *larg3, irr::gui::IGUIElement *larg4) {
  irr::gui::IGUIScrollBar * lresult = (irr::gui::IGUIScrollBar *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIScrollBar *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIScrollBar *)(arg1)->addScrollBar(arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIScrollBar *)0;
  }
}


EXPORT irr::gui::IGUIScrollBar *_wrap_IGUIEnvironment_addScrollBar__SWIG_2 (irr::gui::IGUIEnvironment *larg1, int larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::gui::IGUIScrollBar * lresult = (irr::gui::IGUIScrollBar *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIScrollBar *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIScrollBar *)(arg1)->addScrollBar(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIScrollBar *)0;
  }
}


EXPORT irr::gui::IGUIImage *_wrap_IGUIEnvironment_addImage__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, int larg4, irr::gui::IGUIElement *larg5, irr::s32 larg6, wchar_t *larg7) {
  irr::gui::IGUIImage * lresult = (irr::gui::IGUIImage *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg6 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  irr::gui::IGUIImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::gui::IGUIImage *)(arg1)->addImage(arg2,arg3,arg4,arg5,arg6,(wchar_t const *)arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImage *)0;
  }
}


EXPORT irr::gui::IGUIImage *_wrap_IGUIEnvironment_addImage__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, int larg4, irr::gui::IGUIElement *larg5, irr::s32 larg6) {
  irr::gui::IGUIImage * lresult = (irr::gui::IGUIImage *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg6 ;
  irr::gui::IGUIImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUIImage *)(arg1)->addImage(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImage *)0;
  }
}


EXPORT irr::gui::IGUIImage *_wrap_IGUIEnvironment_addImage__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, int larg4, irr::gui::IGUIElement *larg5) {
  irr::gui::IGUIImage * lresult = (irr::gui::IGUIImage *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIImage *)(arg1)->addImage(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImage *)0;
  }
}


EXPORT irr::gui::IGUIImage *_wrap_IGUIEnvironment_addImage__SWIG_3 (irr::gui::IGUIEnvironment *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3, int larg4) {
  irr::gui::IGUIImage * lresult = (irr::gui::IGUIImage *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  bool arg4 ;
  irr::gui::IGUIImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::gui::IGUIImage *)(arg1)->addImage(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImage *)0;
  }
}


EXPORT irr::gui::IGUIImage *_wrap_IGUIEnvironment_addImage__SWIG_4 (irr::gui::IGUIEnvironment *larg1, irr::video::ITexture *larg2, irr::core::vector2d< irr::s32 > *larg3) {
  irr::gui::IGUIImage * lresult = (irr::gui::IGUIImage *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::core::vector2d< irr::s32 > arg3 ;
  irr::gui::IGUIImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (irr::gui::IGUIImage *)(arg1)->addImage(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImage *)0;
  }
}


EXPORT irr::gui::IGUIImage *_wrap_IGUIEnvironment_addImage__SWIG_5 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4, wchar_t *larg5, int larg6) {
  irr::gui::IGUIImage * lresult = (irr::gui::IGUIImage *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  bool arg6 ;
  irr::gui::IGUIImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::gui::IGUIImage *)(arg1)->addImage((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,(wchar_t const *)arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImage *)0;
  }
}


EXPORT irr::gui::IGUIImage *_wrap_IGUIEnvironment_addImage__SWIG_6 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4, wchar_t *larg5) {
  irr::gui::IGUIImage * lresult = (irr::gui::IGUIImage *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  irr::gui::IGUIImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIImage *)(arg1)->addImage((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,(wchar_t const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImage *)0;
  }
}


EXPORT irr::gui::IGUIImage *_wrap_IGUIEnvironment_addImage__SWIG_7 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4) {
  irr::gui::IGUIImage * lresult = (irr::gui::IGUIImage *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIImage *)(arg1)->addImage((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImage *)0;
  }
}


EXPORT irr::gui::IGUIImage *_wrap_IGUIEnvironment_addImage__SWIG_8 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIImage * lresult = (irr::gui::IGUIImage *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIImage *)(arg1)->addImage((irr::core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImage *)0;
  }
}


EXPORT irr::gui::IGUIImage *_wrap_IGUIEnvironment_addImage__SWIG_9 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUIImage * lresult = (irr::gui::IGUIImage *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIImage *)(arg1)->addImage((irr::core::rect< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImage *)0;
  }
}


EXPORT irr::gui::IGUICheckBox *_wrap_IGUIEnvironment_addCheckBox__SWIG_0 (irr::gui::IGUIEnvironment *larg1, int larg2, irr::core::rect< irr::s32 > *larg3, irr::gui::IGUIElement *larg4, irr::s32 larg5, wchar_t *larg6) {
  irr::gui::IGUICheckBox * lresult = (irr::gui::IGUICheckBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  irr::gui::IGUICheckBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUICheckBox *)(arg1)->addCheckBox(arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,(wchar_t const *)arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUICheckBox *)0;
  }
}


EXPORT irr::gui::IGUICheckBox *_wrap_IGUIEnvironment_addCheckBox__SWIG_1 (irr::gui::IGUIEnvironment *larg1, int larg2, irr::core::rect< irr::s32 > *larg3, irr::gui::IGUIElement *larg4, irr::s32 larg5) {
  irr::gui::IGUICheckBox * lresult = (irr::gui::IGUICheckBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  irr::gui::IGUICheckBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUICheckBox *)(arg1)->addCheckBox(arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUICheckBox *)0;
  }
}


EXPORT irr::gui::IGUICheckBox *_wrap_IGUIEnvironment_addCheckBox__SWIG_2 (irr::gui::IGUIEnvironment *larg1, int larg2, irr::core::rect< irr::s32 > *larg3, irr::gui::IGUIElement *larg4) {
  irr::gui::IGUICheckBox * lresult = (irr::gui::IGUICheckBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUICheckBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUICheckBox *)(arg1)->addCheckBox(arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUICheckBox *)0;
  }
}


EXPORT irr::gui::IGUICheckBox *_wrap_IGUIEnvironment_addCheckBox__SWIG_3 (irr::gui::IGUIEnvironment *larg1, int larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::gui::IGUICheckBox * lresult = (irr::gui::IGUICheckBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  bool arg2 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUICheckBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUICheckBox *)(arg1)->addCheckBox(arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUICheckBox *)0;
  }
}


EXPORT irr::gui::IGUIListBox *_wrap_IGUIEnvironment_addListBox__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4, int larg5) {
  irr::gui::IGUIListBox * lresult = (irr::gui::IGUIListBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  irr::gui::IGUIListBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::gui::IGUIListBox *)(arg1)->addListBox((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIListBox *)0;
  }
}


EXPORT irr::gui::IGUIListBox *_wrap_IGUIEnvironment_addListBox__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4) {
  irr::gui::IGUIListBox * lresult = (irr::gui::IGUIListBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIListBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIListBox *)(arg1)->addListBox((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIListBox *)0;
  }
}


EXPORT irr::gui::IGUIListBox *_wrap_IGUIEnvironment_addListBox__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIListBox * lresult = (irr::gui::IGUIListBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIListBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIListBox *)(arg1)->addListBox((irr::core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIListBox *)0;
  }
}


EXPORT irr::gui::IGUIListBox *_wrap_IGUIEnvironment_addListBox__SWIG_3 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUIListBox * lresult = (irr::gui::IGUIListBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIListBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIListBox *)(arg1)->addListBox((irr::core::rect< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIListBox *)0;
  }
}


EXPORT irr::gui::IGUITreeView *_wrap_IGUIEnvironment_addTreeView__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4, int larg5, int larg6, int larg7) {
  irr::gui::IGUITreeView * lresult = (irr::gui::IGUITreeView *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  try {
    result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeView *)0;
  }
}


EXPORT irr::gui::IGUITreeView *_wrap_IGUIEnvironment_addTreeView__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4, int larg5, int larg6) {
  irr::gui::IGUITreeView * lresult = (irr::gui::IGUITreeView *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeView *)0;
  }
}


EXPORT irr::gui::IGUITreeView *_wrap_IGUIEnvironment_addTreeView__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4, int larg5) {
  irr::gui::IGUITreeView * lresult = (irr::gui::IGUITreeView *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeView *)0;
  }
}


EXPORT irr::gui::IGUITreeView *_wrap_IGUIEnvironment_addTreeView__SWIG_3 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4) {
  irr::gui::IGUITreeView * lresult = (irr::gui::IGUITreeView *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeView *)0;
  }
}


EXPORT irr::gui::IGUITreeView *_wrap_IGUIEnvironment_addTreeView__SWIG_4 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUITreeView * lresult = (irr::gui::IGUITreeView *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeView *)0;
  }
}


EXPORT irr::gui::IGUITreeView *_wrap_IGUIEnvironment_addTreeView__SWIG_5 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUITreeView * lresult = (irr::gui::IGUITreeView *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUITreeView *)(arg1)->addTreeView((irr::core::rect< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeView *)0;
  }
}


EXPORT irr::gui::IGUIMeshViewer *_wrap_IGUIEnvironment_addMeshViewer__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4, wchar_t *larg5) {
  irr::gui::IGUIMeshViewer * lresult = (irr::gui::IGUIMeshViewer *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  irr::gui::IGUIMeshViewer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIMeshViewer *)(arg1)->addMeshViewer((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,(wchar_t const *)arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIMeshViewer *)0;
  }
}


EXPORT irr::gui::IGUIMeshViewer *_wrap_IGUIEnvironment_addMeshViewer__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4) {
  irr::gui::IGUIMeshViewer * lresult = (irr::gui::IGUIMeshViewer *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIMeshViewer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIMeshViewer *)(arg1)->addMeshViewer((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIMeshViewer *)0;
  }
}


EXPORT irr::gui::IGUIMeshViewer *_wrap_IGUIEnvironment_addMeshViewer__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIMeshViewer * lresult = (irr::gui::IGUIMeshViewer *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIMeshViewer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIMeshViewer *)(arg1)->addMeshViewer((irr::core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIMeshViewer *)0;
  }
}


EXPORT irr::gui::IGUIMeshViewer *_wrap_IGUIEnvironment_addMeshViewer__SWIG_3 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUIMeshViewer * lresult = (irr::gui::IGUIMeshViewer *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIMeshViewer *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIMeshViewer *)(arg1)->addMeshViewer((irr::core::rect< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIMeshViewer *)0;
  }
}


EXPORT irr::gui::IGUIFileOpenDialog *_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_0 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, int larg3, irr::gui::IGUIElement *larg4, irr::s32 larg5, int larg6, irr::io::path::char_type *larg7) {
  irr::gui::IGUIFileOpenDialog * lresult = (irr::gui::IGUIFileOpenDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::io::path::char_type *arg7 = (irr::io::path::char_type *) 0 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  try {
    result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFileOpenDialog *)0;
  }
}


EXPORT irr::gui::IGUIFileOpenDialog *_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_1 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, int larg3, irr::gui::IGUIElement *larg4, irr::s32 larg5, int larg6) {
  irr::gui::IGUIFileOpenDialog * lresult = (irr::gui::IGUIFileOpenDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFileOpenDialog *)0;
  }
}


EXPORT irr::gui::IGUIFileOpenDialog *_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_2 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, int larg3, irr::gui::IGUIElement *larg4, irr::s32 larg5) {
  irr::gui::IGUIFileOpenDialog * lresult = (irr::gui::IGUIFileOpenDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFileOpenDialog *)0;
  }
}


EXPORT irr::gui::IGUIFileOpenDialog *_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_3 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, int larg3, irr::gui::IGUIElement *larg4) {
  irr::gui::IGUIFileOpenDialog * lresult = (irr::gui::IGUIFileOpenDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFileOpenDialog *)0;
  }
}


EXPORT irr::gui::IGUIFileOpenDialog *_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_4 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, int larg3) {
  irr::gui::IGUIFileOpenDialog * lresult = (irr::gui::IGUIFileOpenDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFileOpenDialog *)0;
  }
}


EXPORT irr::gui::IGUIFileOpenDialog *_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_5 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2) {
  irr::gui::IGUIFileOpenDialog * lresult = (irr::gui::IGUIFileOpenDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFileOpenDialog *)0;
  }
}


EXPORT irr::gui::IGUIFileOpenDialog *_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_6 (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIFileOpenDialog * lresult = (irr::gui::IGUIFileOpenDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIFileOpenDialog *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIFileOpenDialog *)(arg1)->addFileOpenDialog();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFileOpenDialog *)0;
  }
}


EXPORT irr::gui::IGUIColorSelectDialog *_wrap_IGUIEnvironment_addColorSelectDialog__SWIG_0 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, int larg3, irr::gui::IGUIElement *larg4, irr::s32 larg5) {
  irr::gui::IGUIColorSelectDialog * lresult = (irr::gui::IGUIColorSelectDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg5 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIColorSelectDialog *)(arg1)->addColorSelectDialog((wchar_t const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIColorSelectDialog *)0;
  }
}


EXPORT irr::gui::IGUIColorSelectDialog *_wrap_IGUIEnvironment_addColorSelectDialog__SWIG_1 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, int larg3, irr::gui::IGUIElement *larg4) {
  irr::gui::IGUIColorSelectDialog * lresult = (irr::gui::IGUIColorSelectDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIElement *arg4 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIColorSelectDialog *)(arg1)->addColorSelectDialog((wchar_t const *)arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIColorSelectDialog *)0;
  }
}


EXPORT irr::gui::IGUIColorSelectDialog *_wrap_IGUIEnvironment_addColorSelectDialog__SWIG_2 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, int larg3) {
  irr::gui::IGUIColorSelectDialog * lresult = (irr::gui::IGUIColorSelectDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (irr::gui::IGUIColorSelectDialog *)(arg1)->addColorSelectDialog((wchar_t const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIColorSelectDialog *)0;
  }
}


EXPORT irr::gui::IGUIColorSelectDialog *_wrap_IGUIEnvironment_addColorSelectDialog__SWIG_3 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2) {
  irr::gui::IGUIColorSelectDialog * lresult = (irr::gui::IGUIColorSelectDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIColorSelectDialog *)(arg1)->addColorSelectDialog((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIColorSelectDialog *)0;
  }
}


EXPORT irr::gui::IGUIColorSelectDialog *_wrap_IGUIEnvironment_addColorSelectDialog__SWIG_4 (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIColorSelectDialog * lresult = (irr::gui::IGUIColorSelectDialog *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIColorSelectDialog *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIColorSelectDialog *)(arg1)->addColorSelectDialog();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIColorSelectDialog *)0;
  }
}


EXPORT irr::gui::IGUIStaticText *_wrap_IGUIEnvironment_addStaticText__SWIG_0 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3, int larg4, int larg5, irr::gui::IGUIElement *larg6, irr::s32 larg7, int larg8) {
  irr::gui::IGUIStaticText * lresult = (irr::gui::IGUIStaticText *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg7 ;
  bool arg8 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  try {
    result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIStaticText *)0;
  }
}


EXPORT irr::gui::IGUIStaticText *_wrap_IGUIEnvironment_addStaticText__SWIG_1 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3, int larg4, int larg5, irr::gui::IGUIElement *larg6, irr::s32 larg7) {
  irr::gui::IGUIStaticText * lresult = (irr::gui::IGUIStaticText *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg7 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIStaticText *)0;
  }
}


EXPORT irr::gui::IGUIStaticText *_wrap_IGUIEnvironment_addStaticText__SWIG_2 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3, int larg4, int larg5, irr::gui::IGUIElement *larg6) {
  irr::gui::IGUIStaticText * lresult = (irr::gui::IGUIStaticText *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::gui::IGUIElement *arg6 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIStaticText *)0;
  }
}


EXPORT irr::gui::IGUIStaticText *_wrap_IGUIEnvironment_addStaticText__SWIG_3 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3, int larg4, int larg5) {
  irr::gui::IGUIStaticText * lresult = (irr::gui::IGUIStaticText *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIStaticText *)0;
  }
}


EXPORT irr::gui::IGUIStaticText *_wrap_IGUIEnvironment_addStaticText__SWIG_4 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3, int larg4) {
  irr::gui::IGUIStaticText * lresult = (irr::gui::IGUIStaticText *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIStaticText *)0;
  }
}


EXPORT irr::gui::IGUIStaticText *_wrap_IGUIEnvironment_addStaticText__SWIG_5 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::gui::IGUIStaticText * lresult = (irr::gui::IGUIStaticText *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIStaticText *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIStaticText *)(arg1)->addStaticText((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIStaticText *)0;
  }
}


EXPORT irr::gui::IGUIEditBox *_wrap_IGUIEnvironment_addEditBox__SWIG_0 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3, int larg4, irr::gui::IGUIElement *larg5, irr::s32 larg6) {
  irr::gui::IGUIEditBox * lresult = (irr::gui::IGUIEditBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg6 ;
  irr::gui::IGUIEditBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUIEditBox *)(arg1)->addEditBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIEditBox *)0;
  }
}


EXPORT irr::gui::IGUIEditBox *_wrap_IGUIEnvironment_addEditBox__SWIG_1 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3, int larg4, irr::gui::IGUIElement *larg5) {
  irr::gui::IGUIEditBox * lresult = (irr::gui::IGUIEditBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIEditBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIEditBox *)(arg1)->addEditBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIEditBox *)0;
  }
}


EXPORT irr::gui::IGUIEditBox *_wrap_IGUIEnvironment_addEditBox__SWIG_2 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3, int larg4) {
  irr::gui::IGUIEditBox * lresult = (irr::gui::IGUIEditBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIEditBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::gui::IGUIEditBox *)(arg1)->addEditBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIEditBox *)0;
  }
}


EXPORT irr::gui::IGUIEditBox *_wrap_IGUIEnvironment_addEditBox__SWIG_3 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::gui::IGUIEditBox * lresult = (irr::gui::IGUIEditBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUIEditBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIEditBox *)(arg1)->addEditBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIEditBox *)0;
  }
}


EXPORT irr::gui::IGUISpinBox *_wrap_IGUIEnvironment_addSpinBox__SWIG_0 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3, int larg4, irr::gui::IGUIElement *larg5, irr::s32 larg6) {
  irr::gui::IGUISpinBox * lresult = (irr::gui::IGUISpinBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg6 ;
  irr::gui::IGUISpinBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUISpinBox *)(arg1)->addSpinBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUISpinBox *)0;
  }
}


EXPORT irr::gui::IGUISpinBox *_wrap_IGUIEnvironment_addSpinBox__SWIG_1 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3, int larg4, irr::gui::IGUIElement *larg5) {
  irr::gui::IGUISpinBox * lresult = (irr::gui::IGUISpinBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUIElement *arg5 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUISpinBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUISpinBox *)(arg1)->addSpinBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUISpinBox *)0;
  }
}


EXPORT irr::gui::IGUISpinBox *_wrap_IGUIEnvironment_addSpinBox__SWIG_2 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3, int larg4) {
  irr::gui::IGUISpinBox * lresult = (irr::gui::IGUISpinBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  bool arg4 ;
  irr::gui::IGUISpinBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::gui::IGUISpinBox *)(arg1)->addSpinBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUISpinBox *)0;
  }
}


EXPORT irr::gui::IGUISpinBox *_wrap_IGUIEnvironment_addSpinBox__SWIG_3 (irr::gui::IGUIEnvironment *larg1, wchar_t *larg2, irr::core::rect< irr::s32 > *larg3) {
  irr::gui::IGUISpinBox * lresult = (irr::gui::IGUISpinBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::gui::IGUISpinBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUISpinBox *)(arg1)->addSpinBox((wchar_t const *)arg2,(irr::core::rect< irr::s32 > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUISpinBox *)0;
  }
}


EXPORT irr::gui::IGUIInOutFader *_wrap_IGUIEnvironment_addInOutFader__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4) {
  irr::gui::IGUIInOutFader * lresult = (irr::gui::IGUIInOutFader *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIInOutFader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIInOutFader *)(arg1)->addInOutFader((irr::core::rect< irr::s32 > const *)arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIInOutFader *)0;
  }
}


EXPORT irr::gui::IGUIInOutFader *_wrap_IGUIEnvironment_addInOutFader__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIInOutFader * lresult = (irr::gui::IGUIInOutFader *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIInOutFader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIInOutFader *)(arg1)->addInOutFader((irr::core::rect< irr::s32 > const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIInOutFader *)0;
  }
}


EXPORT irr::gui::IGUIInOutFader *_wrap_IGUIEnvironment_addInOutFader__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUIInOutFader * lresult = (irr::gui::IGUIInOutFader *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::gui::IGUIInOutFader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIInOutFader *)(arg1)->addInOutFader((irr::core::rect< irr::s32 > const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIInOutFader *)0;
  }
}


EXPORT irr::gui::IGUIInOutFader *_wrap_IGUIEnvironment_addInOutFader__SWIG_3 (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIInOutFader * lresult = (irr::gui::IGUIInOutFader *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIInOutFader *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIInOutFader *)(arg1)->addInOutFader();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIInOutFader *)0;
  }
}


EXPORT irr::gui::IGUITabControl *_wrap_IGUIEnvironment_addTabControl__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, int larg4, int larg5, irr::s32 larg6) {
  irr::gui::IGUITabControl * lresult = (irr::gui::IGUITabControl *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::s32 arg6 ;
  irr::gui::IGUITabControl *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUITabControl *)(arg1)->addTabControl((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITabControl *)0;
  }
}


EXPORT irr::gui::IGUITabControl *_wrap_IGUIEnvironment_addTabControl__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, int larg4, int larg5) {
  irr::gui::IGUITabControl * lresult = (irr::gui::IGUITabControl *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool arg4 ;
  bool arg5 ;
  irr::gui::IGUITabControl *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::gui::IGUITabControl *)(arg1)->addTabControl((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITabControl *)0;
  }
}


EXPORT irr::gui::IGUITabControl *_wrap_IGUIEnvironment_addTabControl__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, int larg4) {
  irr::gui::IGUITabControl * lresult = (irr::gui::IGUITabControl *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool arg4 ;
  irr::gui::IGUITabControl *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::gui::IGUITabControl *)(arg1)->addTabControl((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITabControl *)0;
  }
}


EXPORT irr::gui::IGUITabControl *_wrap_IGUIEnvironment_addTabControl__SWIG_3 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUITabControl * lresult = (irr::gui::IGUITabControl *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUITabControl *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUITabControl *)(arg1)->addTabControl((irr::core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITabControl *)0;
  }
}


EXPORT irr::gui::IGUITabControl *_wrap_IGUIEnvironment_addTabControl__SWIG_4 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUITabControl * lresult = (irr::gui::IGUITabControl *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUITabControl *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUITabControl *)(arg1)->addTabControl((irr::core::rect< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITabControl *)0;
  }
}


EXPORT irr::gui::IGUITab *_wrap_IGUIEnvironment_addTab__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4) {
  irr::gui::IGUITab * lresult = (irr::gui::IGUITab *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUITab *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUITab *)(arg1)->addTab((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITab *)0;
  }
}


EXPORT irr::gui::IGUITab *_wrap_IGUIEnvironment_addTab__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUITab * lresult = (irr::gui::IGUITab *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUITab *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUITab *)(arg1)->addTab((irr::core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITab *)0;
  }
}


EXPORT irr::gui::IGUITab *_wrap_IGUIEnvironment_addTab__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUITab * lresult = (irr::gui::IGUITab *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUITab *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUITab *)(arg1)->addTab((irr::core::rect< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITab *)0;
  }
}


EXPORT irr::gui::IGUIContextMenu *_wrap_IGUIEnvironment_addContextMenu__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4) {
  irr::gui::IGUIContextMenu * lresult = (irr::gui::IGUIContextMenu *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIContextMenu *)(arg1)->addContextMenu((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIContextMenu *)0;
  }
}


EXPORT irr::gui::IGUIContextMenu *_wrap_IGUIEnvironment_addContextMenu__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIContextMenu * lresult = (irr::gui::IGUIContextMenu *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIContextMenu *)(arg1)->addContextMenu((irr::core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIContextMenu *)0;
  }
}


EXPORT irr::gui::IGUIContextMenu *_wrap_IGUIEnvironment_addContextMenu__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUIContextMenu * lresult = (irr::gui::IGUIContextMenu *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIContextMenu *)(arg1)->addContextMenu((irr::core::rect< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIContextMenu *)0;
  }
}


EXPORT irr::gui::IGUIContextMenu *_wrap_IGUIEnvironment_addMenu__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUIElement *larg2, irr::s32 larg3) {
  irr::gui::IGUIContextMenu * lresult = (irr::gui::IGUIContextMenu *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg3 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIContextMenu *)(arg1)->addMenu(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIContextMenu *)0;
  }
}


EXPORT irr::gui::IGUIContextMenu *_wrap_IGUIEnvironment_addMenu__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUIElement *larg2) {
  irr::gui::IGUIContextMenu * lresult = (irr::gui::IGUIContextMenu *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIContextMenu *)(arg1)->addMenu(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIContextMenu *)0;
  }
}


EXPORT irr::gui::IGUIContextMenu *_wrap_IGUIEnvironment_addMenu__SWIG_2 (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIContextMenu * lresult = (irr::gui::IGUIContextMenu *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIContextMenu *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIContextMenu *)(arg1)->addMenu();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIContextMenu *)0;
  }
}


EXPORT irr::gui::IGUIToolBar *_wrap_IGUIEnvironment_addToolBar__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUIElement *larg2, irr::s32 larg3) {
  irr::gui::IGUIToolBar * lresult = (irr::gui::IGUIToolBar *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg3 ;
  irr::gui::IGUIToolBar *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIToolBar *)(arg1)->addToolBar(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIToolBar *)0;
  }
}


EXPORT irr::gui::IGUIToolBar *_wrap_IGUIEnvironment_addToolBar__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUIElement *larg2) {
  irr::gui::IGUIToolBar * lresult = (irr::gui::IGUIToolBar *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElement *arg2 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIToolBar *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIToolBar *)(arg1)->addToolBar(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIToolBar *)0;
  }
}


EXPORT irr::gui::IGUIToolBar *_wrap_IGUIEnvironment_addToolBar__SWIG_2 (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIToolBar * lresult = (irr::gui::IGUIToolBar *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIToolBar *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIToolBar *)(arg1)->addToolBar();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIToolBar *)0;
  }
}


EXPORT irr::gui::IGUIComboBox *_wrap_IGUIEnvironment_addComboBox__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4) {
  irr::gui::IGUIComboBox * lresult = (irr::gui::IGUIComboBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUIComboBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIComboBox *)(arg1)->addComboBox((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIComboBox *)0;
  }
}


EXPORT irr::gui::IGUIComboBox *_wrap_IGUIEnvironment_addComboBox__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIComboBox * lresult = (irr::gui::IGUIComboBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIComboBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIComboBox *)(arg1)->addComboBox((irr::core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIComboBox *)0;
  }
}


EXPORT irr::gui::IGUIComboBox *_wrap_IGUIEnvironment_addComboBox__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUIComboBox * lresult = (irr::gui::IGUIComboBox *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIComboBox *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIComboBox *)(arg1)->addComboBox((irr::core::rect< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIComboBox *)0;
  }
}


EXPORT irr::gui::IGUITable *_wrap_IGUIEnvironment_addTable__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4, int larg5) {
  irr::gui::IGUITable * lresult = (irr::gui::IGUITable *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  bool arg5 ;
  irr::gui::IGUITable *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::gui::IGUITable *)(arg1)->addTable((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITable *)0;
  }
}


EXPORT irr::gui::IGUITable *_wrap_IGUIEnvironment_addTable__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3, irr::s32 larg4) {
  irr::gui::IGUITable * lresult = (irr::gui::IGUITable *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUITable *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUITable *)(arg1)->addTable((irr::core::rect< irr::s32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITable *)0;
  }
}


EXPORT irr::gui::IGUITable *_wrap_IGUIEnvironment_addTable__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUITable * lresult = (irr::gui::IGUITable *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUITable *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUITable *)(arg1)->addTable((irr::core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITable *)0;
  }
}


EXPORT irr::gui::IGUITable *_wrap_IGUIEnvironment_addTable__SWIG_3 (irr::gui::IGUIEnvironment *larg1, irr::core::rect< irr::s32 > *larg2) {
  irr::gui::IGUITable * lresult = (irr::gui::IGUITable *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::core::rect< irr::s32 > *arg2 = 0 ;
  irr::gui::IGUITable *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUITable *)(arg1)->addTable((irr::core::rect< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITable *)0;
  }
}


EXPORT irr::gui::IGUIElementFactory *_wrap_IGUIEnvironment_getDefaultGUIElementFactory (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIElementFactory * lresult = (irr::gui::IGUIElementFactory *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElementFactory *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIElementFactory *)((irr::gui::IGUIEnvironment const *)arg1)->getDefaultGUIElementFactory();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElementFactory *)0;
  }
}


EXPORT void _wrap_IGUIEnvironment_registerGUIElementFactory (irr::gui::IGUIEnvironment *larg1, irr::gui::IGUIElementFactory *larg2) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::gui::IGUIElementFactory *arg2 = (irr::gui::IGUIElementFactory *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->registerGUIElementFactory(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IGUIEnvironment_getRegisteredGUIElementFactoryCount (irr::gui::IGUIEnvironment *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::gui::IGUIEnvironment const *)arg1)->getRegisteredGUIElementFactoryCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::gui::IGUIElementFactory *_wrap_IGUIEnvironment_getGUIElementFactory (irr::gui::IGUIEnvironment *larg1, irr::u32 larg2) {
  irr::gui::IGUIElementFactory * lresult = (irr::gui::IGUIElementFactory *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::u32 arg2 ;
  irr::gui::IGUIElementFactory *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIElementFactory *)((irr::gui::IGUIEnvironment const *)arg1)->getGUIElementFactory(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElementFactory *)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIEnvironment_addGUIElement__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::c8 *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIElement *)(arg1)->addGUIElement((irr::c8 const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT irr::gui::IGUIElement *_wrap_IGUIEnvironment_addGUIElement__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::c8 *larg2) {
  irr::gui::IGUIElement * lresult = (irr::gui::IGUIElement *)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::gui::IGUIElement *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIElement *)(arg1)->addGUIElement((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIElement *)0;
  }
}


EXPORT int _wrap_IGUIEnvironment_saveGUI__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::io::path *larg2, irr::gui::IGUIElement *larg3) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->saveGUI((irr::io::path const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIEnvironment_saveGUI__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->saveGUI((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIEnvironment_saveGUI__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::io::IWriteFile *larg2, irr::gui::IGUIElement *larg3) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->saveGUI(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIEnvironment_saveGUI__SWIG_3 (irr::gui::IGUIEnvironment *larg1, irr::io::IWriteFile *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->saveGUI(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIEnvironment_loadGUI__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::io::path *larg2, irr::gui::IGUIElement *larg3) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->loadGUI((irr::io::path const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIEnvironment_loadGUI__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->loadGUI((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIEnvironment_loadGUI__SWIG_2 (irr::gui::IGUIEnvironment *larg1, irr::io::IReadFile *larg2, irr::gui::IGUIElement *larg3) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->loadGUI(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIEnvironment_loadGUI__SWIG_3 (irr::gui::IGUIEnvironment *larg1, irr::io::IReadFile *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->loadGUI(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIEnvironment_serializeAttributes__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::io::IAttributes *larg2, irr::io::SAttributeReadWriteOptions *larg3) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::gui::IGUIEnvironment const *)arg1)->serializeAttributes(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEnvironment_serializeAttributes__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::io::IAttributes *larg2) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::gui::IGUIEnvironment const *)arg1)->serializeAttributes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEnvironment_deserializeAttributes__SWIG_0 (irr::gui::IGUIEnvironment *larg1, irr::io::IAttributes *larg2, irr::io::SAttributeReadWriteOptions *larg3) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  irr::io::SAttributeReadWriteOptions *arg3 = (irr::io::SAttributeReadWriteOptions *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->deserializeAttributes(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEnvironment_deserializeAttributes__SWIG_1 (irr::gui::IGUIEnvironment *larg1, irr::io::IAttributes *larg2) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IAttributes *arg2 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->deserializeAttributes(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEnvironment_writeGUIElement (irr::gui::IGUIEnvironment *larg1, irr::io::IXMLWriter *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->writeGUIElement(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIEnvironment_readGUIElement (irr::gui::IGUIEnvironment *larg1, irr::io::IXMLReader *larg2, irr::gui::IGUIElement *larg3) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  irr::io::IXMLReader *arg2 = (irr::io::IXMLReader *) 0 ;
  irr::gui::IGUIElement *arg3 = (irr::gui::IGUIElement *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->readGUIElement(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IGUIEnvironment (irr::gui::IGUIEnvironment *larg1) {
  irr::gui::IGUIEnvironment *arg1 = (irr::gui::IGUIEnvironment *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT wchar_t *_wrap_IGUIFileOpenDialog_getFileName (irr::gui::IGUIFileOpenDialog *larg1) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::gui::IGUIFileOpenDialog *arg1 = (irr::gui::IGUIFileOpenDialog *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (wchar_t *)((irr::gui::IGUIFileOpenDialog const *)arg1)->getFileName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT irr::io::path *_wrap_IGUIFileOpenDialog_getDirectoryName (irr::gui::IGUIFileOpenDialog *larg1) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::gui::IGUIFileOpenDialog *arg1 = (irr::gui::IGUIFileOpenDialog *) 0 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::path *) &(arg1)->getDirectoryName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT void _wrap_delete_IGUIFileOpenDialog (irr::gui::IGUIFileOpenDialog *larg1) {
  irr::gui::IGUIFileOpenDialog *arg1 = (irr::gui::IGUIFileOpenDialog *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIFont_draw__SWIG_0 (irr::gui::IGUIFont *larg1, irr::core::stringw *larg2, irr::core::rect< irr::s32 > *larg3, irr::video::SColor *larg4, int larg5, int larg6, irr::core::rect< irr::s32 > *larg7) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::core::stringw *arg2 = 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::video::SColor arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::core::rect< irr::s32 > *arg7 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  try {
    (arg1)->draw((irr::core::stringw const &)*arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6,(irr::core::rect< irr::s32 > const *)arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIFont_draw__SWIG_1 (irr::gui::IGUIFont *larg1, irr::core::stringw *larg2, irr::core::rect< irr::s32 > *larg3, irr::video::SColor *larg4, int larg5, int larg6) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::core::stringw *arg2 = 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::video::SColor arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  try {
    (arg1)->draw((irr::core::stringw const &)*arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIFont_draw__SWIG_2 (irr::gui::IGUIFont *larg1, irr::core::stringw *larg2, irr::core::rect< irr::s32 > *larg3, irr::video::SColor *larg4, int larg5) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::core::stringw *arg2 = 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::video::SColor arg4 ;
  bool arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = (bool)larg5;
  try {
    (arg1)->draw((irr::core::stringw const &)*arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIFont_draw__SWIG_3 (irr::gui::IGUIFont *larg1, irr::core::stringw *larg2, irr::core::rect< irr::s32 > *larg3, irr::video::SColor *larg4) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::core::stringw *arg2 = 0 ;
  irr::core::rect< irr::s32 > *arg3 = 0 ;
  irr::video::SColor arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    (arg1)->draw((irr::core::stringw const &)*arg2,(irr::core::rect< irr::s32 > const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::dimension2d< irr::u32 > *_wrap_IGUIFont_getDimension (irr::gui::IGUIFont *larg1, wchar_t *larg2) {
  irr::core::dimension2d< irr::u32 > * lresult = (irr::core::dimension2d< irr::u32 > *)0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::core::dimension2d< irr::u32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::gui::IGUIFont const *)arg1)->getDimension((wchar_t const *)arg2);
    lresult = new irr::core::dimension2d< irr::u32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::u32 > *)0;
  }
}


EXPORT irr::s32 _wrap_IGUIFont_getCharacterFromPos (irr::gui::IGUIFont *larg1, wchar_t *larg2, irr::s32 larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)((irr::gui::IGUIFont const *)arg1)->getCharacterFromPos((wchar_t const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::gui::EGUI_FONT_TYPE _wrap_IGUIFont_getType (irr::gui::IGUIFont *larg1) {
  irr::gui::EGUI_FONT_TYPE lresult = (irr::gui::EGUI_FONT_TYPE)0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::gui::EGUI_FONT_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::gui::EGUI_FONT_TYPE)((irr::gui::IGUIFont const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::EGUI_FONT_TYPE)0;
  }
}


EXPORT void _wrap_IGUIFont_setKerningWidth (irr::gui::IGUIFont *larg1, irr::s32 larg2) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setKerningWidth(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIFont_setKerningHeight (irr::gui::IGUIFont *larg1, irr::s32 larg2) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setKerningHeight(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIFont_getKerningWidth__SWIG_0 (irr::gui::IGUIFont *larg1, wchar_t *larg2, wchar_t *larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)((irr::gui::IGUIFont const *)arg1)->getKerningWidth((wchar_t const *)arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIFont_getKerningWidth__SWIG_1 (irr::gui::IGUIFont *larg1, wchar_t *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::gui::IGUIFont const *)arg1)->getKerningWidth((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIFont_getKerningWidth__SWIG_2 (irr::gui::IGUIFont *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIFont const *)arg1)->getKerningWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIFont_getKerningHeight (irr::gui::IGUIFont *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIFont const *)arg1)->getKerningHeight();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIFont_setInvisibleCharacters (irr::gui::IGUIFont *larg1, wchar_t *larg2) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setInvisibleCharacters((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IGUIFont (irr::gui::IGUIFont *larg1) {
  irr::gui::IGUIFont *arg1 = (irr::gui::IGUIFont *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUISpriteBank *_wrap_IGUIFontBitmap_getSpriteBank (irr::gui::IGUIFontBitmap *larg1) {
  irr::gui::IGUISpriteBank * lresult = (irr::gui::IGUISpriteBank *)0 ;
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  irr::gui::IGUISpriteBank *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUISpriteBank *)((irr::gui::IGUIFontBitmap const *)arg1)->getSpriteBank();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUISpriteBank *)0;
  }
}


EXPORT irr::u32 _wrap_IGUIFontBitmap_getSpriteNoFromChar (irr::gui::IGUIFontBitmap *larg1, wchar_t *larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)((irr::gui::IGUIFontBitmap const *)arg1)->getSpriteNoFromChar((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIFontBitmap_getKerningWidth__SWIG_0 (irr::gui::IGUIFontBitmap *larg1, wchar_t *larg2, wchar_t *larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)((irr::gui::IGUIFontBitmap const *)arg1)->getKerningWidth((wchar_t const *)arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIFontBitmap_getKerningWidth__SWIG_1 (irr::gui::IGUIFontBitmap *larg1, wchar_t *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::gui::IGUIFontBitmap const *)arg1)->getKerningWidth((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIFontBitmap_getKerningWidth__SWIG_2 (irr::gui::IGUIFontBitmap *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIFontBitmap const *)arg1)->getKerningWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_delete_IGUIFontBitmap (irr::gui::IGUIFontBitmap *larg1) {
  irr::gui::IGUIFontBitmap *arg1 = (irr::gui::IGUIFontBitmap *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIImage_setImage (irr::gui::IGUIImage *larg1, irr::video::ITexture *larg2) {
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setImage(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::ITexture *_wrap_IGUIImage_getImage (irr::gui::IGUIImage *larg1) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::ITexture *)((irr::gui::IGUIImage const *)arg1)->getImage();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT void _wrap_IGUIImage_setColor (irr::gui::IGUIImage *larg1, irr::video::SColor *larg2) {
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIImage_setScaleImage (irr::gui::IGUIImage *larg1, int larg2) {
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setScaleImage(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIImage_setUseAlphaChannel (irr::gui::IGUIImage *larg1, int larg2) {
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setUseAlphaChannel(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_IGUIImage_getColor (irr::gui::IGUIImage *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUIImage const *)arg1)->getColor();
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT int _wrap_IGUIImage_isImageScaled (irr::gui::IGUIImage *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIImage const *)arg1)->isImageScaled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUIImage_isAlphaChannelUsed (irr::gui::IGUIImage *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIImage const *)arg1)->isAlphaChannelUsed();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IGUIImage (irr::gui::IGUIImage *larg1) {
  irr::gui::IGUIImage *arg1 = (irr::gui::IGUIImage *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_IGUIInOutFader_getColor (irr::gui::IGUIInOutFader *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUIInOutFader const *)arg1)->getColor();
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_IGUIInOutFader_setColor__SWIG_0 (irr::gui::IGUIInOutFader *larg1, irr::video::SColor *larg2) {
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIInOutFader_setColor__SWIG_1 (irr::gui::IGUIInOutFader *larg1, irr::video::SColor *larg2, irr::video::SColor *larg3) {
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  irr::video::SColor arg2 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  try {
    (arg1)->setColor(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIInOutFader_fadeIn (irr::gui::IGUIInOutFader *larg1, irr::u32 larg2) {
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->fadeIn(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIInOutFader_fadeOut (irr::gui::IGUIInOutFader *larg1, irr::u32 larg2) {
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->fadeOut(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIInOutFader_isReady (irr::gui::IGUIInOutFader *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIInOutFader const *)arg1)->isReady();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IGUIInOutFader (irr::gui::IGUIInOutFader *larg1) {
  irr::gui::IGUIInOutFader *arg1 = (irr::gui::IGUIInOutFader *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IGUIListBox_getItemCount (irr::gui::IGUIListBox *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::gui::IGUIListBox const *)arg1)->getItemCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT wchar_t *_wrap_IGUIListBox_getListItem (irr::gui::IGUIListBox *larg1, irr::u32 larg2) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (wchar_t *)((irr::gui::IGUIListBox const *)arg1)->getListItem(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT irr::u32 _wrap_IGUIListBox_addItem__SWIG_0 (irr::gui::IGUIListBox *larg1, wchar_t *larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IGUIListBox_addItem__SWIG_1 (irr::gui::IGUIListBox *larg1, wchar_t *larg2, irr::s32 larg3) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::u32)(arg1)->addItem((wchar_t const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IGUIListBox_removeItem (irr::gui::IGUIListBox *larg1, irr::u32 larg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeItem(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIListBox_getItemAt (irr::gui::IGUIListBox *larg1, irr::s32 larg2, irr::s32 larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)((irr::gui::IGUIListBox const *)arg1)->getItemAt(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIListBox_getIcon (irr::gui::IGUIListBox *larg1, irr::u32 larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::gui::IGUIListBox const *)arg1)->getIcon(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIListBox_setSpriteBank (irr::gui::IGUIListBox *larg1, irr::gui::IGUISpriteBank *larg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::gui::IGUISpriteBank *arg2 = (irr::gui::IGUISpriteBank *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSpriteBank(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIListBox_clear (irr::gui::IGUIListBox *larg1) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIListBox_getSelected (irr::gui::IGUIListBox *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIListBox const *)arg1)->getSelected();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIListBox_setSelected__SWIG_0 (irr::gui::IGUIListBox *larg1, irr::s32 larg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSelected(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIListBox_setSelected__SWIG_1 (irr::gui::IGUIListBox *larg1, wchar_t *larg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSelected((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIListBox_setAutoScrollEnabled (irr::gui::IGUIListBox *larg1, int larg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setAutoScrollEnabled(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIListBox_isAutoScrollEnabled (irr::gui::IGUIListBox *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIListBox const *)arg1)->isAutoScrollEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIListBox_setItemOverrideColor__SWIG_0 (irr::gui::IGUIListBox *larg1, irr::u32 larg2, irr::video::SColor *larg3) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    (arg1)->setItemOverrideColor(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIListBox_setItemOverrideColor__SWIG_1 (irr::gui::IGUIListBox *larg1, irr::u32 larg2, irr::gui::EGUI_LISTBOX_COLOR larg3, irr::video::SColor *larg4) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::gui::EGUI_LISTBOX_COLOR arg3 ;
  irr::video::SColor arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    (arg1)->setItemOverrideColor(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIListBox_clearItemOverrideColor__SWIG_0 (irr::gui::IGUIListBox *larg1, irr::u32 larg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->clearItemOverrideColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIListBox_clearItemOverrideColor__SWIG_1 (irr::gui::IGUIListBox *larg1, irr::u32 larg2, irr::gui::EGUI_LISTBOX_COLOR larg3) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::gui::EGUI_LISTBOX_COLOR arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->clearItemOverrideColor(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIListBox_hasItemOverrideColor (irr::gui::IGUIListBox *larg1, irr::u32 larg2, irr::gui::EGUI_LISTBOX_COLOR larg3) {
  int lresult = (int)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::gui::EGUI_LISTBOX_COLOR arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((irr::gui::IGUIListBox const *)arg1)->hasItemOverrideColor(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::video::SColor *_wrap_IGUIListBox_getItemOverrideColor (irr::gui::IGUIListBox *larg1, irr::u32 larg2, irr::gui::EGUI_LISTBOX_COLOR larg3) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::gui::EGUI_LISTBOX_COLOR arg3 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((irr::gui::IGUIListBox const *)arg1)->getItemOverrideColor(arg2,arg3);
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::video::SColor *_wrap_IGUIListBox_getItemDefaultColor (irr::gui::IGUIListBox *larg1, irr::gui::EGUI_LISTBOX_COLOR larg2) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::gui::EGUI_LISTBOX_COLOR arg2 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::gui::IGUIListBox const *)arg1)->getItemDefaultColor(arg2);
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_IGUIListBox_setItem (irr::gui::IGUIListBox *larg1, irr::u32 larg2, wchar_t *larg3, irr::s32 larg4) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setItem(arg2,(wchar_t const *)arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIListBox_insertItem (irr::gui::IGUIListBox *larg1, irr::u32 larg2, wchar_t *larg3, irr::s32 larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->insertItem(arg2,(wchar_t const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIListBox_swapItems (irr::gui::IGUIListBox *larg1, irr::u32 larg2, irr::u32 larg3) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->swapItems(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIListBox_setItemHeight (irr::gui::IGUIListBox *larg1, irr::s32 larg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setItemHeight(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIListBox_setDrawBackground (irr::gui::IGUIListBox *larg1, int larg2) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDrawBackground(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IGUIListBox (irr::gui::IGUIListBox *larg1) {
  irr::gui::IGUIListBox *arg1 = (irr::gui::IGUIListBox *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIMeshViewer_setMesh (irr::gui::IGUIMeshViewer *larg1, irr::scene::IAnimatedMesh *larg2) {
  irr::gui::IGUIMeshViewer *arg1 = (irr::gui::IGUIMeshViewer *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMesh(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_IGUIMeshViewer_getMesh (irr::gui::IGUIMeshViewer *larg1) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::gui::IGUIMeshViewer *arg1 = (irr::gui::IGUIMeshViewer *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IAnimatedMesh *)((irr::gui::IGUIMeshViewer const *)arg1)->getMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT void _wrap_IGUIMeshViewer_setMaterial (irr::gui::IGUIMeshViewer *larg1, irr::video::SMaterial *larg2) {
  irr::gui::IGUIMeshViewer *arg1 = (irr::gui::IGUIMeshViewer *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaterial((irr::video::SMaterial const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SMaterial *_wrap_IGUIMeshViewer_getMaterial (irr::gui::IGUIMeshViewer *larg1) {
  irr::video::SMaterial * lresult = (irr::video::SMaterial *)0 ;
  irr::gui::IGUIMeshViewer *arg1 = (irr::gui::IGUIMeshViewer *) 0 ;
  irr::video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SMaterial *) &((irr::gui::IGUIMeshViewer const *)arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SMaterial *)0;
  }
}


EXPORT void _wrap_delete_IGUIMeshViewer (irr::gui::IGUIMeshViewer *larg1) {
  irr::gui::IGUIMeshViewer *arg1 = (irr::gui::IGUIMeshViewer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIScrollBar_setMax (irr::gui::IGUIScrollBar *larg1, irr::s32 larg2) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMax(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIScrollBar_getMax (irr::gui::IGUIScrollBar *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIScrollBar const *)arg1)->getMax();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIScrollBar_setMin (irr::gui::IGUIScrollBar *larg1, irr::s32 larg2) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMin(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIScrollBar_getMin (irr::gui::IGUIScrollBar *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIScrollBar const *)arg1)->getMin();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIScrollBar_getSmallStep (irr::gui::IGUIScrollBar *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIScrollBar const *)arg1)->getSmallStep();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIScrollBar_setSmallStep (irr::gui::IGUIScrollBar *larg1, irr::s32 larg2) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSmallStep(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIScrollBar_getLargeStep (irr::gui::IGUIScrollBar *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIScrollBar const *)arg1)->getLargeStep();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIScrollBar_setLargeStep (irr::gui::IGUIScrollBar *larg1, irr::s32 larg2) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLargeStep(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIScrollBar_getPos (irr::gui::IGUIScrollBar *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIScrollBar const *)arg1)->getPos();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIScrollBar_setPos (irr::gui::IGUIScrollBar *larg1, irr::s32 larg2) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPos(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IGUIScrollBar (irr::gui::IGUIScrollBar *larg1) {
  irr::gui::IGUIScrollBar *arg1 = (irr::gui::IGUIScrollBar *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIEditBox *_wrap_IGUISpinBox_getEditBox (irr::gui::IGUISpinBox *larg1) {
  irr::gui::IGUIEditBox * lresult = (irr::gui::IGUIEditBox *)0 ;
  irr::gui::IGUISpinBox *arg1 = (irr::gui::IGUISpinBox *) 0 ;
  irr::gui::IGUIEditBox *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIEditBox *)((irr::gui::IGUISpinBox const *)arg1)->getEditBox();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIEditBox *)0;
  }
}


EXPORT void _wrap_IGUISpinBox_setValue (irr::gui::IGUISpinBox *larg1, irr::f32 larg2) {
  irr::gui::IGUISpinBox *arg1 = (irr::gui::IGUISpinBox *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setValue(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_IGUISpinBox_getValue (irr::gui::IGUISpinBox *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::gui::IGUISpinBox *arg1 = (irr::gui::IGUISpinBox *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::gui::IGUISpinBox const *)arg1)->getValue();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_IGUISpinBox_setRange (irr::gui::IGUISpinBox *larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::gui::IGUISpinBox *arg1 = (irr::gui::IGUISpinBox *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setRange(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_IGUISpinBox_getMin (irr::gui::IGUISpinBox *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::gui::IGUISpinBox *arg1 = (irr::gui::IGUISpinBox *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::gui::IGUISpinBox const *)arg1)->getMin();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_IGUISpinBox_getMax (irr::gui::IGUISpinBox *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::gui::IGUISpinBox *arg1 = (irr::gui::IGUISpinBox *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::gui::IGUISpinBox const *)arg1)->getMax();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_IGUISpinBox_setStepSize__SWIG_0 (irr::gui::IGUISpinBox *larg1, irr::f32 larg2) {
  irr::gui::IGUISpinBox *arg1 = (irr::gui::IGUISpinBox *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setStepSize(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpinBox_setStepSize__SWIG_1 (irr::gui::IGUISpinBox *larg1) {
  irr::gui::IGUISpinBox *arg1 = (irr::gui::IGUISpinBox *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setStepSize();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpinBox_setDecimalPlaces (irr::gui::IGUISpinBox *larg1, irr::s32 larg2) {
  irr::gui::IGUISpinBox *arg1 = (irr::gui::IGUISpinBox *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDecimalPlaces(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_IGUISpinBox_getStepSize (irr::gui::IGUISpinBox *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::gui::IGUISpinBox *arg1 = (irr::gui::IGUISpinBox *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::gui::IGUISpinBox const *)arg1)->getStepSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_delete_IGUISpinBox (irr::gui::IGUISpinBox *larg1) {
  irr::gui::IGUISpinBox *arg1 = (irr::gui::IGUISpinBox *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *_wrap_IGUISpriteBank_getPositions (irr::gui::IGUISpriteBank *larg1) {
  irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > * lresult = (irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *)0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *) &(arg1)->getPositions();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *)0;
  }
}


EXPORT irr::core::array< irr::gui::SGUISprite,irr::core::irrAllocator< irr::gui::SGUISprite > > *_wrap_IGUISpriteBank_getSprites (irr::gui::IGUISpriteBank *larg1) {
  irr::core::array< irr::gui::SGUISprite,irr::core::irrAllocator< irr::gui::SGUISprite > > * lresult = (irr::core::array< irr::gui::SGUISprite,irr::core::irrAllocator< irr::gui::SGUISprite > > *)0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::gui::SGUISprite,irr::core::irrAllocator< irr::gui::SGUISprite > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::array< irr::gui::SGUISprite,irr::core::irrAllocator< irr::gui::SGUISprite > > *) &(arg1)->getSprites();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::gui::SGUISprite,irr::core::irrAllocator< irr::gui::SGUISprite > > *)0;
  }
}


EXPORT irr::u32 _wrap_IGUISpriteBank_getTextureCount (irr::gui::IGUISpriteBank *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::gui::IGUISpriteBank const *)arg1)->getTextureCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::video::ITexture *_wrap_IGUISpriteBank_getTexture (irr::gui::IGUISpriteBank *larg1, irr::u32 larg2) {
  irr::video::ITexture * lresult = (irr::video::ITexture *)0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::ITexture *)((irr::gui::IGUISpriteBank const *)arg1)->getTexture(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture *)0;
  }
}


EXPORT void _wrap_IGUISpriteBank_addTexture (irr::gui::IGUISpriteBank *larg1, irr::video::ITexture *larg2) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addTexture(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_setTexture (irr::gui::IGUISpriteBank *larg1, irr::u32 larg2, irr::video::ITexture *larg3) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setTexture(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUISpriteBank_addTextureAsSprite (irr::gui::IGUISpriteBank *larg1, irr::video::ITexture *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)(arg1)->addTextureAsSprite(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUISpriteBank_clear (irr::gui::IGUISpriteBank *larg1) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSprite__SWIG_0 (irr::gui::IGUISpriteBank *larg1, irr::u32 larg2, irr::core::position2di *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5, irr::u32 larg6, irr::u32 larg7, int larg8, int larg9) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  bool arg8 ;
  bool arg9 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  arg9 = (bool)larg9;
  try {
    (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7,arg8,arg9);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSprite__SWIG_1 (irr::gui::IGUISpriteBank *larg1, irr::u32 larg2, irr::core::position2di *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5, irr::u32 larg6, irr::u32 larg7, int larg8) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  bool arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  try {
    (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSprite__SWIG_2 (irr::gui::IGUISpriteBank *larg1, irr::u32 larg2, irr::core::position2di *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5, irr::u32 larg6, irr::u32 larg7) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSprite__SWIG_3 (irr::gui::IGUISpriteBank *larg1, irr::u32 larg2, irr::core::position2di *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5, irr::u32 larg6) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSprite__SWIG_4 (irr::gui::IGUISpriteBank *larg1, irr::u32 larg2, irr::core::position2di *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSprite__SWIG_5 (irr::gui::IGUISpriteBank *larg1, irr::u32 larg2, irr::core::position2di *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSprite__SWIG_6 (irr::gui::IGUISpriteBank *larg1, irr::u32 larg2, irr::core::position2di *larg3) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::u32 arg2 ;
  irr::core::position2di *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->draw2DSprite(arg2,(irr::core::position2di const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_0 (irr::gui::IGUISpriteBank *larg1, irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *larg2, irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5, irr::u32 larg6, irr::u32 larg7, int larg8, int larg9) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  bool arg8 ;
  bool arg9 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  arg9 = (bool)larg9;
  try {
    (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7,arg8,arg9);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_1 (irr::gui::IGUISpriteBank *larg1, irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *larg2, irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5, irr::u32 larg6, irr::u32 larg7, int larg8) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  bool arg8 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  try {
    (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7,arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_2 (irr::gui::IGUISpriteBank *larg1, irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *larg2, irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5, irr::u32 larg6, irr::u32 larg7) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_3 (irr::gui::IGUISpriteBank *larg1, irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *larg2, irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5, irr::u32 larg6) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  irr::u32 arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_4 (irr::gui::IGUISpriteBank *larg1, irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *larg2, irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *larg3, irr::core::rect< irr::s32 > *larg4, irr::video::SColor *larg5) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  irr::video::SColor *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4,(irr::video::SColor const &)*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_5 (irr::gui::IGUISpriteBank *larg1, irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *larg2, irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_6 (irr::gui::IGUISpriteBank *larg1, irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *larg2, irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *larg3) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->draw2DSpriteBatch((irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > const &)*arg2,(irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IGUISpriteBank (irr::gui::IGUISpriteBank *larg1) {
  irr::gui::IGUISpriteBank *arg1 = (irr::gui::IGUISpriteBank *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIStaticText_setOverrideFont__SWIG_0 (irr::gui::IGUIStaticText *larg1, irr::gui::IGUIFont *larg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setOverrideFont(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIStaticText_setOverrideFont__SWIG_1 (irr::gui::IGUIStaticText *larg1) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setOverrideFont();
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIFont *_wrap_IGUIStaticText_getOverrideFont (irr::gui::IGUIStaticText *larg1) {
  irr::gui::IGUIFont * lresult = (irr::gui::IGUIFont *)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIFont *)((irr::gui::IGUIStaticText const *)arg1)->getOverrideFont();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFont *)0;
  }
}


EXPORT irr::gui::IGUIFont *_wrap_IGUIStaticText_getActiveFont (irr::gui::IGUIStaticText *larg1) {
  irr::gui::IGUIFont * lresult = (irr::gui::IGUIFont *)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::gui::IGUIFont *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIFont *)((irr::gui::IGUIStaticText const *)arg1)->getActiveFont();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIFont *)0;
  }
}


EXPORT void _wrap_IGUIStaticText_setOverrideColor (irr::gui::IGUIStaticText *larg1, irr::video::SColor *larg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setOverrideColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_IGUIStaticText_getOverrideColor (irr::gui::IGUIStaticText *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUIStaticText const *)arg1)->getOverrideColor();
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_IGUIStaticText_enableOverrideColor (irr::gui::IGUIStaticText *larg1, int larg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->enableOverrideColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIStaticText_isOverrideColorEnabled (irr::gui::IGUIStaticText *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isOverrideColorEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIStaticText_setBackgroundColor (irr::gui::IGUIStaticText *larg1, irr::video::SColor *larg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setBackgroundColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIStaticText_setDrawBackground (irr::gui::IGUIStaticText *larg1, int larg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDrawBackground(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_IGUIStaticText_getBackgroundColor (irr::gui::IGUIStaticText *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUIStaticText const *)arg1)->getBackgroundColor();
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT int _wrap_IGUIStaticText_isDrawBackgroundEnabled (irr::gui::IGUIStaticText *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isDrawBackgroundEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIStaticText_setDrawBorder (irr::gui::IGUIStaticText *larg1, int larg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDrawBorder(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIStaticText_isDrawBorderEnabled (irr::gui::IGUIStaticText *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isDrawBorderEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIStaticText_setTextAlignment (irr::gui::IGUIStaticText *larg1, irr::gui::EGUI_ALIGNMENT larg2, irr::gui::EGUI_ALIGNMENT larg3) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::gui::EGUI_ALIGNMENT arg2 ;
  irr::gui::EGUI_ALIGNMENT arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setTextAlignment(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIStaticText_setWordWrap (irr::gui::IGUIStaticText *larg1, int larg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setWordWrap(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIStaticText_isWordWrapEnabled (irr::gui::IGUIStaticText *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isWordWrapEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::s32 _wrap_IGUIStaticText_getTextHeight (irr::gui::IGUIStaticText *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIStaticText const *)arg1)->getTextHeight();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGUIStaticText_getTextWidth (irr::gui::IGUIStaticText *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIStaticText const *)arg1)->getTextWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUIStaticText_setTextRestrainedInside (irr::gui::IGUIStaticText *larg1, int larg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setTextRestrainedInside(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIStaticText_isTextRestrainedInside (irr::gui::IGUIStaticText *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isTextRestrainedInside();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIStaticText_setRightToLeft (irr::gui::IGUIStaticText *larg1, int larg2) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setRightToLeft(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIStaticText_isRightToLeft (irr::gui::IGUIStaticText *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIStaticText const *)arg1)->isRightToLeft();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IGUIStaticText (irr::gui::IGUIStaticText *larg1) {
  irr::gui::IGUIStaticText *arg1 = (irr::gui::IGUIStaticText *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUITab_getNumber (irr::gui::IGUITab *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITab const *)arg1)->getNumber();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUITab_setDrawBackground__SWIG_0 (irr::gui::IGUITab *larg1, int larg2) {
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDrawBackground(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITab_setDrawBackground__SWIG_1 (irr::gui::IGUITab *larg1) {
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setDrawBackground();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITab_setBackgroundColor (irr::gui::IGUITab *larg1, irr::video::SColor *larg2) {
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setBackgroundColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUITab_isDrawingBackground (irr::gui::IGUITab *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUITab const *)arg1)->isDrawingBackground();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::video::SColor *_wrap_IGUITab_getBackgroundColor (irr::gui::IGUITab *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUITab const *)arg1)->getBackgroundColor();
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_IGUITab_setTextColor (irr::gui::IGUITab *larg1, irr::video::SColor *larg2) {
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setTextColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_IGUITab_getTextColor (irr::gui::IGUITab *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUITab const *)arg1)->getTextColor();
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_delete_IGUITab (irr::gui::IGUITab *larg1) {
  irr::gui::IGUITab *arg1 = (irr::gui::IGUITab *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUITab *_wrap_IGUITabControl_addTab__SWIG_0 (irr::gui::IGUITabControl *larg1, wchar_t *larg2, irr::s32 larg3) {
  irr::gui::IGUITab * lresult = (irr::gui::IGUITab *)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  irr::gui::IGUITab *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUITab *)(arg1)->addTab((wchar_t const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITab *)0;
  }
}


EXPORT irr::gui::IGUITab *_wrap_IGUITabControl_addTab__SWIG_1 (irr::gui::IGUITabControl *larg1, wchar_t *larg2) {
  irr::gui::IGUITab * lresult = (irr::gui::IGUITab *)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::gui::IGUITab *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUITab *)(arg1)->addTab((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITab *)0;
  }
}


EXPORT irr::gui::IGUITab *_wrap_IGUITabControl_insertTab__SWIG_0 (irr::gui::IGUITabControl *larg1, irr::s32 larg2, wchar_t *larg3, irr::s32 larg4) {
  irr::gui::IGUITab * lresult = (irr::gui::IGUITab *)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUITab *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUITab *)(arg1)->insertTab(arg2,(wchar_t const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITab *)0;
  }
}


EXPORT irr::gui::IGUITab *_wrap_IGUITabControl_insertTab__SWIG_1 (irr::gui::IGUITabControl *larg1, irr::s32 larg2, wchar_t *larg3) {
  irr::gui::IGUITab * lresult = (irr::gui::IGUITab *)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::gui::IGUITab *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUITab *)(arg1)->insertTab(arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITab *)0;
  }
}


EXPORT void _wrap_IGUITabControl_removeTab (irr::gui::IGUITabControl *larg1, irr::s32 larg2) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeTab(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITabControl_clear (irr::gui::IGUITabControl *larg1) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUITabControl_getTabCount (irr::gui::IGUITabControl *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getTabCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::gui::IGUITab *_wrap_IGUITabControl_getTab (irr::gui::IGUITabControl *larg1, irr::s32 larg2) {
  irr::gui::IGUITab * lresult = (irr::gui::IGUITab *)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  irr::gui::IGUITab *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUITab *)((irr::gui::IGUITabControl const *)arg1)->getTab(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITab *)0;
  }
}


EXPORT int _wrap_IGUITabControl_setActiveTab__SWIG_0 (irr::gui::IGUITabControl *larg1, irr::s32 larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->setActiveTab(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUITabControl_setActiveTab__SWIG_1 (irr::gui::IGUITabControl *larg1, irr::gui::IGUITab *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::gui::IGUITab *arg2 = (irr::gui::IGUITab *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->setActiveTab(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::s32 _wrap_IGUITabControl_getActiveTab (irr::gui::IGUITabControl *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getActiveTab();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IGUITabControl_getTabAt (irr::gui::IGUITabControl *larg1, irr::s32 larg2, irr::s32 larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getTabAt(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUITabControl_setTabHeight (irr::gui::IGUITabControl *larg1, irr::s32 larg2) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTabHeight(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUITabControl_getTabHeight (irr::gui::IGUITabControl *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getTabHeight();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUITabControl_setTabMaxWidth (irr::gui::IGUITabControl *larg1, irr::s32 larg2) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTabMaxWidth(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUITabControl_getTabMaxWidth (irr::gui::IGUITabControl *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getTabMaxWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUITabControl_setTabVerticalAlignment (irr::gui::IGUITabControl *larg1, irr::gui::EGUI_ALIGNMENT larg2) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::gui::EGUI_ALIGNMENT arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTabVerticalAlignment(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::EGUI_ALIGNMENT _wrap_IGUITabControl_getTabVerticalAlignment (irr::gui::IGUITabControl *larg1) {
  irr::gui::EGUI_ALIGNMENT lresult = (irr::gui::EGUI_ALIGNMENT)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::gui::EGUI_ALIGNMENT result;
  
  arg1 = larg1;
  try {
    result = (irr::gui::EGUI_ALIGNMENT)((irr::gui::IGUITabControl const *)arg1)->getTabVerticalAlignment();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::EGUI_ALIGNMENT)0;
  }
}


EXPORT void _wrap_IGUITabControl_setTabExtraWidth (irr::gui::IGUITabControl *larg1, irr::s32 larg2) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTabExtraWidth(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUITabControl_getTabExtraWidth (irr::gui::IGUITabControl *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITabControl const *)arg1)->getTabExtraWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_delete_IGUITabControl (irr::gui::IGUITabControl *larg1) {
  irr::gui::IGUITabControl *arg1 = (irr::gui::IGUITabControl *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_addColumn__SWIG_0 (irr::gui::IGUITable *larg1, wchar_t *larg2, irr::s32 larg3) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addColumn((wchar_t const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_addColumn__SWIG_1 (irr::gui::IGUITable *larg1, wchar_t *larg2) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addColumn((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_removeColumn (irr::gui::IGUITable *larg1, irr::u32 larg2) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeColumn(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUITable_getColumnCount (irr::gui::IGUITable *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITable const *)arg1)->getColumnCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT int _wrap_IGUITable_setActiveColumn__SWIG_0 (irr::gui::IGUITable *larg1, irr::s32 larg2, int larg3) {
  int lresult = (int)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::s32 arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->setActiveColumn(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUITable_setActiveColumn__SWIG_1 (irr::gui::IGUITable *larg1, irr::s32 larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::s32 arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->setActiveColumn(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::s32 _wrap_IGUITable_getActiveColumn (irr::gui::IGUITable *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITable const *)arg1)->getActiveColumn();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::gui::EGUI_ORDERING_MODE _wrap_IGUITable_getActiveColumnOrdering (irr::gui::IGUITable *larg1) {
  irr::gui::EGUI_ORDERING_MODE lresult = (irr::gui::EGUI_ORDERING_MODE)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::gui::EGUI_ORDERING_MODE result;
  
  arg1 = larg1;
  try {
    result = (irr::gui::EGUI_ORDERING_MODE)((irr::gui::IGUITable const *)arg1)->getActiveColumnOrdering();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::EGUI_ORDERING_MODE)0;
  }
}


EXPORT void _wrap_IGUITable_setColumnWidth (irr::gui::IGUITable *larg1, irr::u32 larg2, irr::u32 larg3) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setColumnWidth(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IGUITable_getColumnWidth (irr::gui::IGUITable *larg1, irr::u32 larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)((irr::gui::IGUITable const *)arg1)->getColumnWidth(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IGUITable_setResizableColumns (irr::gui::IGUITable *larg1, int larg2) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setResizableColumns(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUITable_hasResizableColumns (irr::gui::IGUITable *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUITable const *)arg1)->hasResizableColumns();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUITable_setColumnOrdering (irr::gui::IGUITable *larg1, irr::u32 larg2, irr::gui::EGUI_COLUMN_ORDERING larg3) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  irr::gui::EGUI_COLUMN_ORDERING arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setColumnOrdering(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUITable_getSelected (irr::gui::IGUITable *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITable const *)arg1)->getSelected();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IGUITable_setSelected (irr::gui::IGUITable *larg1, irr::s32 larg2) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSelected(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUITable_getRowCount (irr::gui::IGUITable *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITable const *)arg1)->getRowCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::u32 _wrap_IGUITable_addRow (irr::gui::IGUITable *larg1, irr::u32 larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)(arg1)->addRow(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IGUITable_removeRow (irr::gui::IGUITable *larg1, irr::u32 larg2) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeRow(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_clearRows (irr::gui::IGUITable *larg1) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clearRows();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_swapRows (irr::gui::IGUITable *larg1, irr::u32 larg2, irr::u32 larg3) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->swapRows(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_orderRows__SWIG_0 (irr::gui::IGUITable *larg1, irr::s32 larg2, irr::gui::EGUI_ORDERING_MODE larg3) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::s32 arg2 ;
  irr::gui::EGUI_ORDERING_MODE arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->orderRows(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_orderRows__SWIG_1 (irr::gui::IGUITable *larg1, irr::s32 larg2) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->orderRows(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_orderRows__SWIG_2 (irr::gui::IGUITable *larg1) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->orderRows();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_setCellText__SWIG_0 (irr::gui::IGUITable *larg1, irr::u32 larg2, irr::u32 larg3, irr::core::stringw *larg4) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::core::stringw *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setCellText(arg2,arg3,(irr::core::stringw const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_setCellText__SWIG_1 (irr::gui::IGUITable *larg1, irr::u32 larg2, irr::u32 larg3, irr::core::stringw *larg4, irr::video::SColor *larg5) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::core::stringw *arg4 = 0 ;
  irr::video::SColor arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = *larg5;
  try {
    (arg1)->setCellText(arg2,arg3,(irr::core::stringw const &)*arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_setCellData (irr::gui::IGUITable *larg1, irr::u32 larg2, irr::u32 larg3, void *larg4) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setCellData(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_setCellColor (irr::gui::IGUITable *larg1, irr::u32 larg2, irr::u32 larg3, irr::video::SColor *larg4) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::video::SColor arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    (arg1)->setCellColor(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT wchar_t *_wrap_IGUITable_getCellText (irr::gui::IGUITable *larg1, irr::u32 larg2, irr::u32 larg3) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (wchar_t *)((irr::gui::IGUITable const *)arg1)->getCellText(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT void *_wrap_IGUITable_getCellData (irr::gui::IGUITable *larg1, irr::u32 larg2, irr::u32 larg3) {
  void * lresult = (void *)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  void *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (void *)((irr::gui::IGUITable const *)arg1)->getCellData(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_IGUITable_clear (irr::gui::IGUITable *larg1) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITable_setDrawFlags (irr::gui::IGUITable *larg1, irr::s32 larg2) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDrawFlags(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUITable_getDrawFlags (irr::gui::IGUITable *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITable const *)arg1)->getDrawFlags();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_delete_IGUITable (irr::gui::IGUITable *larg1) {
  irr::gui::IGUITable *arg1 = (irr::gui::IGUITable *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIToolBar_addButton__SWIG_0 (irr::gui::IGUIToolBar *larg1, irr::s32 larg2, wchar_t *larg3, wchar_t *larg4, irr::video::ITexture *larg5, irr::video::ITexture *larg6, int larg7, int larg8) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  bool arg7 ;
  bool arg8 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = (bool)larg8;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIToolBar_addButton__SWIG_1 (irr::gui::IGUIToolBar *larg1, irr::s32 larg2, wchar_t *larg3, wchar_t *larg4, irr::video::ITexture *larg5, irr::video::ITexture *larg6, int larg7) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  bool arg7 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIToolBar_addButton__SWIG_2 (irr::gui::IGUIToolBar *larg1, irr::s32 larg2, wchar_t *larg3, wchar_t *larg4, irr::video::ITexture *larg5, irr::video::ITexture *larg6) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIToolBar_addButton__SWIG_3 (irr::gui::IGUIToolBar *larg1, irr::s32 larg2, wchar_t *larg3, wchar_t *larg4, irr::video::ITexture *larg5) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIToolBar_addButton__SWIG_4 (irr::gui::IGUIToolBar *larg1, irr::s32 larg2, wchar_t *larg3, wchar_t *larg4) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIToolBar_addButton__SWIG_5 (irr::gui::IGUIToolBar *larg1, irr::s32 larg2, wchar_t *larg3) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIToolBar_addButton__SWIG_6 (irr::gui::IGUIToolBar *larg1, irr::s32 larg2) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::s32 arg2 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIToolBar_addButton__SWIG_7 (irr::gui::IGUIToolBar *larg1) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIButton *)(arg1)->addButton();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT void _wrap_delete_IGUIToolBar (irr::gui::IGUIToolBar *larg1) {
  irr::gui::IGUIToolBar *arg1 = (irr::gui::IGUIToolBar *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIWindow_getCloseButton (irr::gui::IGUIWindow *larg1) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIButton *)((irr::gui::IGUIWindow const *)arg1)->getCloseButton();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIWindow_getMinimizeButton (irr::gui::IGUIWindow *larg1) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIButton *)((irr::gui::IGUIWindow const *)arg1)->getMinimizeButton();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT irr::gui::IGUIButton *_wrap_IGUIWindow_getMaximizeButton (irr::gui::IGUIWindow *larg1) {
  irr::gui::IGUIButton * lresult = (irr::gui::IGUIButton *)0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  irr::gui::IGUIButton *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIButton *)((irr::gui::IGUIWindow const *)arg1)->getMaximizeButton();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIButton *)0;
  }
}


EXPORT int _wrap_IGUIWindow_isDraggable (irr::gui::IGUIWindow *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIWindow const *)arg1)->isDraggable();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIWindow_setDraggable (irr::gui::IGUIWindow *larg1, int larg2) {
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDraggable(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIWindow_setDrawBackground (irr::gui::IGUIWindow *larg1, int larg2) {
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDrawBackground(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIWindow_getDrawBackground (irr::gui::IGUIWindow *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIWindow const *)arg1)->getDrawBackground();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUIWindow_setDrawTitlebar (irr::gui::IGUIWindow *larg1, int larg2) {
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDrawTitlebar(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUIWindow_getDrawTitlebar (irr::gui::IGUIWindow *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUIWindow const *)arg1)->getDrawTitlebar();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::rect< irr::s32 > *_wrap_IGUIWindow_getClientRect (irr::gui::IGUIWindow *larg1) {
  irr::core::rect< irr::s32 > * lresult = (irr::core::rect< irr::s32 > *)0 ;
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  irr::core::rect< irr::s32 > result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUIWindow const *)arg1)->getClientRect();
    lresult = new irr::core::rect< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< irr::s32 > *)0;
  }
}


EXPORT void _wrap_delete_IGUIWindow (irr::gui::IGUIWindow *larg1) {
  irr::gui::IGUIWindow *arg1 = (irr::gui::IGUIWindow *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IGUIImageList (irr::gui::IGUIImageList *larg1) {
  irr::gui::IGUIImageList *arg1 = (irr::gui::IGUIImageList *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIImageList_draw__SWIG_0 (irr::gui::IGUIImageList *larg1, irr::s32 larg2, irr::core::vector2d< irr::s32 > *larg3, irr::core::rect< irr::s32 > *larg4) {
  irr::gui::IGUIImageList *arg1 = (irr::gui::IGUIImageList *) 0 ;
  irr::s32 arg2 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  irr::core::rect< irr::s32 > *arg4 = (irr::core::rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->draw(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3,(irr::core::rect< irr::s32 > const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUIImageList_draw__SWIG_1 (irr::gui::IGUIImageList *larg1, irr::s32 larg2, irr::core::vector2d< irr::s32 > *larg3) {
  irr::gui::IGUIImageList *arg1 = (irr::gui::IGUIImageList *) 0 ;
  irr::s32 arg2 ;
  irr::core::vector2d< irr::s32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->draw(arg2,(irr::core::vector2d< irr::s32 > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IGUIImageList_getImageCount (irr::gui::IGUIImageList *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUIImageList *arg1 = (irr::gui::IGUIImageList *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUIImageList const *)arg1)->getImageCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::core::dimension2d< irr::s32 > *_wrap_IGUIImageList_getImageSize (irr::gui::IGUIImageList *larg1) {
  irr::core::dimension2d< irr::s32 > * lresult = (irr::core::dimension2d< irr::s32 > *)0 ;
  irr::gui::IGUIImageList *arg1 = (irr::gui::IGUIImageList *) 0 ;
  irr::core::dimension2d< irr::s32 > result;
  
  arg1 = larg1;
  try {
    result = ((irr::gui::IGUIImageList const *)arg1)->getImageSize();
    lresult = new irr::core::dimension2d< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::s32 > *)0;
  }
}


EXPORT irr::gui::IGUITreeView *_wrap_IGUITreeViewNode_getOwner (irr::gui::IGUITreeViewNode *larg1) {
  irr::gui::IGUITreeView * lresult = (irr::gui::IGUITreeView *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeView *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUITreeView *)((irr::gui::IGUITreeViewNode const *)arg1)->getOwner();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeView *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_getParent (irr::gui::IGUITreeViewNode *larg1) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUITreeViewNode *)((irr::gui::IGUITreeViewNode const *)arg1)->getParent();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT wchar_t *_wrap_IGUITreeViewNode_getText (irr::gui::IGUITreeViewNode *larg1) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (wchar_t *)((irr::gui::IGUITreeViewNode const *)arg1)->getText();
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT void _wrap_IGUITreeViewNode_setText (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2) {
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setText((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT wchar_t *_wrap_IGUITreeViewNode_getIcon (irr::gui::IGUITreeViewNode *larg1) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (wchar_t *)((irr::gui::IGUITreeViewNode const *)arg1)->getIcon();
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT void _wrap_IGUITreeViewNode_setIcon (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2) {
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setIcon((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IGUITreeViewNode_getImageIndex (irr::gui::IGUITreeViewNode *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::gui::IGUITreeViewNode const *)arg1)->getImageIndex();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IGUITreeViewNode_setImageIndex (irr::gui::IGUITreeViewNode *larg1, irr::u32 larg2) {
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setImageIndex(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IGUITreeViewNode_getSelectedImageIndex (irr::gui::IGUITreeViewNode *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::gui::IGUITreeViewNode const *)arg1)->getSelectedImageIndex();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IGUITreeViewNode_setSelectedImageIndex (irr::gui::IGUITreeViewNode *larg1, irr::u32 larg2) {
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSelectedImageIndex(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_IGUITreeViewNode_getData (irr::gui::IGUITreeViewNode *larg1) {
  void * lresult = (void *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((irr::gui::IGUITreeViewNode const *)arg1)->getData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_IGUITreeViewNode_setData (irr::gui::IGUITreeViewNode *larg1, void *larg2) {
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setData(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::IReferenceCounted *_wrap_IGUITreeViewNode_getData2 (irr::gui::IGUITreeViewNode *larg1) {
  irr::IReferenceCounted * lresult = (irr::IReferenceCounted *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::IReferenceCounted *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::IReferenceCounted *)((irr::gui::IGUITreeViewNode const *)arg1)->getData2();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::IReferenceCounted *)0;
  }
}


EXPORT void _wrap_IGUITreeViewNode_setData2 (irr::gui::IGUITreeViewNode *larg1, irr::IReferenceCounted *larg2) {
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::IReferenceCounted *arg2 = (irr::IReferenceCounted *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setData2(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IGUITreeViewNode_getChildCount (irr::gui::IGUITreeViewNode *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::gui::IGUITreeViewNode const *)arg1)->getChildCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IGUITreeViewNode_clearChildren (irr::gui::IGUITreeViewNode *larg1) {
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clearChildren();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITreeViewNode_clearChilds (irr::gui::IGUITreeViewNode *larg1) {
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clearChilds();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUITreeViewNode_hasChildren (irr::gui::IGUITreeViewNode *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUITreeViewNode const *)arg1)->hasChildren();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUITreeViewNode_hasChilds (irr::gui::IGUITreeViewNode *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUITreeViewNode const *)arg1)->hasChilds();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildBack__SWIG_0 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2, wchar_t *larg3, irr::s32 larg4, irr::s32 larg5, void *larg6, irr::IReferenceCounted *larg7) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  void *arg6 = (void *) 0 ;
  irr::IReferenceCounted *arg7 = (irr::IReferenceCounted *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildBack((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildBack__SWIG_1 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2, wchar_t *larg3, irr::s32 larg4, irr::s32 larg5, void *larg6) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  void *arg6 = (void *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildBack((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildBack__SWIG_2 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2, wchar_t *larg3, irr::s32 larg4, irr::s32 larg5) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildBack((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildBack__SWIG_3 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2, wchar_t *larg3, irr::s32 larg4) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildBack((wchar_t const *)arg2,(wchar_t const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildBack__SWIG_4 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2, wchar_t *larg3) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildBack((wchar_t const *)arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildBack__SWIG_5 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildBack((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildFront__SWIG_0 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2, wchar_t *larg3, irr::s32 larg4, irr::s32 larg5, void *larg6, irr::IReferenceCounted *larg7) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  void *arg6 = (void *) 0 ;
  irr::IReferenceCounted *arg7 = (irr::IReferenceCounted *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildFront((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildFront__SWIG_1 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2, wchar_t *larg3, irr::s32 larg4, irr::s32 larg5, void *larg6) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  void *arg6 = (void *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildFront((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildFront__SWIG_2 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2, wchar_t *larg3, irr::s32 larg4, irr::s32 larg5) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildFront((wchar_t const *)arg2,(wchar_t const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildFront__SWIG_3 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2, wchar_t *larg3, irr::s32 larg4) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::s32 arg4 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildFront((wchar_t const *)arg2,(wchar_t const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildFront__SWIG_4 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2, wchar_t *larg3) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildFront((wchar_t const *)arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_addChildFront__SWIG_5 (irr::gui::IGUITreeViewNode *larg1, wchar_t *larg2) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->addChildFront((wchar_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildAfter__SWIG_0 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3, wchar_t *larg4, irr::s32 larg5, irr::s32 larg6, void *larg7, irr::IReferenceCounted *larg8) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::s32 arg5 ;
  irr::s32 arg6 ;
  void *arg7 = (void *) 0 ;
  irr::IReferenceCounted *arg8 = (irr::IReferenceCounted *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildAfter(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildAfter__SWIG_1 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3, wchar_t *larg4, irr::s32 larg5, irr::s32 larg6, void *larg7) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::s32 arg5 ;
  irr::s32 arg6 ;
  void *arg7 = (void *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildAfter(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildAfter__SWIG_2 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3, wchar_t *larg4, irr::s32 larg5, irr::s32 larg6) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::s32 arg5 ;
  irr::s32 arg6 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildAfter(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildAfter__SWIG_3 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3, wchar_t *larg4, irr::s32 larg5) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::s32 arg5 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildAfter(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildAfter__SWIG_4 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3, wchar_t *larg4) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildAfter(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildAfter__SWIG_5 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildAfter(arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildBefore__SWIG_0 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3, wchar_t *larg4, irr::s32 larg5, irr::s32 larg6, void *larg7, irr::IReferenceCounted *larg8) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::s32 arg5 ;
  irr::s32 arg6 ;
  void *arg7 = (void *) 0 ;
  irr::IReferenceCounted *arg8 = (irr::IReferenceCounted *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildBefore(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildBefore__SWIG_1 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3, wchar_t *larg4, irr::s32 larg5, irr::s32 larg6, void *larg7) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::s32 arg5 ;
  irr::s32 arg6 ;
  void *arg7 = (void *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildBefore(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildBefore__SWIG_2 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3, wchar_t *larg4, irr::s32 larg5, irr::s32 larg6) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::s32 arg5 ;
  irr::s32 arg6 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildBefore(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildBefore__SWIG_3 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3, wchar_t *larg4, irr::s32 larg5) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::s32 arg5 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildBefore(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildBefore__SWIG_4 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3, wchar_t *larg4) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildBefore(arg2,(wchar_t const *)arg3,(wchar_t const *)arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_insertChildBefore__SWIG_5 (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2, wchar_t *larg3) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::gui::IGUITreeViewNode *)(arg1)->insertChildBefore(arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_getFirstChild (irr::gui::IGUITreeViewNode *larg1) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUITreeViewNode *)((irr::gui::IGUITreeViewNode const *)arg1)->getFirstChild();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_getLastChild (irr::gui::IGUITreeViewNode *larg1) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUITreeViewNode *)((irr::gui::IGUITreeViewNode const *)arg1)->getLastChild();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_getPrevSibling (irr::gui::IGUITreeViewNode *larg1) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUITreeViewNode *)((irr::gui::IGUITreeViewNode const *)arg1)->getPrevSibling();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_getNextSibling (irr::gui::IGUITreeViewNode *larg1) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUITreeViewNode *)((irr::gui::IGUITreeViewNode const *)arg1)->getNextSibling();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeViewNode_getNextVisible (irr::gui::IGUITreeViewNode *larg1) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUITreeViewNode *)((irr::gui::IGUITreeViewNode const *)arg1)->getNextVisible();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT int _wrap_IGUITreeViewNode_deleteChild (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->deleteChild(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUITreeViewNode_moveChildUp (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->moveChildUp(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUITreeViewNode_moveChildDown (irr::gui::IGUITreeViewNode *larg1, irr::gui::IGUITreeViewNode *larg2) {
  int lresult = (int)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::gui::IGUITreeViewNode *arg2 = (irr::gui::IGUITreeViewNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->moveChildDown(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IGUITreeViewNode_getExpanded (irr::gui::IGUITreeViewNode *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUITreeViewNode const *)arg1)->getExpanded();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUITreeViewNode_setExpanded (irr::gui::IGUITreeViewNode *larg1, int larg2) {
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setExpanded(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUITreeViewNode_getSelected (irr::gui::IGUITreeViewNode *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUITreeViewNode const *)arg1)->getSelected();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUITreeViewNode_setSelected (irr::gui::IGUITreeViewNode *larg1, int larg2) {
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setSelected(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUITreeViewNode_isRoot (irr::gui::IGUITreeViewNode *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUITreeViewNode const *)arg1)->isRoot();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::s32 _wrap_IGUITreeViewNode_getLevel (irr::gui::IGUITreeViewNode *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::gui::IGUITreeViewNode const *)arg1)->getLevel();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT int _wrap_IGUITreeViewNode_isVisible (irr::gui::IGUITreeViewNode *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUITreeViewNode const *)arg1)->isVisible();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IGUITreeViewNode (irr::gui::IGUITreeViewNode *larg1) {
  irr::gui::IGUITreeViewNode *arg1 = (irr::gui::IGUITreeViewNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeView_getRoot (irr::gui::IGUITreeView *larg1) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeView *arg1 = (irr::gui::IGUITreeView *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUITreeViewNode *)((irr::gui::IGUITreeView const *)arg1)->getRoot();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeView_getSelected (irr::gui::IGUITreeView *larg1) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeView *arg1 = (irr::gui::IGUITreeView *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUITreeViewNode *)((irr::gui::IGUITreeView const *)arg1)->getSelected();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT int _wrap_IGUITreeView_getLinesVisible (irr::gui::IGUITreeView *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUITreeView *arg1 = (irr::gui::IGUITreeView *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUITreeView const *)arg1)->getLinesVisible();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IGUITreeView_setLinesVisible (irr::gui::IGUITreeView *larg1, int larg2) {
  irr::gui::IGUITreeView *arg1 = (irr::gui::IGUITreeView *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setLinesVisible(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITreeView_setIconFont (irr::gui::IGUITreeView *larg1, irr::gui::IGUIFont *larg2) {
  irr::gui::IGUITreeView *arg1 = (irr::gui::IGUITreeView *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setIconFont(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IGUITreeView_setImageList (irr::gui::IGUITreeView *larg1, irr::gui::IGUIImageList *larg2) {
  irr::gui::IGUITreeView *arg1 = (irr::gui::IGUITreeView *) 0 ;
  irr::gui::IGUIImageList *arg2 = (irr::gui::IGUIImageList *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setImageList(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::gui::IGUIImageList *_wrap_IGUITreeView_getImageList (irr::gui::IGUITreeView *larg1) {
  irr::gui::IGUIImageList * lresult = (irr::gui::IGUIImageList *)0 ;
  irr::gui::IGUITreeView *arg1 = (irr::gui::IGUITreeView *) 0 ;
  irr::gui::IGUIImageList *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIImageList *)((irr::gui::IGUITreeView const *)arg1)->getImageList();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIImageList *)0;
  }
}


EXPORT void _wrap_IGUITreeView_setImageLeftOfIcon (irr::gui::IGUITreeView *larg1, int larg2) {
  irr::gui::IGUITreeView *arg1 = (irr::gui::IGUITreeView *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setImageLeftOfIcon(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IGUITreeView_getImageLeftOfIcon (irr::gui::IGUITreeView *larg1) {
  int lresult = (int)0 ;
  irr::gui::IGUITreeView *arg1 = (irr::gui::IGUITreeView *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::gui::IGUITreeView const *)arg1)->getImageLeftOfIcon();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::gui::IGUITreeViewNode *_wrap_IGUITreeView_getLastEventNode (irr::gui::IGUITreeView *larg1) {
  irr::gui::IGUITreeViewNode * lresult = (irr::gui::IGUITreeViewNode *)0 ;
  irr::gui::IGUITreeView *arg1 = (irr::gui::IGUITreeView *) 0 ;
  irr::gui::IGUITreeViewNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUITreeViewNode *)((irr::gui::IGUITreeView const *)arg1)->getLastEventNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUITreeViewNode *)0;
  }
}


EXPORT void _wrap_delete_IGUITreeView (irr::gui::IGUITreeView *larg1) {
  irr::gui::IGUITreeView *arg1 = (irr::gui::IGUITreeView *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IImageLoader_isALoadableFileExtension (irr::video::IImageLoader *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::video::IImageLoader *arg1 = (irr::video::IImageLoader *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::IImageLoader const *)arg1)->isALoadableFileExtension((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IImageLoader_isALoadableFileFormat (irr::video::IImageLoader *larg1, irr::io::IReadFile *larg2) {
  int lresult = (int)0 ;
  irr::video::IImageLoader *arg1 = (irr::video::IImageLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::IImageLoader const *)arg1)->isALoadableFileFormat(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::video::IImage *_wrap_IImageLoader_loadImage (irr::video::IImageLoader *larg1, irr::io::IReadFile *larg2) {
  irr::video::IImage * lresult = (irr::video::IImage *)0 ;
  irr::video::IImageLoader *arg1 = (irr::video::IImageLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::video::IImage *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::IImage *)((irr::video::IImageLoader const *)arg1)->loadImage(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IImage *)0;
  }
}


EXPORT void _wrap_delete_IImageLoader (irr::video::IImageLoader *larg1) {
  irr::video::IImageLoader *arg1 = (irr::video::IImageLoader *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IImageWriter_isAWriteableFileExtension (irr::video::IImageWriter *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::video::IImageWriter *arg1 = (irr::video::IImageWriter *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::video::IImageWriter const *)arg1)->isAWriteableFileExtension((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IImageWriter_writeImage__SWIG_0 (irr::video::IImageWriter *larg1, irr::io::IWriteFile *larg2, irr::video::IImage *larg3, irr::u32 larg4) {
  int lresult = (int)0 ;
  irr::video::IImageWriter *arg1 = (irr::video::IImageWriter *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::u32 arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((irr::video::IImageWriter const *)arg1)->writeImage(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IImageWriter_writeImage__SWIG_1 (irr::video::IImageWriter *larg1, irr::io::IWriteFile *larg2, irr::video::IImage *larg3) {
  int lresult = (int)0 ;
  irr::video::IImageWriter *arg1 = (irr::video::IImageWriter *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((irr::video::IImageWriter const *)arg1)->writeImage(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IImageWriter (irr::video::IImageWriter *larg1) {
  irr::video::IImageWriter *arg1 = (irr::video::IImageWriter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILightSceneNode_setLightData (irr::scene::ILightSceneNode *larg1, irr::video::SLight *larg2) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::video::SLight *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLightData((irr::video::SLight const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SLight *_wrap_ILightSceneNode_getLightData__SWIG_0 (irr::scene::ILightSceneNode *larg1) {
  irr::video::SLight * lresult = (irr::video::SLight *)0 ;
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::video::SLight *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SLight *) &((irr::scene::ILightSceneNode const *)arg1)->getLightData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SLight *)0;
  }
}


EXPORT irr::video::SLight *_wrap_ILightSceneNode_getLightData__SWIG_1 (irr::scene::ILightSceneNode *larg1) {
  irr::video::SLight * lresult = (irr::video::SLight *)0 ;
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::video::SLight *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SLight *) &(arg1)->getLightData();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SLight *)0;
  }
}


EXPORT void _wrap_ILightSceneNode_setRadius (irr::scene::ILightSceneNode *larg1, irr::f32 larg2) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRadius(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_ILightSceneNode_getRadius (irr::scene::ILightSceneNode *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::ILightSceneNode const *)arg1)->getRadius();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_ILightSceneNode_setLightType (irr::scene::ILightSceneNode *larg1, irr::video::E_LIGHT_TYPE larg2) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::video::E_LIGHT_TYPE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLightType(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::E_LIGHT_TYPE _wrap_ILightSceneNode_getLightType (irr::scene::ILightSceneNode *larg1) {
  irr::video::E_LIGHT_TYPE lresult = (irr::video::E_LIGHT_TYPE)0 ;
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  irr::video::E_LIGHT_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::video::E_LIGHT_TYPE)((irr::scene::ILightSceneNode const *)arg1)->getLightType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::E_LIGHT_TYPE)0;
  }
}


EXPORT void _wrap_ILightSceneNode_enableCastShadow__SWIG_0 (irr::scene::ILightSceneNode *larg1, int larg2) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->enableCastShadow(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILightSceneNode_enableCastShadow__SWIG_1 (irr::scene::ILightSceneNode *larg1) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->enableCastShadow();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ILightSceneNode_getCastShadow (irr::scene::ILightSceneNode *larg1) {
  int lresult = (int)0 ;
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ILightSceneNode const *)arg1)->getCastShadow();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_ILightSceneNode (irr::scene::ILightSceneNode *larg1) {
  irr::scene::ILightSceneNode *arg1 = (irr::scene::ILightSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMaterialRenderer_OnSetMaterial (irr::video::IMaterialRenderer *larg1, irr::video::SMaterial *larg2, irr::video::SMaterial *larg3, int larg4, irr::video::IMaterialRendererServices *larg5) {
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::video::SMaterial *arg3 = 0 ;
  bool arg4 ;
  irr::video::IMaterialRendererServices *arg5 = (irr::video::IMaterialRendererServices *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    (arg1)->OnSetMaterial((irr::video::SMaterial const &)*arg2,(irr::video::SMaterial const &)*arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IMaterialRenderer_OnRender (irr::video::IMaterialRenderer *larg1, irr::video::IMaterialRendererServices *larg2, irr::video::E_VERTEX_TYPE larg3) {
  int lresult = (int)0 ;
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  irr::video::IMaterialRendererServices *arg2 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::video::E_VERTEX_TYPE arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->OnRender(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IMaterialRenderer_OnUnsetMaterial (irr::video::IMaterialRenderer *larg1) {
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->OnUnsetMaterial();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IMaterialRenderer_isTransparent (irr::video::IMaterialRenderer *larg1) {
  int lresult = (int)0 ;
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::video::IMaterialRenderer const *)arg1)->isTransparent();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::s32 _wrap_IMaterialRenderer_getRenderCapability (irr::video::IMaterialRenderer *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::video::IMaterialRenderer const *)arg1)->getRenderCapability();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::video::IMaterialRenderer *_wrap_new_IMaterialRenderer () {
  irr::video::IMaterialRenderer * lresult = (irr::video::IMaterialRenderer *)0 ;
  irr::video::IMaterialRenderer *result = 0 ;
  
  try {
    result = (irr::video::IMaterialRenderer *)new irr::video::IMaterialRenderer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IMaterialRenderer *)0;
  }
}


EXPORT void _wrap_delete_IMaterialRenderer (irr::video::IMaterialRenderer *larg1) {
  irr::video::IMaterialRenderer *arg1 = (irr::video::IMaterialRenderer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IMaterialRendererServices (irr::video::IMaterialRendererServices *larg1) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMaterialRendererServices_setBasicRenderStates (irr::video::IMaterialRendererServices *larg1, irr::video::SMaterial *larg2, irr::video::SMaterial *larg3, int larg4) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::video::SMaterial *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    (arg1)->setBasicRenderStates((irr::video::SMaterial const &)*arg2,(irr::video::SMaterial const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IMaterialRendererServices_setVertexShaderConstant__SWIG_0 (irr::video::IMaterialRendererServices *larg1, irr::c8 *larg2, irr::f32 *larg3, int larg4) {
  int lresult = (int)0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::f32 *arg3 = (irr::f32 *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->setVertexShaderConstant((irr::c8 const *)arg2,(irr::f32 const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IMaterialRendererServices_setVertexShaderConstant__SWIG_1 (irr::video::IMaterialRendererServices *larg1, irr::c8 *larg2, bool *larg3, int larg4) {
  int lresult = (int)0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool *arg3 = (bool *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->setVertexShaderConstant((irr::c8 const *)arg2,(bool const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IMaterialRendererServices_setVertexShaderConstant__SWIG_2 (irr::video::IMaterialRendererServices *larg1, irr::c8 *larg2, irr::s32 *larg3, int larg4) {
  int lresult = (int)0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 *arg3 = (irr::s32 *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->setVertexShaderConstant((irr::c8 const *)arg2,(irr::s32 const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IMaterialRendererServices_setVertexShaderConstant__SWIG_3 (irr::video::IMaterialRendererServices *larg1, irr::f32 *larg2, irr::s32 larg3, irr::s32 larg4) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::f32 *arg2 = (irr::f32 *) 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setVertexShaderConstant((irr::f32 const *)arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMaterialRendererServices_setVertexShaderConstant__SWIG_4 (irr::video::IMaterialRendererServices *larg1, irr::f32 *larg2, irr::s32 larg3) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::f32 *arg2 = (irr::f32 *) 0 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setVertexShaderConstant((irr::f32 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IMaterialRendererServices_setPixelShaderConstant__SWIG_0 (irr::video::IMaterialRendererServices *larg1, irr::c8 *larg2, irr::f32 *larg3, int larg4) {
  int lresult = (int)0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::f32 *arg3 = (irr::f32 *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->setPixelShaderConstant((irr::c8 const *)arg2,(irr::f32 const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IMaterialRendererServices_setPixelShaderConstant__SWIG_1 (irr::video::IMaterialRendererServices *larg1, irr::c8 *larg2, bool *larg3, int larg4) {
  int lresult = (int)0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool *arg3 = (bool *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->setPixelShaderConstant((irr::c8 const *)arg2,(bool const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IMaterialRendererServices_setPixelShaderConstant__SWIG_2 (irr::video::IMaterialRendererServices *larg1, irr::c8 *larg2, irr::s32 *larg3, int larg4) {
  int lresult = (int)0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 *arg3 = (irr::s32 *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->setPixelShaderConstant((irr::c8 const *)arg2,(irr::s32 const *)arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IMaterialRendererServices_setPixelShaderConstant__SWIG_3 (irr::video::IMaterialRendererServices *larg1, irr::f32 *larg2, irr::s32 larg3, irr::s32 larg4) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::f32 *arg2 = (irr::f32 *) 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setPixelShaderConstant((irr::f32 const *)arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMaterialRendererServices_setPixelShaderConstant__SWIG_4 (irr::video::IMaterialRendererServices *larg1, irr::f32 *larg2, irr::s32 larg3) {
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::f32 *arg2 = (irr::f32 *) 0 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setPixelShaderConstant((irr::f32 const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::IVideoDriver *_wrap_IMaterialRendererServices_getVideoDriver (irr::video::IMaterialRendererServices *larg1) {
  irr::video::IVideoDriver * lresult = (irr::video::IVideoDriver *)0 ;
  irr::video::IMaterialRendererServices *arg1 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::video::IVideoDriver *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::IVideoDriver *)(arg1)->getVideoDriver();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IVideoDriver *)0;
  }
}


EXPORT void _wrap_delete_IMeshCache (irr::scene::IMeshCache *larg1) {
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshCache_addMesh (irr::scene::IMeshCache *larg1, irr::io::path *larg2, irr::scene::IAnimatedMesh *larg3) {
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *arg3 = (irr::scene::IAnimatedMesh *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addMesh((irr::io::path const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshCache_removeMesh (irr::scene::IMeshCache *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->removeMesh((irr::scene::IMesh const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IMeshCache_getMeshCount (irr::scene::IMeshCache *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IMeshCache const *)arg1)->getMeshCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::s32 _wrap_IMeshCache_getMeshIndex (irr::scene::IMeshCache *larg1, irr::scene::IMesh *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::scene::IMeshCache const *)arg1)->getMeshIndex((irr::scene::IMesh const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_IMeshCache_getMeshByIndex (irr::scene::IMeshCache *larg1, irr::u32 larg2) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 arg2 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->getMeshByIndex(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_IMeshCache_getMeshByFilename (irr::scene::IMeshCache *larg1, irr::io::path *larg2) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->getMeshByFilename((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::io::path *_wrap_IMeshCache_getMeshFilename__SWIG_0 (irr::scene::IMeshCache *larg1, irr::u32 larg2) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 arg2 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::path *) &((irr::scene::IMeshCache const *)arg1)->getMeshFilename(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT irr::io::path *_wrap_IMeshCache_getMeshFilename__SWIG_1 (irr::scene::IMeshCache *larg1, irr::scene::IMesh *larg2) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::path *) &((irr::scene::IMeshCache const *)arg1)->getMeshFilename((irr::scene::IMesh const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT int _wrap_IMeshCache_setMeshFilename__SWIG_0 (irr::scene::IMeshCache *larg1, irr::u32 larg2, irr::io::path *larg3) {
  int lresult = (int)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 arg2 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->setMeshFilename(arg2,(irr::io::path const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IMeshCache_setMeshFilename__SWIG_1 (irr::scene::IMeshCache *larg1, irr::scene::IMesh *larg2, irr::io::path *larg3) {
  int lresult = (int)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->setMeshFilename((irr::scene::IMesh const *)arg2,(irr::io::path const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_IMeshCache_getMeshByName (irr::scene::IMeshCache *larg1, irr::io::path *larg2) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->getMeshByName((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::io::SNamedPath *_wrap_IMeshCache_getMeshName__SWIG_0 (irr::scene::IMeshCache *larg1, irr::u32 larg2) {
  irr::io::SNamedPath * lresult = (irr::io::SNamedPath *)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 arg2 ;
  irr::io::SNamedPath *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::SNamedPath *) &((irr::scene::IMeshCache const *)arg1)->getMeshName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::SNamedPath *)0;
  }
}


EXPORT irr::io::SNamedPath *_wrap_IMeshCache_getMeshName__SWIG_1 (irr::scene::IMeshCache *larg1, irr::scene::IMesh *larg2) {
  irr::io::SNamedPath * lresult = (irr::io::SNamedPath *)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  irr::io::SNamedPath *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::SNamedPath *) &((irr::scene::IMeshCache const *)arg1)->getMeshName((irr::scene::IMesh const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::SNamedPath *)0;
  }
}


EXPORT int _wrap_IMeshCache_renameMesh__SWIG_0 (irr::scene::IMeshCache *larg1, irr::u32 larg2, irr::io::path *larg3) {
  int lresult = (int)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::u32 arg2 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->renameMesh(arg2,(irr::io::path const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IMeshCache_renameMesh__SWIG_1 (irr::scene::IMeshCache *larg1, irr::scene::IMesh *larg2, irr::io::path *larg3) {
  int lresult = (int)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) (irr::scene::IMesh *)0 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->renameMesh((irr::scene::IMesh const *)arg2,(irr::io::path const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IMeshCache_isMeshLoaded (irr::scene::IMeshCache *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->isMeshLoaded((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IMeshCache_clear (irr::scene::IMeshCache *larg1) {
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshCache_clearUnusedMeshes (irr::scene::IMeshCache *larg1) {
  irr::scene::IMeshCache *arg1 = (irr::scene::IMeshCache *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clearUnusedMeshes();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IMeshLoader (irr::scene::IMeshLoader *larg1) {
  irr::scene::IMeshLoader *arg1 = (irr::scene::IMeshLoader *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IMeshLoader_isALoadableFileExtension (irr::scene::IMeshLoader *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::scene::IMeshLoader *arg1 = (irr::scene::IMeshLoader *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::scene::IMeshLoader const *)arg1)->isALoadableFileExtension((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_IMeshLoader_createMesh (irr::scene::IMeshLoader *larg1, irr::io::IReadFile *larg2) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::IMeshLoader *arg1 = (irr::scene::IMeshLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->createMesh(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IVertexManipulator *_wrap_new_IVertexManipulator () {
  irr::scene::IVertexManipulator * lresult = (irr::scene::IVertexManipulator *)0 ;
  irr::scene::IVertexManipulator *result = 0 ;
  
  try {
    result = (irr::scene::IVertexManipulator *)new irr::scene::IVertexManipulator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVertexManipulator *)0;
  }
}


EXPORT void _wrap_delete_IVertexManipulator (irr::scene::IVertexManipulator *larg1) {
  irr::scene::IVertexManipulator *arg1 = (irr::scene::IVertexManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorSetManipulator *_wrap_new_SVertexColorSetManipulator (irr::video::SColor *larg1) {
  irr::scene::SVertexColorSetManipulator * lresult = (irr::scene::SVertexColorSetManipulator *)0 ;
  irr::video::SColor arg1 ;
  irr::scene::SVertexColorSetManipulator *result = 0 ;
  
  arg1 = *larg1;
  try {
    result = (irr::scene::SVertexColorSetManipulator *)new irr::scene::SVertexColorSetManipulator(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorSetManipulator *)0;
  }
}


EXPORT void _wrap_SVertexColorSetManipulator___funcall__ (irr::scene::SVertexColorSetManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorSetManipulator *arg1 = (irr::scene::SVertexColorSetManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorSetManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_SVertexColorSetManipulator (irr::scene::SVertexColorSetManipulator *larg1) {
  irr::scene::SVertexColorSetManipulator *arg1 = (irr::scene::SVertexColorSetManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorSetAlphaManipulator *_wrap_new_SVertexColorSetAlphaManipulator (irr::u32 larg1) {
  irr::scene::SVertexColorSetAlphaManipulator * lresult = (irr::scene::SVertexColorSetAlphaManipulator *)0 ;
  irr::u32 arg1 ;
  irr::scene::SVertexColorSetAlphaManipulator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SVertexColorSetAlphaManipulator *)new irr::scene::SVertexColorSetAlphaManipulator(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorSetAlphaManipulator *)0;
  }
}


EXPORT void _wrap_SVertexColorSetAlphaManipulator___funcall__ (irr::scene::SVertexColorSetAlphaManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorSetAlphaManipulator *arg1 = (irr::scene::SVertexColorSetAlphaManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorSetAlphaManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_SVertexColorSetAlphaManipulator (irr::scene::SVertexColorSetAlphaManipulator *larg1) {
  irr::scene::SVertexColorSetAlphaManipulator *arg1 = (irr::scene::SVertexColorSetAlphaManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SVertexColorInvertManipulator___funcall__ (irr::scene::SVertexColorInvertManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorInvertManipulator *arg1 = (irr::scene::SVertexColorInvertManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorInvertManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorInvertManipulator *_wrap_new_SVertexColorInvertManipulator () {
  irr::scene::SVertexColorInvertManipulator * lresult = (irr::scene::SVertexColorInvertManipulator *)0 ;
  irr::scene::SVertexColorInvertManipulator *result = 0 ;
  
  try {
    result = (irr::scene::SVertexColorInvertManipulator *)new irr::scene::SVertexColorInvertManipulator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorInvertManipulator *)0;
  }
}


EXPORT void _wrap_delete_SVertexColorInvertManipulator (irr::scene::SVertexColorInvertManipulator *larg1) {
  irr::scene::SVertexColorInvertManipulator *arg1 = (irr::scene::SVertexColorInvertManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorThresholdManipulator *_wrap_new_SVertexColorThresholdManipulator (irr::u8 larg1, irr::video::SColor *larg2, irr::video::SColor *larg3) {
  irr::scene::SVertexColorThresholdManipulator * lresult = (irr::scene::SVertexColorThresholdManipulator *)0 ;
  irr::u8 arg1 ;
  irr::video::SColor arg2 ;
  irr::video::SColor arg3 ;
  irr::scene::SVertexColorThresholdManipulator *result = 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  try {
    result = (irr::scene::SVertexColorThresholdManipulator *)new irr::scene::SVertexColorThresholdManipulator(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorThresholdManipulator *)0;
  }
}


EXPORT void _wrap_SVertexColorThresholdManipulator___funcall__ (irr::scene::SVertexColorThresholdManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorThresholdManipulator *arg1 = (irr::scene::SVertexColorThresholdManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorThresholdManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_SVertexColorThresholdManipulator (irr::scene::SVertexColorThresholdManipulator *larg1) {
  irr::scene::SVertexColorThresholdManipulator *arg1 = (irr::scene::SVertexColorThresholdManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorBrightnessManipulator *_wrap_new_SVertexColorBrightnessManipulator (irr::s32 larg1) {
  irr::scene::SVertexColorBrightnessManipulator * lresult = (irr::scene::SVertexColorBrightnessManipulator *)0 ;
  irr::s32 arg1 ;
  irr::scene::SVertexColorBrightnessManipulator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SVertexColorBrightnessManipulator *)new irr::scene::SVertexColorBrightnessManipulator(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorBrightnessManipulator *)0;
  }
}


EXPORT void _wrap_SVertexColorBrightnessManipulator___funcall__ (irr::scene::SVertexColorBrightnessManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorBrightnessManipulator *arg1 = (irr::scene::SVertexColorBrightnessManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorBrightnessManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_SVertexColorBrightnessManipulator (irr::scene::SVertexColorBrightnessManipulator *larg1) {
  irr::scene::SVertexColorBrightnessManipulator *arg1 = (irr::scene::SVertexColorBrightnessManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorContrastManipulator *_wrap_new_SVertexColorContrastManipulator (irr::f32 larg1) {
  irr::scene::SVertexColorContrastManipulator * lresult = (irr::scene::SVertexColorContrastManipulator *)0 ;
  irr::f32 arg1 ;
  irr::scene::SVertexColorContrastManipulator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SVertexColorContrastManipulator *)new irr::scene::SVertexColorContrastManipulator(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorContrastManipulator *)0;
  }
}


EXPORT void _wrap_SVertexColorContrastManipulator___funcall__ (irr::scene::SVertexColorContrastManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorContrastManipulator *arg1 = (irr::scene::SVertexColorContrastManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorContrastManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_SVertexColorContrastManipulator (irr::scene::SVertexColorContrastManipulator *larg1) {
  irr::scene::SVertexColorContrastManipulator *arg1 = (irr::scene::SVertexColorContrastManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorContrastBrightnessManipulator *_wrap_new_SVertexColorContrastBrightnessManipulator (irr::f32 larg1, irr::s32 larg2) {
  irr::scene::SVertexColorContrastBrightnessManipulator * lresult = (irr::scene::SVertexColorContrastBrightnessManipulator *)0 ;
  irr::f32 arg1 ;
  irr::s32 arg2 ;
  irr::scene::SVertexColorContrastBrightnessManipulator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::SVertexColorContrastBrightnessManipulator *)new irr::scene::SVertexColorContrastBrightnessManipulator(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorContrastBrightnessManipulator *)0;
  }
}


EXPORT void _wrap_SVertexColorContrastBrightnessManipulator___funcall__ (irr::scene::SVertexColorContrastBrightnessManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorContrastBrightnessManipulator *arg1 = (irr::scene::SVertexColorContrastBrightnessManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorContrastBrightnessManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_SVertexColorContrastBrightnessManipulator (irr::scene::SVertexColorContrastBrightnessManipulator *larg1) {
  irr::scene::SVertexColorContrastBrightnessManipulator *arg1 = (irr::scene::SVertexColorContrastBrightnessManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorGammaManipulator *_wrap_new_SVertexColorGammaManipulator (irr::f32 larg1) {
  irr::scene::SVertexColorGammaManipulator * lresult = (irr::scene::SVertexColorGammaManipulator *)0 ;
  irr::f32 arg1 ;
  irr::scene::SVertexColorGammaManipulator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SVertexColorGammaManipulator *)new irr::scene::SVertexColorGammaManipulator(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorGammaManipulator *)0;
  }
}


EXPORT void _wrap_SVertexColorGammaManipulator___funcall__ (irr::scene::SVertexColorGammaManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorGammaManipulator *arg1 = (irr::scene::SVertexColorGammaManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorGammaManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_SVertexColorGammaManipulator (irr::scene::SVertexColorGammaManipulator *larg1) {
  irr::scene::SVertexColorGammaManipulator *arg1 = (irr::scene::SVertexColorGammaManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorScaleManipulator *_wrap_new_SVertexColorScaleManipulator (irr::f32 larg1) {
  irr::scene::SVertexColorScaleManipulator * lresult = (irr::scene::SVertexColorScaleManipulator *)0 ;
  irr::f32 arg1 ;
  irr::scene::SVertexColorScaleManipulator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SVertexColorScaleManipulator *)new irr::scene::SVertexColorScaleManipulator(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorScaleManipulator *)0;
  }
}


EXPORT void _wrap_SVertexColorScaleManipulator___funcall__ (irr::scene::SVertexColorScaleManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorScaleManipulator *arg1 = (irr::scene::SVertexColorScaleManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorScaleManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_SVertexColorScaleManipulator (irr::scene::SVertexColorScaleManipulator *larg1) {
  irr::scene::SVertexColorScaleManipulator *arg1 = (irr::scene::SVertexColorScaleManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SVertexColorDesaturateToLightnessManipulator___funcall__ (irr::scene::SVertexColorDesaturateToLightnessManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorDesaturateToLightnessManipulator *arg1 = (irr::scene::SVertexColorDesaturateToLightnessManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorDesaturateToLightnessManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorDesaturateToLightnessManipulator *_wrap_new_SVertexColorDesaturateToLightnessManipulator () {
  irr::scene::SVertexColorDesaturateToLightnessManipulator * lresult = (irr::scene::SVertexColorDesaturateToLightnessManipulator *)0 ;
  irr::scene::SVertexColorDesaturateToLightnessManipulator *result = 0 ;
  
  try {
    result = (irr::scene::SVertexColorDesaturateToLightnessManipulator *)new irr::scene::SVertexColorDesaturateToLightnessManipulator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorDesaturateToLightnessManipulator *)0;
  }
}


EXPORT void _wrap_delete_SVertexColorDesaturateToLightnessManipulator (irr::scene::SVertexColorDesaturateToLightnessManipulator *larg1) {
  irr::scene::SVertexColorDesaturateToLightnessManipulator *arg1 = (irr::scene::SVertexColorDesaturateToLightnessManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SVertexColorDesaturateToAverageManipulator___funcall__ (irr::scene::SVertexColorDesaturateToAverageManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorDesaturateToAverageManipulator *arg1 = (irr::scene::SVertexColorDesaturateToAverageManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorDesaturateToAverageManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorDesaturateToAverageManipulator *_wrap_new_SVertexColorDesaturateToAverageManipulator () {
  irr::scene::SVertexColorDesaturateToAverageManipulator * lresult = (irr::scene::SVertexColorDesaturateToAverageManipulator *)0 ;
  irr::scene::SVertexColorDesaturateToAverageManipulator *result = 0 ;
  
  try {
    result = (irr::scene::SVertexColorDesaturateToAverageManipulator *)new irr::scene::SVertexColorDesaturateToAverageManipulator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorDesaturateToAverageManipulator *)0;
  }
}


EXPORT void _wrap_delete_SVertexColorDesaturateToAverageManipulator (irr::scene::SVertexColorDesaturateToAverageManipulator *larg1) {
  irr::scene::SVertexColorDesaturateToAverageManipulator *arg1 = (irr::scene::SVertexColorDesaturateToAverageManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SVertexColorDesaturateToLuminanceManipulator___funcall__ (irr::scene::SVertexColorDesaturateToLuminanceManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorDesaturateToLuminanceManipulator *arg1 = (irr::scene::SVertexColorDesaturateToLuminanceManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorDesaturateToLuminanceManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorDesaturateToLuminanceManipulator *_wrap_new_SVertexColorDesaturateToLuminanceManipulator () {
  irr::scene::SVertexColorDesaturateToLuminanceManipulator * lresult = (irr::scene::SVertexColorDesaturateToLuminanceManipulator *)0 ;
  irr::scene::SVertexColorDesaturateToLuminanceManipulator *result = 0 ;
  
  try {
    result = (irr::scene::SVertexColorDesaturateToLuminanceManipulator *)new irr::scene::SVertexColorDesaturateToLuminanceManipulator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorDesaturateToLuminanceManipulator *)0;
  }
}


EXPORT void _wrap_delete_SVertexColorDesaturateToLuminanceManipulator (irr::scene::SVertexColorDesaturateToLuminanceManipulator *larg1) {
  irr::scene::SVertexColorDesaturateToLuminanceManipulator *arg1 = (irr::scene::SVertexColorDesaturateToLuminanceManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorInterpolateLinearManipulator *_wrap_new_SVertexColorInterpolateLinearManipulator (irr::video::SColor *larg1, irr::f32 larg2) {
  irr::scene::SVertexColorInterpolateLinearManipulator * lresult = (irr::scene::SVertexColorInterpolateLinearManipulator *)0 ;
  irr::video::SColor arg1 ;
  irr::f32 arg2 ;
  irr::scene::SVertexColorInterpolateLinearManipulator *result = 0 ;
  
  arg1 = *larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::SVertexColorInterpolateLinearManipulator *)new irr::scene::SVertexColorInterpolateLinearManipulator(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorInterpolateLinearManipulator *)0;
  }
}


EXPORT void _wrap_SVertexColorInterpolateLinearManipulator___funcall__ (irr::scene::SVertexColorInterpolateLinearManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorInterpolateLinearManipulator *arg1 = (irr::scene::SVertexColorInterpolateLinearManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorInterpolateLinearManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_SVertexColorInterpolateLinearManipulator (irr::scene::SVertexColorInterpolateLinearManipulator *larg1) {
  irr::scene::SVertexColorInterpolateLinearManipulator *arg1 = (irr::scene::SVertexColorInterpolateLinearManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexColorInterpolateQuadraticManipulator *_wrap_new_SVertexColorInterpolateQuadraticManipulator (irr::video::SColor *larg1, irr::video::SColor *larg2, irr::f32 larg3) {
  irr::scene::SVertexColorInterpolateQuadraticManipulator * lresult = (irr::scene::SVertexColorInterpolateQuadraticManipulator *)0 ;
  irr::video::SColor arg1 ;
  irr::video::SColor arg2 ;
  irr::f32 arg3 ;
  irr::scene::SVertexColorInterpolateQuadraticManipulator *result = 0 ;
  
  arg1 = *larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::SVertexColorInterpolateQuadraticManipulator *)new irr::scene::SVertexColorInterpolateQuadraticManipulator(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexColorInterpolateQuadraticManipulator *)0;
  }
}


EXPORT void _wrap_SVertexColorInterpolateQuadraticManipulator___funcall__ (irr::scene::SVertexColorInterpolateQuadraticManipulator *larg1, irr::video::S3DVertex *larg2) {
  irr::scene::SVertexColorInterpolateQuadraticManipulator *arg1 = (irr::scene::SVertexColorInterpolateQuadraticManipulator *) 0 ;
  irr::video::S3DVertex *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexColorInterpolateQuadraticManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_SVertexColorInterpolateQuadraticManipulator (irr::scene::SVertexColorInterpolateQuadraticManipulator *larg1) {
  irr::scene::SVertexColorInterpolateQuadraticManipulator *arg1 = (irr::scene::SVertexColorInterpolateQuadraticManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexPositionScaleManipulator *_wrap_new_SVertexPositionScaleManipulator (irr::core::vector3df *larg1) {
  irr::scene::SVertexPositionScaleManipulator * lresult = (irr::scene::SVertexPositionScaleManipulator *)0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::scene::SVertexPositionScaleManipulator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SVertexPositionScaleManipulator *)new irr::scene::SVertexPositionScaleManipulator((irr::core::vector3df const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexPositionScaleManipulator *)0;
  }
}


EXPORT void _wrap_delete_SVertexPositionScaleManipulator (irr::scene::SVertexPositionScaleManipulator *larg1) {
  irr::scene::SVertexPositionScaleManipulator *arg1 = (irr::scene::SVertexPositionScaleManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexPositionScaleAlongNormalsManipulator *_wrap_new_SVertexPositionScaleAlongNormalsManipulator (irr::core::vector3df *larg1) {
  irr::scene::SVertexPositionScaleAlongNormalsManipulator * lresult = (irr::scene::SVertexPositionScaleAlongNormalsManipulator *)0 ;
  irr::core::vector3df *arg1 = 0 ;
  irr::scene::SVertexPositionScaleAlongNormalsManipulator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SVertexPositionScaleAlongNormalsManipulator *)new irr::scene::SVertexPositionScaleAlongNormalsManipulator((irr::core::vector3df const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexPositionScaleAlongNormalsManipulator *)0;
  }
}


EXPORT void _wrap_delete_SVertexPositionScaleAlongNormalsManipulator (irr::scene::SVertexPositionScaleAlongNormalsManipulator *larg1) {
  irr::scene::SVertexPositionScaleAlongNormalsManipulator *arg1 = (irr::scene::SVertexPositionScaleAlongNormalsManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexPositionTransformManipulator *_wrap_new_SVertexPositionTransformManipulator (irr::core::matrix4 *larg1) {
  irr::scene::SVertexPositionTransformManipulator * lresult = (irr::scene::SVertexPositionTransformManipulator *)0 ;
  irr::core::matrix4 *arg1 = 0 ;
  irr::scene::SVertexPositionTransformManipulator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SVertexPositionTransformManipulator *)new irr::scene::SVertexPositionTransformManipulator((irr::core::matrix4 const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexPositionTransformManipulator *)0;
  }
}


EXPORT void _wrap_delete_SVertexPositionTransformManipulator (irr::scene::SVertexPositionTransformManipulator *larg1) {
  irr::scene::SVertexPositionTransformManipulator *arg1 = (irr::scene::SVertexPositionTransformManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SVertexTCoordsScaleManipulator *_wrap_new_SVertexTCoordsScaleManipulator__SWIG_0 (irr::core::vector2df *larg1, irr::u32 larg2) {
  irr::scene::SVertexTCoordsScaleManipulator * lresult = (irr::scene::SVertexTCoordsScaleManipulator *)0 ;
  irr::core::vector2df *arg1 = 0 ;
  irr::u32 arg2 ;
  irr::scene::SVertexTCoordsScaleManipulator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::SVertexTCoordsScaleManipulator *)new irr::scene::SVertexTCoordsScaleManipulator((irr::core::vector2df const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexTCoordsScaleManipulator *)0;
  }
}


EXPORT irr::scene::SVertexTCoordsScaleManipulator *_wrap_new_SVertexTCoordsScaleManipulator__SWIG_1 (irr::core::vector2df *larg1) {
  irr::scene::SVertexTCoordsScaleManipulator * lresult = (irr::scene::SVertexTCoordsScaleManipulator *)0 ;
  irr::core::vector2df *arg1 = 0 ;
  irr::scene::SVertexTCoordsScaleManipulator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SVertexTCoordsScaleManipulator *)new irr::scene::SVertexTCoordsScaleManipulator((irr::core::vector2df const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SVertexTCoordsScaleManipulator *)0;
  }
}


EXPORT void _wrap_SVertexTCoordsScaleManipulator___funcall__ (irr::scene::SVertexTCoordsScaleManipulator *larg1, irr::video::S3DVertex2TCoords *larg2) {
  irr::scene::SVertexTCoordsScaleManipulator *arg1 = (irr::scene::SVertexTCoordsScaleManipulator *) 0 ;
  irr::video::S3DVertex2TCoords *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::SVertexTCoordsScaleManipulator const *)arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_SVertexTCoordsScaleManipulator (irr::scene::SVertexTCoordsScaleManipulator *larg1) {
  irr::scene::SVertexTCoordsScaleManipulator *arg1 = (irr::scene::SVertexTCoordsScaleManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_flipSurfaces (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->flipSurfaces(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_setVertexColorAlpha__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::s32 larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->setVertexColorAlpha(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_setVertexColorAlpha__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, irr::s32 larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->setVertexColorAlpha(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_setVertexColors__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::video::SColor *larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->setVertexColors(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_setVertexColors__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, irr::video::SColor *larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::video::SColor arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->setVertexColors(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateNormals__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, int larg3, int larg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateNormals__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, int larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateNormals__SWIG_2 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateNormals__SWIG_3 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, int larg3, int larg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateNormals__SWIG_4 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, int larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateNormals__SWIG_5 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateNormals(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateTangents__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, int larg3, int larg4, int larg5) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateTangents__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, int larg3, int larg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateTangents__SWIG_2 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, int larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateTangents__SWIG_3 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateTangents__SWIG_4 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, int larg3, int larg4, int larg5) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateTangents__SWIG_5 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, int larg3, int larg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  bool arg3 ;
  bool arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateTangents__SWIG_6 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, int larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_recalculateTangents__SWIG_7 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->recalculateTangents(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_scale__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::core::vector3df *larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->scale(arg2,(irr::core::vector3df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_scale__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, irr::core::vector3df *larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->scale(arg2,(irr::core::vector3df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_scaleMesh (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::core::vector3df *larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->scaleMesh(arg2,(irr::core::vector3df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_scaleTCoords__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::core::vector2df *larg3, irr::u32 larg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::vector2df *arg3 = 0 ;
  irr::u32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->scaleTCoords(arg2,(irr::core::vector2df const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_scaleTCoords__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::core::vector2df *larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::vector2df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->scaleTCoords(arg2,(irr::core::vector2df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_scaleTCoords__SWIG_2 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, irr::core::vector2df *larg3, irr::u32 larg4) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::vector2df *arg3 = 0 ;
  irr::u32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->scaleTCoords(arg2,(irr::core::vector2df const &)*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_scaleTCoords__SWIG_3 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, irr::core::vector2df *larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::vector2df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->scaleTCoords(arg2,(irr::core::vector2df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_transform__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::core::matrix4 *larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->transform(arg2,(irr::core::matrix4 const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_transform__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, irr::core::matrix4 *larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->transform(arg2,(irr::core::matrix4 const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_transformMesh (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::core::matrix4 *larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::core::matrix4 *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->transformMesh(arg2,(irr::core::matrix4 const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::f32 larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_2 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, irr::f32 larg3) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_3 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_4 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::f32 larg3, irr::f32 larg4, irr::u8 larg5, irr::core::vector3df *larg6) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::u8 arg5 ;
  irr::core::vector3df *arg6 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2,arg3,arg4,arg5,(irr::core::vector3df const &)*arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_5 (irr::scene::IMeshManipulator *larg1, irr::scene::IMeshBuffer *larg2, irr::f32 larg3, irr::f32 larg4, irr::u8 larg5, irr::core::vector3df *larg6) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::u8 arg5 ;
  irr::core::vector3df *arg6 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ((irr::scene::IMeshManipulator const *)arg1)->makePlanarTextureMapping(arg2,arg3,arg4,arg5,(irr::core::vector3df const &)*arg6);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SMesh *_wrap_IMeshManipulator_createMeshCopy (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::SMesh * lresult = (irr::scene::SMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::SMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::SMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshCopy(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshManipulator_createMeshWithTangents__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, int larg3, int larg4, int larg5, int larg6) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWithTangents(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshManipulator_createMeshWithTangents__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, int larg3, int larg4, int larg5) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWithTangents(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshManipulator_createMeshWithTangents__SWIG_2 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, int larg3, int larg4) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  bool arg4 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWithTangents(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshManipulator_createMeshWithTangents__SWIG_3 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, int larg3) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWithTangents(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshManipulator_createMeshWithTangents__SWIG_4 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWithTangents(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshManipulator_createMeshWith2TCoords (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWith2TCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshManipulator_createMeshWith1TCoords (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWith1TCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshManipulator_createMeshUniquePrimitives (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshUniquePrimitives(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshManipulator_createMeshWelded__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::f32 larg3) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWelded(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshManipulator_createMeshWelded__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createMeshWelded(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::s32 _wrap_IMeshManipulator_getPolyCount__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::scene::IMeshManipulator const *)arg1)->getPolyCount(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_IMeshManipulator_getPolyCount__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IAnimatedMesh *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::scene::IMeshManipulator const *)arg1)->getPolyCount(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_IMeshManipulator_createAnimatedMesh__SWIG_0 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2, irr::scene::E_ANIMATED_MESH_TYPE larg3) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::E_ANIMATED_MESH_TYPE arg3 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IAnimatedMesh *)((irr::scene::IMeshManipulator const *)arg1)->createAnimatedMesh(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_IMeshManipulator_createAnimatedMesh__SWIG_1 (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IAnimatedMesh *)((irr::scene::IMeshManipulator const *)arg1)->createAnimatedMesh(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshManipulator_createForsythOptimizedMesh (irr::scene::IMeshManipulator *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IMeshManipulator const *)arg1)->createForsythOptimizedMesh((irr::scene::IMesh const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT void _wrap_delete_IMeshManipulator (irr::scene::IMeshManipulator *larg1) {
  irr::scene::IMeshManipulator *arg1 = (irr::scene::IMeshManipulator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IMeshSceneNode_setMesh (irr::scene::IMeshSceneNode *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMesh(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IMesh *_wrap_IMeshSceneNode_getMesh (irr::scene::IMeshSceneNode *larg1) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMesh *)(arg1)->getMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IShadowVolumeSceneNode *_wrap_IMeshSceneNode_addShadowVolumeSceneNode__SWIG_0 (irr::scene::IMeshSceneNode *larg1, irr::scene::IMesh *larg2, irr::s32 larg3, int larg4, irr::f32 larg5) {
  irr::scene::IShadowVolumeSceneNode * lresult = (irr::scene::IShadowVolumeSceneNode *)0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::f32 arg5 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IShadowVolumeSceneNode *)0;
  }
}


EXPORT irr::scene::IShadowVolumeSceneNode *_wrap_IMeshSceneNode_addShadowVolumeSceneNode__SWIG_1 (irr::scene::IMeshSceneNode *larg1, irr::scene::IMesh *larg2, irr::s32 larg3, int larg4) {
  irr::scene::IShadowVolumeSceneNode * lresult = (irr::scene::IShadowVolumeSceneNode *)0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IShadowVolumeSceneNode *)0;
  }
}


EXPORT irr::scene::IShadowVolumeSceneNode *_wrap_IMeshSceneNode_addShadowVolumeSceneNode__SWIG_2 (irr::scene::IMeshSceneNode *larg1, irr::scene::IMesh *larg2, irr::s32 larg3) {
  irr::scene::IShadowVolumeSceneNode * lresult = (irr::scene::IShadowVolumeSceneNode *)0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg3 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IShadowVolumeSceneNode *)0;
  }
}


EXPORT irr::scene::IShadowVolumeSceneNode *_wrap_IMeshSceneNode_addShadowVolumeSceneNode__SWIG_3 (irr::scene::IMeshSceneNode *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IShadowVolumeSceneNode * lresult = (irr::scene::IShadowVolumeSceneNode *)0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode((irr::scene::IMesh const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IShadowVolumeSceneNode *)0;
  }
}


EXPORT irr::scene::IShadowVolumeSceneNode *_wrap_IMeshSceneNode_addShadowVolumeSceneNode__SWIG_4 (irr::scene::IMeshSceneNode *larg1) {
  irr::scene::IShadowVolumeSceneNode * lresult = (irr::scene::IShadowVolumeSceneNode *)0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  irr::scene::IShadowVolumeSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IShadowVolumeSceneNode *)(arg1)->addShadowVolumeSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IShadowVolumeSceneNode *)0;
  }
}


EXPORT void _wrap_IMeshSceneNode_setReadOnlyMaterials (irr::scene::IMeshSceneNode *larg1, int larg2) {
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setReadOnlyMaterials(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IMeshSceneNode_isReadOnlyMaterials (irr::scene::IMeshSceneNode *larg1) {
  int lresult = (int)0 ;
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IMeshSceneNode const *)arg1)->isReadOnlyMaterials();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IMeshSceneNode (irr::scene::IMeshSceneNode *larg1) {
  irr::scene::IMeshSceneNode *arg1 = (irr::scene::IMeshSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IMeshWriter (irr::scene::IMeshWriter *larg1) {
  irr::scene::IMeshWriter *arg1 = (irr::scene::IMeshWriter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::EMESH_WRITER_TYPE _wrap_IMeshWriter_getType (irr::scene::IMeshWriter *larg1) {
  irr::scene::EMESH_WRITER_TYPE lresult = (irr::scene::EMESH_WRITER_TYPE)0 ;
  irr::scene::IMeshWriter *arg1 = (irr::scene::IMeshWriter *) 0 ;
  irr::scene::EMESH_WRITER_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::EMESH_WRITER_TYPE)((irr::scene::IMeshWriter const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::EMESH_WRITER_TYPE)0;
  }
}


EXPORT int _wrap_IMeshWriter_writeMesh__SWIG_0 (irr::scene::IMeshWriter *larg1, irr::io::IWriteFile *larg2, irr::scene::IMesh *larg3, irr::s32 larg4) {
  int lresult = (int)0 ;
  irr::scene::IMeshWriter *arg1 = (irr::scene::IMeshWriter *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::scene::IMesh *arg3 = (irr::scene::IMesh *) 0 ;
  irr::s32 arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->writeMesh(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IMeshWriter_writeMesh__SWIG_1 (irr::scene::IMeshWriter *larg1, irr::io::IWriteFile *larg2, irr::scene::IMesh *larg3) {
  int lresult = (int)0 ;
  irr::scene::IMeshWriter *arg1 = (irr::scene::IMeshWriter *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::scene::IMesh *arg3 = (irr::scene::IMesh *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->writeMesh(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IColladaMeshWriterProperties (irr::scene::IColladaMeshWriterProperties *larg1) {
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_COLLADA_TECHNIQUE_FX _wrap_IColladaMeshWriterProperties_getTechniqueFx (irr::scene::IColladaMeshWriterProperties *larg1, irr::video::SMaterial *larg2) {
  irr::scene::E_COLLADA_TECHNIQUE_FX lresult = (irr::scene::E_COLLADA_TECHNIQUE_FX)0 ;
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::scene::E_COLLADA_TECHNIQUE_FX result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::E_COLLADA_TECHNIQUE_FX)((irr::scene::IColladaMeshWriterProperties const *)arg1)->getTechniqueFx((irr::video::SMaterial const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_COLLADA_TECHNIQUE_FX)0;
  }
}


EXPORT irr::s32 _wrap_IColladaMeshWriterProperties_getTextureIdx (irr::scene::IColladaMeshWriterProperties *larg1, irr::video::SMaterial *larg2, irr::scene::E_COLLADA_COLOR_SAMPLER larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::scene::E_COLLADA_COLOR_SAMPLER arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)((irr::scene::IColladaMeshWriterProperties const *)arg1)->getTextureIdx((irr::video::SMaterial const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::scene::E_COLLADA_IRR_COLOR _wrap_IColladaMeshWriterProperties_getColorMapping (irr::scene::IColladaMeshWriterProperties *larg1, irr::video::SMaterial *larg2, irr::scene::E_COLLADA_COLOR_SAMPLER larg3) {
  irr::scene::E_COLLADA_IRR_COLOR lresult = (irr::scene::E_COLLADA_IRR_COLOR)0 ;
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::scene::E_COLLADA_COLOR_SAMPLER arg3 ;
  irr::scene::E_COLLADA_IRR_COLOR result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::E_COLLADA_IRR_COLOR)((irr::scene::IColladaMeshWriterProperties const *)arg1)->getColorMapping((irr::video::SMaterial const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_COLLADA_IRR_COLOR)0;
  }
}


EXPORT irr::video::SColor *_wrap_IColladaMeshWriterProperties_getCustomColor (irr::scene::IColladaMeshWriterProperties *larg1, irr::video::SMaterial *larg2, irr::scene::E_COLLADA_COLOR_SAMPLER larg3) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::scene::E_COLLADA_COLOR_SAMPLER arg3 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((irr::scene::IColladaMeshWriterProperties const *)arg1)->getCustomColor((irr::video::SMaterial const &)*arg2,arg3);
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::scene::E_COLLADA_TRANSPARENT_FX _wrap_IColladaMeshWriterProperties_getTransparentFx (irr::scene::IColladaMeshWriterProperties *larg1, irr::video::SMaterial *larg2) {
  irr::scene::E_COLLADA_TRANSPARENT_FX lresult = (irr::scene::E_COLLADA_TRANSPARENT_FX)0 ;
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::scene::E_COLLADA_TRANSPARENT_FX result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::E_COLLADA_TRANSPARENT_FX)((irr::scene::IColladaMeshWriterProperties const *)arg1)->getTransparentFx((irr::video::SMaterial const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_COLLADA_TRANSPARENT_FX)0;
  }
}


EXPORT irr::f32 _wrap_IColladaMeshWriterProperties_getTransparency (irr::scene::IColladaMeshWriterProperties *larg1, irr::video::SMaterial *larg2) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f32)((irr::scene::IColladaMeshWriterProperties const *)arg1)->getTransparency((irr::video::SMaterial const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_IColladaMeshWriterProperties_getReflectivity (irr::scene::IColladaMeshWriterProperties *larg1, irr::video::SMaterial *larg2) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f32)((irr::scene::IColladaMeshWriterProperties const *)arg1)->getReflectivity((irr::video::SMaterial const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_IColladaMeshWriterProperties_getIndexOfRefraction (irr::scene::IColladaMeshWriterProperties *larg1, irr::video::SMaterial *larg2) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f32)((irr::scene::IColladaMeshWriterProperties const *)arg1)->getIndexOfRefraction((irr::video::SMaterial const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT int _wrap_IColladaMeshWriterProperties_isExportable (irr::scene::IColladaMeshWriterProperties *larg1, irr::scene::ISceneNode *larg2) {
  int lresult = (int)0 ;
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::scene::IColladaMeshWriterProperties const *)arg1)->isExportable((irr::scene::ISceneNode const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IColladaMeshWriterProperties_getMesh (irr::scene::IColladaMeshWriterProperties *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)(arg1)->getMesh(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT int _wrap_IColladaMeshWriterProperties_useNodeMaterial (irr::scene::IColladaMeshWriterProperties *larg1, irr::scene::ISceneNode *larg2) {
  int lresult = (int)0 ;
  irr::scene::IColladaMeshWriterProperties *arg1 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::scene::IColladaMeshWriterProperties const *)arg1)->useNodeMaterial((irr::scene::ISceneNode const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IColladaMeshWriterNames (irr::scene::IColladaMeshWriterNames *larg1) {
  irr::scene::IColladaMeshWriterNames *arg1 = (irr::scene::IColladaMeshWriterNames *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::stringw *_wrap_IColladaMeshWriterNames_nameForMesh (irr::scene::IColladaMeshWriterNames *larg1, irr::scene::IMesh *larg2, int larg3) {
  irr::core::stringw * lresult = (irr::core::stringw *)0 ;
  irr::scene::IColladaMeshWriterNames *arg1 = (irr::scene::IColladaMeshWriterNames *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  int arg3 ;
  SwigValueWrapper< irr::core::string< wchar_t,irr::core::irrAllocator< wchar_t > > > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (arg1)->nameForMesh((irr::scene::IMesh const *)arg2,arg3);
    lresult = new irr::core::stringw(result);
    return lresult;
  } catch (...) {
    return (irr::core::stringw *)0;
  }
}


EXPORT irr::core::stringw *_wrap_IColladaMeshWriterNames_nameForNode (irr::scene::IColladaMeshWriterNames *larg1, irr::scene::ISceneNode *larg2) {
  irr::core::stringw * lresult = (irr::core::stringw *)0 ;
  irr::scene::IColladaMeshWriterNames *arg1 = (irr::scene::IColladaMeshWriterNames *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  SwigValueWrapper< irr::core::string< wchar_t,irr::core::irrAllocator< wchar_t > > > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->nameForNode((irr::scene::ISceneNode const *)arg2);
    lresult = new irr::core::stringw(result);
    return lresult;
  } catch (...) {
    return (irr::core::stringw *)0;
  }
}


EXPORT irr::core::stringw *_wrap_IColladaMeshWriterNames_nameForMaterial (irr::scene::IColladaMeshWriterNames *larg1, irr::video::SMaterial *larg2, int larg3, irr::scene::IMesh *larg4, irr::scene::ISceneNode *larg5) {
  irr::core::stringw * lresult = (irr::core::stringw *)0 ;
  irr::scene::IColladaMeshWriterNames *arg1 = (irr::scene::IColladaMeshWriterNames *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  int arg3 ;
  irr::scene::IMesh *arg4 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  SwigValueWrapper< irr::core::string< wchar_t,irr::core::irrAllocator< wchar_t > > > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (arg1)->nameForMaterial((irr::video::SMaterial const &)*arg2,arg3,(irr::scene::IMesh const *)arg4,(irr::scene::ISceneNode const *)arg5);
    lresult = new irr::core::stringw(result);
    return lresult;
  } catch (...) {
    return (irr::core::stringw *)0;
  }
}


EXPORT void _wrap_delete_IColladaMeshWriter (irr::scene::IColladaMeshWriter *larg1) {
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IColladaMeshWriter_writeScene (irr::scene::IColladaMeshWriter *larg1, irr::io::IWriteFile *larg2, irr::scene::ISceneNode *larg3) {
  int lresult = (int)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->writeScene(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IColladaMeshWriter_setWriteTextures (irr::scene::IColladaMeshWriter *larg1, int larg2) {
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setWriteTextures(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IColladaMeshWriter_getWriteTextures (irr::scene::IColladaMeshWriter *larg1) {
  int lresult = (int)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IColladaMeshWriter const *)arg1)->getWriteTextures();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IColladaMeshWriter_setWriteDefaultScene (irr::scene::IColladaMeshWriter *larg1, int larg2) {
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setWriteDefaultScene(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IColladaMeshWriter_getWriteDefaultScene (irr::scene::IColladaMeshWriter *larg1) {
  int lresult = (int)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IColladaMeshWriter const *)arg1)->getWriteDefaultScene();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IColladaMeshWriter_setAmbientLight (irr::scene::IColladaMeshWriter *larg1, irr::video::SColorf *larg2) {
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAmbientLight((irr::video::SColorf const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColorf *_wrap_IColladaMeshWriter_getAmbientLight (irr::scene::IColladaMeshWriter *larg1) {
  irr::video::SColorf * lresult = (irr::video::SColorf *)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::video::SColorf result;
  
  arg1 = larg1;
  try {
    result = ((irr::scene::IColladaMeshWriter const *)arg1)->getAmbientLight();
    lresult = new irr::video::SColorf(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColorf *)0;
  }
}


EXPORT void _wrap_IColladaMeshWriter_setGeometryWriting (irr::scene::IColladaMeshWriter *larg1, irr::scene::E_COLLADA_GEOMETRY_WRITING larg2) {
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::scene::E_COLLADA_GEOMETRY_WRITING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setGeometryWriting(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_COLLADA_GEOMETRY_WRITING _wrap_IColladaMeshWriter_getGeometryWriting (irr::scene::IColladaMeshWriter *larg1) {
  irr::scene::E_COLLADA_GEOMETRY_WRITING lresult = (irr::scene::E_COLLADA_GEOMETRY_WRITING)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::scene::E_COLLADA_GEOMETRY_WRITING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_COLLADA_GEOMETRY_WRITING)((irr::scene::IColladaMeshWriter const *)arg1)->getGeometryWriting();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_COLLADA_GEOMETRY_WRITING)0;
  }
}


EXPORT void _wrap_IColladaMeshWriter_setExportSMaterialsOnlyOnce (irr::scene::IColladaMeshWriter *larg1, int larg2) {
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setExportSMaterialsOnlyOnce(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IColladaMeshWriter_getExportSMaterialsOnlyOnce (irr::scene::IColladaMeshWriter *larg1) {
  int lresult = (int)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IColladaMeshWriter const *)arg1)->getExportSMaterialsOnlyOnce();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IColladaMeshWriter_setProperties (irr::scene::IColladaMeshWriter *larg1, irr::scene::IColladaMeshWriterProperties *larg2) {
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::scene::IColladaMeshWriterProperties *arg2 = (irr::scene::IColladaMeshWriterProperties *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setProperties(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IColladaMeshWriterProperties *_wrap_IColladaMeshWriter_getProperties (irr::scene::IColladaMeshWriter *larg1) {
  irr::scene::IColladaMeshWriterProperties * lresult = (irr::scene::IColladaMeshWriterProperties *)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::scene::IColladaMeshWriterProperties *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IColladaMeshWriterProperties *)((irr::scene::IColladaMeshWriter const *)arg1)->getProperties();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IColladaMeshWriterProperties *)0;
  }
}


EXPORT irr::scene::IColladaMeshWriterProperties *_wrap_IColladaMeshWriter_getDefaultProperties (irr::scene::IColladaMeshWriter *larg1) {
  irr::scene::IColladaMeshWriterProperties * lresult = (irr::scene::IColladaMeshWriterProperties *)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::scene::IColladaMeshWriterProperties *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IColladaMeshWriterProperties *)((irr::scene::IColladaMeshWriter const *)arg1)->getDefaultProperties();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IColladaMeshWriterProperties *)0;
  }
}


EXPORT void _wrap_IColladaMeshWriter_setNameGenerator (irr::scene::IColladaMeshWriter *larg1, irr::scene::IColladaMeshWriterNames *larg2) {
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::scene::IColladaMeshWriterNames *arg2 = (irr::scene::IColladaMeshWriterNames *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setNameGenerator(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IColladaMeshWriterNames *_wrap_IColladaMeshWriter_getNameGenerator (irr::scene::IColladaMeshWriter *larg1) {
  irr::scene::IColladaMeshWriterNames * lresult = (irr::scene::IColladaMeshWriterNames *)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::scene::IColladaMeshWriterNames *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IColladaMeshWriterNames *)((irr::scene::IColladaMeshWriter const *)arg1)->getNameGenerator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IColladaMeshWriterNames *)0;
  }
}


EXPORT irr::scene::IColladaMeshWriterNames *_wrap_IColladaMeshWriter_getDefaultNameGenerator (irr::scene::IColladaMeshWriter *larg1) {
  irr::scene::IColladaMeshWriterNames * lresult = (irr::scene::IColladaMeshWriterNames *)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::scene::IColladaMeshWriterNames *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IColladaMeshWriterNames *)((irr::scene::IColladaMeshWriter const *)arg1)->getDefaultNameGenerator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IColladaMeshWriterNames *)0;
  }
}


EXPORT irr::core::stringw *_wrap_IColladaMeshWriter_toNCName__SWIG_0 (irr::scene::IColladaMeshWriter *larg1, irr::core::stringw *larg2, irr::core::stringw *larg3) {
  irr::core::stringw * lresult = (irr::core::stringw *)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::core::stringw *arg2 = 0 ;
  irr::core::stringw *arg3 = 0 ;
  SwigValueWrapper< irr::core::string< wchar_t,irr::core::irrAllocator< wchar_t > > > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((irr::scene::IColladaMeshWriter const *)arg1)->toNCName((irr::core::stringw const &)*arg2,(irr::core::stringw const &)*arg3);
    lresult = new irr::core::stringw(result);
    return lresult;
  } catch (...) {
    return (irr::core::stringw *)0;
  }
}


EXPORT irr::core::stringw *_wrap_IColladaMeshWriter_toNCName__SWIG_1 (irr::scene::IColladaMeshWriter *larg1, irr::core::stringw *larg2) {
  irr::core::stringw * lresult = (irr::core::stringw *)0 ;
  irr::scene::IColladaMeshWriter *arg1 = (irr::scene::IColladaMeshWriter *) 0 ;
  irr::core::stringw *arg2 = 0 ;
  SwigValueWrapper< irr::core::string< wchar_t,irr::core::irrAllocator< wchar_t > > > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::scene::IColladaMeshWriter const *)arg1)->toNCName((irr::core::stringw const &)*arg2);
    lresult = new irr::core::stringw(result);
    return lresult;
  } catch (...) {
    return (irr::core::stringw *)0;
  }
}


EXPORT void _wrap_IMetaTriangleSelector_addTriangleSelector (irr::scene::IMetaTriangleSelector *larg1, irr::scene::ITriangleSelector *larg2) {
  irr::scene::IMetaTriangleSelector *arg1 = (irr::scene::IMetaTriangleSelector *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addTriangleSelector(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IMetaTriangleSelector_removeTriangleSelector (irr::scene::IMetaTriangleSelector *larg1, irr::scene::ITriangleSelector *larg2) {
  int lresult = (int)0 ;
  irr::scene::IMetaTriangleSelector *arg1 = (irr::scene::IMetaTriangleSelector *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->removeTriangleSelector(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IMetaTriangleSelector_removeAllTriangleSelectors (irr::scene::IMetaTriangleSelector *larg1) {
  irr::scene::IMetaTriangleSelector *arg1 = (irr::scene::IMetaTriangleSelector *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->removeAllTriangleSelectors();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IMetaTriangleSelector (irr::scene::IMetaTriangleSelector *larg1) {
  irr::scene::IMetaTriangleSelector *arg1 = (irr::scene::IMetaTriangleSelector *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::stringc *_wrap_IOSOperator_getOperatingSystemVersion (irr::IOSOperator *larg1) {
  irr::core::stringc * lresult = (irr::core::stringc *)0 ;
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  irr::core::stringc *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::stringc *) &((irr::IOSOperator const *)arg1)->getOperatingSystemVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::stringc *)0;
  }
}


EXPORT wchar_t *_wrap_IOSOperator_getOperationSystemVersion (irr::IOSOperator *larg1) {
  wchar_t * lresult = (wchar_t *)0 ;
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  wchar_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (wchar_t *)((irr::IOSOperator const *)arg1)->getOperationSystemVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (wchar_t *)0;
  }
}


EXPORT void _wrap_IOSOperator_copyToClipboard (irr::IOSOperator *larg1, irr::c8 *larg2) {
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::IOSOperator const *)arg1)->copyToClipboard((irr::c8 const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::c8 *_wrap_IOSOperator_getTextFromClipboard (irr::IOSOperator *larg1) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::c8 *)((irr::IOSOperator const *)arg1)->getTextFromClipboard();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT int _wrap_IOSOperator_getProcessorSpeedMHz (irr::IOSOperator *larg1, irr::u32 *larg2) {
  int lresult = (int)0 ;
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  irr::u32 *arg2 = (irr::u32 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::IOSOperator const *)arg1)->getProcessorSpeedMHz(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IOSOperator_getSystemMemory (irr::IOSOperator *larg1, irr::u32 *larg2, irr::u32 *larg3) {
  int lresult = (int)0 ;
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  irr::u32 *arg2 = (irr::u32 *) 0 ;
  irr::u32 *arg3 = (irr::u32 *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((irr::IOSOperator const *)arg1)->getSystemMemory(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IOSOperator (irr::IOSOperator *larg1) {
  irr::IOSOperator *arg1 = (irr::IOSOperator *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IParticleEmitter_emitt (irr::scene::IParticleEmitter *larg1, irr::u32 larg2, irr::u32 larg3, irr::scene::SParticle **larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 arg2 ;
  irr::u32 arg3 ;
  irr::scene::SParticle **arg4 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->emitt(arg2,arg3,*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_IParticleEmitter_setDirection (irr::scene::IParticleEmitter *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDirection((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleEmitter_setMinParticlesPerSecond (irr::scene::IParticleEmitter *larg1, irr::u32 larg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMinParticlesPerSecond(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleEmitter_setMaxParticlesPerSecond (irr::scene::IParticleEmitter *larg1, irr::u32 larg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaxParticlesPerSecond(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleEmitter_setMinStartColor (irr::scene::IParticleEmitter *larg1, irr::video::SColor *larg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMinStartColor((irr::video::SColor const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleEmitter_setMaxStartColor (irr::scene::IParticleEmitter *larg1, irr::video::SColor *larg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaxStartColor((irr::video::SColor const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleEmitter_setMaxStartSize (irr::scene::IParticleEmitter *larg1, irr::core::dimension2df *larg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::dimension2df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaxStartSize((irr::core::dimension2df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleEmitter_setMinStartSize (irr::scene::IParticleEmitter *larg1, irr::core::dimension2df *larg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::dimension2df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMinStartSize((irr::core::dimension2df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleEmitter_setMinLifeTime (irr::scene::IParticleEmitter *larg1, irr::u32 larg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMinLifeTime(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleEmitter_setMaxLifeTime (irr::scene::IParticleEmitter *larg1, irr::u32 larg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaxLifeTime(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleEmitter_setMaxAngleDegrees (irr::scene::IParticleEmitter *larg1, irr::s32 larg2) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMaxAngleDegrees(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_IParticleEmitter_getDirection (irr::scene::IParticleEmitter *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IParticleEmitter const *)arg1)->getDirection();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::u32 _wrap_IParticleEmitter_getMinParticlesPerSecond (irr::scene::IParticleEmitter *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IParticleEmitter const *)arg1)->getMinParticlesPerSecond();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IParticleEmitter_getMaxParticlesPerSecond (irr::scene::IParticleEmitter *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IParticleEmitter const *)arg1)->getMaxParticlesPerSecond();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::video::SColor *_wrap_IParticleEmitter_getMinStartColor (irr::scene::IParticleEmitter *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::video::SColor *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SColor *) &((irr::scene::IParticleEmitter const *)arg1)->getMinStartColor();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::video::SColor *_wrap_IParticleEmitter_getMaxStartColor (irr::scene::IParticleEmitter *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::video::SColor *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SColor *) &((irr::scene::IParticleEmitter const *)arg1)->getMaxStartColor();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::core::dimension2df *_wrap_IParticleEmitter_getMaxStartSize (irr::scene::IParticleEmitter *larg1) {
  irr::core::dimension2df * lresult = (irr::core::dimension2df *)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::dimension2df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::dimension2df *) &((irr::scene::IParticleEmitter const *)arg1)->getMaxStartSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2df *)0;
  }
}


EXPORT irr::core::dimension2df *_wrap_IParticleEmitter_getMinStartSize (irr::scene::IParticleEmitter *larg1) {
  irr::core::dimension2df * lresult = (irr::core::dimension2df *)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::core::dimension2df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::dimension2df *) &((irr::scene::IParticleEmitter const *)arg1)->getMinStartSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2df *)0;
  }
}


EXPORT irr::u32 _wrap_IParticleEmitter_getMinLifeTime (irr::scene::IParticleEmitter *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IParticleEmitter const *)arg1)->getMinLifeTime();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IParticleEmitter_getMaxLifeTime (irr::scene::IParticleEmitter *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IParticleEmitter const *)arg1)->getMaxLifeTime();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::s32 _wrap_IParticleEmitter_getMaxAngleDegrees (irr::scene::IParticleEmitter *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::scene::IParticleEmitter const *)arg1)->getMaxAngleDegrees();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::scene::E_PARTICLE_EMITTER_TYPE _wrap_IParticleEmitter_getType (irr::scene::IParticleEmitter *larg1) {
  irr::scene::E_PARTICLE_EMITTER_TYPE lresult = (irr::scene::E_PARTICLE_EMITTER_TYPE)0 ;
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  irr::scene::E_PARTICLE_EMITTER_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_PARTICLE_EMITTER_TYPE)((irr::scene::IParticleEmitter const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_PARTICLE_EMITTER_TYPE)0;
  }
}


EXPORT void _wrap_delete_IParticleEmitter (irr::scene::IParticleEmitter *larg1) {
  irr::scene::IParticleEmitter *arg1 = (irr::scene::IParticleEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAnimatedMeshSceneNodeEmitter_setAnimatedMeshSceneNode (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *larg1, irr::scene::IAnimatedMeshSceneNode *larg2) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *arg1 = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAnimatedMeshSceneNode(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAnimatedMeshSceneNodeEmitter_setUseNormalDirection__SWIG_0 (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *larg1, int larg2) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *arg1 = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setUseNormalDirection(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAnimatedMeshSceneNodeEmitter_setUseNormalDirection__SWIG_1 (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *larg1) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *arg1 = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setUseNormalDirection();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAnimatedMeshSceneNodeEmitter_setNormalDirectionModifier (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *larg1, irr::f32 larg2) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *arg1 = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setNormalDirectionModifier(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAnimatedMeshSceneNodeEmitter_setEveryMeshVertex__SWIG_0 (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *larg1, int larg2) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *arg1 = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setEveryMeshVertex(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAnimatedMeshSceneNodeEmitter_setEveryMeshVertex__SWIG_1 (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *larg1) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *arg1 = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setEveryMeshVertex();
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IAnimatedMeshSceneNode *_wrap_IParticleAnimatedMeshSceneNodeEmitter_getAnimatedMeshSceneNode (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *larg1) {
  irr::scene::IAnimatedMeshSceneNode * lresult = (irr::scene::IAnimatedMeshSceneNode *)0 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *arg1 = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IAnimatedMeshSceneNode *)((irr::scene::IParticleAnimatedMeshSceneNodeEmitter const *)arg1)->getAnimatedMeshSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMeshSceneNode *)0;
  }
}


EXPORT int _wrap_IParticleAnimatedMeshSceneNodeEmitter_isUsingNormalDirection (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *larg1) {
  int lresult = (int)0 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *arg1 = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IParticleAnimatedMeshSceneNodeEmitter const *)arg1)->isUsingNormalDirection();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::f32 _wrap_IParticleAnimatedMeshSceneNodeEmitter_getNormalDirectionModifier (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *arg1 = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::IParticleAnimatedMeshSceneNodeEmitter const *)arg1)->getNormalDirectionModifier();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT int _wrap_IParticleAnimatedMeshSceneNodeEmitter_getEveryMeshVertex (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *larg1) {
  int lresult = (int)0 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *arg1 = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IParticleAnimatedMeshSceneNodeEmitter const *)arg1)->getEveryMeshVertex();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IParticleAnimatedMeshSceneNodeEmitter (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *larg1) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *arg1 = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleBoxEmitter_setBox (irr::scene::IParticleBoxEmitter *larg1, irr::core::aabbox3df *larg2) {
  irr::scene::IParticleBoxEmitter *arg1 = (irr::scene::IParticleBoxEmitter *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setBox((irr::core::aabbox3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::aabbox3df *_wrap_IParticleBoxEmitter_getBox (irr::scene::IParticleBoxEmitter *larg1) {
  irr::core::aabbox3df * lresult = (irr::core::aabbox3df *)0 ;
  irr::scene::IParticleBoxEmitter *arg1 = (irr::scene::IParticleBoxEmitter *) 0 ;
  irr::core::aabbox3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::aabbox3df *) &((irr::scene::IParticleBoxEmitter const *)arg1)->getBox();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3df *)0;
  }
}


EXPORT void _wrap_delete_IParticleBoxEmitter (irr::scene::IParticleBoxEmitter *larg1) {
  irr::scene::IParticleBoxEmitter *arg1 = (irr::scene::IParticleBoxEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleCylinderEmitter_setCenter (irr::scene::IParticleCylinderEmitter *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCenter((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleCylinderEmitter_setNormal (irr::scene::IParticleCylinderEmitter *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setNormal((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleCylinderEmitter_setRadius (irr::scene::IParticleCylinderEmitter *larg1, irr::f32 larg2) {
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRadius(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleCylinderEmitter_setLength (irr::scene::IParticleCylinderEmitter *larg1, irr::f32 larg2) {
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLength(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleCylinderEmitter_setOutlineOnly__SWIG_0 (irr::scene::IParticleCylinderEmitter *larg1, int larg2) {
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setOutlineOnly(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleCylinderEmitter_setOutlineOnly__SWIG_1 (irr::scene::IParticleCylinderEmitter *larg1) {
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setOutlineOnly();
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_IParticleCylinderEmitter_getCenter (irr::scene::IParticleCylinderEmitter *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IParticleCylinderEmitter const *)arg1)->getCenter();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_IParticleCylinderEmitter_getNormal (irr::scene::IParticleCylinderEmitter *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IParticleCylinderEmitter const *)arg1)->getNormal();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::f32 _wrap_IParticleCylinderEmitter_getRadius (irr::scene::IParticleCylinderEmitter *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::IParticleCylinderEmitter const *)arg1)->getRadius();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_IParticleCylinderEmitter_getLength (irr::scene::IParticleCylinderEmitter *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::IParticleCylinderEmitter const *)arg1)->getLength();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT int _wrap_IParticleCylinderEmitter_getOutlineOnly (irr::scene::IParticleCylinderEmitter *larg1) {
  int lresult = (int)0 ;
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IParticleCylinderEmitter const *)arg1)->getOutlineOnly();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IParticleCylinderEmitter (irr::scene::IParticleCylinderEmitter *larg1) {
  irr::scene::IParticleCylinderEmitter *arg1 = (irr::scene::IParticleCylinderEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleMeshEmitter_setMesh (irr::scene::IParticleMeshEmitter *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IParticleMeshEmitter *arg1 = (irr::scene::IParticleMeshEmitter *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMesh(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleMeshEmitter_setUseNormalDirection__SWIG_0 (irr::scene::IParticleMeshEmitter *larg1, int larg2) {
  irr::scene::IParticleMeshEmitter *arg1 = (irr::scene::IParticleMeshEmitter *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setUseNormalDirection(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleMeshEmitter_setUseNormalDirection__SWIG_1 (irr::scene::IParticleMeshEmitter *larg1) {
  irr::scene::IParticleMeshEmitter *arg1 = (irr::scene::IParticleMeshEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setUseNormalDirection();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleMeshEmitter_setNormalDirectionModifier (irr::scene::IParticleMeshEmitter *larg1, irr::f32 larg2) {
  irr::scene::IParticleMeshEmitter *arg1 = (irr::scene::IParticleMeshEmitter *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setNormalDirectionModifier(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleMeshEmitter_setEveryMeshVertex__SWIG_0 (irr::scene::IParticleMeshEmitter *larg1, int larg2) {
  irr::scene::IParticleMeshEmitter *arg1 = (irr::scene::IParticleMeshEmitter *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setEveryMeshVertex(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleMeshEmitter_setEveryMeshVertex__SWIG_1 (irr::scene::IParticleMeshEmitter *larg1) {
  irr::scene::IParticleMeshEmitter *arg1 = (irr::scene::IParticleMeshEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setEveryMeshVertex();
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IMesh *_wrap_IParticleMeshEmitter_getMesh (irr::scene::IParticleMeshEmitter *larg1) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IParticleMeshEmitter *arg1 = (irr::scene::IParticleMeshEmitter *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IParticleMeshEmitter const *)arg1)->getMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT int _wrap_IParticleMeshEmitter_isUsingNormalDirection (irr::scene::IParticleMeshEmitter *larg1) {
  int lresult = (int)0 ;
  irr::scene::IParticleMeshEmitter *arg1 = (irr::scene::IParticleMeshEmitter *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IParticleMeshEmitter const *)arg1)->isUsingNormalDirection();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::f32 _wrap_IParticleMeshEmitter_getNormalDirectionModifier (irr::scene::IParticleMeshEmitter *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IParticleMeshEmitter *arg1 = (irr::scene::IParticleMeshEmitter *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::IParticleMeshEmitter const *)arg1)->getNormalDirectionModifier();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT int _wrap_IParticleMeshEmitter_getEveryMeshVertex (irr::scene::IParticleMeshEmitter *larg1) {
  int lresult = (int)0 ;
  irr::scene::IParticleMeshEmitter *arg1 = (irr::scene::IParticleMeshEmitter *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IParticleMeshEmitter const *)arg1)->getEveryMeshVertex();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IParticleMeshEmitter (irr::scene::IParticleMeshEmitter *larg1) {
  irr::scene::IParticleMeshEmitter *arg1 = (irr::scene::IParticleMeshEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleRingEmitter_setCenter (irr::scene::IParticleRingEmitter *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleRingEmitter *arg1 = (irr::scene::IParticleRingEmitter *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCenter((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleRingEmitter_setRadius (irr::scene::IParticleRingEmitter *larg1, irr::f32 larg2) {
  irr::scene::IParticleRingEmitter *arg1 = (irr::scene::IParticleRingEmitter *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRadius(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleRingEmitter_setRingThickness (irr::scene::IParticleRingEmitter *larg1, irr::f32 larg2) {
  irr::scene::IParticleRingEmitter *arg1 = (irr::scene::IParticleRingEmitter *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRingThickness(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_IParticleRingEmitter_getCenter (irr::scene::IParticleRingEmitter *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IParticleRingEmitter *arg1 = (irr::scene::IParticleRingEmitter *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IParticleRingEmitter const *)arg1)->getCenter();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::f32 _wrap_IParticleRingEmitter_getRadius (irr::scene::IParticleRingEmitter *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IParticleRingEmitter *arg1 = (irr::scene::IParticleRingEmitter *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::IParticleRingEmitter const *)arg1)->getRadius();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::f32 _wrap_IParticleRingEmitter_getRingThickness (irr::scene::IParticleRingEmitter *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IParticleRingEmitter *arg1 = (irr::scene::IParticleRingEmitter *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::IParticleRingEmitter const *)arg1)->getRingThickness();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_delete_IParticleRingEmitter (irr::scene::IParticleRingEmitter *larg1) {
  irr::scene::IParticleRingEmitter *arg1 = (irr::scene::IParticleRingEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleSphereEmitter_setCenter (irr::scene::IParticleSphereEmitter *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleSphereEmitter *arg1 = (irr::scene::IParticleSphereEmitter *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCenter((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleSphereEmitter_setRadius (irr::scene::IParticleSphereEmitter *larg1, irr::f32 larg2) {
  irr::scene::IParticleSphereEmitter *arg1 = (irr::scene::IParticleSphereEmitter *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRadius(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_IParticleSphereEmitter_getCenter (irr::scene::IParticleSphereEmitter *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IParticleSphereEmitter *arg1 = (irr::scene::IParticleSphereEmitter *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IParticleSphereEmitter const *)arg1)->getCenter();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::f32 _wrap_IParticleSphereEmitter_getRadius (irr::scene::IParticleSphereEmitter *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IParticleSphereEmitter *arg1 = (irr::scene::IParticleSphereEmitter *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::IParticleSphereEmitter const *)arg1)->getRadius();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_delete_IParticleSphereEmitter (irr::scene::IParticleSphereEmitter *larg1) {
  irr::scene::IParticleSphereEmitter *arg1 = (irr::scene::IParticleSphereEmitter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAffector_affect (irr::scene::IParticleAffector *larg1, irr::u32 larg2, irr::scene::SParticle *larg3, irr::u32 larg4) {
  irr::scene::IParticleAffector *arg1 = (irr::scene::IParticleAffector *) 0 ;
  irr::u32 arg2 ;
  irr::scene::SParticle *arg3 = (irr::scene::SParticle *) 0 ;
  irr::u32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->affect(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAffector_setEnabled (irr::scene::IParticleAffector *larg1, int larg2) {
  irr::scene::IParticleAffector *arg1 = (irr::scene::IParticleAffector *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setEnabled(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IParticleAffector_getEnabled (irr::scene::IParticleAffector *larg1) {
  int lresult = (int)0 ;
  irr::scene::IParticleAffector *arg1 = (irr::scene::IParticleAffector *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IParticleAffector const *)arg1)->getEnabled();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::scene::E_PARTICLE_AFFECTOR_TYPE _wrap_IParticleAffector_getType (irr::scene::IParticleAffector *larg1) {
  irr::scene::E_PARTICLE_AFFECTOR_TYPE lresult = (irr::scene::E_PARTICLE_AFFECTOR_TYPE)0 ;
  irr::scene::IParticleAffector *arg1 = (irr::scene::IParticleAffector *) 0 ;
  irr::scene::E_PARTICLE_AFFECTOR_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_PARTICLE_AFFECTOR_TYPE)((irr::scene::IParticleAffector const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_PARTICLE_AFFECTOR_TYPE)0;
  }
}


EXPORT void _wrap_delete_IParticleAffector (irr::scene::IParticleAffector *larg1) {
  irr::scene::IParticleAffector *arg1 = (irr::scene::IParticleAffector *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAttractionAffector_setPoint (irr::scene::IParticleAttractionAffector *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleAttractionAffector *arg1 = (irr::scene::IParticleAttractionAffector *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPoint((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAttractionAffector_setAttract (irr::scene::IParticleAttractionAffector *larg1, int larg2) {
  irr::scene::IParticleAttractionAffector *arg1 = (irr::scene::IParticleAttractionAffector *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setAttract(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAttractionAffector_setAffectX (irr::scene::IParticleAttractionAffector *larg1, int larg2) {
  irr::scene::IParticleAttractionAffector *arg1 = (irr::scene::IParticleAttractionAffector *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setAffectX(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAttractionAffector_setAffectY (irr::scene::IParticleAttractionAffector *larg1, int larg2) {
  irr::scene::IParticleAttractionAffector *arg1 = (irr::scene::IParticleAttractionAffector *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setAffectY(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleAttractionAffector_setAffectZ (irr::scene::IParticleAttractionAffector *larg1, int larg2) {
  irr::scene::IParticleAttractionAffector *arg1 = (irr::scene::IParticleAttractionAffector *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setAffectZ(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_IParticleAttractionAffector_getPoint (irr::scene::IParticleAttractionAffector *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IParticleAttractionAffector *arg1 = (irr::scene::IParticleAttractionAffector *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IParticleAttractionAffector const *)arg1)->getPoint();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT int _wrap_IParticleAttractionAffector_getAttract (irr::scene::IParticleAttractionAffector *larg1) {
  int lresult = (int)0 ;
  irr::scene::IParticleAttractionAffector *arg1 = (irr::scene::IParticleAttractionAffector *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IParticleAttractionAffector const *)arg1)->getAttract();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IParticleAttractionAffector_getAffectX (irr::scene::IParticleAttractionAffector *larg1) {
  int lresult = (int)0 ;
  irr::scene::IParticleAttractionAffector *arg1 = (irr::scene::IParticleAttractionAffector *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IParticleAttractionAffector const *)arg1)->getAffectX();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IParticleAttractionAffector_getAffectY (irr::scene::IParticleAttractionAffector *larg1) {
  int lresult = (int)0 ;
  irr::scene::IParticleAttractionAffector *arg1 = (irr::scene::IParticleAttractionAffector *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IParticleAttractionAffector const *)arg1)->getAffectY();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IParticleAttractionAffector_getAffectZ (irr::scene::IParticleAttractionAffector *larg1) {
  int lresult = (int)0 ;
  irr::scene::IParticleAttractionAffector *arg1 = (irr::scene::IParticleAttractionAffector *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::IParticleAttractionAffector const *)arg1)->getAffectZ();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IParticleAttractionAffector (irr::scene::IParticleAttractionAffector *larg1) {
  irr::scene::IParticleAttractionAffector *arg1 = (irr::scene::IParticleAttractionAffector *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleFadeOutAffector_setTargetColor (irr::scene::IParticleFadeOutAffector *larg1, irr::video::SColor *larg2) {
  irr::scene::IParticleFadeOutAffector *arg1 = (irr::scene::IParticleFadeOutAffector *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTargetColor((irr::video::SColor const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleFadeOutAffector_setFadeOutTime (irr::scene::IParticleFadeOutAffector *larg1, irr::u32 larg2) {
  irr::scene::IParticleFadeOutAffector *arg1 = (irr::scene::IParticleFadeOutAffector *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setFadeOutTime(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_IParticleFadeOutAffector_getTargetColor (irr::scene::IParticleFadeOutAffector *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::scene::IParticleFadeOutAffector *arg1 = (irr::scene::IParticleFadeOutAffector *) 0 ;
  irr::video::SColor *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SColor *) &((irr::scene::IParticleFadeOutAffector const *)arg1)->getTargetColor();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::u32 _wrap_IParticleFadeOutAffector_getFadeOutTime (irr::scene::IParticleFadeOutAffector *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IParticleFadeOutAffector *arg1 = (irr::scene::IParticleFadeOutAffector *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IParticleFadeOutAffector const *)arg1)->getFadeOutTime();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_delete_IParticleFadeOutAffector (irr::scene::IParticleFadeOutAffector *larg1) {
  irr::scene::IParticleFadeOutAffector *arg1 = (irr::scene::IParticleFadeOutAffector *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleGravityAffector_setTimeForceLost (irr::scene::IParticleGravityAffector *larg1, irr::f32 larg2) {
  irr::scene::IParticleGravityAffector *arg1 = (irr::scene::IParticleGravityAffector *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTimeForceLost(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleGravityAffector_setGravity (irr::scene::IParticleGravityAffector *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleGravityAffector *arg1 = (irr::scene::IParticleGravityAffector *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setGravity((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_IParticleGravityAffector_getTimeForceLost (irr::scene::IParticleGravityAffector *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::IParticleGravityAffector *arg1 = (irr::scene::IParticleGravityAffector *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::IParticleGravityAffector const *)arg1)->getTimeForceLost();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::core::vector3df *_wrap_IParticleGravityAffector_getGravity (irr::scene::IParticleGravityAffector *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IParticleGravityAffector *arg1 = (irr::scene::IParticleGravityAffector *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IParticleGravityAffector const *)arg1)->getGravity();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_delete_IParticleGravityAffector (irr::scene::IParticleGravityAffector *larg1) {
  irr::scene::IParticleGravityAffector *arg1 = (irr::scene::IParticleGravityAffector *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleRotationAffector_setPivotPoint (irr::scene::IParticleRotationAffector *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleRotationAffector *arg1 = (irr::scene::IParticleRotationAffector *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setPivotPoint((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleRotationAffector_setSpeed (irr::scene::IParticleRotationAffector *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleRotationAffector *arg1 = (irr::scene::IParticleRotationAffector *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSpeed((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_IParticleRotationAffector_getPivotPoint (irr::scene::IParticleRotationAffector *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IParticleRotationAffector *arg1 = (irr::scene::IParticleRotationAffector *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IParticleRotationAffector const *)arg1)->getPivotPoint();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_IParticleRotationAffector_getSpeed (irr::scene::IParticleRotationAffector *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::IParticleRotationAffector *arg1 = (irr::scene::IParticleRotationAffector *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::IParticleRotationAffector const *)arg1)->getSpeed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_delete_IParticleRotationAffector (irr::scene::IParticleRotationAffector *larg1) {
  irr::scene::IParticleRotationAffector *arg1 = (irr::scene::IParticleRotationAffector *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleSystemSceneNode_setParticleSize__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::dimension2d< irr::f32 > *larg2) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setParticleSize((irr::core::dimension2d< irr::f32 > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleSystemSceneNode_setParticleSize__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setParticleSize();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleSystemSceneNode_setParticlesAreGlobal__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, int larg2) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setParticlesAreGlobal(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleSystemSceneNode_setParticlesAreGlobal__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setParticlesAreGlobal();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleSystemSceneNode_clearParticles (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clearParticles();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleSystemSceneNode_doParticleSystem (irr::scene::IParticleSystemSceneNode *larg1, irr::u32 larg2) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->doParticleSystem(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IParticleEmitter *_wrap_IParticleSystemSceneNode_getEmitter (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticleEmitter * lresult = (irr::scene::IParticleEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleEmitter *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IParticleEmitter *)(arg1)->getEmitter();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleEmitter *)0;
  }
}


EXPORT void _wrap_IParticleSystemSceneNode_setEmitter (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IParticleEmitter *larg2) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleEmitter *arg2 = (irr::scene::IParticleEmitter *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setEmitter(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IParticleSystemSceneNode_addAffector (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IParticleAffector *larg2) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleAffector *arg2 = (irr::scene::IParticleAffector *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addAffector(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::list< irr::scene::IParticleAffector * > *_wrap_IParticleSystemSceneNode_getAffectors (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::core::list< irr::scene::IParticleAffector * > * lresult = (irr::core::list< irr::scene::IParticleAffector * > *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::list< irr::scene::IParticleAffector * > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::list< irr::scene::IParticleAffector * > *) &((irr::scene::IParticleSystemSceneNode const *)arg1)->getAffectors();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::list< irr::scene::IParticleAffector * > *)0;
  }
}


EXPORT void _wrap_IParticleSystemSceneNode_removeAllAffectors (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->removeAllAffectors();
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13, irr::s32 larg14, irr::core::dimension2df *larg15, irr::core::dimension2df *larg16) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  irr::core::dimension2df *arg16 = 0 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  arg16 = larg16;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15,(irr::core::dimension2df const &)*arg16);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13, irr::s32 larg14, irr::core::dimension2df *larg15) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_2 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13, irr::s32 larg14) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_3 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_4 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_5 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_6 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_7 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_8 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_9 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_10 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_11 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_12 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3, irr::core::vector3df *larg4) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_13 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2, int larg3) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  bool arg3 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAnimatedMeshSceneNodeEmitter *_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_14 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IAnimatedMeshSceneNode *larg2) {
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter * lresult = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::IParticleAnimatedMeshSceneNodeEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)(arg1)->createAnimatedMeshSceneNodeEmitter(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAnimatedMeshSceneNodeEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::aabbox3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor *larg6, irr::video::SColor *larg7, irr::u32 larg8, irr::u32 larg9, irr::s32 larg10, irr::core::dimension2df *larg11, irr::core::dimension2df *larg12) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::s32 arg10 ;
  irr::core::dimension2df *arg11 = 0 ;
  irr::core::dimension2df *arg12 = 0 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7,arg8,arg9,arg10,(irr::core::dimension2df const &)*arg11,(irr::core::dimension2df const &)*arg12);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::aabbox3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor *larg6, irr::video::SColor *larg7, irr::u32 larg8, irr::u32 larg9, irr::s32 larg10, irr::core::dimension2df *larg11) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::s32 arg10 ;
  irr::core::dimension2df *arg11 = 0 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7,arg8,arg9,arg10,(irr::core::dimension2df const &)*arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_2 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::aabbox3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor *larg6, irr::video::SColor *larg7, irr::u32 larg8, irr::u32 larg9, irr::s32 larg10) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::s32 arg10 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_3 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::aabbox3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor *larg6, irr::video::SColor *larg7, irr::u32 larg8, irr::u32 larg9) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_4 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::aabbox3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor *larg6, irr::video::SColor *larg7, irr::u32 larg8) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_5 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::aabbox3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor *larg6, irr::video::SColor *larg7) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::video::SColor *arg7 = 0 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6,(irr::video::SColor const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_6 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::aabbox3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor *larg6) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor *arg6 = 0 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,(irr::video::SColor const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_7 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::aabbox3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4, irr::u32 larg5) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_8 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::aabbox3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_9 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::aabbox3df *larg2, irr::core::vector3df *larg3) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2,(irr::core::vector3df const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_10 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::aabbox3df *larg2) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::aabbox3df *arg2 = 0 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter((irr::core::aabbox3df const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleBoxEmitter *_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_11 (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticleBoxEmitter * lresult = (irr::scene::IParticleBoxEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleBoxEmitter *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IParticleBoxEmitter *)(arg1)->createBoxEmitter();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleBoxEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5, int larg6, irr::core::vector3df *larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13, irr::s32 larg14, irr::core::dimension2df *larg15, irr::core::dimension2df *larg16) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  irr::core::dimension2df *arg16 = 0 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  arg16 = larg16;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15,(irr::core::dimension2df const &)*arg16);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5, int larg6, irr::core::vector3df *larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13, irr::s32 larg14, irr::core::dimension2df *larg15) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_2 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5, int larg6, irr::core::vector3df *larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13, irr::s32 larg14) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_3 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5, int larg6, irr::core::vector3df *larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_4 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5, int larg6, irr::core::vector3df *larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_5 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5, int larg6, irr::core::vector3df *larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_6 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5, int larg6, irr::core::vector3df *larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,(irr::video::SColor const &)*arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_7 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5, int larg6, irr::core::vector3df *larg7, irr::u32 larg8, irr::u32 larg9) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_8 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5, int larg6, irr::core::vector3df *larg7, irr::u32 larg8) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::u32 arg8 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_9 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5, int larg6, irr::core::vector3df *larg7) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::core::vector3df const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_10 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5, int larg6) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleCylinderEmitter *_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_11 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::f32 larg5) {
  irr::scene::IParticleCylinderEmitter * lresult = (irr::scene::IParticleCylinderEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::scene::IParticleCylinderEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IParticleCylinderEmitter *)(arg1)->createCylinderEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleCylinderEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13, irr::s32 larg14, irr::core::dimension2df *larg15, irr::core::dimension2df *larg16) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  irr::core::dimension2df *arg16 = 0 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  arg16 = larg16;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15,(irr::core::dimension2df const &)*arg16);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13, irr::s32 larg14, irr::core::dimension2df *larg15) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::core::dimension2df *arg15 = 0 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  arg15 = larg15;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14,(irr::core::dimension2df const &)*arg15);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_2 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13, irr::s32 larg14) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::s32 arg14 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13,arg14);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_3 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12, irr::u32 larg13) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::u32 arg13 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12,arg13);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_4 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11, irr::u32 larg12) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::u32 arg12 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11,arg12);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_5 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10, irr::video::SColor *larg11) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::video::SColor *arg11 = 0 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10,(irr::video::SColor const &)*arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_6 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9, irr::video::SColor *larg10) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::video::SColor *arg10 = 0 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9,(irr::video::SColor const &)*arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_7 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8, irr::u32 larg9) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::u32 arg9 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_8 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7, irr::u32 larg8) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::u32 arg8 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_9 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6, int larg7) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  bool arg7 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_10 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5, irr::s32 larg6) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_11 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4, irr::f32 larg5) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::f32 arg5 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_12 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3, irr::core::vector3df *larg4) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3,(irr::core::vector3df const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_13 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2, int larg3) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  bool arg3 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticleMeshEmitter *_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_14 (irr::scene::IParticleSystemSceneNode *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IParticleMeshEmitter * lresult = (irr::scene::IParticleMeshEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IParticleMeshEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IParticleMeshEmitter *)(arg1)->createMeshEmitter(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleMeshEmitter *)0;
  }
}


EXPORT irr::scene::IParticlePointEmitter *_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::u32 larg3, irr::u32 larg4, irr::video::SColor *larg5, irr::video::SColor *larg6, irr::u32 larg7, irr::u32 larg8, irr::s32 larg9, irr::core::dimension2df *larg10, irr::core::dimension2df *larg11) {
  irr::scene::IParticlePointEmitter * lresult = (irr::scene::IParticlePointEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::u32 arg7 ;
  irr::u32 arg8 ;
  irr::s32 arg9 ;
  irr::core::dimension2df *arg10 = 0 ;
  irr::core::dimension2df *arg11 = 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6,arg7,arg8,arg9,(irr::core::dimension2df const &)*arg10,(irr::core::dimension2df const &)*arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticlePointEmitter *)0;
  }
}


EXPORT irr::scene::IParticlePointEmitter *_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::u32 larg3, irr::u32 larg4, irr::video::SColor *larg5, irr::video::SColor *larg6, irr::u32 larg7, irr::u32 larg8, irr::s32 larg9, irr::core::dimension2df *larg10) {
  irr::scene::IParticlePointEmitter * lresult = (irr::scene::IParticlePointEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::u32 arg7 ;
  irr::u32 arg8 ;
  irr::s32 arg9 ;
  irr::core::dimension2df *arg10 = 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6,arg7,arg8,arg9,(irr::core::dimension2df const &)*arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticlePointEmitter *)0;
  }
}


EXPORT irr::scene::IParticlePointEmitter *_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_2 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::u32 larg3, irr::u32 larg4, irr::video::SColor *larg5, irr::video::SColor *larg6, irr::u32 larg7, irr::u32 larg8, irr::s32 larg9) {
  irr::scene::IParticlePointEmitter * lresult = (irr::scene::IParticlePointEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::u32 arg7 ;
  irr::u32 arg8 ;
  irr::s32 arg9 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticlePointEmitter *)0;
  }
}


EXPORT irr::scene::IParticlePointEmitter *_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_3 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::u32 larg3, irr::u32 larg4, irr::video::SColor *larg5, irr::video::SColor *larg6, irr::u32 larg7, irr::u32 larg8) {
  irr::scene::IParticlePointEmitter * lresult = (irr::scene::IParticlePointEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::u32 arg7 ;
  irr::u32 arg8 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticlePointEmitter *)0;
  }
}


EXPORT irr::scene::IParticlePointEmitter *_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_4 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::u32 larg3, irr::u32 larg4, irr::video::SColor *larg5, irr::video::SColor *larg6, irr::u32 larg7) {
  irr::scene::IParticlePointEmitter * lresult = (irr::scene::IParticlePointEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::u32 arg7 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticlePointEmitter *)0;
  }
}


EXPORT irr::scene::IParticlePointEmitter *_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_5 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::u32 larg3, irr::u32 larg4, irr::video::SColor *larg5, irr::video::SColor *larg6) {
  irr::scene::IParticlePointEmitter * lresult = (irr::scene::IParticlePointEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::video::SColor *arg6 = 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5,(irr::video::SColor const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticlePointEmitter *)0;
  }
}


EXPORT irr::scene::IParticlePointEmitter *_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_6 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::u32 larg3, irr::u32 larg4, irr::video::SColor *larg5) {
  irr::scene::IParticlePointEmitter * lresult = (irr::scene::IParticlePointEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor *arg5 = 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::video::SColor const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticlePointEmitter *)0;
  }
}


EXPORT irr::scene::IParticlePointEmitter *_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_7 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::u32 larg3, irr::u32 larg4) {
  irr::scene::IParticlePointEmitter * lresult = (irr::scene::IParticlePointEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticlePointEmitter *)0;
  }
}


EXPORT irr::scene::IParticlePointEmitter *_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_8 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::u32 larg3) {
  irr::scene::IParticlePointEmitter * lresult = (irr::scene::IParticlePointEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticlePointEmitter *)0;
  }
}


EXPORT irr::scene::IParticlePointEmitter *_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_9 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticlePointEmitter * lresult = (irr::scene::IParticlePointEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter((irr::core::vector3df const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticlePointEmitter *)0;
  }
}


EXPORT irr::scene::IParticlePointEmitter *_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_10 (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticlePointEmitter * lresult = (irr::scene::IParticlePointEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticlePointEmitter *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IParticlePointEmitter *)(arg1)->createPointEmitter();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticlePointEmitter *)0;
  }
}


EXPORT irr::scene::IParticleRingEmitter *_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5, irr::u32 larg6, irr::u32 larg7, irr::video::SColor *larg8, irr::video::SColor *larg9, irr::u32 larg10, irr::u32 larg11, irr::s32 larg12, irr::core::dimension2df *larg13, irr::core::dimension2df *larg14) {
  irr::scene::IParticleRingEmitter * lresult = (irr::scene::IParticleRingEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  irr::u32 arg10 ;
  irr::u32 arg11 ;
  irr::s32 arg12 ;
  irr::core::dimension2df *arg13 = 0 ;
  irr::core::dimension2df *arg14 = 0 ;
  irr::scene::IParticleRingEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  arg14 = larg14;
  try {
    result = (irr::scene::IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9,arg10,arg11,arg12,(irr::core::dimension2df const &)*arg13,(irr::core::dimension2df const &)*arg14);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRingEmitter *)0;
  }
}


EXPORT irr::scene::IParticleRingEmitter *_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5, irr::u32 larg6, irr::u32 larg7, irr::video::SColor *larg8, irr::video::SColor *larg9, irr::u32 larg10, irr::u32 larg11, irr::s32 larg12, irr::core::dimension2df *larg13) {
  irr::scene::IParticleRingEmitter * lresult = (irr::scene::IParticleRingEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  irr::u32 arg10 ;
  irr::u32 arg11 ;
  irr::s32 arg12 ;
  irr::core::dimension2df *arg13 = 0 ;
  irr::scene::IParticleRingEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  try {
    result = (irr::scene::IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9,arg10,arg11,arg12,(irr::core::dimension2df const &)*arg13);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRingEmitter *)0;
  }
}


EXPORT irr::scene::IParticleRingEmitter *_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_2 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5, irr::u32 larg6, irr::u32 larg7, irr::video::SColor *larg8, irr::video::SColor *larg9, irr::u32 larg10, irr::u32 larg11, irr::s32 larg12) {
  irr::scene::IParticleRingEmitter * lresult = (irr::scene::IParticleRingEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  irr::u32 arg10 ;
  irr::u32 arg11 ;
  irr::s32 arg12 ;
  irr::scene::IParticleRingEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  try {
    result = (irr::scene::IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9,arg10,arg11,arg12);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRingEmitter *)0;
  }
}


EXPORT irr::scene::IParticleRingEmitter *_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_3 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5, irr::u32 larg6, irr::u32 larg7, irr::video::SColor *larg8, irr::video::SColor *larg9, irr::u32 larg10, irr::u32 larg11) {
  irr::scene::IParticleRingEmitter * lresult = (irr::scene::IParticleRingEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  irr::u32 arg10 ;
  irr::u32 arg11 ;
  irr::scene::IParticleRingEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::scene::IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9,arg10,arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRingEmitter *)0;
  }
}


EXPORT irr::scene::IParticleRingEmitter *_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_4 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5, irr::u32 larg6, irr::u32 larg7, irr::video::SColor *larg8, irr::video::SColor *larg9, irr::u32 larg10) {
  irr::scene::IParticleRingEmitter * lresult = (irr::scene::IParticleRingEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  irr::u32 arg10 ;
  irr::scene::IParticleRingEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRingEmitter *)0;
  }
}


EXPORT irr::scene::IParticleRingEmitter *_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_5 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5, irr::u32 larg6, irr::u32 larg7, irr::video::SColor *larg8, irr::video::SColor *larg9) {
  irr::scene::IParticleRingEmitter * lresult = (irr::scene::IParticleRingEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::video::SColor *arg9 = 0 ;
  irr::scene::IParticleRingEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8,(irr::video::SColor const &)*arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRingEmitter *)0;
  }
}


EXPORT irr::scene::IParticleRingEmitter *_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_6 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5, irr::u32 larg6, irr::u32 larg7, irr::video::SColor *larg8) {
  irr::scene::IParticleRingEmitter * lresult = (irr::scene::IParticleRingEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::video::SColor *arg8 = 0 ;
  irr::scene::IParticleRingEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7,(irr::video::SColor const &)*arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRingEmitter *)0;
  }
}


EXPORT irr::scene::IParticleRingEmitter *_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_7 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5, irr::u32 larg6, irr::u32 larg7) {
  irr::scene::IParticleRingEmitter * lresult = (irr::scene::IParticleRingEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::u32 arg7 ;
  irr::scene::IParticleRingEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRingEmitter *)0;
  }
}


EXPORT irr::scene::IParticleRingEmitter *_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_8 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5, irr::u32 larg6) {
  irr::scene::IParticleRingEmitter * lresult = (irr::scene::IParticleRingEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::u32 arg6 ;
  irr::scene::IParticleRingEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRingEmitter *)0;
  }
}


EXPORT irr::scene::IParticleRingEmitter *_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_9 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5) {
  irr::scene::IParticleRingEmitter * lresult = (irr::scene::IParticleRingEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::IParticleRingEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRingEmitter *)0;
  }
}


EXPORT irr::scene::IParticleRingEmitter *_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_10 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4) {
  irr::scene::IParticleRingEmitter * lresult = (irr::scene::IParticleRingEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::scene::IParticleRingEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IParticleRingEmitter *)(arg1)->createRingEmitter((irr::core::vector3df const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRingEmitter *)0;
  }
}


EXPORT irr::scene::IParticleSphereEmitter *_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::u32 larg5, irr::u32 larg6, irr::video::SColor *larg7, irr::video::SColor *larg8, irr::u32 larg9, irr::u32 larg10, irr::s32 larg11, irr::core::dimension2df *larg12, irr::core::dimension2df *larg13) {
  irr::scene::IParticleSphereEmitter * lresult = (irr::scene::IParticleSphereEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  irr::u32 arg9 ;
  irr::u32 arg10 ;
  irr::s32 arg11 ;
  irr::core::dimension2df *arg12 = 0 ;
  irr::core::dimension2df *arg13 = 0 ;
  irr::scene::IParticleSphereEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  try {
    result = (irr::scene::IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8,arg9,arg10,arg11,(irr::core::dimension2df const &)*arg12,(irr::core::dimension2df const &)*arg13);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSphereEmitter *)0;
  }
}


EXPORT irr::scene::IParticleSphereEmitter *_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::u32 larg5, irr::u32 larg6, irr::video::SColor *larg7, irr::video::SColor *larg8, irr::u32 larg9, irr::u32 larg10, irr::s32 larg11, irr::core::dimension2df *larg12) {
  irr::scene::IParticleSphereEmitter * lresult = (irr::scene::IParticleSphereEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  irr::u32 arg9 ;
  irr::u32 arg10 ;
  irr::s32 arg11 ;
  irr::core::dimension2df *arg12 = 0 ;
  irr::scene::IParticleSphereEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  try {
    result = (irr::scene::IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8,arg9,arg10,arg11,(irr::core::dimension2df const &)*arg12);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSphereEmitter *)0;
  }
}


EXPORT irr::scene::IParticleSphereEmitter *_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_2 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::u32 larg5, irr::u32 larg6, irr::video::SColor *larg7, irr::video::SColor *larg8, irr::u32 larg9, irr::u32 larg10, irr::s32 larg11) {
  irr::scene::IParticleSphereEmitter * lresult = (irr::scene::IParticleSphereEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  irr::u32 arg9 ;
  irr::u32 arg10 ;
  irr::s32 arg11 ;
  irr::scene::IParticleSphereEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::scene::IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8,arg9,arg10,arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSphereEmitter *)0;
  }
}


EXPORT irr::scene::IParticleSphereEmitter *_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_3 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::u32 larg5, irr::u32 larg6, irr::video::SColor *larg7, irr::video::SColor *larg8, irr::u32 larg9, irr::u32 larg10) {
  irr::scene::IParticleSphereEmitter * lresult = (irr::scene::IParticleSphereEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  irr::u32 arg9 ;
  irr::u32 arg10 ;
  irr::scene::IParticleSphereEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSphereEmitter *)0;
  }
}


EXPORT irr::scene::IParticleSphereEmitter *_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_4 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::u32 larg5, irr::u32 larg6, irr::video::SColor *larg7, irr::video::SColor *larg8, irr::u32 larg9) {
  irr::scene::IParticleSphereEmitter * lresult = (irr::scene::IParticleSphereEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  irr::u32 arg9 ;
  irr::scene::IParticleSphereEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSphereEmitter *)0;
  }
}


EXPORT irr::scene::IParticleSphereEmitter *_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_5 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::u32 larg5, irr::u32 larg6, irr::video::SColor *larg7, irr::video::SColor *larg8) {
  irr::scene::IParticleSphereEmitter * lresult = (irr::scene::IParticleSphereEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::video::SColor *arg8 = 0 ;
  irr::scene::IParticleSphereEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7,(irr::video::SColor const &)*arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSphereEmitter *)0;
  }
}


EXPORT irr::scene::IParticleSphereEmitter *_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_6 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::u32 larg5, irr::u32 larg6, irr::video::SColor *larg7) {
  irr::scene::IParticleSphereEmitter * lresult = (irr::scene::IParticleSphereEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::video::SColor *arg7 = 0 ;
  irr::scene::IParticleSphereEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,(irr::video::SColor const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSphereEmitter *)0;
  }
}


EXPORT irr::scene::IParticleSphereEmitter *_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_7 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::u32 larg5, irr::u32 larg6) {
  irr::scene::IParticleSphereEmitter * lresult = (irr::scene::IParticleSphereEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::scene::IParticleSphereEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSphereEmitter *)0;
  }
}


EXPORT irr::scene::IParticleSphereEmitter *_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_8 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4, irr::u32 larg5) {
  irr::scene::IParticleSphereEmitter * lresult = (irr::scene::IParticleSphereEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::u32 arg5 ;
  irr::scene::IParticleSphereEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSphereEmitter *)0;
  }
}


EXPORT irr::scene::IParticleSphereEmitter *_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_9 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::core::vector3df *larg4) {
  irr::scene::IParticleSphereEmitter * lresult = (irr::scene::IParticleSphereEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::scene::IParticleSphereEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3,(irr::core::vector3df const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSphereEmitter *)0;
  }
}


EXPORT irr::scene::IParticleSphereEmitter *_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_10 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3) {
  irr::scene::IParticleSphereEmitter * lresult = (irr::scene::IParticleSphereEmitter *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::scene::IParticleSphereEmitter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IParticleSphereEmitter *)(arg1)->createSphereEmitter((irr::core::vector3df const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSphereEmitter *)0;
  }
}


EXPORT irr::scene::IParticleAttractionAffector *_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, int larg4, int larg5, int larg6, int larg7) {
  irr::scene::IParticleAttractionAffector * lresult = (irr::scene::IParticleAttractionAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  irr::scene::IParticleAttractionAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  try {
    result = (irr::scene::IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAttractionAffector *)0;
  }
}


EXPORT irr::scene::IParticleAttractionAffector *_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, int larg4, int larg5, int larg6) {
  irr::scene::IParticleAttractionAffector * lresult = (irr::scene::IParticleAttractionAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::scene::IParticleAttractionAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::scene::IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAttractionAffector *)0;
  }
}


EXPORT irr::scene::IParticleAttractionAffector *_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_2 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, int larg4, int larg5) {
  irr::scene::IParticleAttractionAffector * lresult = (irr::scene::IParticleAttractionAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::scene::IParticleAttractionAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::scene::IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAttractionAffector *)0;
  }
}


EXPORT irr::scene::IParticleAttractionAffector *_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_3 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3, int larg4) {
  irr::scene::IParticleAttractionAffector * lresult = (irr::scene::IParticleAttractionAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  bool arg4 ;
  irr::scene::IParticleAttractionAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::scene::IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAttractionAffector *)0;
  }
}


EXPORT irr::scene::IParticleAttractionAffector *_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_4 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::f32 larg3) {
  irr::scene::IParticleAttractionAffector * lresult = (irr::scene::IParticleAttractionAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::scene::IParticleAttractionAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAttractionAffector *)0;
  }
}


EXPORT irr::scene::IParticleAttractionAffector *_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_5 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleAttractionAffector * lresult = (irr::scene::IParticleAttractionAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::IParticleAttractionAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IParticleAttractionAffector *)(arg1)->createAttractionAffector((irr::core::vector3df const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAttractionAffector *)0;
  }
}


EXPORT irr::scene::IParticleAffector *_wrap_IParticleSystemSceneNode_createScaleParticleAffector__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::dimension2df *larg2) {
  irr::scene::IParticleAffector * lresult = (irr::scene::IParticleAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::dimension2df *arg2 = 0 ;
  irr::scene::IParticleAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IParticleAffector *)(arg1)->createScaleParticleAffector((irr::core::dimension2df const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAffector *)0;
  }
}


EXPORT irr::scene::IParticleAffector *_wrap_IParticleSystemSceneNode_createScaleParticleAffector__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticleAffector * lresult = (irr::scene::IParticleAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleAffector *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IParticleAffector *)(arg1)->createScaleParticleAffector();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleAffector *)0;
  }
}


EXPORT irr::scene::IParticleFadeOutAffector *_wrap_IParticleSystemSceneNode_createFadeOutParticleAffector__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::video::SColor *larg2, irr::u32 larg3) {
  irr::scene::IParticleFadeOutAffector * lresult = (irr::scene::IParticleFadeOutAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::scene::IParticleFadeOutAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IParticleFadeOutAffector *)(arg1)->createFadeOutParticleAffector((irr::video::SColor const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleFadeOutAffector *)0;
  }
}


EXPORT irr::scene::IParticleFadeOutAffector *_wrap_IParticleSystemSceneNode_createFadeOutParticleAffector__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1, irr::video::SColor *larg2) {
  irr::scene::IParticleFadeOutAffector * lresult = (irr::scene::IParticleFadeOutAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::video::SColor *arg2 = 0 ;
  irr::scene::IParticleFadeOutAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IParticleFadeOutAffector *)(arg1)->createFadeOutParticleAffector((irr::video::SColor const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleFadeOutAffector *)0;
  }
}


EXPORT irr::scene::IParticleFadeOutAffector *_wrap_IParticleSystemSceneNode_createFadeOutParticleAffector__SWIG_2 (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticleFadeOutAffector * lresult = (irr::scene::IParticleFadeOutAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleFadeOutAffector *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IParticleFadeOutAffector *)(arg1)->createFadeOutParticleAffector();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleFadeOutAffector *)0;
  }
}


EXPORT irr::scene::IParticleGravityAffector *_wrap_IParticleSystemSceneNode_createGravityAffector__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::u32 larg3) {
  irr::scene::IParticleGravityAffector * lresult = (irr::scene::IParticleGravityAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::scene::IParticleGravityAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IParticleGravityAffector *)(arg1)->createGravityAffector((irr::core::vector3df const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleGravityAffector *)0;
  }
}


EXPORT irr::scene::IParticleGravityAffector *_wrap_IParticleSystemSceneNode_createGravityAffector__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleGravityAffector * lresult = (irr::scene::IParticleGravityAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::IParticleGravityAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IParticleGravityAffector *)(arg1)->createGravityAffector((irr::core::vector3df const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleGravityAffector *)0;
  }
}


EXPORT irr::scene::IParticleGravityAffector *_wrap_IParticleSystemSceneNode_createGravityAffector__SWIG_2 (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticleGravityAffector * lresult = (irr::scene::IParticleGravityAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleGravityAffector *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IParticleGravityAffector *)(arg1)->createGravityAffector();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleGravityAffector *)0;
  }
}


EXPORT irr::scene::IParticleRotationAffector *_wrap_IParticleSystemSceneNode_createRotationAffector__SWIG_0 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2, irr::core::vector3df *larg3) {
  irr::scene::IParticleRotationAffector * lresult = (irr::scene::IParticleRotationAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::scene::IParticleRotationAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IParticleRotationAffector *)(arg1)->createRotationAffector((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRotationAffector *)0;
  }
}


EXPORT irr::scene::IParticleRotationAffector *_wrap_IParticleSystemSceneNode_createRotationAffector__SWIG_1 (irr::scene::IParticleSystemSceneNode *larg1, irr::core::vector3df *larg2) {
  irr::scene::IParticleRotationAffector * lresult = (irr::scene::IParticleRotationAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::IParticleRotationAffector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IParticleRotationAffector *)(arg1)->createRotationAffector((irr::core::vector3df const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRotationAffector *)0;
  }
}


EXPORT irr::scene::IParticleRotationAffector *_wrap_IParticleSystemSceneNode_createRotationAffector__SWIG_2 (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticleRotationAffector * lresult = (irr::scene::IParticleRotationAffector *)0 ;
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  irr::scene::IParticleRotationAffector *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IParticleRotationAffector *)(arg1)->createRotationAffector();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleRotationAffector *)0;
  }
}


EXPORT void _wrap_delete_IParticleSystemSceneNode (irr::scene::IParticleSystemSceneNode *larg1) {
  irr::scene::IParticleSystemSceneNode *arg1 = (irr::scene::IParticleSystemSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::quake3::IShader *_wrap_IQ3LevelMesh_getShader__SWIG_0 (irr::scene::IQ3LevelMesh *larg1, irr::c8 *larg2, int larg3) {
  irr::scene::quake3::IShader * lresult = (irr::scene::quake3::IShader *)0 ;
  irr::scene::IQ3LevelMesh *arg1 = (irr::scene::IQ3LevelMesh *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  bool arg3 ;
  irr::scene::quake3::IShader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (irr::scene::quake3::IShader *)(arg1)->getShader((irr::c8 const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::quake3::IShader *)0;
  }
}


EXPORT irr::scene::quake3::IShader *_wrap_IQ3LevelMesh_getShader__SWIG_1 (irr::scene::IQ3LevelMesh *larg1, irr::c8 *larg2) {
  irr::scene::quake3::IShader * lresult = (irr::scene::quake3::IShader *)0 ;
  irr::scene::IQ3LevelMesh *arg1 = (irr::scene::IQ3LevelMesh *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::quake3::IShader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::quake3::IShader *)(arg1)->getShader((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::quake3::IShader *)0;
  }
}


EXPORT irr::scene::quake3::IShader *_wrap_IQ3LevelMesh_getShader__SWIG_2 (irr::scene::IQ3LevelMesh *larg1, irr::u32 larg2) {
  irr::scene::quake3::IShader * lresult = (irr::scene::quake3::IShader *)0 ;
  irr::scene::IQ3LevelMesh *arg1 = (irr::scene::IQ3LevelMesh *) 0 ;
  irr::u32 arg2 ;
  irr::scene::quake3::IShader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::quake3::IShader *)((irr::scene::IQ3LevelMesh const *)arg1)->getShader(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::quake3::IShader *)0;
  }
}


EXPORT irr::scene::quake3::tQ3EntityList *_wrap_IQ3LevelMesh_getEntityList (irr::scene::IQ3LevelMesh *larg1) {
  irr::scene::quake3::tQ3EntityList * lresult = (irr::scene::quake3::tQ3EntityList *)0 ;
  irr::scene::IQ3LevelMesh *arg1 = (irr::scene::IQ3LevelMesh *) 0 ;
  irr::scene::quake3::tQ3EntityList *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::quake3::tQ3EntityList *) &(arg1)->getEntityList();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::quake3::tQ3EntityList *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IQ3LevelMesh_getBrushEntityMesh__SWIG_0 (irr::scene::IQ3LevelMesh *larg1, irr::s32 larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IQ3LevelMesh *arg1 = (irr::scene::IQ3LevelMesh *) 0 ;
  irr::s32 arg2 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IQ3LevelMesh const *)arg1)->getBrushEntityMesh(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_IQ3LevelMesh_getBrushEntityMesh__SWIG_1 (irr::scene::IQ3LevelMesh *larg1, irr::scene::quake3::IEntity *larg2) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::IQ3LevelMesh *arg1 = (irr::scene::IQ3LevelMesh *) 0 ;
  irr::scene::quake3::IEntity *arg2 = 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMesh *)((irr::scene::IQ3LevelMesh const *)arg1)->getBrushEntityMesh(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT void _wrap_delete_IQ3LevelMesh (irr::scene::IQ3LevelMesh *larg1) {
  irr::scene::IQ3LevelMesh *arg1 = (irr::scene::IQ3LevelMesh *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IRandomizer_reset__SWIG_0 (irr::IRandomizer *larg1, irr::s32 larg2) {
  irr::IRandomizer *arg1 = (irr::IRandomizer *) 0 ;
  irr::s32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reset(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IRandomizer_reset__SWIG_1 (irr::IRandomizer *larg1) {
  irr::IRandomizer *arg1 = (irr::IRandomizer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->reset();
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IRandomizer_rand (irr::IRandomizer *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::IRandomizer *arg1 = (irr::IRandomizer *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::IRandomizer const *)arg1)->rand();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::f32 _wrap_IRandomizer_frand (irr::IRandomizer *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::IRandomizer *arg1 = (irr::IRandomizer *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::IRandomizer const *)arg1)->frand();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT irr::s32 _wrap_IRandomizer_randMax (irr::IRandomizer *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::IRandomizer *arg1 = (irr::IRandomizer *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::IRandomizer const *)arg1)->randMax();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_delete_IRandomizer (irr::IRandomizer *larg1) {
  irr::IRandomizer *arg1 = (irr::IRandomizer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IVideoModeList_getVideoModeCount (irr::video::IVideoModeList *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::video::IVideoModeList const *)arg1)->getVideoModeCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::core::dimension2d< irr::u32 > *_wrap_IVideoModeList_getVideoModeResolution__SWIG_0 (irr::video::IVideoModeList *larg1, irr::s32 larg2) {
  irr::core::dimension2d< irr::u32 > * lresult = (irr::core::dimension2d< irr::u32 > *)0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::s32 arg2 ;
  irr::core::dimension2d< irr::u32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::video::IVideoModeList const *)arg1)->getVideoModeResolution(arg2);
    lresult = new irr::core::dimension2d< irr::u32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::u32 > *)0;
  }
}


EXPORT irr::core::dimension2d< irr::u32 > *_wrap_IVideoModeList_getVideoModeResolution__SWIG_1 (irr::video::IVideoModeList *larg1, irr::core::dimension2d< irr::u32 > *larg2, irr::core::dimension2d< irr::u32 > *larg3) {
  irr::core::dimension2d< irr::u32 > * lresult = (irr::core::dimension2d< irr::u32 > *)0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::core::dimension2d< irr::u32 > *arg2 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((irr::video::IVideoModeList const *)arg1)->getVideoModeResolution((irr::core::dimension2d< irr::u32 > const &)*arg2,(irr::core::dimension2d< irr::u32 > const &)*arg3);
    lresult = new irr::core::dimension2d< irr::u32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::u32 > *)0;
  }
}


EXPORT irr::s32 _wrap_IVideoModeList_getVideoModeDepth (irr::video::IVideoModeList *larg1, irr::s32 larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::s32 arg2 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::video::IVideoModeList const *)arg1)->getVideoModeDepth(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::core::dimension2d< irr::u32 > *_wrap_IVideoModeList_getDesktopResolution (irr::video::IVideoModeList *larg1) {
  irr::core::dimension2d< irr::u32 > * lresult = (irr::core::dimension2d< irr::u32 > *)0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::core::dimension2d< irr::u32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::dimension2d< irr::u32 > *) &((irr::video::IVideoModeList const *)arg1)->getDesktopResolution();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< irr::u32 > *)0;
  }
}


EXPORT irr::s32 _wrap_IVideoModeList_getDesktopDepth (irr::video::IVideoModeList *larg1) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  try {
    result = (irr::s32)((irr::video::IVideoModeList const *)arg1)->getDesktopDepth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_delete_IVideoModeList (irr::video::IVideoModeList *larg1) {
  irr::video::IVideoModeList *arg1 = (irr::video::IVideoModeList *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_ITimer_getRealTime (irr::ITimer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::ITimer const *)arg1)->getRealTime();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::ITimer::RealTimeDate *_wrap_ITimer_getRealTimeAndDate (irr::ITimer *larg1) {
  irr::ITimer::RealTimeDate * lresult = (irr::ITimer::RealTimeDate *)0 ;
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::ITimer::RealTimeDate result;
  
  arg1 = larg1;
  try {
    result = ((irr::ITimer const *)arg1)->getRealTimeAndDate();
    lresult = new irr::ITimer::RealTimeDate(result);
    return lresult;
  } catch (...) {
    return (irr::ITimer::RealTimeDate *)0;
  }
}


EXPORT irr::u32 _wrap_ITimer_getTime (irr::ITimer *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::ITimer const *)arg1)->getTime();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_ITimer_setTime (irr::ITimer *larg1, irr::u32 larg2) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTime(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITimer_stop (irr::ITimer *larg1) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->stop();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITimer_start (irr::ITimer *larg1) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->start();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITimer_setSpeed__SWIG_0 (irr::ITimer *larg1, irr::f32 larg2) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSpeed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITimer_setSpeed__SWIG_1 (irr::ITimer *larg1) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setSpeed();
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_ITimer_getSpeed (irr::ITimer *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::ITimer const *)arg1)->getSpeed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT int _wrap_ITimer_isStopped (irr::ITimer *larg1) {
  int lresult = (int)0 ;
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::ITimer const *)arg1)->isStopped();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ITimer_tick (irr::ITimer *larg1) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->tick();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_ITimer (irr::ITimer *larg1) {
  irr::ITimer *arg1 = (irr::ITimer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IrrlichtDevice_run (irr::IrrlichtDevice *larg1) {
  int lresult = (int)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->run();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IrrlichtDevice_yield (irr::IrrlichtDevice *larg1) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->yield();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IrrlichtDevice_sleep__SWIG_0 (irr::IrrlichtDevice *larg1, irr::u32 larg2, int larg3) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->sleep(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IrrlichtDevice_sleep__SWIG_1 (irr::IrrlichtDevice *larg1, irr::u32 larg2) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->sleep(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::IVideoDriver *_wrap_IrrlichtDevice_getVideoDriver (irr::IrrlichtDevice *larg1) {
  irr::video::IVideoDriver * lresult = (irr::video::IVideoDriver *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::video::IVideoDriver *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::IVideoDriver *)(arg1)->getVideoDriver();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IVideoDriver *)0;
  }
}


EXPORT irr::io::IFileSystem *_wrap_IrrlichtDevice_getFileSystem (irr::IrrlichtDevice *larg1) {
  irr::io::IFileSystem * lresult = (irr::io::IFileSystem *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::io::IFileSystem *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::IFileSystem *)(arg1)->getFileSystem();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IFileSystem *)0;
  }
}


EXPORT irr::gui::IGUIEnvironment *_wrap_IrrlichtDevice_getGUIEnvironment (irr::IrrlichtDevice *larg1) {
  irr::gui::IGUIEnvironment * lresult = (irr::gui::IGUIEnvironment *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::gui::IGUIEnvironment *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIEnvironment *)(arg1)->getGUIEnvironment();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIEnvironment *)0;
  }
}


EXPORT irr::scene::ISceneManager *_wrap_IrrlichtDevice_getSceneManager (irr::IrrlichtDevice *larg1) {
  irr::scene::ISceneManager * lresult = (irr::scene::ISceneManager *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::scene::ISceneManager *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneManager *)(arg1)->getSceneManager();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneManager *)0;
  }
}


EXPORT irr::gui::ICursorControl *_wrap_IrrlichtDevice_getCursorControl (irr::IrrlichtDevice *larg1) {
  irr::gui::ICursorControl * lresult = (irr::gui::ICursorControl *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::gui::ICursorControl *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::ICursorControl *)(arg1)->getCursorControl();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::ICursorControl *)0;
  }
}


EXPORT irr::ILogger *_wrap_IrrlichtDevice_getLogger (irr::IrrlichtDevice *larg1) {
  irr::ILogger * lresult = (irr::ILogger *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::ILogger *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::ILogger *)(arg1)->getLogger();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::ILogger *)0;
  }
}


EXPORT irr::video::IVideoModeList *_wrap_IrrlichtDevice_getVideoModeList (irr::IrrlichtDevice *larg1) {
  irr::video::IVideoModeList * lresult = (irr::video::IVideoModeList *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::video::IVideoModeList *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::IVideoModeList *)(arg1)->getVideoModeList();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IVideoModeList *)0;
  }
}


EXPORT irr::IOSOperator *_wrap_IrrlichtDevice_getOSOperator (irr::IrrlichtDevice *larg1) {
  irr::IOSOperator * lresult = (irr::IOSOperator *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IOSOperator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::IOSOperator *)(arg1)->getOSOperator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::IOSOperator *)0;
  }
}


EXPORT irr::ITimer *_wrap_IrrlichtDevice_getTimer (irr::IrrlichtDevice *larg1) {
  irr::ITimer * lresult = (irr::ITimer *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::ITimer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::ITimer *)(arg1)->getTimer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::ITimer *)0;
  }
}


EXPORT irr::IRandomizer *_wrap_IrrlichtDevice_getRandomizer (irr::IrrlichtDevice *larg1) {
  irr::IRandomizer * lresult = (irr::IRandomizer *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IRandomizer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::IRandomizer *)((irr::IrrlichtDevice const *)arg1)->getRandomizer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::IRandomizer *)0;
  }
}


EXPORT void _wrap_IrrlichtDevice_setRandomizer (irr::IrrlichtDevice *larg1, irr::IRandomizer *larg2) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IRandomizer *arg2 = (irr::IRandomizer *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRandomizer(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::IRandomizer *_wrap_IrrlichtDevice_createDefaultRandomizer (irr::IrrlichtDevice *larg1) {
  irr::IRandomizer * lresult = (irr::IRandomizer *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IRandomizer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::IRandomizer *)((irr::IrrlichtDevice const *)arg1)->createDefaultRandomizer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::IRandomizer *)0;
  }
}


EXPORT void _wrap_IrrlichtDevice_setWindowCaption (irr::IrrlichtDevice *larg1, wchar_t *larg2) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setWindowCaption((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IrrlichtDevice_isWindowActive (irr::IrrlichtDevice *larg1) {
  int lresult = (int)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::IrrlichtDevice const *)arg1)->isWindowActive();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IrrlichtDevice_isWindowFocused (irr::IrrlichtDevice *larg1) {
  int lresult = (int)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::IrrlichtDevice const *)arg1)->isWindowFocused();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IrrlichtDevice_isWindowMinimized (irr::IrrlichtDevice *larg1) {
  int lresult = (int)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::IrrlichtDevice const *)arg1)->isWindowMinimized();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IrrlichtDevice_isFullscreen (irr::IrrlichtDevice *larg1) {
  int lresult = (int)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::IrrlichtDevice const *)arg1)->isFullscreen();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::video::ECOLOR_FORMAT _wrap_IrrlichtDevice_getColorFormat (irr::IrrlichtDevice *larg1) {
  irr::video::ECOLOR_FORMAT lresult = (irr::video::ECOLOR_FORMAT)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::video::ECOLOR_FORMAT result;
  
  arg1 = larg1;
  try {
    result = (irr::video::ECOLOR_FORMAT)((irr::IrrlichtDevice const *)arg1)->getColorFormat();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ECOLOR_FORMAT)0;
  }
}


EXPORT void _wrap_IrrlichtDevice_closeDevice (irr::IrrlichtDevice *larg1) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->closeDevice();
    
  } catch (...) {
    
  }
}


EXPORT irr::c8 *_wrap_IrrlichtDevice_getVersion (irr::IrrlichtDevice *larg1) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::c8 *)((irr::IrrlichtDevice const *)arg1)->getVersion();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT void _wrap_IrrlichtDevice_setEventReceiver (irr::IrrlichtDevice *larg1, irr::IEventReceiver *larg2) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IEventReceiver *arg2 = (irr::IEventReceiver *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setEventReceiver(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::IEventReceiver *_wrap_IrrlichtDevice_getEventReceiver (irr::IrrlichtDevice *larg1) {
  irr::IEventReceiver * lresult = (irr::IEventReceiver *)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::IEventReceiver *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::IEventReceiver *)(arg1)->getEventReceiver();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::IEventReceiver *)0;
  }
}


EXPORT int _wrap_IrrlichtDevice_postEventFromUser (irr::IrrlichtDevice *larg1, irr::SEvent *larg2) {
  int lresult = (int)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::SEvent *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->postEventFromUser((irr::SEvent const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IrrlichtDevice_setInputReceivingSceneManager (irr::IrrlichtDevice *larg1, irr::scene::ISceneManager *larg2) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::scene::ISceneManager *arg2 = (irr::scene::ISceneManager *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setInputReceivingSceneManager(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IrrlichtDevice_setResizable__SWIG_0 (irr::IrrlichtDevice *larg1, int larg2) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setResizable(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IrrlichtDevice_setResizable__SWIG_1 (irr::IrrlichtDevice *larg1) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setResizable();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IrrlichtDevice_minimizeWindow (irr::IrrlichtDevice *larg1) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->minimizeWindow();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IrrlichtDevice_maximizeWindow (irr::IrrlichtDevice *larg1) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->maximizeWindow();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IrrlichtDevice_restoreWindow (irr::IrrlichtDevice *larg1) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->restoreWindow();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_IrrlichtDevice_activateJoysticks (irr::IrrlichtDevice *larg1, irr::core::array< irr::SJoystickInfo,irr::core::irrAllocator< irr::SJoystickInfo > > *larg2) {
  int lresult = (int)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::core::array< irr::SJoystickInfo,irr::core::irrAllocator< irr::SJoystickInfo > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->activateJoysticks(*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IrrlichtDevice_setGammaRamp (irr::IrrlichtDevice *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5, irr::f32 larg6) {
  int lresult = (int)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)(arg1)->setGammaRamp(arg2,arg3,arg4,arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IrrlichtDevice_getGammaRamp (irr::IrrlichtDevice *larg1, irr::f32 *larg2, irr::f32 *larg3, irr::f32 *larg4, irr::f32 *larg5, irr::f32 *larg6) {
  int lresult = (int)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::f32 *arg2 = 0 ;
  irr::f32 *arg3 = 0 ;
  irr::f32 *arg4 = 0 ;
  irr::f32 *arg5 = 0 ;
  irr::f32 *arg6 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)(arg1)->getGammaRamp(*arg2,*arg3,*arg4,*arg5,*arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_IrrlichtDevice_clearSystemMessages (irr::IrrlichtDevice *larg1) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clearSystemMessages();
    
  } catch (...) {
    
  }
}


EXPORT irr::E_DEVICE_TYPE _wrap_IrrlichtDevice_getType (irr::IrrlichtDevice *larg1) {
  irr::E_DEVICE_TYPE lresult = (irr::E_DEVICE_TYPE)0 ;
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  irr::E_DEVICE_TYPE result;
  
  arg1 = larg1;
  try {
    result = (irr::E_DEVICE_TYPE)((irr::IrrlichtDevice const *)arg1)->getType();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::E_DEVICE_TYPE)0;
  }
}


EXPORT int _wrap_IrrlichtDevice_isDriverSupported (irr::video::E_DRIVER_TYPE larg1) {
  int lresult = (int)0 ;
  irr::video::E_DRIVER_TYPE arg1 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)irr::IrrlichtDevice::isDriverSupported(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_IrrlichtDevice (irr::IrrlichtDevice *larg1) {
  irr::IrrlichtDevice *arg1 = (irr::IrrlichtDevice *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ISceneCollisionManager_getCollisionPoint (irr::scene::ISceneCollisionManager *larg1, irr::core::line3d< irr::f32 > *larg2, irr::scene::ITriangleSelector *larg3, irr::core::vector3df *larg4, irr::core::triangle3df *larg5, irr::scene::ISceneNode **larg6) {
  int lresult = (int)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3d< irr::f32 > *arg2 = 0 ;
  irr::scene::ITriangleSelector *arg3 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::triangle3df *arg5 = 0 ;
  irr::scene::ISceneNode **arg6 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (bool)(arg1)->getCollisionPoint((irr::core::line3d< irr::f32 > const &)*arg2,arg3,*arg4,*arg5,*arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneCollisionManager_getCollisionResultPosition__SWIG_0 (irr::scene::ISceneCollisionManager *larg1, irr::scene::ITriangleSelector *larg2, irr::core::vector3df *larg3, irr::core::vector3df *larg4, irr::core::vector3df *larg5, irr::core::triangle3df *larg6, irr::core::vector3df *larg7, bool *larg8, irr::scene::ISceneNode **larg9, irr::f32 larg10, irr::core::vector3df *larg11) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::triangle3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  bool *arg8 = 0 ;
  irr::scene::ISceneNode **arg9 = 0 ;
  irr::f32 arg10 ;
  irr::core::vector3df *arg11 = 0 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (arg1)->getCollisionResultPosition(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5,*arg6,*arg7,*arg8,*arg9,arg10,(irr::core::vector3df const &)*arg11);
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneCollisionManager_getCollisionResultPosition__SWIG_1 (irr::scene::ISceneCollisionManager *larg1, irr::scene::ITriangleSelector *larg2, irr::core::vector3df *larg3, irr::core::vector3df *larg4, irr::core::vector3df *larg5, irr::core::triangle3df *larg6, irr::core::vector3df *larg7, bool *larg8, irr::scene::ISceneNode **larg9, irr::f32 larg10) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::triangle3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  bool *arg8 = 0 ;
  irr::scene::ISceneNode **arg9 = 0 ;
  irr::f32 arg10 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (arg1)->getCollisionResultPosition(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5,*arg6,*arg7,*arg8,*arg9,arg10);
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneCollisionManager_getCollisionResultPosition__SWIG_2 (irr::scene::ISceneCollisionManager *larg1, irr::scene::ITriangleSelector *larg2, irr::core::vector3df *larg3, irr::core::vector3df *larg4, irr::core::vector3df *larg5, irr::core::triangle3df *larg6, irr::core::vector3df *larg7, bool *larg8, irr::scene::ISceneNode **larg9) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::triangle3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  bool *arg8 = 0 ;
  irr::scene::ISceneNode **arg9 = 0 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (arg1)->getCollisionResultPosition(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5,*arg6,*arg7,*arg8,*arg9);
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::line3d< irr::f32 > *_wrap_ISceneCollisionManager_getRayFromScreenCoordinates__SWIG_0 (irr::scene::ISceneCollisionManager *larg1, irr::core::vector2d< irr::s32 > *larg2, irr::scene::ICameraSceneNode *larg3) {
  irr::core::line3d< irr::f32 > * lresult = (irr::core::line3d< irr::f32 > *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::scene::ICameraSceneNode *arg3 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::line3d< irr::f32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (arg1)->getRayFromScreenCoordinates((irr::core::vector2d< irr::s32 > const &)*arg2,arg3);
    lresult = new irr::core::line3d< irr::f32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::line3d< irr::f32 > *)0;
  }
}


EXPORT irr::core::line3d< irr::f32 > *_wrap_ISceneCollisionManager_getRayFromScreenCoordinates__SWIG_1 (irr::scene::ISceneCollisionManager *larg1, irr::core::vector2d< irr::s32 > *larg2) {
  irr::core::line3d< irr::f32 > * lresult = (irr::core::line3d< irr::f32 > *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::core::line3d< irr::f32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getRayFromScreenCoordinates((irr::core::vector2d< irr::s32 > const &)*arg2);
    lresult = new irr::core::line3d< irr::f32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::line3d< irr::f32 > *)0;
  }
}


EXPORT irr::core::vector2d< irr::s32 > *_wrap_ISceneCollisionManager_getScreenCoordinatesFrom3DPosition__SWIG_0 (irr::scene::ISceneCollisionManager *larg1, irr::core::vector3df *larg2, irr::scene::ICameraSceneNode *larg3, int larg4) {
  irr::core::vector2d< irr::s32 > * lresult = (irr::core::vector2d< irr::s32 > *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::ICameraSceneNode *arg3 = (irr::scene::ICameraSceneNode *) 0 ;
  bool arg4 ;
  irr::core::vector2d< irr::s32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (arg1)->getScreenCoordinatesFrom3DPosition((irr::core::vector3df const &)*arg2,arg3,arg4);
    lresult = new irr::core::vector2d< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< irr::s32 > *)0;
  }
}


EXPORT irr::core::vector2d< irr::s32 > *_wrap_ISceneCollisionManager_getScreenCoordinatesFrom3DPosition__SWIG_1 (irr::scene::ISceneCollisionManager *larg1, irr::core::vector3df *larg2, irr::scene::ICameraSceneNode *larg3) {
  irr::core::vector2d< irr::s32 > * lresult = (irr::core::vector2d< irr::s32 > *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::ICameraSceneNode *arg3 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::core::vector2d< irr::s32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (arg1)->getScreenCoordinatesFrom3DPosition((irr::core::vector3df const &)*arg2,arg3);
    lresult = new irr::core::vector2d< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< irr::s32 > *)0;
  }
}


EXPORT irr::core::vector2d< irr::s32 > *_wrap_ISceneCollisionManager_getScreenCoordinatesFrom3DPosition__SWIG_2 (irr::scene::ISceneCollisionManager *larg1, irr::core::vector3df *larg2) {
  irr::core::vector2d< irr::s32 > * lresult = (irr::core::vector2d< irr::s32 > *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector2d< irr::s32 > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->getScreenCoordinatesFrom3DPosition((irr::core::vector3df const &)*arg2);
    lresult = new irr::core::vector2d< irr::s32 >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< irr::s32 > *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB__SWIG_0 (irr::scene::ISceneCollisionManager *larg1, irr::core::vector2d< irr::s32 > *larg2, irr::s32 larg3, int larg4, irr::scene::ISceneNode *larg5) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromScreenCoordinatesBB((irr::core::vector2d< irr::s32 > const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB__SWIG_1 (irr::scene::ISceneCollisionManager *larg1, irr::core::vector2d< irr::s32 > *larg2, irr::s32 larg3, int larg4) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromScreenCoordinatesBB((irr::core::vector2d< irr::s32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB__SWIG_2 (irr::scene::ISceneCollisionManager *larg1, irr::core::vector2d< irr::s32 > *larg2, irr::s32 larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromScreenCoordinatesBB((irr::core::vector2d< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB__SWIG_3 (irr::scene::ISceneCollisionManager *larg1, irr::core::vector2d< irr::s32 > *larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::vector2d< irr::s32 > *arg2 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromScreenCoordinatesBB((irr::core::vector2d< irr::s32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeFromRayBB__SWIG_0 (irr::scene::ISceneCollisionManager *larg1, irr::core::line3d< irr::f32 > *larg2, irr::s32 larg3, int larg4, irr::scene::ISceneNode *larg5) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3d< irr::f32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromRayBB((irr::core::line3d< irr::f32 > const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeFromRayBB__SWIG_1 (irr::scene::ISceneCollisionManager *larg1, irr::core::line3d< irr::f32 > *larg2, irr::s32 larg3, int larg4) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3d< irr::f32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromRayBB((irr::core::line3d< irr::f32 > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeFromRayBB__SWIG_2 (irr::scene::ISceneCollisionManager *larg1, irr::core::line3d< irr::f32 > *larg2, irr::s32 larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3d< irr::f32 > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromRayBB((irr::core::line3d< irr::f32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeFromRayBB__SWIG_3 (irr::scene::ISceneCollisionManager *larg1, irr::core::line3d< irr::f32 > *larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3d< irr::f32 > *arg2 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromRayBB((irr::core::line3d< irr::f32 > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeFromCameraBB__SWIG_0 (irr::scene::ISceneCollisionManager *larg1, irr::scene::ICameraSceneNode *larg2, irr::s32 larg3, int larg4) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ICameraSceneNode *arg2 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromCameraBB(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeFromCameraBB__SWIG_1 (irr::scene::ISceneCollisionManager *larg1, irr::scene::ICameraSceneNode *larg2, irr::s32 larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ICameraSceneNode *arg2 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromCameraBB(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeFromCameraBB__SWIG_2 (irr::scene::ISceneCollisionManager *larg1, irr::scene::ICameraSceneNode *larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::scene::ICameraSceneNode *arg2 = (irr::scene::ICameraSceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromCameraBB(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay__SWIG_0 (irr::scene::ISceneCollisionManager *larg1, irr::core::line3df *larg2, irr::core::vector3df *larg3, irr::core::triangle3df *larg4, irr::s32 larg5, irr::scene::ISceneNode *larg6, int larg7) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3df arg2 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::triangle3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  bool arg7 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = (bool)larg7;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeAndCollisionPointFromRay(arg2,*arg3,*arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay__SWIG_1 (irr::scene::ISceneCollisionManager *larg1, irr::core::line3df *larg2, irr::core::vector3df *larg3, irr::core::triangle3df *larg4, irr::s32 larg5, irr::scene::ISceneNode *larg6) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3df arg2 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::triangle3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeAndCollisionPointFromRay(arg2,*arg3,*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay__SWIG_2 (irr::scene::ISceneCollisionManager *larg1, irr::core::line3df *larg2, irr::core::vector3df *larg3, irr::core::triangle3df *larg4, irr::s32 larg5) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3df arg2 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::triangle3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeAndCollisionPointFromRay(arg2,*arg3,*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay__SWIG_3 (irr::scene::ISceneCollisionManager *larg1, irr::core::line3df *larg2, irr::core::vector3df *larg3, irr::core::triangle3df *larg4) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  irr::core::line3df arg2 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::triangle3df *arg4 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeAndCollisionPointFromRay(arg2,*arg3,*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT void _wrap_delete_ISceneCollisionManager (irr::scene::ISceneCollisionManager *larg1) {
  irr::scene::ISceneCollisionManager *arg1 = (irr::scene::ISceneCollisionManager *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ISceneLoader_isALoadableFileExtension (irr::scene::ISceneLoader *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::scene::ISceneLoader *arg1 = (irr::scene::ISceneLoader *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::scene::ISceneLoader const *)arg1)->isALoadableFileExtension((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneLoader_isALoadableFileFormat (irr::scene::ISceneLoader *larg1, irr::io::IReadFile *larg2) {
  int lresult = (int)0 ;
  irr::scene::ISceneLoader *arg1 = (irr::scene::ISceneLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::scene::ISceneLoader const *)arg1)->isALoadableFileFormat(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneLoader_loadScene__SWIG_0 (irr::scene::ISceneLoader *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneUserDataSerializer *larg3, irr::scene::ISceneNode *larg4) {
  int lresult = (int)0 ;
  irr::scene::ISceneLoader *arg1 = (irr::scene::ISceneLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->loadScene(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneLoader_loadScene__SWIG_1 (irr::scene::ISceneLoader *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneUserDataSerializer *larg3) {
  int lresult = (int)0 ;
  irr::scene::ISceneLoader *arg1 = (irr::scene::ISceneLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->loadScene(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneLoader_loadScene__SWIG_2 (irr::scene::ISceneLoader *larg1, irr::io::IReadFile *larg2) {
  int lresult = (int)0 ;
  irr::scene::ISceneLoader *arg1 = (irr::scene::ISceneLoader *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->loadScene(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_ISceneLoader (irr::scene::ISceneLoader *larg1) {
  irr::scene::ISceneLoader *arg1 = (irr::scene::ISceneLoader *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_ISkinnedMesh_getJointCount (irr::scene::ISkinnedMesh *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ISkinnedMesh const *)arg1)->getJointCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::c8 *_wrap_ISkinnedMesh_getJointName (irr::scene::ISkinnedMesh *larg1, irr::u32 larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::u32 arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)((irr::scene::ISkinnedMesh const *)arg1)->getJointName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT irr::s32 _wrap_ISkinnedMesh_getJointNumber (irr::scene::ISkinnedMesh *larg1, irr::c8 *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::scene::ISkinnedMesh const *)arg1)->getJointNumber((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT int _wrap_ISkinnedMesh_useAnimationFrom (irr::scene::ISkinnedMesh *larg1, irr::scene::ISkinnedMesh *larg2) {
  int lresult = (int)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::scene::ISkinnedMesh *arg2 = (irr::scene::ISkinnedMesh *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->useAnimationFrom((irr::scene::ISkinnedMesh const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ISkinnedMesh_updateNormalsWhenAnimating (irr::scene::ISkinnedMesh *larg1, int larg2) {
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->updateNormalsWhenAnimating(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISkinnedMesh_setInterpolationMode (irr::scene::ISkinnedMesh *larg1, irr::scene::E_INTERPOLATION_MODE larg2) {
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::scene::E_INTERPOLATION_MODE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setInterpolationMode(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISkinnedMesh_animateMesh (irr::scene::ISkinnedMesh *larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->animateMesh(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISkinnedMesh_skinMesh (irr::scene::ISkinnedMesh *larg1) {
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->skinMesh();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISkinnedMesh_convertMeshToTangents (irr::scene::ISkinnedMesh *larg1) {
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->convertMeshToTangents();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ISkinnedMesh_setHardwareSkinning (irr::scene::ISkinnedMesh *larg1, int larg2) {
  int lresult = (int)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (bool)(arg1)->setHardwareSkinning(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::array< irr::scene::SSkinMeshBuffer *,irr::core::irrAllocator< irr::scene::SSkinMeshBuffer * > > *_wrap_ISkinnedMesh_getMeshBuffers (irr::scene::ISkinnedMesh *larg1) {
  irr::core::array< irr::scene::SSkinMeshBuffer *,irr::core::irrAllocator< irr::scene::SSkinMeshBuffer * > > * lresult = (irr::core::array< irr::scene::SSkinMeshBuffer *,irr::core::irrAllocator< irr::scene::SSkinMeshBuffer * > > *)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::core::array< irr::scene::SSkinMeshBuffer *,irr::core::irrAllocator< irr::scene::SSkinMeshBuffer * > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::array< irr::scene::SSkinMeshBuffer *,irr::core::irrAllocator< irr::scene::SSkinMeshBuffer * > > *) &(arg1)->getMeshBuffers();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::scene::SSkinMeshBuffer *,irr::core::irrAllocator< irr::scene::SSkinMeshBuffer * > > *)0;
  }
}


EXPORT irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *_wrap_ISkinnedMesh_getAllJoints__SWIG_0 (irr::scene::ISkinnedMesh *larg1) {
  irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > * lresult = (irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *) &(arg1)->getAllJoints();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *)0;
  }
}


EXPORT irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *_wrap_ISkinnedMesh_getAllJoints__SWIG_1 (irr::scene::ISkinnedMesh *larg1) {
  irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > * lresult = (irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *) &((irr::scene::ISkinnedMesh const *)arg1)->getAllJoints();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *)0;
  }
}


EXPORT void _wrap_ISkinnedMesh_finalize (irr::scene::ISkinnedMesh *larg1) {
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->finalize();
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::SSkinMeshBuffer *_wrap_ISkinnedMesh_addMeshBuffer (irr::scene::ISkinnedMesh *larg1) {
  irr::scene::SSkinMeshBuffer * lresult = (irr::scene::SSkinMeshBuffer *)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::scene::SSkinMeshBuffer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::SSkinMeshBuffer *)(arg1)->addMeshBuffer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::SSkinMeshBuffer *)0;
  }
}


EXPORT irr::scene::ISkinnedMesh::SJoint *_wrap_ISkinnedMesh_addJoint__SWIG_0 (irr::scene::ISkinnedMesh *larg1, irr::scene::ISkinnedMesh::SJoint *larg2) {
  irr::scene::ISkinnedMesh::SJoint * lresult = (irr::scene::ISkinnedMesh::SJoint *)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::scene::ISkinnedMesh::SJoint *arg2 = (irr::scene::ISkinnedMesh::SJoint *) 0 ;
  irr::scene::ISkinnedMesh::SJoint *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISkinnedMesh::SJoint *)(arg1)->addJoint(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISkinnedMesh::SJoint *)0;
  }
}


EXPORT irr::scene::ISkinnedMesh::SJoint *_wrap_ISkinnedMesh_addJoint__SWIG_1 (irr::scene::ISkinnedMesh *larg1) {
  irr::scene::ISkinnedMesh::SJoint * lresult = (irr::scene::ISkinnedMesh::SJoint *)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::scene::ISkinnedMesh::SJoint *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISkinnedMesh::SJoint *)(arg1)->addJoint();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISkinnedMesh::SJoint *)0;
  }
}


EXPORT irr::scene::ISkinnedMesh::SWeight *_wrap_ISkinnedMesh_addWeight (irr::scene::ISkinnedMesh *larg1, irr::scene::ISkinnedMesh::SJoint *larg2) {
  irr::scene::ISkinnedMesh::SWeight * lresult = (irr::scene::ISkinnedMesh::SWeight *)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::scene::ISkinnedMesh::SJoint *arg2 = (irr::scene::ISkinnedMesh::SJoint *) 0 ;
  irr::scene::ISkinnedMesh::SWeight *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISkinnedMesh::SWeight *)(arg1)->addWeight(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISkinnedMesh::SWeight *)0;
  }
}


EXPORT irr::scene::ISkinnedMesh::SPositionKey *_wrap_ISkinnedMesh_addPositionKey (irr::scene::ISkinnedMesh *larg1, irr::scene::ISkinnedMesh::SJoint *larg2) {
  irr::scene::ISkinnedMesh::SPositionKey * lresult = (irr::scene::ISkinnedMesh::SPositionKey *)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::scene::ISkinnedMesh::SJoint *arg2 = (irr::scene::ISkinnedMesh::SJoint *) 0 ;
  irr::scene::ISkinnedMesh::SPositionKey *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISkinnedMesh::SPositionKey *)(arg1)->addPositionKey(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISkinnedMesh::SPositionKey *)0;
  }
}


EXPORT irr::scene::ISkinnedMesh::SScaleKey *_wrap_ISkinnedMesh_addScaleKey (irr::scene::ISkinnedMesh *larg1, irr::scene::ISkinnedMesh::SJoint *larg2) {
  irr::scene::ISkinnedMesh::SScaleKey * lresult = (irr::scene::ISkinnedMesh::SScaleKey *)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::scene::ISkinnedMesh::SJoint *arg2 = (irr::scene::ISkinnedMesh::SJoint *) 0 ;
  irr::scene::ISkinnedMesh::SScaleKey *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISkinnedMesh::SScaleKey *)(arg1)->addScaleKey(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISkinnedMesh::SScaleKey *)0;
  }
}


EXPORT irr::scene::ISkinnedMesh::SRotationKey *_wrap_ISkinnedMesh_addRotationKey (irr::scene::ISkinnedMesh *larg1, irr::scene::ISkinnedMesh::SJoint *larg2) {
  irr::scene::ISkinnedMesh::SRotationKey * lresult = (irr::scene::ISkinnedMesh::SRotationKey *)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  irr::scene::ISkinnedMesh::SJoint *arg2 = (irr::scene::ISkinnedMesh::SJoint *) 0 ;
  irr::scene::ISkinnedMesh::SRotationKey *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISkinnedMesh::SRotationKey *)(arg1)->addRotationKey(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISkinnedMesh::SRotationKey *)0;
  }
}


EXPORT int _wrap_ISkinnedMesh_isStatic (irr::scene::ISkinnedMesh *larg1) {
  int lresult = (int)0 ;
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->isStatic();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_ISkinnedMesh (irr::scene::ISkinnedMesh *larg1) {
  irr::scene::ISkinnedMesh *arg1 = (irr::scene::ISkinnedMesh *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_getMesh__SWIG_0 (irr::scene::ISceneManager *larg1, irr::io::path *larg2) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->getMesh((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_getMesh__SWIG_1 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->getMesh(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IMeshCache *_wrap_ISceneManager_getMeshCache (irr::scene::ISceneManager *larg1) {
  irr::scene::IMeshCache * lresult = (irr::scene::IMeshCache *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshCache *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMeshCache *)(arg1)->getMeshCache();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshCache *)0;
  }
}


EXPORT irr::video::IVideoDriver *_wrap_ISceneManager_getVideoDriver (irr::scene::ISceneManager *larg1) {
  irr::video::IVideoDriver * lresult = (irr::video::IVideoDriver *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::IVideoDriver *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::IVideoDriver *)(arg1)->getVideoDriver();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::IVideoDriver *)0;
  }
}


EXPORT irr::gui::IGUIEnvironment *_wrap_ISceneManager_getGUIEnvironment (irr::scene::ISceneManager *larg1) {
  irr::gui::IGUIEnvironment * lresult = (irr::gui::IGUIEnvironment *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIEnvironment *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::gui::IGUIEnvironment *)(arg1)->getGUIEnvironment();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::gui::IGUIEnvironment *)0;
  }
}


EXPORT irr::io::IFileSystem *_wrap_ISceneManager_getFileSystem (irr::scene::ISceneManager *larg1) {
  irr::io::IFileSystem * lresult = (irr::io::IFileSystem *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IFileSystem *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::IFileSystem *)(arg1)->getFileSystem();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IFileSystem *)0;
  }
}


EXPORT irr::scene::IVolumeLightSceneNode *_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::s32 larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor const *larg6, irr::video::SColor const *larg7, irr::core::vector3df *larg8, irr::core::vector3df *larg9, irr::core::vector3df *larg10) {
  irr::scene::IVolumeLightSceneNode * lresult = (irr::scene::IVolumeLightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::core::vector3df *arg9 = 0 ;
  irr::core::vector3df *arg10 = 0 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  arg7 = *larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8,(irr::core::vector3df const &)*arg9,(irr::core::vector3df const &)*arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVolumeLightSceneNode *)0;
  }
}


EXPORT irr::scene::IVolumeLightSceneNode *_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::s32 larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor const *larg6, irr::video::SColor const *larg7, irr::core::vector3df *larg8, irr::core::vector3df *larg9) {
  irr::scene::IVolumeLightSceneNode * lresult = (irr::scene::IVolumeLightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::core::vector3df *arg9 = 0 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  arg7 = *larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8,(irr::core::vector3df const &)*arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVolumeLightSceneNode *)0;
  }
}


EXPORT irr::scene::IVolumeLightSceneNode *_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::s32 larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor const *larg6, irr::video::SColor const *larg7, irr::core::vector3df *larg8) {
  irr::scene::IVolumeLightSceneNode * lresult = (irr::scene::IVolumeLightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  arg7 = *larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVolumeLightSceneNode *)0;
  }
}


EXPORT irr::scene::IVolumeLightSceneNode *_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::s32 larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor const *larg6, irr::video::SColor const *larg7) {
  irr::scene::IVolumeLightSceneNode * lresult = (irr::scene::IVolumeLightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor arg7 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  arg7 = *larg7;
  try {
    result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVolumeLightSceneNode *)0;
  }
}


EXPORT irr::scene::IVolumeLightSceneNode *_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::s32 larg3, irr::u32 larg4, irr::u32 larg5, irr::video::SColor const *larg6) {
  irr::scene::IVolumeLightSceneNode * lresult = (irr::scene::IVolumeLightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::video::SColor arg6 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  try {
    result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVolumeLightSceneNode *)0;
  }
}


EXPORT irr::scene::IVolumeLightSceneNode *_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::s32 larg3, irr::u32 larg4, irr::u32 larg5) {
  irr::scene::IVolumeLightSceneNode * lresult = (irr::scene::IVolumeLightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVolumeLightSceneNode *)0;
  }
}


EXPORT irr::scene::IVolumeLightSceneNode *_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::s32 larg3, irr::u32 larg4) {
  irr::scene::IVolumeLightSceneNode * lresult = (irr::scene::IVolumeLightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVolumeLightSceneNode *)0;
  }
}


EXPORT irr::scene::IVolumeLightSceneNode *_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_7 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::s32 larg3) {
  irr::scene::IVolumeLightSceneNode * lresult = (irr::scene::IVolumeLightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVolumeLightSceneNode *)0;
  }
}


EXPORT irr::scene::IVolumeLightSceneNode *_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_8 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::IVolumeLightSceneNode * lresult = (irr::scene::IVolumeLightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVolumeLightSceneNode *)0;
  }
}


EXPORT irr::scene::IVolumeLightSceneNode *_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_9 (irr::scene::ISceneManager *larg1) {
  irr::scene::IVolumeLightSceneNode * lresult = (irr::scene::IVolumeLightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IVolumeLightSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IVolumeLightSceneNode *)(arg1)->addVolumeLightSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IVolumeLightSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addCubeSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::f32 larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addCubeSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::f32 larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addCubeSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::f32 larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addCubeSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::f32 larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addCubeSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::f32 larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addCubeSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::f32 larg2) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addCubeSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addCubeSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addSphereSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::f32 larg2, irr::s32 larg3, irr::scene::ISceneNode *larg4, irr::s32 larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, irr::core::vector3df *larg8) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg5 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3,arg4,arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,(irr::core::vector3df const &)*arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addSphereSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::f32 larg2, irr::s32 larg3, irr::scene::ISceneNode *larg4, irr::s32 larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg5 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3,arg4,arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addSphereSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::f32 larg2, irr::s32 larg3, irr::scene::ISceneNode *larg4, irr::s32 larg5, irr::core::vector3df *larg6) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg5 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3,arg4,arg5,(irr::core::vector3df const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addSphereSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::f32 larg2, irr::s32 larg3, irr::scene::ISceneNode *larg4, irr::s32 larg5) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addSphereSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::f32 larg2, irr::s32 larg3, irr::scene::ISceneNode *larg4) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addSphereSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::f32 larg2, irr::s32 larg3) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::s32 arg3 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addSphereSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1, irr::f32 larg2) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::f32 arg2 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addSphereSceneNode__SWIG_7 (irr::scene::ISceneManager *larg1) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addSphereSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IAnimatedMeshSceneNode *_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, int larg8) {
  irr::scene::IAnimatedMeshSceneNode * lresult = (irr::scene::IAnimatedMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  bool arg8 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  try {
    result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IAnimatedMeshSceneNode *_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7) {
  irr::scene::IAnimatedMeshSceneNode * lresult = (irr::scene::IAnimatedMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IAnimatedMeshSceneNode *_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6) {
  irr::scene::IAnimatedMeshSceneNode * lresult = (irr::scene::IAnimatedMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IAnimatedMeshSceneNode *_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5) {
  irr::scene::IAnimatedMeshSceneNode * lresult = (irr::scene::IAnimatedMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IAnimatedMeshSceneNode *_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::IAnimatedMeshSceneNode * lresult = (irr::scene::IAnimatedMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IAnimatedMeshSceneNode *_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::IAnimatedMeshSceneNode * lresult = (irr::scene::IAnimatedMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IAnimatedMeshSceneNode *_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2) {
  irr::scene::IAnimatedMeshSceneNode * lresult = (irr::scene::IAnimatedMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IAnimatedMeshSceneNode *)(arg1)->addAnimatedMeshSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addMeshSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, int larg8) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  bool arg8 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addMeshSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addMeshSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addMeshSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addMeshSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addMeshSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addMeshSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addMeshSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5, irr::scene::ISceneNode *larg6, irr::s32 larg7, irr::core::vector3df *larg8, irr::core::vector3df *larg9, irr::core::vector3df *larg10) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::core::vector3df *arg9 = 0 ;
  irr::core::vector3df *arg10 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8,(irr::core::vector3df const &)*arg9,(irr::core::vector3df const &)*arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5, irr::scene::ISceneNode *larg6, irr::s32 larg7, irr::core::vector3df *larg8, irr::core::vector3df *larg9) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::core::vector3df *arg9 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8,(irr::core::vector3df const &)*arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5, irr::scene::ISceneNode *larg6, irr::s32 larg7, irr::core::vector3df *larg8) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg7 ;
  irr::core::vector3df *arg8 = 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,(irr::core::vector3df const &)*arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5, irr::scene::ISceneNode *larg6, irr::s32 larg7) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg7 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5, irr::scene::ISceneNode *larg6) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *arg6 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::f32 larg3, irr::f32 larg4) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_7 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::f32 larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::f32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_8 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addWaterSurfaceSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctreeSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::s32 larg5, int larg6) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctreeSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::s32 larg5) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctreeSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctreeSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctreeSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctTreeSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::s32 larg5, int larg6) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctTreeSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::s32 larg5) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctTreeSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctTreeSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctTreeSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMesh *larg2) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMesh *arg2 = (irr::scene::IAnimatedMesh *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctreeSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::s32 larg5, int larg6) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctreeSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::s32 larg5) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctreeSceneNode__SWIG_7 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctreeSceneNode__SWIG_8 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctreeSceneNode__SWIG_9 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctreeSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctTreeSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::s32 larg5, int larg6) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctTreeSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::s32 larg5) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctTreeSceneNode__SWIG_7 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctTreeSceneNode__SWIG_8 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addOctTreeSceneNode__SWIG_9 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addOctTreeSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::vector3df *larg3, irr::core::vector3df *larg4, irr::s32 larg5, int larg6) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::s32 arg5 ;
  bool arg6 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::vector3df *larg3, irr::core::vector3df *larg4, irr::s32 larg5) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::vector3df *larg3, irr::core::vector3df *larg4) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode(arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::vector3df *larg3) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode(arg2,(irr::core::vector3df const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5, irr::s32 larg6, irr::f32 larg7, int larg8) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  irr::f32 arg7 ;
  bool arg8 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5, irr::s32 larg6, irr::f32 larg7) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5, irr::s32 larg6) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_5 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_6 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_7 (irr::scene::ISceneManager *larg1) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeMaya();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4, irr::s32 larg5, irr::SKeyMap *larg6, irr::s32 larg7, int larg8, irr::f32 larg9, int larg10, int larg11) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  irr::s32 arg7 ;
  bool arg8 ;
  irr::f32 arg9 ;
  bool arg10 ;
  bool arg11 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  arg9 = larg9;
  arg10 = (bool)larg10;
  arg11 = (bool)larg11;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4, irr::s32 larg5, irr::SKeyMap *larg6, irr::s32 larg7, int larg8, irr::f32 larg9, int larg10) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  irr::s32 arg7 ;
  bool arg8 ;
  irr::f32 arg9 ;
  bool arg10 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  arg9 = larg9;
  arg10 = (bool)larg10;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4, irr::s32 larg5, irr::SKeyMap *larg6, irr::s32 larg7, int larg8, irr::f32 larg9) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  irr::s32 arg7 ;
  bool arg8 ;
  irr::f32 arg9 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4, irr::s32 larg5, irr::SKeyMap *larg6, irr::s32 larg7, int larg8) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  irr::s32 arg7 ;
  bool arg8 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = (bool)larg8;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4, irr::s32 larg5, irr::SKeyMap *larg6, irr::s32 larg7) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  irr::s32 arg7 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_5 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4, irr::s32 larg5, irr::SKeyMap *larg6) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::SKeyMap *arg6 = (irr::SKeyMap *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_6 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4, irr::s32 larg5) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::s32 arg5 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_7 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3, irr::f32 larg4) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_8 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::f32 larg3) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::f32 arg3 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_9 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_10 (irr::scene::ISceneManager *larg1) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ICameraSceneNode *)(arg1)->addCameraSceneNodeFPS();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT irr::scene::ILightSceneNode *_wrap_ISceneManager_addLightSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::vector3df *larg3, irr::video::SColorf *larg4, irr::f32 larg5, irr::s32 larg6) {
  irr::scene::ILightSceneNode * lresult = (irr::scene::ILightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::video::SColorf arg4 ;
  irr::f32 arg5 ;
  irr::s32 arg6 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode(arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ILightSceneNode *)0;
  }
}


EXPORT irr::scene::ILightSceneNode *_wrap_ISceneManager_addLightSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::vector3df *larg3, irr::video::SColorf *larg4, irr::f32 larg5) {
  irr::scene::ILightSceneNode * lresult = (irr::scene::ILightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::video::SColorf arg4 ;
  irr::f32 arg5 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode(arg2,(irr::core::vector3df const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ILightSceneNode *)0;
  }
}


EXPORT irr::scene::ILightSceneNode *_wrap_ISceneManager_addLightSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::vector3df *larg3, irr::video::SColorf *larg4) {
  irr::scene::ILightSceneNode * lresult = (irr::scene::ILightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::video::SColorf arg4 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode(arg2,(irr::core::vector3df const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ILightSceneNode *)0;
  }
}


EXPORT irr::scene::ILightSceneNode *_wrap_ISceneManager_addLightSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::vector3df *larg3) {
  irr::scene::ILightSceneNode * lresult = (irr::scene::ILightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode(arg2,(irr::core::vector3df const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ILightSceneNode *)0;
  }
}


EXPORT irr::scene::ILightSceneNode *_wrap_ISceneManager_addLightSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ILightSceneNode * lresult = (irr::scene::ILightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ILightSceneNode *)0;
  }
}


EXPORT irr::scene::ILightSceneNode *_wrap_ISceneManager_addLightSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1) {
  irr::scene::ILightSceneNode * lresult = (irr::scene::ILightSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ILightSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ILightSceneNode *)(arg1)->addLightSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ILightSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardSceneNode *_wrap_ISceneManager_addBillboardSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::dimension2d< irr::f32 > *larg3, irr::core::vector3df *larg4, irr::s32 larg5, irr::video::SColor *larg6, irr::video::SColor *larg7) {
  irr::scene::IBillboardSceneNode * lresult = (irr::scene::IBillboardSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::video::SColor arg6 ;
  irr::video::SColor arg7 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  arg7 = *larg7;
  try {
    result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::vector3df const &)*arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardSceneNode *_wrap_ISceneManager_addBillboardSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::dimension2d< irr::f32 > *larg3, irr::core::vector3df *larg4, irr::s32 larg5, irr::video::SColor *larg6) {
  irr::scene::IBillboardSceneNode * lresult = (irr::scene::IBillboardSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::video::SColor arg6 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = *larg6;
  try {
    result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::vector3df const &)*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardSceneNode *_wrap_ISceneManager_addBillboardSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::dimension2d< irr::f32 > *larg3, irr::core::vector3df *larg4, irr::s32 larg5) {
  irr::scene::IBillboardSceneNode * lresult = (irr::scene::IBillboardSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::s32 arg5 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::vector3df const &)*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardSceneNode *_wrap_ISceneManager_addBillboardSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::dimension2d< irr::f32 > *larg3, irr::core::vector3df *larg4) {
  irr::scene::IBillboardSceneNode * lresult = (irr::scene::IBillboardSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::vector3df const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardSceneNode *_wrap_ISceneManager_addBillboardSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::core::dimension2d< irr::f32 > *larg3) {
  irr::scene::IBillboardSceneNode * lresult = (irr::scene::IBillboardSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardSceneNode *_wrap_ISceneManager_addBillboardSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::IBillboardSceneNode * lresult = (irr::scene::IBillboardSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardSceneNode *_wrap_ISceneManager_addBillboardSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1) {
  irr::scene::IBillboardSceneNode * lresult = (irr::scene::IBillboardSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IBillboardSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IBillboardSceneNode *)(arg1)->addBillboardSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardSceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSkyBoxSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::video::ITexture *larg2, irr::video::ITexture *larg3, irr::video::ITexture *larg4, irr::video::ITexture *larg5, irr::video::ITexture *larg6, irr::video::ITexture *larg7, irr::scene::ISceneNode *larg8, irr::s32 larg9) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg4 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg7 = (irr::video::ITexture *) 0 ;
  irr::scene::ISceneNode *arg8 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg9 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSkyBoxSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSkyBoxSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::video::ITexture *larg2, irr::video::ITexture *larg3, irr::video::ITexture *larg4, irr::video::ITexture *larg5, irr::video::ITexture *larg6, irr::video::ITexture *larg7, irr::scene::ISceneNode *larg8) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg4 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg7 = (irr::video::ITexture *) 0 ;
  irr::scene::ISceneNode *arg8 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSkyBoxSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSkyBoxSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::video::ITexture *larg2, irr::video::ITexture *larg3, irr::video::ITexture *larg4, irr::video::ITexture *larg5, irr::video::ITexture *larg6, irr::video::ITexture *larg7) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg3 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg4 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg5 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg6 = (irr::video::ITexture *) 0 ;
  irr::video::ITexture *arg7 = (irr::video::ITexture *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSkyBoxSceneNode(arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::video::ITexture *larg2, irr::u32 larg3, irr::u32 larg4, irr::f32 larg5, irr::f32 larg6, irr::f32 larg7, irr::scene::ISceneNode *larg8, irr::s32 larg9) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::ISceneNode *arg8 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg9 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::video::ITexture *larg2, irr::u32 larg3, irr::u32 larg4, irr::f32 larg5, irr::f32 larg6, irr::f32 larg7, irr::scene::ISceneNode *larg8) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::ISceneNode *arg8 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::video::ITexture *larg2, irr::u32 larg3, irr::u32 larg4, irr::f32 larg5, irr::f32 larg6, irr::f32 larg7) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::video::ITexture *larg2, irr::u32 larg3, irr::u32 larg4, irr::f32 larg5, irr::f32 larg6) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::f32 arg5 ;
  irr::f32 arg6 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::video::ITexture *larg2, irr::u32 larg3, irr::u32 larg4, irr::f32 larg5) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::video::ITexture *larg2, irr::u32 larg3, irr::u32 larg4) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1, irr::video::ITexture *larg2, irr::u32 larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::u32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_7 (irr::scene::ISceneManager *larg1, irr::video::ITexture *larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::ITexture *arg2 = (irr::video::ITexture *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSkyDomeSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::IParticleSystemSceneNode *_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, int larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7) {
  irr::scene::IParticleSystemSceneNode * lresult = (irr::scene::IParticleSystemSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSystemSceneNode *)0;
  }
}


EXPORT irr::scene::IParticleSystemSceneNode *_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, int larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6) {
  irr::scene::IParticleSystemSceneNode * lresult = (irr::scene::IParticleSystemSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSystemSceneNode *)0;
  }
}


EXPORT irr::scene::IParticleSystemSceneNode *_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, int larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5) {
  irr::scene::IParticleSystemSceneNode * lresult = (irr::scene::IParticleSystemSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSystemSceneNode *)0;
  }
}


EXPORT irr::scene::IParticleSystemSceneNode *_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, int larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::IParticleSystemSceneNode * lresult = (irr::scene::IParticleSystemSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSystemSceneNode *)0;
  }
}


EXPORT irr::scene::IParticleSystemSceneNode *_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, int larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::IParticleSystemSceneNode * lresult = (irr::scene::IParticleSystemSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSystemSceneNode *)0;
  }
}


EXPORT irr::scene::IParticleSystemSceneNode *_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, int larg2) {
  irr::scene::IParticleSystemSceneNode * lresult = (irr::scene::IParticleSystemSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSystemSceneNode *)0;
  }
}


EXPORT irr::scene::IParticleSystemSceneNode *_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1) {
  irr::scene::IParticleSystemSceneNode * lresult = (irr::scene::IParticleSystemSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IParticleSystemSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IParticleSystemSceneNode *)(arg1)->addParticleSystemSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IParticleSystemSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, irr::video::SColor *larg8, irr::s32 larg9, irr::scene::E_TERRAIN_PATCH_SIZE larg10, irr::s32 larg11, int larg12) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::s32 arg11 ;
  bool arg12 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = (bool)larg12;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10,arg11,arg12);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, irr::video::SColor *larg8, irr::s32 larg9, irr::scene::E_TERRAIN_PATCH_SIZE larg10, irr::s32 larg11) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::s32 arg11 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10,arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, irr::video::SColor *larg8, irr::s32 larg9, irr::scene::E_TERRAIN_PATCH_SIZE larg10) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, irr::video::SColor *larg8, irr::s32 larg9) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, irr::video::SColor *larg8) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_7 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_8 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_9 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_10 (irr::scene::ISceneManager *larg1, irr::io::path *larg2) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_11 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, irr::video::SColor *larg8, irr::s32 larg9, irr::scene::E_TERRAIN_PATCH_SIZE larg10, irr::s32 larg11, int larg12) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::s32 arg11 ;
  bool arg12 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = (bool)larg12;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10,arg11,arg12);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_12 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, irr::video::SColor *larg8, irr::s32 larg9, irr::scene::E_TERRAIN_PATCH_SIZE larg10, irr::s32 larg11) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::s32 arg11 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10,arg11);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_13 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, irr::video::SColor *larg8, irr::s32 larg9, irr::scene::E_TERRAIN_PATCH_SIZE larg10) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::E_TERRAIN_PATCH_SIZE arg10 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_14 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, irr::video::SColor *larg8, irr::s32 larg9) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::s32 arg9 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_15 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7, irr::video::SColor *larg8) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::video::SColor arg8 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_16 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::core::vector3df *larg7) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::core::vector3df *arg7 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,(irr::core::vector3df const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_17 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_18 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4, irr::core::vector3df *larg5) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_19 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_20 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::ITerrainSceneNode *_wrap_ISceneManager_addTerrainSceneNode__SWIG_21 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2) {
  irr::scene::ITerrainSceneNode * lresult = (irr::scene::ITerrainSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ITerrainSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ITerrainSceneNode *)(arg1)->addTerrainSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITerrainSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addQuake3SceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::IMeshBuffer *larg2, irr::scene::quake3::IShader *larg3, irr::scene::ISceneNode *larg4, irr::s32 larg5) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::quake3::IShader *arg3 = (irr::scene::quake3::IShader *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg5 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addQuake3SceneNode((irr::scene::IMeshBuffer const *)arg2,(irr::scene::quake3::IShader const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addQuake3SceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::IMeshBuffer *larg2, irr::scene::quake3::IShader *larg3, irr::scene::ISceneNode *larg4) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::quake3::IShader *arg3 = (irr::scene::quake3::IShader *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addQuake3SceneNode((irr::scene::IMeshBuffer const *)arg2,(irr::scene::quake3::IShader const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::IMeshSceneNode *_wrap_ISceneManager_addQuake3SceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::IMeshBuffer *larg2, irr::scene::quake3::IShader *larg3) {
  irr::scene::IMeshSceneNode * lresult = (irr::scene::IMeshSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) 0 ;
  irr::scene::quake3::IShader *arg3 = (irr::scene::quake3::IShader *) 0 ;
  irr::scene::IMeshSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IMeshSceneNode *)(arg1)->addQuake3SceneNode((irr::scene::IMeshBuffer const *)arg2,(irr::scene::quake3::IShader const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshSceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addEmptySceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::s32 larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addEmptySceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addEmptySceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addEmptySceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addEmptySceneNode__SWIG_2 (irr::scene::ISceneManager *larg1) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addEmptySceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::IDummyTransformationSceneNode *_wrap_ISceneManager_addDummyTransformationSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::s32 larg3) {
  irr::scene::IDummyTransformationSceneNode * lresult = (irr::scene::IDummyTransformationSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::scene::IDummyTransformationSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IDummyTransformationSceneNode *)(arg1)->addDummyTransformationSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IDummyTransformationSceneNode *)0;
  }
}


EXPORT irr::scene::IDummyTransformationSceneNode *_wrap_ISceneManager_addDummyTransformationSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::IDummyTransformationSceneNode * lresult = (irr::scene::IDummyTransformationSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IDummyTransformationSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IDummyTransformationSceneNode *)(arg1)->addDummyTransformationSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IDummyTransformationSceneNode *)0;
  }
}


EXPORT irr::scene::IDummyTransformationSceneNode *_wrap_ISceneManager_addDummyTransformationSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1) {
  irr::scene::IDummyTransformationSceneNode * lresult = (irr::scene::IDummyTransformationSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IDummyTransformationSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IDummyTransformationSceneNode *)(arg1)->addDummyTransformationSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IDummyTransformationSceneNode *)0;
  }
}


EXPORT irr::scene::ITextSceneNode *_wrap_ISceneManager_addTextSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3, irr::video::SColor *larg4, irr::scene::ISceneNode *larg5, irr::core::vector3df *larg6, irr::s32 larg7) {
  irr::scene::ITextSceneNode * lresult = (irr::scene::ITextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::video::SColor arg4 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::s32 arg7 ;
  irr::scene::ITextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::ITextSceneNode *)(arg1)->addTextSceneNode(arg2,(wchar_t const *)arg3,arg4,arg5,(irr::core::vector3df const &)*arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITextSceneNode *)0;
  }
}


EXPORT irr::scene::ITextSceneNode *_wrap_ISceneManager_addTextSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3, irr::video::SColor *larg4, irr::scene::ISceneNode *larg5, irr::core::vector3df *larg6) {
  irr::scene::ITextSceneNode * lresult = (irr::scene::ITextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::video::SColor arg4 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::ITextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::ITextSceneNode *)(arg1)->addTextSceneNode(arg2,(wchar_t const *)arg3,arg4,arg5,(irr::core::vector3df const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITextSceneNode *)0;
  }
}


EXPORT irr::scene::ITextSceneNode *_wrap_ISceneManager_addTextSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3, irr::video::SColor *larg4, irr::scene::ISceneNode *larg5) {
  irr::scene::ITextSceneNode * lresult = (irr::scene::ITextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::video::SColor arg4 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ITextSceneNode *)(arg1)->addTextSceneNode(arg2,(wchar_t const *)arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITextSceneNode *)0;
  }
}


EXPORT irr::scene::ITextSceneNode *_wrap_ISceneManager_addTextSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3, irr::video::SColor *larg4) {
  irr::scene::ITextSceneNode * lresult = (irr::scene::ITextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::video::SColor arg4 ;
  irr::scene::ITextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = *larg4;
  try {
    result = (irr::scene::ITextSceneNode *)(arg1)->addTextSceneNode(arg2,(wchar_t const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITextSceneNode *)0;
  }
}


EXPORT irr::scene::ITextSceneNode *_wrap_ISceneManager_addTextSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3) {
  irr::scene::ITextSceneNode * lresult = (irr::scene::ITextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ITextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ITextSceneNode *)(arg1)->addTextSceneNode(arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITextSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardTextSceneNode *_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3, irr::scene::ISceneNode *larg4, irr::core::dimension2d< irr::f32 > *larg5, irr::core::vector3df *larg6, irr::s32 larg7, irr::video::SColor *larg8, irr::video::SColor *larg9) {
  irr::scene::IBillboardTextSceneNode * lresult = (irr::scene::IBillboardTextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::s32 arg7 ;
  irr::video::SColor arg8 ;
  irr::video::SColor arg9 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  arg9 = *larg9;
  try {
    result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,(irr::core::vector3df const &)*arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardTextSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardTextSceneNode *_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3, irr::scene::ISceneNode *larg4, irr::core::dimension2d< irr::f32 > *larg5, irr::core::vector3df *larg6, irr::s32 larg7, irr::video::SColor *larg8) {
  irr::scene::IBillboardTextSceneNode * lresult = (irr::scene::IBillboardTextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::s32 arg7 ;
  irr::video::SColor arg8 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = *larg8;
  try {
    result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,(irr::core::vector3df const &)*arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardTextSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardTextSceneNode *_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_2 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3, irr::scene::ISceneNode *larg4, irr::core::dimension2d< irr::f32 > *larg5, irr::core::vector3df *larg6, irr::s32 larg7) {
  irr::scene::IBillboardTextSceneNode * lresult = (irr::scene::IBillboardTextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::s32 arg7 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,(irr::core::vector3df const &)*arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardTextSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardTextSceneNode *_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_3 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3, irr::scene::ISceneNode *larg4, irr::core::dimension2d< irr::f32 > *larg5, irr::core::vector3df *larg6) {
  irr::scene::IBillboardTextSceneNode * lresult = (irr::scene::IBillboardTextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,(irr::core::vector3df const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardTextSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardTextSceneNode *_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_4 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3, irr::scene::ISceneNode *larg4, irr::core::dimension2d< irr::f32 > *larg5) {
  irr::scene::IBillboardTextSceneNode * lresult = (irr::scene::IBillboardTextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardTextSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardTextSceneNode *_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_5 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3, irr::scene::ISceneNode *larg4) {
  irr::scene::IBillboardTextSceneNode * lresult = (irr::scene::IBillboardTextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardTextSceneNode *)0;
  }
}


EXPORT irr::scene::IBillboardTextSceneNode *_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_6 (irr::scene::ISceneManager *larg1, irr::gui::IGUIFont *larg2, wchar_t *larg3) {
  irr::scene::IBillboardTextSceneNode * lresult = (irr::scene::IBillboardTextSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::gui::IGUIFont *arg2 = (irr::gui::IGUIFont *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  irr::scene::IBillboardTextSceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IBillboardTextSceneNode *)(arg1)->addBillboardTextSceneNode(arg2,(wchar_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IBillboardTextSceneNode *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addHillPlaneMesh__SWIG_0 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::core::dimension2d< irr::f32 > *larg3, irr::core::dimension2d< irr::u32 > *larg4, irr::video::SMaterial *larg5, irr::f32 larg6, irr::core::dimension2d< irr::f32 > *larg7, irr::core::dimension2d< irr::f32 > *larg8) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::SMaterial *arg5 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg6 ;
  irr::core::dimension2d< irr::f32 > *arg7 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg8 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addHillPlaneMesh((irr::io::path const &)*arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4,arg5,arg6,(irr::core::dimension2d< irr::f32 > const &)*arg7,(irr::core::dimension2d< irr::f32 > const &)*arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addHillPlaneMesh__SWIG_1 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::core::dimension2d< irr::f32 > *larg3, irr::core::dimension2d< irr::u32 > *larg4, irr::video::SMaterial *larg5, irr::f32 larg6, irr::core::dimension2d< irr::f32 > *larg7) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::SMaterial *arg5 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg6 ;
  irr::core::dimension2d< irr::f32 > *arg7 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addHillPlaneMesh((irr::io::path const &)*arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4,arg5,arg6,(irr::core::dimension2d< irr::f32 > const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addHillPlaneMesh__SWIG_2 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::core::dimension2d< irr::f32 > *larg3, irr::core::dimension2d< irr::u32 > *larg4, irr::video::SMaterial *larg5, irr::f32 larg6) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::SMaterial *arg5 = (irr::video::SMaterial *) 0 ;
  irr::f32 arg6 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addHillPlaneMesh((irr::io::path const &)*arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addHillPlaneMesh__SWIG_3 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::core::dimension2d< irr::f32 > *larg3, irr::core::dimension2d< irr::u32 > *larg4, irr::video::SMaterial *larg5) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::video::SMaterial *arg5 = (irr::video::SMaterial *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addHillPlaneMesh((irr::io::path const &)*arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addHillPlaneMesh__SWIG_4 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::core::dimension2d< irr::f32 > *larg3, irr::core::dimension2d< irr::u32 > *larg4) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::core::dimension2d< irr::f32 > *arg3 = 0 ;
  irr::core::dimension2d< irr::u32 > *arg4 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addHillPlaneMesh((irr::io::path const &)*arg2,(irr::core::dimension2d< irr::f32 > const &)*arg3,(irr::core::dimension2d< irr::u32 > const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addTerrainMesh__SWIG_0 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::IImage *larg3, irr::video::IImage *larg4, irr::core::dimension2d< irr::f32 > *larg5, irr::f32 larg6, irr::core::dimension2d< irr::u32 > *larg7) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg4 = (irr::video::IImage *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::f32 arg6 ;
  irr::core::dimension2d< irr::u32 > *arg7 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addTerrainMesh((irr::io::path const &)*arg2,arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,arg6,(irr::core::dimension2d< irr::u32 > const &)*arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addTerrainMesh__SWIG_1 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::IImage *larg3, irr::video::IImage *larg4, irr::core::dimension2d< irr::f32 > *larg5, irr::f32 larg6) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg4 = (irr::video::IImage *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::f32 arg6 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addTerrainMesh((irr::io::path const &)*arg2,arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addTerrainMesh__SWIG_2 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::IImage *larg3, irr::video::IImage *larg4, irr::core::dimension2d< irr::f32 > *larg5) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg4 = (irr::video::IImage *) 0 ;
  irr::core::dimension2d< irr::f32 > *arg5 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addTerrainMesh((irr::io::path const &)*arg2,arg3,arg4,(irr::core::dimension2d< irr::f32 > const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addTerrainMesh__SWIG_3 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::IImage *larg3, irr::video::IImage *larg4) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::IImage *arg3 = (irr::video::IImage *) 0 ;
  irr::video::IImage *arg4 = (irr::video::IImage *) 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addTerrainMesh((irr::io::path const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addArrowMesh__SWIG_0 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::SColor *larg3, irr::video::SColor *larg4, irr::u32 larg5, irr::u32 larg6, irr::f32 larg7, irr::f32 larg8, irr::f32 larg9, irr::f32 larg10) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::f32 arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::f32 arg10 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addArrowMesh__SWIG_1 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::SColor *larg3, irr::video::SColor *larg4, irr::u32 larg5, irr::u32 larg6, irr::f32 larg7, irr::f32 larg8, irr::f32 larg9) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::f32 arg7 ;
  irr::f32 arg8 ;
  irr::f32 arg9 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addArrowMesh__SWIG_2 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::SColor *larg3, irr::video::SColor *larg4, irr::u32 larg5, irr::u32 larg6, irr::f32 larg7, irr::f32 larg8) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::f32 arg7 ;
  irr::f32 arg8 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addArrowMesh__SWIG_3 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::SColor *larg3, irr::video::SColor *larg4, irr::u32 larg5, irr::u32 larg6, irr::f32 larg7) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addArrowMesh__SWIG_4 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::SColor *larg3, irr::video::SColor *larg4, irr::u32 larg5, irr::u32 larg6) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::u32 arg6 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addArrowMesh__SWIG_5 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::SColor *larg3, irr::video::SColor *larg4, irr::u32 larg5) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::u32 arg5 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addArrowMesh__SWIG_6 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::SColor *larg3, irr::video::SColor *larg4) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::video::SColor arg4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addArrowMesh__SWIG_7 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::video::SColor *larg3) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::video::SColor arg3 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addArrowMesh__SWIG_8 (irr::scene::ISceneManager *larg1, irr::io::path *larg2) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addArrowMesh((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addSphereMesh__SWIG_0 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::f32 larg3, irr::u32 larg4, irr::u32 larg5) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::u32 arg5 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addSphereMesh((irr::io::path const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addSphereMesh__SWIG_1 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::f32 larg3, irr::u32 larg4) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addSphereMesh((irr::io::path const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addSphereMesh__SWIG_2 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::f32 larg3) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addSphereMesh((irr::io::path const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addSphereMesh__SWIG_3 (irr::scene::ISceneManager *larg1, irr::io::path *larg2) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addSphereMesh((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addVolumeLightMesh__SWIG_0 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::u32 larg3, irr::u32 larg4, irr::video::SColor const *larg5, irr::video::SColor const *larg6) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor arg5 ;
  irr::video::SColor arg6 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = *larg5;
  arg6 = *larg6;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addVolumeLightMesh((irr::io::path const &)*arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addVolumeLightMesh__SWIG_1 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::u32 larg3, irr::u32 larg4, irr::video::SColor const *larg5) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::video::SColor arg5 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = *larg5;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addVolumeLightMesh((irr::io::path const &)*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addVolumeLightMesh__SWIG_2 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::u32 larg3, irr::u32 larg4) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::u32 arg4 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addVolumeLightMesh((irr::io::path const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addVolumeLightMesh__SWIG_3 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::u32 larg3) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addVolumeLightMesh((irr::io::path const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::IAnimatedMesh *_wrap_ISceneManager_addVolumeLightMesh__SWIG_4 (irr::scene::ISceneManager *larg1, irr::io::path *larg2) {
  irr::scene::IAnimatedMesh * lresult = (irr::scene::IAnimatedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::IAnimatedMesh *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IAnimatedMesh *)(arg1)->addVolumeLightMesh((irr::io::path const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IAnimatedMesh *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_getRootSceneNode (irr::scene::ISceneManager *larg1) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getRootSceneNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_getSceneNodeFromId__SWIG_0 (irr::scene::ISceneManager *larg1, irr::s32 larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromId(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_getSceneNodeFromId__SWIG_1 (irr::scene::ISceneManager *larg1, irr::s32 larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromId(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_getSceneNodeFromName__SWIG_0 (irr::scene::ISceneManager *larg1, irr::c8 *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromName((irr::c8 const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_getSceneNodeFromName__SWIG_1 (irr::scene::ISceneManager *larg1, irr::c8 *larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromName((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_getSceneNodeFromType__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ESCENE_NODE_TYPE larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromType(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_getSceneNodeFromType__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ESCENE_NODE_TYPE larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->getSceneNodeFromType(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT void _wrap_ISceneManager_getSceneNodesFromType__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ESCENE_NODE_TYPE larg2, irr::core::array< irr::scene::ISceneNode *,irr::core::irrAllocator< irr::scene::ISceneNode * > > *larg3, irr::scene::ISceneNode *larg4) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::core::array< irr::scene::ISceneNode *,irr::core::irrAllocator< irr::scene::ISceneNode * > > *arg3 = 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->getSceneNodesFromType(arg2,*arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneManager_getSceneNodesFromType__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ESCENE_NODE_TYPE larg2, irr::core::array< irr::scene::ISceneNode *,irr::core::irrAllocator< irr::scene::ISceneNode * > > *larg3) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::core::array< irr::scene::ISceneNode *,irr::core::irrAllocator< irr::scene::ISceneNode * > > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->getSceneNodesFromType(arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ICameraSceneNode *_wrap_ISceneManager_getActiveCamera (irr::scene::ISceneManager *larg1) {
  irr::scene::ICameraSceneNode * lresult = (irr::scene::ICameraSceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ICameraSceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ICameraSceneNode *)((irr::scene::ISceneManager const *)arg1)->getActiveCamera();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ICameraSceneNode *)0;
  }
}


EXPORT void _wrap_ISceneManager_setActiveCamera (irr::scene::ISceneManager *larg1, irr::scene::ICameraSceneNode *larg2) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ICameraSceneNode *arg2 = (irr::scene::ICameraSceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setActiveCamera(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneManager_setShadowColor__SWIG_0 (irr::scene::ISceneManager *larg1, irr::video::SColor *larg2) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setShadowColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneManager_setShadowColor__SWIG_1 (irr::scene::ISceneManager *larg1) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setShadowColor();
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_ISceneManager_getShadowColor (irr::scene::ISceneManager *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  try {
    result = ((irr::scene::ISceneManager const *)arg1)->getShadowColor();
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::u32 _wrap_ISceneManager_registerNodeForRendering__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2, irr::scene::E_SCENE_NODE_RENDER_PASS larg3) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::E_SCENE_NODE_RENDER_PASS arg3 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::u32)(arg1)->registerNodeForRendering(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_ISceneManager_registerNodeForRendering__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::u32)(arg1)->registerNodeForRendering(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_ISceneManager_drawAll (irr::scene::ISceneManager *larg1) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->drawAll();
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createRotationAnimator (irr::scene::ISceneManager *larg1, irr::core::vector3df *larg2) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createRotationAnimator((irr::core::vector3df const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFlyCircleAnimator__SWIG_0 (irr::scene::ISceneManager *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5, irr::f32 larg6, irr::f32 larg7) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::f32 arg6 ;
  irr::f32 arg7 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFlyCircleAnimator__SWIG_1 (irr::scene::ISceneManager *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5, irr::f32 larg6) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::f32 arg6 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFlyCircleAnimator__SWIG_2 (irr::scene::ISceneManager *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4, irr::core::vector3df *larg5) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2,arg3,arg4,(irr::core::vector3df const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFlyCircleAnimator__SWIG_3 (irr::scene::ISceneManager *larg1, irr::core::vector3df *larg2, irr::f32 larg3, irr::f32 larg4) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFlyCircleAnimator__SWIG_4 (irr::scene::ISceneManager *larg1, irr::core::vector3df *larg2, irr::f32 larg3) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFlyCircleAnimator__SWIG_5 (irr::scene::ISceneManager *larg1, irr::core::vector3df *larg2) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator((irr::core::vector3df const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFlyCircleAnimator__SWIG_6 (irr::scene::ISceneManager *larg1) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyCircleAnimator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFlyStraightAnimator__SWIG_0 (irr::scene::ISceneManager *larg1, irr::core::vector3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4, int larg5, int larg6) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  bool arg5 ;
  bool arg6 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyStraightAnimator((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFlyStraightAnimator__SWIG_1 (irr::scene::ISceneManager *larg1, irr::core::vector3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4, int larg5) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  bool arg5 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = (bool)larg5;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyStraightAnimator((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFlyStraightAnimator__SWIG_2 (irr::scene::ISceneManager *larg1, irr::core::vector3df *larg2, irr::core::vector3df *larg3, irr::u32 larg4) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::u32 arg4 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFlyStraightAnimator((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createTextureAnimator__SWIG_0 (irr::scene::ISceneManager *larg1, irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *larg2, irr::s32 larg3, int larg4) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createTextureAnimator((irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createTextureAnimator__SWIG_1 (irr::scene::ISceneManager *larg1, irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *larg2, irr::s32 larg3) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createTextureAnimator((irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createDeleteAnimator (irr::scene::ISceneManager *larg1, irr::u32 larg2) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createDeleteAnimator(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimatorCollisionResponse *_wrap_ISceneManager_createCollisionResponseAnimator__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ITriangleSelector *larg2, irr::scene::ISceneNode *larg3, irr::core::vector3df *larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6, irr::f32 larg7) {
  irr::scene::ISceneNodeAnimatorCollisionResponse * lresult = (irr::scene::ISceneNodeAnimatorCollisionResponse *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::f32 arg7 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    result = (irr::scene::ISceneNodeAnimatorCollisionResponse *)(arg1)->createCollisionResponseAnimator(arg2,arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimatorCollisionResponse *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimatorCollisionResponse *_wrap_ISceneManager_createCollisionResponseAnimator__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ITriangleSelector *larg2, irr::scene::ISceneNode *larg3, irr::core::vector3df *larg4, irr::core::vector3df *larg5, irr::core::vector3df *larg6) {
  irr::scene::ISceneNodeAnimatorCollisionResponse * lresult = (irr::scene::ISceneNodeAnimatorCollisionResponse *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::core::vector3df *arg6 = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (irr::scene::ISceneNodeAnimatorCollisionResponse *)(arg1)->createCollisionResponseAnimator(arg2,arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5,(irr::core::vector3df const &)*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimatorCollisionResponse *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimatorCollisionResponse *_wrap_ISceneManager_createCollisionResponseAnimator__SWIG_2 (irr::scene::ISceneManager *larg1, irr::scene::ITriangleSelector *larg2, irr::scene::ISceneNode *larg3, irr::core::vector3df *larg4, irr::core::vector3df *larg5) {
  irr::scene::ISceneNodeAnimatorCollisionResponse * lresult = (irr::scene::ISceneNodeAnimatorCollisionResponse *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::vector3df *arg5 = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ISceneNodeAnimatorCollisionResponse *)(arg1)->createCollisionResponseAnimator(arg2,arg3,(irr::core::vector3df const &)*arg4,(irr::core::vector3df const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimatorCollisionResponse *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimatorCollisionResponse *_wrap_ISceneManager_createCollisionResponseAnimator__SWIG_3 (irr::scene::ISceneManager *larg1, irr::scene::ITriangleSelector *larg2, irr::scene::ISceneNode *larg3, irr::core::vector3df *larg4) {
  irr::scene::ISceneNodeAnimatorCollisionResponse * lresult = (irr::scene::ISceneNodeAnimatorCollisionResponse *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ISceneNodeAnimatorCollisionResponse *)(arg1)->createCollisionResponseAnimator(arg2,arg3,(irr::core::vector3df const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimatorCollisionResponse *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimatorCollisionResponse *_wrap_ISceneManager_createCollisionResponseAnimator__SWIG_4 (irr::scene::ISceneManager *larg1, irr::scene::ITriangleSelector *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ISceneNodeAnimatorCollisionResponse * lresult = (irr::scene::ISceneNodeAnimatorCollisionResponse *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNodeAnimatorCollisionResponse *)(arg1)->createCollisionResponseAnimator(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimatorCollisionResponse *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFollowSplineAnimator__SWIG_0 (irr::scene::ISceneManager *larg1, irr::s32 larg2, irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *larg3, irr::f32 larg4, irr::f32 larg5, int larg6, int larg7) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  bool arg6 ;
  bool arg7 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFollowSplineAnimator(arg2,(irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > const &)*arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFollowSplineAnimator__SWIG_1 (irr::scene::ISceneManager *larg1, irr::s32 larg2, irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *larg3, irr::f32 larg4, irr::f32 larg5, int larg6) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  bool arg6 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = (bool)larg6;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFollowSplineAnimator(arg2,(irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > const &)*arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFollowSplineAnimator__SWIG_2 (irr::scene::ISceneManager *larg1, irr::s32 larg2, irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFollowSplineAnimator(arg2,(irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > const &)*arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFollowSplineAnimator__SWIG_3 (irr::scene::ISceneManager *larg1, irr::s32 larg2, irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *larg3, irr::f32 larg4) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *arg3 = 0 ;
  irr::f32 arg4 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFollowSplineAnimator(arg2,(irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createFollowSplineAnimator__SWIG_4 (irr::scene::ISceneManager *larg1, irr::s32 larg2, irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *larg3) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::s32 arg2 ;
  irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *arg3 = 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createFollowSplineAnimator(arg2,(irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ISceneManager_createTriangleSelector__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ITriangleSelector *)(arg1)->createTriangleSelector(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ISceneManager_createTriangleSelector__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::IAnimatedMeshSceneNode *larg2) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IAnimatedMeshSceneNode *arg2 = (irr::scene::IAnimatedMeshSceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ITriangleSelector *)(arg1)->createTriangleSelector(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ISceneManager_createTriangleSelectorFromBoundingBox (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ITriangleSelector *)(arg1)->createTriangleSelectorFromBoundingBox(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ISceneManager_createOctreeTriangleSelector__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ITriangleSelector *)(arg1)->createOctreeTriangleSelector(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ISceneManager_createOctreeTriangleSelector__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ITriangleSelector *)(arg1)->createOctreeTriangleSelector(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ISceneManager_createOctTreeTriangleSelector__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3, irr::s32 larg4) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::s32 arg4 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::scene::ITriangleSelector *)(arg1)->createOctTreeTriangleSelector(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ISceneManager_createOctTreeTriangleSelector__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::IMesh *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ITriangleSelector *)(arg1)->createOctTreeTriangleSelector(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT irr::scene::IMetaTriangleSelector *_wrap_ISceneManager_createMetaTriangleSelector (irr::scene::ISceneManager *larg1) {
  irr::scene::IMetaTriangleSelector * lresult = (irr::scene::IMetaTriangleSelector *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMetaTriangleSelector *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMetaTriangleSelector *)(arg1)->createMetaTriangleSelector();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMetaTriangleSelector *)0;
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ISceneManager_createTerrainTriangleSelector__SWIG_0 (irr::scene::ISceneManager *larg1, irr::scene::ITerrainSceneNode *larg2, irr::s32 larg3) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITerrainSceneNode *arg2 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::s32 arg3 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ITriangleSelector *)(arg1)->createTerrainTriangleSelector(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ISceneManager_createTerrainTriangleSelector__SWIG_1 (irr::scene::ISceneManager *larg1, irr::scene::ITerrainSceneNode *larg2) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ITerrainSceneNode *arg2 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ITriangleSelector *)(arg1)->createTerrainTriangleSelector(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT void _wrap_ISceneManager_addExternalMeshLoader (irr::scene::ISceneManager *larg1, irr::scene::IMeshLoader *larg2) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshLoader *arg2 = (irr::scene::IMeshLoader *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addExternalMeshLoader(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_ISceneManager_getMeshLoaderCount (irr::scene::ISceneManager *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ISceneManager const *)arg1)->getMeshLoaderCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::scene::IMeshLoader *_wrap_ISceneManager_getMeshLoader (irr::scene::ISceneManager *larg1, irr::u32 larg2) {
  irr::scene::IMeshLoader * lresult = (irr::scene::IMeshLoader *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 arg2 ;
  irr::scene::IMeshLoader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMeshLoader *)((irr::scene::ISceneManager const *)arg1)->getMeshLoader(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshLoader *)0;
  }
}


EXPORT void _wrap_ISceneManager_addExternalSceneLoader (irr::scene::ISceneManager *larg1, irr::scene::ISceneLoader *larg2) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneLoader *arg2 = (irr::scene::ISceneLoader *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addExternalSceneLoader(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_ISceneManager_getSceneLoaderCount (irr::scene::ISceneManager *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ISceneManager const *)arg1)->getSceneLoaderCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::scene::ISceneLoader *_wrap_ISceneManager_getSceneLoader (irr::scene::ISceneManager *larg1, irr::u32 larg2) {
  irr::scene::ISceneLoader * lresult = (irr::scene::ISceneLoader *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ISceneLoader *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneLoader *)((irr::scene::ISceneManager const *)arg1)->getSceneLoader(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneLoader *)0;
  }
}


EXPORT irr::scene::ISceneCollisionManager *_wrap_ISceneManager_getSceneCollisionManager (irr::scene::ISceneManager *larg1) {
  irr::scene::ISceneCollisionManager * lresult = (irr::scene::ISceneCollisionManager *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneCollisionManager *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneCollisionManager *)(arg1)->getSceneCollisionManager();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneCollisionManager *)0;
  }
}


EXPORT irr::scene::IMeshManipulator *_wrap_ISceneManager_getMeshManipulator (irr::scene::ISceneManager *larg1) {
  irr::scene::IMeshManipulator * lresult = (irr::scene::IMeshManipulator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IMeshManipulator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMeshManipulator *)(arg1)->getMeshManipulator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshManipulator *)0;
  }
}


EXPORT void _wrap_ISceneManager_addToDeletionQueue (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addToDeletionQueue(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ISceneManager_postEventFromUser (irr::scene::ISceneManager *larg1, irr::SEvent *larg2) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::SEvent *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->postEventFromUser((irr::SEvent const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ISceneManager_clear (irr::scene::ISceneManager *larg1) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT irr::io::IAttributes *_wrap_ISceneManager_getParameters (irr::scene::ISceneManager *larg1) {
  irr::io::IAttributes * lresult = (irr::io::IAttributes *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IAttributes *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::IAttributes *)(arg1)->getParameters();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IAttributes *)0;
  }
}


EXPORT irr::scene::E_SCENE_NODE_RENDER_PASS _wrap_ISceneManager_getSceneNodeRenderPass (irr::scene::ISceneManager *larg1) {
  irr::scene::E_SCENE_NODE_RENDER_PASS lresult = (irr::scene::E_SCENE_NODE_RENDER_PASS)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::E_SCENE_NODE_RENDER_PASS result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_SCENE_NODE_RENDER_PASS)((irr::scene::ISceneManager const *)arg1)->getSceneNodeRenderPass();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_SCENE_NODE_RENDER_PASS)0;
  }
}


EXPORT irr::scene::ISceneNodeFactory *_wrap_ISceneManager_getDefaultSceneNodeFactory (irr::scene::ISceneManager *larg1) {
  irr::scene::ISceneNodeFactory * lresult = (irr::scene::ISceneNodeFactory *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeFactory *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneNodeFactory *)(arg1)->getDefaultSceneNodeFactory();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeFactory *)0;
  }
}


EXPORT void _wrap_ISceneManager_registerSceneNodeFactory (irr::scene::ISceneManager *larg1, irr::scene::ISceneNodeFactory *larg2) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeFactory *arg2 = (irr::scene::ISceneNodeFactory *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->registerSceneNodeFactory(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_ISceneManager_getRegisteredSceneNodeFactoryCount (irr::scene::ISceneManager *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ISceneManager const *)arg1)->getRegisteredSceneNodeFactoryCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::scene::ISceneNodeFactory *_wrap_ISceneManager_getSceneNodeFactory (irr::scene::ISceneManager *larg1, irr::u32 larg2) {
  irr::scene::ISceneNodeFactory * lresult = (irr::scene::ISceneNodeFactory *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ISceneNodeFactory *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNodeFactory *)(arg1)->getSceneNodeFactory(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeFactory *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimatorFactory *_wrap_ISceneManager_getDefaultSceneNodeAnimatorFactory (irr::scene::ISceneManager *larg1) {
  irr::scene::ISceneNodeAnimatorFactory * lresult = (irr::scene::ISceneNodeAnimatorFactory *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeAnimatorFactory *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneNodeAnimatorFactory *)(arg1)->getDefaultSceneNodeAnimatorFactory();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimatorFactory *)0;
  }
}


EXPORT void _wrap_ISceneManager_registerSceneNodeAnimatorFactory (irr::scene::ISceneManager *larg1, irr::scene::ISceneNodeAnimatorFactory *larg2) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg2 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->registerSceneNodeAnimatorFactory(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_ISceneManager_getRegisteredSceneNodeAnimatorFactoryCount (irr::scene::ISceneManager *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ISceneManager const *)arg1)->getRegisteredSceneNodeAnimatorFactoryCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimatorFactory *_wrap_ISceneManager_getSceneNodeAnimatorFactory (irr::scene::ISceneManager *larg1, irr::u32 larg2) {
  irr::scene::ISceneNodeAnimatorFactory * lresult = (irr::scene::ISceneNodeAnimatorFactory *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ISceneNodeAnimatorFactory *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNodeAnimatorFactory *)(arg1)->getSceneNodeAnimatorFactory(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimatorFactory *)0;
  }
}


EXPORT irr::c8 *_wrap_ISceneManager_getSceneNodeTypeName (irr::scene::ISceneManager *larg1, irr::scene::ESCENE_NODE_TYPE larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)(arg1)->getSceneNodeTypeName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT irr::c8 *_wrap_ISceneManager_getAnimatorTypeName (irr::scene::ISceneManager *larg1, irr::scene::ESCENE_NODE_ANIMATOR_TYPE larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ESCENE_NODE_ANIMATOR_TYPE arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)(arg1)->getAnimatorTypeName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSceneNode__SWIG_0 (irr::scene::ISceneManager *larg1, char *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  char *arg2 = (char *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSceneNode((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneManager_addSceneNode__SWIG_1 (irr::scene::ISceneManager *larg1, char *larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  char *arg2 = (char *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSceneNode((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createSceneNodeAnimator__SWIG_0 (irr::scene::ISceneManager *larg1, char *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  char *arg2 = (char *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createSceneNodeAnimator((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneManager_createSceneNodeAnimator__SWIG_1 (irr::scene::ISceneManager *larg1, char *larg2) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  char *arg2 = (char *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createSceneNodeAnimator((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneManager *_wrap_ISceneManager_createNewSceneManager__SWIG_0 (irr::scene::ISceneManager *larg1, int larg2) {
  irr::scene::ISceneManager * lresult = (irr::scene::ISceneManager *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  bool arg2 ;
  irr::scene::ISceneManager *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (irr::scene::ISceneManager *)(arg1)->createNewSceneManager(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneManager *)0;
  }
}


EXPORT irr::scene::ISceneManager *_wrap_ISceneManager_createNewSceneManager__SWIG_1 (irr::scene::ISceneManager *larg1) {
  irr::scene::ISceneManager * lresult = (irr::scene::ISceneManager *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneManager *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneManager *)(arg1)->createNewSceneManager();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneManager *)0;
  }
}


EXPORT int _wrap_ISceneManager_saveScene__SWIG_0 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneUserDataSerializer *larg3, irr::scene::ISceneNode *larg4) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->saveScene((irr::io::path const &)*arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_saveScene__SWIG_1 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneUserDataSerializer *larg3) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->saveScene((irr::io::path const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_saveScene__SWIG_2 (irr::scene::ISceneManager *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->saveScene((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_saveScene__SWIG_3 (irr::scene::ISceneManager *larg1, irr::io::IWriteFile *larg2, irr::scene::ISceneUserDataSerializer *larg3, irr::scene::ISceneNode *larg4) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->saveScene(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_saveScene__SWIG_4 (irr::scene::ISceneManager *larg1, irr::io::IWriteFile *larg2, irr::scene::ISceneUserDataSerializer *larg3) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->saveScene(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_saveScene__SWIG_5 (irr::scene::ISceneManager *larg1, irr::io::IWriteFile *larg2) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IWriteFile *arg2 = (irr::io::IWriteFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->saveScene(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_saveScene__SWIG_6 (irr::scene::ISceneManager *larg1, irr::io::IXMLWriter *larg2, irr::io::path *larg3, irr::scene::ISceneUserDataSerializer *larg4, irr::scene::ISceneNode *larg5) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  irr::io::path *arg3 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg4 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg5 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (bool)(arg1)->saveScene(arg2,(irr::io::path const &)*arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_saveScene__SWIG_7 (irr::scene::ISceneManager *larg1, irr::io::IXMLWriter *larg2, irr::io::path *larg3, irr::scene::ISceneUserDataSerializer *larg4) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  irr::io::path *arg3 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg4 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->saveScene(arg2,(irr::io::path const &)*arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_saveScene__SWIG_8 (irr::scene::ISceneManager *larg1, irr::io::IXMLWriter *larg2, irr::io::path *larg3) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IXMLWriter *arg2 = (irr::io::IXMLWriter *) 0 ;
  irr::io::path *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->saveScene(arg2,(irr::io::path const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_loadScene__SWIG_0 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneUserDataSerializer *larg3, irr::scene::ISceneNode *larg4) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->loadScene((irr::io::path const &)*arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_loadScene__SWIG_1 (irr::scene::ISceneManager *larg1, irr::io::path *larg2, irr::scene::ISceneUserDataSerializer *larg3) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->loadScene((irr::io::path const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_loadScene__SWIG_2 (irr::scene::ISceneManager *larg1, irr::io::path *larg2) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::path *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->loadScene((irr::io::path const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_loadScene__SWIG_3 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneUserDataSerializer *larg3, irr::scene::ISceneNode *larg4) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg4 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->loadScene(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_loadScene__SWIG_4 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2, irr::scene::ISceneUserDataSerializer *larg3) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::scene::ISceneUserDataSerializer *arg3 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->loadScene(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ISceneManager_loadScene__SWIG_5 (irr::scene::ISceneManager *larg1, irr::io::IReadFile *larg2) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->loadScene(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::scene::IMeshWriter *_wrap_ISceneManager_createMeshWriter (irr::scene::ISceneManager *larg1, irr::scene::EMESH_WRITER_TYPE larg2) {
  irr::scene::IMeshWriter * lresult = (irr::scene::IMeshWriter *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::EMESH_WRITER_TYPE arg2 ;
  irr::scene::IMeshWriter *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::IMeshWriter *)(arg1)->createMeshWriter(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshWriter *)0;
  }
}


EXPORT irr::scene::ISkinnedMesh *_wrap_ISceneManager_createSkinnedMesh (irr::scene::ISceneManager *larg1) {
  irr::scene::ISkinnedMesh * lresult = (irr::scene::ISkinnedMesh *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISkinnedMesh *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISkinnedMesh *)(arg1)->createSkinnedMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISkinnedMesh *)0;
  }
}


EXPORT void _wrap_ISceneManager_setAmbientLight (irr::scene::ISceneManager *larg1, irr::video::SColorf *larg2) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::SColorf *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAmbientLight((irr::video::SColorf const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColorf *_wrap_ISceneManager_getAmbientLight (irr::scene::ISceneManager *larg1) {
  irr::video::SColorf * lresult = (irr::video::SColorf *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::video::SColorf *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::SColorf *) &((irr::scene::ISceneManager const *)arg1)->getAmbientLight();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::SColorf *)0;
  }
}


EXPORT void _wrap_ISceneManager_setLightManager (irr::scene::ISceneManager *larg1, irr::scene::ILightManager *larg2) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ILightManager *arg2 = (irr::scene::ILightManager *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLightManager(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::IGeometryCreator *_wrap_ISceneManager_getGeometryCreator (irr::scene::ISceneManager *larg1) {
  irr::scene::IGeometryCreator * lresult = (irr::scene::IGeometryCreator *)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::IGeometryCreator *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IGeometryCreator *)((irr::scene::ISceneManager const *)arg1)->getGeometryCreator();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IGeometryCreator *)0;
  }
}


EXPORT int _wrap_ISceneManager_isCulled (irr::scene::ISceneManager *larg1, irr::scene::ISceneNode *larg2) {
  int lresult = (int)0 ;
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::scene::ISceneManager const *)arg1)->isCulled((irr::scene::ISceneNode const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_ISceneManager (irr::scene::ISceneManager *larg1) {
  irr::scene::ISceneManager *arg1 = (irr::scene::ISceneManager *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_ISceneNodeAnimatorCameraFPS_getMoveSpeed (irr::scene::ISceneNodeAnimatorCameraFPS *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ISceneNodeAnimatorCameraFPS *arg1 = (irr::scene::ISceneNodeAnimatorCameraFPS *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::ISceneNodeAnimatorCameraFPS const *)arg1)->getMoveSpeed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCameraFPS_setMoveSpeed (irr::scene::ISceneNodeAnimatorCameraFPS *larg1, irr::f32 larg2) {
  irr::scene::ISceneNodeAnimatorCameraFPS *arg1 = (irr::scene::ISceneNodeAnimatorCameraFPS *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMoveSpeed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_ISceneNodeAnimatorCameraFPS_getRotateSpeed (irr::scene::ISceneNodeAnimatorCameraFPS *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ISceneNodeAnimatorCameraFPS *arg1 = (irr::scene::ISceneNodeAnimatorCameraFPS *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::ISceneNodeAnimatorCameraFPS const *)arg1)->getRotateSpeed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCameraFPS_setRotateSpeed (irr::scene::ISceneNodeAnimatorCameraFPS *larg1, irr::f32 larg2) {
  irr::scene::ISceneNodeAnimatorCameraFPS *arg1 = (irr::scene::ISceneNodeAnimatorCameraFPS *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRotateSpeed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCameraFPS_setKeyMap__SWIG_0 (irr::scene::ISceneNodeAnimatorCameraFPS *larg1, irr::SKeyMap *larg2, irr::u32 larg3) {
  irr::scene::ISceneNodeAnimatorCameraFPS *arg1 = (irr::scene::ISceneNodeAnimatorCameraFPS *) 0 ;
  irr::SKeyMap *arg2 = (irr::SKeyMap *) 0 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setKeyMap(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCameraFPS_setKeyMap__SWIG_1 (irr::scene::ISceneNodeAnimatorCameraFPS *larg1, irr::core::array< irr::SKeyMap,irr::core::irrAllocator< irr::SKeyMap > > *larg2) {
  irr::scene::ISceneNodeAnimatorCameraFPS *arg1 = (irr::scene::ISceneNodeAnimatorCameraFPS *) 0 ;
  irr::core::array< irr::SKeyMap,irr::core::irrAllocator< irr::SKeyMap > > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setKeyMap((irr::core::array< irr::SKeyMap,irr::core::irrAllocator< irr::SKeyMap > > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::array< irr::SKeyMap,irr::core::irrAllocator< irr::SKeyMap > > *_wrap_ISceneNodeAnimatorCameraFPS_getKeyMap (irr::scene::ISceneNodeAnimatorCameraFPS *larg1) {
  irr::core::array< irr::SKeyMap,irr::core::irrAllocator< irr::SKeyMap > > * lresult = (irr::core::array< irr::SKeyMap,irr::core::irrAllocator< irr::SKeyMap > > *)0 ;
  irr::scene::ISceneNodeAnimatorCameraFPS *arg1 = (irr::scene::ISceneNodeAnimatorCameraFPS *) 0 ;
  irr::core::array< irr::SKeyMap,irr::core::irrAllocator< irr::SKeyMap > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::array< irr::SKeyMap,irr::core::irrAllocator< irr::SKeyMap > > *) &((irr::scene::ISceneNodeAnimatorCameraFPS const *)arg1)->getKeyMap();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::SKeyMap,irr::core::irrAllocator< irr::SKeyMap > > *)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCameraFPS_setVerticalMovement (irr::scene::ISceneNodeAnimatorCameraFPS *larg1, int larg2) {
  irr::scene::ISceneNodeAnimatorCameraFPS *arg1 = (irr::scene::ISceneNodeAnimatorCameraFPS *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setVerticalMovement(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCameraFPS_setInvertMouse (irr::scene::ISceneNodeAnimatorCameraFPS *larg1, int larg2) {
  irr::scene::ISceneNodeAnimatorCameraFPS *arg1 = (irr::scene::ISceneNodeAnimatorCameraFPS *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setInvertMouse(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_ISceneNodeAnimatorCameraFPS (irr::scene::ISceneNodeAnimatorCameraFPS *larg1) {
  irr::scene::ISceneNodeAnimatorCameraFPS *arg1 = (irr::scene::ISceneNodeAnimatorCameraFPS *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_ISceneNodeAnimatorCameraMaya_getMoveSpeed (irr::scene::ISceneNodeAnimatorCameraMaya *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ISceneNodeAnimatorCameraMaya *arg1 = (irr::scene::ISceneNodeAnimatorCameraMaya *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::ISceneNodeAnimatorCameraMaya const *)arg1)->getMoveSpeed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCameraMaya_setMoveSpeed (irr::scene::ISceneNodeAnimatorCameraMaya *larg1, irr::f32 larg2) {
  irr::scene::ISceneNodeAnimatorCameraMaya *arg1 = (irr::scene::ISceneNodeAnimatorCameraMaya *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setMoveSpeed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_ISceneNodeAnimatorCameraMaya_getRotateSpeed (irr::scene::ISceneNodeAnimatorCameraMaya *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ISceneNodeAnimatorCameraMaya *arg1 = (irr::scene::ISceneNodeAnimatorCameraMaya *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::ISceneNodeAnimatorCameraMaya const *)arg1)->getRotateSpeed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCameraMaya_setRotateSpeed (irr::scene::ISceneNodeAnimatorCameraMaya *larg1, irr::f32 larg2) {
  irr::scene::ISceneNodeAnimatorCameraMaya *arg1 = (irr::scene::ISceneNodeAnimatorCameraMaya *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setRotateSpeed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_ISceneNodeAnimatorCameraMaya_getZoomSpeed (irr::scene::ISceneNodeAnimatorCameraMaya *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ISceneNodeAnimatorCameraMaya *arg1 = (irr::scene::ISceneNodeAnimatorCameraMaya *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::ISceneNodeAnimatorCameraMaya const *)arg1)->getZoomSpeed();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCameraMaya_setZoomSpeed (irr::scene::ISceneNodeAnimatorCameraMaya *larg1, irr::f32 larg2) {
  irr::scene::ISceneNodeAnimatorCameraMaya *arg1 = (irr::scene::ISceneNodeAnimatorCameraMaya *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setZoomSpeed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::f32 _wrap_ISceneNodeAnimatorCameraMaya_getDistance (irr::scene::ISceneNodeAnimatorCameraMaya *larg1) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ISceneNodeAnimatorCameraMaya *arg1 = (irr::scene::ISceneNodeAnimatorCameraMaya *) 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  try {
    result = (irr::f32)((irr::scene::ISceneNodeAnimatorCameraMaya const *)arg1)->getDistance();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCameraMaya_setDistance (irr::scene::ISceneNodeAnimatorCameraMaya *larg1, irr::f32 larg2) {
  irr::scene::ISceneNodeAnimatorCameraMaya *arg1 = (irr::scene::ISceneNodeAnimatorCameraMaya *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDistance(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_ISceneNodeAnimatorCameraMaya (irr::scene::ISceneNodeAnimatorCameraMaya *larg1) {
  irr::scene::ISceneNodeAnimatorCameraMaya *arg1 = (irr::scene::ISceneNodeAnimatorCameraMaya *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ICollisionCallback_onCollision (irr::scene::ICollisionCallback *larg1, irr::scene::ISceneNodeAnimatorCollisionResponse *larg2) {
  int lresult = (int)0 ;
  irr::scene::ICollisionCallback *arg1 = (irr::scene::ICollisionCallback *) 0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->onCollision((irr::scene::ISceneNodeAnimatorCollisionResponse const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_ICollisionCallback (irr::scene::ICollisionCallback *larg1) {
  irr::scene::ICollisionCallback *arg1 = (irr::scene::ICollisionCallback *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_ISceneNodeAnimatorCollisionResponse (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ISceneNodeAnimatorCollisionResponse_isFalling (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  int lresult = (int)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->isFalling();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCollisionResponse_setEllipsoidRadius (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1, irr::core::vector3df *larg2) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setEllipsoidRadius((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneNodeAnimatorCollisionResponse_getEllipsoidRadius (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  try {
    result = ((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getEllipsoidRadius();
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCollisionResponse_setGravity (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1, irr::core::vector3df *larg2) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setGravity((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneNodeAnimatorCollisionResponse_getGravity (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  try {
    result = ((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getGravity();
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCollisionResponse_jump (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1, irr::f32 larg2) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->jump(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCollisionResponse_setAnimateTarget (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1, int larg2) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setAnimateTarget(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ISceneNodeAnimatorCollisionResponse_getAnimateTarget (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  int lresult = (int)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getAnimateTarget();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCollisionResponse_setEllipsoidTranslation (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1, irr::core::vector3df *larg2) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setEllipsoidTranslation((irr::core::vector3df const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneNodeAnimatorCollisionResponse_getEllipsoidTranslation (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df result;
  
  arg1 = larg1;
  try {
    result = ((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getEllipsoidTranslation();
    lresult = new irr::core::vector3df(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCollisionResponse_setWorld (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1, irr::scene::ITriangleSelector *larg2) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ITriangleSelector *arg2 = (irr::scene::ITriangleSelector *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setWorld(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ITriangleSelector *_wrap_ISceneNodeAnimatorCollisionResponse_getWorld (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  irr::scene::ITriangleSelector * lresult = (irr::scene::ITriangleSelector *)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ITriangleSelector *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ITriangleSelector *)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getWorld();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ITriangleSelector *)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCollisionResponse_setTargetNode (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setTargetNode(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneNodeAnimatorCollisionResponse_getTargetNode (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneNode *)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getTargetNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT int _wrap_ISceneNodeAnimatorCollisionResponse_collisionOccurred (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  int lresult = (int)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->collisionOccurred();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneNodeAnimatorCollisionResponse_getCollisionPoint (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getCollisionPoint();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::core::triangle3df *_wrap_ISceneNodeAnimatorCollisionResponse_getCollisionTriangle (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  irr::core::triangle3df * lresult = (irr::core::triangle3df *)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::triangle3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::triangle3df *) &((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getCollisionTriangle();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::triangle3df *)0;
  }
}


EXPORT irr::core::vector3df *_wrap_ISceneNodeAnimatorCollisionResponse_getCollisionResultPosition (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getCollisionResultPosition();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneNodeAnimatorCollisionResponse_getCollisionNode (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::ISceneNode *)((irr::scene::ISceneNodeAnimatorCollisionResponse const *)arg1)->getCollisionNode();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorCollisionResponse_setCollisionCallback (irr::scene::ISceneNodeAnimatorCollisionResponse *larg1, irr::scene::ICollisionCallback *larg2) {
  irr::scene::ISceneNodeAnimatorCollisionResponse *arg1 = (irr::scene::ISceneNodeAnimatorCollisionResponse *) 0 ;
  irr::scene::ICollisionCallback *arg2 = (irr::scene::ICollisionCallback *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCollisionCallback(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneNodeAnimatorFactory_createSceneNodeAnimator__SWIG_0 (irr::scene::ISceneNodeAnimatorFactory *larg1, irr::scene::ESCENE_NODE_ANIMATOR_TYPE larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  irr::scene::ESCENE_NODE_ANIMATOR_TYPE arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createSceneNodeAnimator(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::scene::ISceneNodeAnimator *_wrap_ISceneNodeAnimatorFactory_createSceneNodeAnimator__SWIG_1 (irr::scene::ISceneNodeAnimatorFactory *larg1, irr::c8 *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ISceneNodeAnimator * lresult = (irr::scene::ISceneNodeAnimator *)0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNodeAnimator *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNodeAnimator *)(arg1)->createSceneNodeAnimator((irr::c8 const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNodeAnimator *)0;
  }
}


EXPORT irr::u32 _wrap_ISceneNodeAnimatorFactory_getCreatableSceneNodeAnimatorTypeCount (irr::scene::ISceneNodeAnimatorFactory *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ISceneNodeAnimatorFactory const *)arg1)->getCreatableSceneNodeAnimatorTypeCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::scene::ESCENE_NODE_ANIMATOR_TYPE _wrap_ISceneNodeAnimatorFactory_getCreateableSceneNodeAnimatorType (irr::scene::ISceneNodeAnimatorFactory *larg1, irr::u32 larg2) {
  irr::scene::ESCENE_NODE_ANIMATOR_TYPE lresult = (irr::scene::ESCENE_NODE_ANIMATOR_TYPE)0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ESCENE_NODE_ANIMATOR_TYPE result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ESCENE_NODE_ANIMATOR_TYPE)((irr::scene::ISceneNodeAnimatorFactory const *)arg1)->getCreateableSceneNodeAnimatorType(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ESCENE_NODE_ANIMATOR_TYPE)0;
  }
}


EXPORT irr::c8 *_wrap_ISceneNodeAnimatorFactory_getCreateableSceneNodeAnimatorTypeName__SWIG_0 (irr::scene::ISceneNodeAnimatorFactory *larg1, irr::u32 larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  irr::u32 arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)((irr::scene::ISceneNodeAnimatorFactory const *)arg1)->getCreateableSceneNodeAnimatorTypeName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT irr::c8 *_wrap_ISceneNodeAnimatorFactory_getCreateableSceneNodeAnimatorTypeName__SWIG_1 (irr::scene::ISceneNodeAnimatorFactory *larg1, irr::scene::ESCENE_NODE_ANIMATOR_TYPE larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  irr::scene::ESCENE_NODE_ANIMATOR_TYPE arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)((irr::scene::ISceneNodeAnimatorFactory const *)arg1)->getCreateableSceneNodeAnimatorTypeName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT void _wrap_delete_ISceneNodeAnimatorFactory (irr::scene::ISceneNodeAnimatorFactory *larg1) {
  irr::scene::ISceneNodeAnimatorFactory *arg1 = (irr::scene::ISceneNodeAnimatorFactory *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneNodeFactory_addSceneNode__SWIG_0 (irr::scene::ISceneNodeFactory *larg1, irr::scene::ESCENE_NODE_TYPE larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSceneNode(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneNodeFactory_addSceneNode__SWIG_1 (irr::scene::ISceneNodeFactory *larg1, irr::scene::ESCENE_NODE_TYPE larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSceneNode(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneNodeFactory_addSceneNode__SWIG_2 (irr::scene::ISceneNodeFactory *larg1, irr::c8 *larg2, irr::scene::ISceneNode *larg3) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::ISceneNode *arg3 = (irr::scene::ISceneNode *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSceneNode((irr::c8 const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::scene::ISceneNode *_wrap_ISceneNodeFactory_addSceneNode__SWIG_3 (irr::scene::ISceneNodeFactory *larg1, irr::c8 *larg2) {
  irr::scene::ISceneNode * lresult = (irr::scene::ISceneNode *)0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::c8 *arg2 = (irr::c8 *) 0 ;
  irr::scene::ISceneNode *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ISceneNode *)(arg1)->addSceneNode((irr::c8 const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ISceneNode *)0;
  }
}


EXPORT irr::u32 _wrap_ISceneNodeFactory_getCreatableSceneNodeTypeCount (irr::scene::ISceneNodeFactory *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ISceneNodeFactory const *)arg1)->getCreatableSceneNodeTypeCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::scene::ESCENE_NODE_TYPE _wrap_ISceneNodeFactory_getCreateableSceneNodeType (irr::scene::ISceneNodeFactory *larg1, irr::u32 larg2) {
  irr::scene::ESCENE_NODE_TYPE lresult = (irr::scene::ESCENE_NODE_TYPE)0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::u32 arg2 ;
  irr::scene::ESCENE_NODE_TYPE result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::scene::ESCENE_NODE_TYPE)((irr::scene::ISceneNodeFactory const *)arg1)->getCreateableSceneNodeType(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::ESCENE_NODE_TYPE)0;
  }
}


EXPORT irr::c8 *_wrap_ISceneNodeFactory_getCreateableSceneNodeTypeName__SWIG_0 (irr::scene::ISceneNodeFactory *larg1, irr::u32 larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::u32 arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)((irr::scene::ISceneNodeFactory const *)arg1)->getCreateableSceneNodeTypeName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT irr::c8 *_wrap_ISceneNodeFactory_getCreateableSceneNodeTypeName__SWIG_1 (irr::scene::ISceneNodeFactory *larg1, irr::scene::ESCENE_NODE_TYPE larg2) {
  irr::c8 * lresult = (irr::c8 *)0 ;
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  irr::scene::ESCENE_NODE_TYPE arg2 ;
  irr::c8 *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::c8 *)((irr::scene::ISceneNodeFactory const *)arg1)->getCreateableSceneNodeTypeName(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::c8 *)0;
  }
}


EXPORT void _wrap_delete_ISceneNodeFactory (irr::scene::ISceneNodeFactory *larg1) {
  irr::scene::ISceneNodeFactory *arg1 = (irr::scene::ISceneNodeFactory *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_ISceneUserDataSerializer (irr::scene::ISceneUserDataSerializer *larg1) {
  irr::scene::ISceneUserDataSerializer *arg1 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneUserDataSerializer_OnCreateNode (irr::scene::ISceneUserDataSerializer *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ISceneUserDataSerializer *arg1 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->OnCreateNode(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneUserDataSerializer_OnReadUserData (irr::scene::ISceneUserDataSerializer *larg1, irr::scene::ISceneNode *larg2, irr::io::IAttributes *larg3) {
  irr::scene::ISceneUserDataSerializer *arg1 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *arg3 = (irr::io::IAttributes *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->OnReadUserData(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::io::IAttributes *_wrap_ISceneUserDataSerializer_createUserData (irr::scene::ISceneUserDataSerializer *larg1, irr::scene::ISceneNode *larg2) {
  irr::io::IAttributes * lresult = (irr::io::IAttributes *)0 ;
  irr::scene::ISceneUserDataSerializer *arg1 = (irr::scene::ISceneUserDataSerializer *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  irr::io::IAttributes *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::io::IAttributes *)(arg1)->createUserData(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::IAttributes *)0;
  }
}


EXPORT void _wrap_IShaderConstantSetCallBack_OnSetMaterial (irr::video::IShaderConstantSetCallBack *larg1, irr::video::SMaterial *larg2) {
  irr::video::IShaderConstantSetCallBack *arg1 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::SMaterial *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->OnSetMaterial((irr::video::SMaterial const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IShaderConstantSetCallBack_OnSetConstants (irr::video::IShaderConstantSetCallBack *larg1, irr::video::IMaterialRendererServices *larg2, irr::s32 larg3) {
  irr::video::IShaderConstantSetCallBack *arg1 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  irr::video::IMaterialRendererServices *arg2 = (irr::video::IMaterialRendererServices *) 0 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->OnSetConstants(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IShaderConstantSetCallBack (irr::video::IShaderConstantSetCallBack *larg1) {
  irr::video::IShaderConstantSetCallBack *arg1 = (irr::video::IShaderConstantSetCallBack *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IShadowVolumeSceneNode_setShadowMesh (irr::scene::IShadowVolumeSceneNode *larg1, irr::scene::IMesh *larg2) {
  irr::scene::IShadowVolumeSceneNode *arg1 = (irr::scene::IShadowVolumeSceneNode *) 0 ;
  irr::scene::IMesh *arg2 = (irr::scene::IMesh *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setShadowMesh((irr::scene::IMesh const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IShadowVolumeSceneNode_updateShadowVolumes (irr::scene::IShadowVolumeSceneNode *larg1) {
  irr::scene::IShadowVolumeSceneNode *arg1 = (irr::scene::IShadowVolumeSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->updateShadowVolumes();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IShadowVolumeSceneNode (irr::scene::IShadowVolumeSceneNode *larg1) {
  irr::scene::IShadowVolumeSceneNode *arg1 = (irr::scene::IShadowVolumeSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::aabbox3d< irr::f32 > *_wrap_ITerrainSceneNode_getBoundingBox__SWIG_0 (irr::scene::ITerrainSceneNode *larg1) {
  irr::core::aabbox3d< irr::f32 > * lresult = (irr::core::aabbox3d< irr::f32 > *)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::aabbox3d< irr::f32 > *) &((irr::scene::ITerrainSceneNode const *)arg1)->getBoundingBox();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3d< irr::f32 > *)0;
  }
}


EXPORT irr::core::aabbox3d< irr::f32 > *_wrap_ITerrainSceneNode_getBoundingBox__SWIG_1 (irr::scene::ITerrainSceneNode *larg1, irr::s32 larg2, irr::s32 larg3) {
  irr::core::aabbox3d< irr::f32 > * lresult = (irr::core::aabbox3d< irr::f32 > *)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::core::aabbox3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::aabbox3d< irr::f32 > *) &((irr::scene::ITerrainSceneNode const *)arg1)->getBoundingBox(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3d< irr::f32 > *)0;
  }
}


EXPORT irr::u32 _wrap_ITerrainSceneNode_getIndexCount (irr::scene::ITerrainSceneNode *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::ITerrainSceneNode const *)arg1)->getIndexCount();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::scene::IMesh *_wrap_ITerrainSceneNode_getMesh (irr::scene::ITerrainSceneNode *larg1) {
  irr::scene::IMesh * lresult = (irr::scene::IMesh *)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::scene::IMesh *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMesh *)(arg1)->getMesh();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMesh *)0;
  }
}


EXPORT irr::scene::IMeshBuffer *_wrap_ITerrainSceneNode_getRenderBuffer (irr::scene::ITerrainSceneNode *larg1) {
  irr::scene::IMeshBuffer * lresult = (irr::scene::IMeshBuffer *)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::scene::IMeshBuffer *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::scene::IMeshBuffer *)(arg1)->getRenderBuffer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::IMeshBuffer *)0;
  }
}


EXPORT void _wrap_ITerrainSceneNode_getMeshBufferForLOD__SWIG_0 (irr::scene::ITerrainSceneNode *larg1, irr::scene::IDynamicMeshBuffer *larg2, irr::s32 larg3) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::scene::IDynamicMeshBuffer *arg2 = 0 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((irr::scene::ITerrainSceneNode const *)arg1)->getMeshBufferForLOD(*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITerrainSceneNode_getMeshBufferForLOD__SWIG_1 (irr::scene::ITerrainSceneNode *larg1, irr::scene::IDynamicMeshBuffer *larg2) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::scene::IDynamicMeshBuffer *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((irr::scene::ITerrainSceneNode const *)arg1)->getMeshBufferForLOD(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_ITerrainSceneNode_getIndicesForPatch__SWIG_0 (irr::scene::ITerrainSceneNode *larg1, irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *larg2, irr::s32 larg3, irr::s32 larg4, irr::s32 larg5) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 arg5 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::s32)(arg1)->getIndicesForPatch(*arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_ITerrainSceneNode_getIndicesForPatch__SWIG_1 (irr::scene::ITerrainSceneNode *larg1, irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *larg2, irr::s32 larg3, irr::s32 larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)(arg1)->getIndicesForPatch(*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_ITerrainSceneNode_getCurrentLODOfPatches (irr::scene::ITerrainSceneNode *larg1, irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::scene::ITerrainSceneNode const *)arg1)->getCurrentLODOfPatches(*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_ITerrainSceneNode_setLODOfPatch__SWIG_0 (irr::scene::ITerrainSceneNode *larg1, irr::s32 larg2, irr::s32 larg3, irr::s32 larg4) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setLODOfPatch(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITerrainSceneNode_setLODOfPatch__SWIG_1 (irr::scene::ITerrainSceneNode *larg1, irr::s32 larg2, irr::s32 larg3) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setLODOfPatch(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3df *_wrap_ITerrainSceneNode_getTerrainCenter (irr::scene::ITerrainSceneNode *larg1) {
  irr::core::vector3df * lresult = (irr::core::vector3df *)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::core::vector3df *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3df *) &((irr::scene::ITerrainSceneNode const *)arg1)->getTerrainCenter();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3df *)0;
  }
}


EXPORT irr::f32 _wrap_ITerrainSceneNode_getHeight (irr::scene::ITerrainSceneNode *larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::f32 lresult = (irr::f32)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::f32)((irr::scene::ITerrainSceneNode const *)arg1)->getHeight(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT void _wrap_ITerrainSceneNode_setCameraMovementDelta (irr::scene::ITerrainSceneNode *larg1, irr::f32 larg2) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCameraMovementDelta(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITerrainSceneNode_setCameraRotationDelta (irr::scene::ITerrainSceneNode *larg1, irr::f32 larg2) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setCameraRotationDelta(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITerrainSceneNode_setDynamicSelectorUpdate (irr::scene::ITerrainSceneNode *larg1, int larg2) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDynamicSelectorUpdate(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ITerrainSceneNode_overrideLODDistance (irr::scene::ITerrainSceneNode *larg1, irr::s32 larg2, irr::f64 larg3) {
  int lresult = (int)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::s32 arg2 ;
  irr::f64 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->overrideLODDistance(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ITerrainSceneNode_scaleTexture__SWIG_0 (irr::scene::ITerrainSceneNode *larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->scaleTexture(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITerrainSceneNode_scaleTexture__SWIG_1 (irr::scene::ITerrainSceneNode *larg1, irr::f32 larg2) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::f32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->scaleTexture(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITerrainSceneNode_scaleTexture__SWIG_2 (irr::scene::ITerrainSceneNode *larg1) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->scaleTexture();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ITerrainSceneNode_loadHeightMap__SWIG_0 (irr::scene::ITerrainSceneNode *larg1, irr::io::IReadFile *larg2, irr::video::SColor *larg3, irr::s32 larg4) {
  int lresult = (int)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::video::SColor arg3 ;
  irr::s32 arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = larg4;
  try {
    result = (bool)(arg1)->loadHeightMap(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ITerrainSceneNode_loadHeightMap__SWIG_1 (irr::scene::ITerrainSceneNode *larg1, irr::io::IReadFile *larg2, irr::video::SColor *larg3) {
  int lresult = (int)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::video::SColor arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (bool)(arg1)->loadHeightMap(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ITerrainSceneNode_loadHeightMap__SWIG_2 (irr::scene::ITerrainSceneNode *larg1, irr::io::IReadFile *larg2) {
  int lresult = (int)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->loadHeightMap(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_0 (irr::scene::ITerrainSceneNode *larg1, irr::io::IReadFile *larg2, irr::s32 larg3, int larg4, int larg5, irr::s32 larg6, irr::video::SColor *larg7, irr::s32 larg8) {
  int lresult = (int)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::s32 arg6 ;
  irr::video::SColor arg7 ;
  irr::s32 arg8 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  arg7 = *larg7;
  arg8 = larg8;
  try {
    result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_1 (irr::scene::ITerrainSceneNode *larg1, irr::io::IReadFile *larg2, irr::s32 larg3, int larg4, int larg5, irr::s32 larg6, irr::video::SColor *larg7) {
  int lresult = (int)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::s32 arg6 ;
  irr::video::SColor arg7 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  arg7 = *larg7;
  try {
    result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_2 (irr::scene::ITerrainSceneNode *larg1, irr::io::IReadFile *larg2, irr::s32 larg3, int larg4, int larg5, irr::s32 larg6) {
  int lresult = (int)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  irr::s32 arg6 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = larg6;
  try {
    result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3,arg4,arg5,arg6);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_3 (irr::scene::ITerrainSceneNode *larg1, irr::io::IReadFile *larg2, irr::s32 larg3, int larg4, int larg5) {
  int lresult = (int)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  try {
    result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3,arg4,arg5);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_4 (irr::scene::ITerrainSceneNode *larg1, irr::io::IReadFile *larg2, irr::s32 larg3, int larg4) {
  int lresult = (int)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_5 (irr::scene::ITerrainSceneNode *larg1, irr::io::IReadFile *larg2, irr::s32 larg3) {
  int lresult = (int)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  irr::s32 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->loadHeightMapRAW(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_6 (irr::scene::ITerrainSceneNode *larg1, irr::io::IReadFile *larg2) {
  int lresult = (int)0 ;
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  irr::io::IReadFile *arg2 = (irr::io::IReadFile *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->loadHeightMapRAW(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_ITerrainSceneNode (irr::scene::ITerrainSceneNode *larg1) {
  irr::scene::ITerrainSceneNode *arg1 = (irr::scene::ITerrainSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITextSceneNode_setText (irr::scene::ITextSceneNode *larg1, wchar_t *larg2) {
  irr::scene::ITextSceneNode *arg1 = (irr::scene::ITextSceneNode *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setText((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ITextSceneNode_setTextColor (irr::scene::ITextSceneNode *larg1, irr::video::SColor *larg2) {
  irr::scene::ITextSceneNode *arg1 = (irr::scene::ITextSceneNode *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setTextColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_ITextSceneNode (irr::scene::ITextSceneNode *larg1) {
  irr::scene::ITextSceneNode *arg1 = (irr::scene::ITextSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVolumeLightSceneNode_setSubDivideU (irr::scene::IVolumeLightSceneNode *larg1, irr::u32 larg2) {
  irr::scene::IVolumeLightSceneNode *arg1 = (irr::scene::IVolumeLightSceneNode *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSubDivideU(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVolumeLightSceneNode_setSubDivideV (irr::scene::IVolumeLightSceneNode *larg1, irr::u32 larg2) {
  irr::scene::IVolumeLightSceneNode *arg1 = (irr::scene::IVolumeLightSceneNode *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setSubDivideV(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_IVolumeLightSceneNode_getSubDivideU (irr::scene::IVolumeLightSceneNode *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IVolumeLightSceneNode *arg1 = (irr::scene::IVolumeLightSceneNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IVolumeLightSceneNode const *)arg1)->getSubDivideU();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_IVolumeLightSceneNode_getSubDivideV (irr::scene::IVolumeLightSceneNode *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::scene::IVolumeLightSceneNode *arg1 = (irr::scene::IVolumeLightSceneNode *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::scene::IVolumeLightSceneNode const *)arg1)->getSubDivideV();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_IVolumeLightSceneNode_setFootColor (irr::scene::IVolumeLightSceneNode *larg1, irr::video::SColor const *larg2) {
  irr::scene::IVolumeLightSceneNode *arg1 = (irr::scene::IVolumeLightSceneNode *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setFootColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IVolumeLightSceneNode_setTailColor (irr::scene::IVolumeLightSceneNode *larg1, irr::video::SColor const *larg2) {
  irr::scene::IVolumeLightSceneNode *arg1 = (irr::scene::IVolumeLightSceneNode *) 0 ;
  irr::video::SColor arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    (arg1)->setTailColor(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::video::SColor *_wrap_IVolumeLightSceneNode_getFootColor (irr::scene::IVolumeLightSceneNode *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::scene::IVolumeLightSceneNode *arg1 = (irr::scene::IVolumeLightSceneNode *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  try {
    result = ((irr::scene::IVolumeLightSceneNode const *)arg1)->getFootColor();
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT irr::video::SColor *_wrap_IVolumeLightSceneNode_getTailColor (irr::scene::IVolumeLightSceneNode *larg1) {
  irr::video::SColor * lresult = (irr::video::SColor *)0 ;
  irr::scene::IVolumeLightSceneNode *arg1 = (irr::scene::IVolumeLightSceneNode *) 0 ;
  irr::video::SColor result;
  
  arg1 = larg1;
  try {
    result = ((irr::scene::IVolumeLightSceneNode const *)arg1)->getTailColor();
    lresult = new irr::video::SColor(result);
    return lresult;
  } catch (...) {
    return (irr::video::SColor *)0;
  }
}


EXPORT void _wrap_delete_IVolumeLightSceneNode (irr::scene::IVolumeLightSceneNode *larg1) {
  irr::scene::IVolumeLightSceneNode *arg1 = (irr::scene::IVolumeLightSceneNode *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_IWriteFile_write (irr::io::IWriteFile *larg1, void *larg2, irr::u32 larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  void *arg2 = (void *) 0 ;
  irr::u32 arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->write((void const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT int _wrap_IWriteFile_seek__SWIG_0 (irr::io::IWriteFile *larg1, long larg2, int larg3) {
  int lresult = (int)0 ;
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  long arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (bool)(arg1)->seek(arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_IWriteFile_seek__SWIG_1 (irr::io::IWriteFile *larg1, long larg2) {
  int lresult = (int)0 ;
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  long arg2 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->seek(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT long _wrap_IWriteFile_getPos (irr::io::IWriteFile *larg1) {
  long lresult = (long)0 ;
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  long result;
  
  arg1 = larg1;
  try {
    result = (long)((irr::io::IWriteFile const *)arg1)->getPos();
    lresult = result;
    return lresult;
  } catch (...) {
    return (long)0;
  }
}


EXPORT irr::io::path *_wrap_IWriteFile_getFileName (irr::io::IWriteFile *larg1) {
  irr::io::path * lresult = (irr::io::path *)0 ;
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  irr::io::path *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::io::path *) &((irr::io::IWriteFile const *)arg1)->getFileName();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::io::path *)0;
  }
}


EXPORT void _wrap_delete_IWriteFile (irr::io::IWriteFile *larg1) {
  irr::io::IWriteFile *arg1 = (irr::io::IWriteFile *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeXMLHeader (irr::io::IXMLWriter *larg1) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->writeXMLHeader();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_0 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3, wchar_t *larg4, wchar_t *larg5, wchar_t *larg6, wchar_t *larg7, wchar_t *larg8, wchar_t *larg9, wchar_t *larg10, wchar_t *larg11, wchar_t *larg12, wchar_t *larg13) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  wchar_t *arg9 = (wchar_t *) 0 ;
  wchar_t *arg10 = (wchar_t *) 0 ;
  wchar_t *arg11 = (wchar_t *) 0 ;
  wchar_t *arg12 = (wchar_t *) 0 ;
  wchar_t *arg13 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  arg13 = larg13;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8,(wchar_t const *)arg9,(wchar_t const *)arg10,(wchar_t const *)arg11,(wchar_t const *)arg12,(wchar_t const *)arg13);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_1 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3, wchar_t *larg4, wchar_t *larg5, wchar_t *larg6, wchar_t *larg7, wchar_t *larg8, wchar_t *larg9, wchar_t *larg10, wchar_t *larg11, wchar_t *larg12) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  wchar_t *arg9 = (wchar_t *) 0 ;
  wchar_t *arg10 = (wchar_t *) 0 ;
  wchar_t *arg11 = (wchar_t *) 0 ;
  wchar_t *arg12 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  arg12 = larg12;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8,(wchar_t const *)arg9,(wchar_t const *)arg10,(wchar_t const *)arg11,(wchar_t const *)arg12);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_2 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3, wchar_t *larg4, wchar_t *larg5, wchar_t *larg6, wchar_t *larg7, wchar_t *larg8, wchar_t *larg9, wchar_t *larg10, wchar_t *larg11) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  wchar_t *arg9 = (wchar_t *) 0 ;
  wchar_t *arg10 = (wchar_t *) 0 ;
  wchar_t *arg11 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  arg11 = larg11;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8,(wchar_t const *)arg9,(wchar_t const *)arg10,(wchar_t const *)arg11);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_3 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3, wchar_t *larg4, wchar_t *larg5, wchar_t *larg6, wchar_t *larg7, wchar_t *larg8, wchar_t *larg9, wchar_t *larg10) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  wchar_t *arg9 = (wchar_t *) 0 ;
  wchar_t *arg10 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  arg10 = larg10;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8,(wchar_t const *)arg9,(wchar_t const *)arg10);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_4 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3, wchar_t *larg4, wchar_t *larg5, wchar_t *larg6, wchar_t *larg7, wchar_t *larg8, wchar_t *larg9) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  wchar_t *arg9 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  arg9 = larg9;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8,(wchar_t const *)arg9);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_5 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3, wchar_t *larg4, wchar_t *larg5, wchar_t *larg6, wchar_t *larg7, wchar_t *larg8) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  wchar_t *arg8 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  arg8 = larg8;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7,(wchar_t const *)arg8);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_6 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3, wchar_t *larg4, wchar_t *larg5, wchar_t *larg6, wchar_t *larg7) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  wchar_t *arg7 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6,(wchar_t const *)arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_7 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3, wchar_t *larg4, wchar_t *larg5, wchar_t *larg6) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  wchar_t *arg6 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5,(wchar_t const *)arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_8 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3, wchar_t *larg4, wchar_t *larg5) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4,(wchar_t const *)arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_9 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3, wchar_t *larg4) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  wchar_t *arg4 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3,(wchar_t const *)arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_10 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_11 (irr::io::IXMLWriter *larg1, wchar_t *larg2) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->writeElement((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeElement__SWIG_12 (irr::io::IXMLWriter *larg1, wchar_t *larg2, int larg3, irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *larg4, irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *larg5) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool arg3 ;
  irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *arg4 = 0 ;
  irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->writeElement((wchar_t const *)arg2,arg3,*arg4,*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeComment (irr::io::IXMLWriter *larg1, wchar_t *larg2) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->writeComment((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeClosingTag (irr::io::IXMLWriter *larg1, wchar_t *larg2) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->writeClosingTag((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeText (irr::io::IXMLWriter *larg1, wchar_t *larg2) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->writeText((wchar_t const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_IXMLWriter_writeLineBreak (irr::io::IXMLWriter *larg1) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->writeLineBreak();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_IXMLWriter (irr::io::IXMLWriter *larg1) {
  irr::io::IXMLWriter *arg1 = (irr::io::IXMLWriter *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILightManager_OnPreRender (irr::scene::ILightManager *larg1, irr::core::array< irr::scene::ISceneNode *,irr::core::irrAllocator< irr::scene::ISceneNode * > > *larg2) {
  irr::scene::ILightManager *arg1 = (irr::scene::ILightManager *) 0 ;
  irr::core::array< irr::scene::ISceneNode *,irr::core::irrAllocator< irr::scene::ISceneNode * > > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->OnPreRender(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILightManager_OnPostRender (irr::scene::ILightManager *larg1) {
  irr::scene::ILightManager *arg1 = (irr::scene::ILightManager *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->OnPostRender();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILightManager_OnRenderPassPreRender (irr::scene::ILightManager *larg1, irr::scene::E_SCENE_NODE_RENDER_PASS larg2) {
  irr::scene::ILightManager *arg1 = (irr::scene::ILightManager *) 0 ;
  irr::scene::E_SCENE_NODE_RENDER_PASS arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->OnRenderPassPreRender(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILightManager_OnRenderPassPostRender (irr::scene::ILightManager *larg1, irr::scene::E_SCENE_NODE_RENDER_PASS larg2) {
  irr::scene::ILightManager *arg1 = (irr::scene::ILightManager *) 0 ;
  irr::scene::E_SCENE_NODE_RENDER_PASS arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->OnRenderPassPostRender(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILightManager_OnNodePreRender (irr::scene::ILightManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ILightManager *arg1 = (irr::scene::ILightManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->OnNodePreRender(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ILightManager_OnNodePostRender (irr::scene::ILightManager *larg1, irr::scene::ISceneNode *larg2) {
  irr::scene::ILightManager *arg1 = (irr::scene::ILightManager *) 0 ;
  irr::scene::ISceneNode *arg2 = (irr::scene::ISceneNode *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->OnNodePostRender(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_ILightManager (irr::scene::ILightManager *larg1) {
  irr::scene::ILightManager *arg1 = (irr::scene::ILightManager *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::IrrlichtDevice *_wrap_createDevice (irr::video::E_DRIVER_TYPE larg1, irr::core::dimension2d< irr::u32 > *larg2, irr::u32 larg3, int larg4, int larg5, int larg6, irr::IEventReceiver *larg7) {
  irr::IrrlichtDevice * lresult = (irr::IrrlichtDevice *)0 ;
  irr::video::E_DRIVER_TYPE arg1 = (irr::video::E_DRIVER_TYPE) irr::video::EDT_SOFTWARE ;
  irr::core::dimension2d< irr::u32 > const &arg2_defvalue = (irr::core::dimension2d< irr::u32 >(640,480)) ;
  irr::core::dimension2d< irr::u32 > *arg2 = (irr::core::dimension2d< irr::u32 > *) &arg2_defvalue ;
  irr::u32 arg3 = (irr::u32) 16 ;
  bool arg4 = (bool) false ;
  bool arg5 = (bool) false ;
  bool arg6 = (bool) false ;
  irr::IEventReceiver *arg7 = (irr::IEventReceiver *) 0 ;
  irr::IrrlichtDevice *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  arg7 = larg7;
  try {
    result = (irr::IrrlichtDevice *)irr::createDevice(arg1,(dimension2d< unsigned int > const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::IrrlichtDevice *)0;
  }
}


EXPORT irr::IrrlichtDevice *_wrap_createDeviceEx (irr::SIrrlichtCreationParameters *larg1) {
  irr::IrrlichtDevice * lresult = (irr::IrrlichtDevice *)0 ;
  irr::SIrrlichtCreationParameters *arg1 = 0 ;
  irr::IrrlichtDevice *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::IrrlichtDevice *)irr::createDeviceEx((irr::SIrrlichtCreationParameters const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::IrrlichtDevice *)0;
  }
}


EXPORT CMeshBuffer< irr::video::S3DVertex > *_wrap_new_SMeshBuffer () {
  CMeshBuffer< irr::video::S3DVertex > * lresult = (CMeshBuffer< irr::video::S3DVertex > *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *result = 0 ;
  
  try {
    result = (CMeshBuffer< irr::video::S3DVertex > *)new CMeshBuffer< irr::video::S3DVertex >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (CMeshBuffer< irr::video::S3DVertex > *)0;
  }
}


EXPORT video::SMaterial *_wrap_SMeshBuffer_getMaterial__SWIG_0 (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  video::SMaterial * lresult = (video::SMaterial *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (video::SMaterial *) &((CMeshBuffer< irr::video::S3DVertex > const *)arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (video::SMaterial *)0;
  }
}


EXPORT video::SMaterial *_wrap_SMeshBuffer_getMaterial__SWIG_1 (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  video::SMaterial * lresult = (video::SMaterial *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (video::SMaterial *) &(arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (video::SMaterial *)0;
  }
}


EXPORT void *_wrap_SMeshBuffer_getVertices__SWIG_0 (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  void * lresult = (void *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((CMeshBuffer< irr::video::S3DVertex > const *)arg1)->getVertices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void *_wrap_SMeshBuffer_getVertices__SWIG_1 (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  void * lresult = (void *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)(arg1)->getVertices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT irr::u16 *_wrap_SMeshBuffer_getIndices__SWIG_0 (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  irr::u16 * lresult = (irr::u16 *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u16 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::u16 *)((CMeshBuffer< irr::video::S3DVertex > const *)arg1)->getIndices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16 *)0;
  }
}


EXPORT irr::u16 *_wrap_SMeshBuffer_getIndices__SWIG_1 (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  irr::u16 * lresult = (irr::u16 *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u16 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::u16 *)(arg1)->getIndices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16 *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBuffer_getPosition__SWIG_0 (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &((CMeshBuffer< irr::video::S3DVertex > const *)arg1)->getPosition(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBuffer_getPosition__SWIG_1 (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &(arg1)->getPosition(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBuffer_getNormal__SWIG_0 (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &((CMeshBuffer< irr::video::S3DVertex > const *)arg1)->getNormal(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBuffer_getNormal__SWIG_1 (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &(arg1)->getNormal(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector2df *_wrap_SMeshBuffer_getTCoords__SWIG_0 (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::u32 larg2) {
  core::vector2df * lresult = (core::vector2df *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  core::vector2df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector2df *) &((CMeshBuffer< irr::video::S3DVertex > const *)arg1)->getTCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector2df *)0;
  }
}


EXPORT core::vector2df *_wrap_SMeshBuffer_getTCoords__SWIG_1 (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::u32 larg2) {
  core::vector2df * lresult = (core::vector2df *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  core::vector2df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector2df *) &(arg1)->getTCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector2df *)0;
  }
}


EXPORT void _wrap_SMeshBuffer_append__SWIG_0 (CMeshBuffer< irr::video::S3DVertex > *larg1, void *larg2, irr::u32 larg3, irr::u16 *larg4, irr::u32 larg5) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) (irr::u16 *)0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->append((void const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBuffer_append__SWIG_1 (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::scene::IMeshBuffer *larg2) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) (irr::scene::IMeshBuffer *)0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->append((irr::scene::IMeshBuffer const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBuffer_setHardwareMappingHint__SWIG_0 (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::scene::E_HARDWARE_MAPPING larg2, irr::scene::E_BUFFER_TYPE larg3) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  irr::scene::E_BUFFER_TYPE arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setHardwareMappingHint(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBuffer_setHardwareMappingHint__SWIG_1 (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setHardwareMappingHint(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBuffer_setDirty__SWIG_0 (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::scene::E_BUFFER_TYPE larg2) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::scene::E_BUFFER_TYPE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDirty(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBuffer_setDirty__SWIG_1 (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setDirty();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBuffer_ChangedID_Vertex_set (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::u32 larg2) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ChangedID_Vertex = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_SMeshBuffer_ChangedID_Vertex_get (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32) ((arg1)->ChangedID_Vertex);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_SMeshBuffer_ChangedID_Index_set (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::u32 larg2) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ChangedID_Index = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_SMeshBuffer_ChangedID_Index_get (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32) ((arg1)->ChangedID_Index);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_SMeshBuffer_MappingHint_Vertex_set (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MappingHint_Vertex = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_SMeshBuffer_MappingHint_Vertex_get (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING) ((arg1)->MappingHint_Vertex);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT void _wrap_SMeshBuffer_MappingHint_Index_set (CMeshBuffer< irr::video::S3DVertex > *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MappingHint_Index = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_SMeshBuffer_MappingHint_Index_get (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING) ((arg1)->MappingHint_Index);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT void _wrap_SMeshBuffer_Material_set (CMeshBuffer< irr::video::S3DVertex > *larg1, video::SMaterial *larg2) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  video::SMaterial *arg2 = (video::SMaterial *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Material = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT video::SMaterial *_wrap_SMeshBuffer_Material_get (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  video::SMaterial * lresult = (video::SMaterial *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (video::SMaterial *)& ((arg1)->Material);
    lresult = result;
    return lresult;
  } catch (...) {
    return (video::SMaterial *)0;
  }
}


EXPORT void _wrap_SMeshBuffer_Vertices_set (CMeshBuffer< irr::video::S3DVertex > *larg1, core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > *larg2) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > *arg2 = (core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Vertices = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > *_wrap_SMeshBuffer_Vertices_get (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > * lresult = (core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > *)& ((arg1)->Vertices);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > *)0;
  }
}


EXPORT void _wrap_SMeshBuffer_Indices_set (CMeshBuffer< irr::video::S3DVertex > *larg1, core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *larg2) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *arg2 = (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Indices = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *_wrap_SMeshBuffer_Indices_get (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > * lresult = (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *)& ((arg1)->Indices);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *)0;
  }
}


EXPORT void _wrap_SMeshBuffer_BoundingBox_set (CMeshBuffer< irr::video::S3DVertex > *larg1, core::aabbox3d< irr::f32 > *larg2) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  core::aabbox3d< irr::f32 > *arg2 = (core::aabbox3d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->BoundingBox = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT core::aabbox3d< irr::f32 > *_wrap_SMeshBuffer_BoundingBox_get (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  core::aabbox3d< irr::f32 > * lresult = (core::aabbox3d< irr::f32 > *)0 ;
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  core::aabbox3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (core::aabbox3d< irr::f32 > *)& ((arg1)->BoundingBox);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::aabbox3d< irr::f32 > *)0;
  }
}


EXPORT void _wrap_delete_SMeshBuffer (CMeshBuffer< irr::video::S3DVertex > *larg1) {
  CMeshBuffer< irr::video::S3DVertex > *arg1 = (CMeshBuffer< irr::video::S3DVertex > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT CMeshBuffer< irr::video::S3DVertex2TCoords > *_wrap_new_SMeshBufferLightMap () {
  CMeshBuffer< irr::video::S3DVertex2TCoords > * lresult = (CMeshBuffer< irr::video::S3DVertex2TCoords > *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *result = 0 ;
  
  try {
    result = (CMeshBuffer< irr::video::S3DVertex2TCoords > *)new CMeshBuffer< irr::video::S3DVertex2TCoords >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (CMeshBuffer< irr::video::S3DVertex2TCoords > *)0;
  }
}


EXPORT video::SMaterial *_wrap_SMeshBufferLightMap_getMaterial__SWIG_0 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  video::SMaterial * lresult = (video::SMaterial *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (video::SMaterial *) &((CMeshBuffer< irr::video::S3DVertex2TCoords > const *)arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (video::SMaterial *)0;
  }
}


EXPORT video::SMaterial *_wrap_SMeshBufferLightMap_getMaterial__SWIG_1 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  video::SMaterial * lresult = (video::SMaterial *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (video::SMaterial *) &(arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (video::SMaterial *)0;
  }
}


EXPORT void *_wrap_SMeshBufferLightMap_getVertices__SWIG_0 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  void * lresult = (void *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((CMeshBuffer< irr::video::S3DVertex2TCoords > const *)arg1)->getVertices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void *_wrap_SMeshBufferLightMap_getVertices__SWIG_1 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  void * lresult = (void *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)(arg1)->getVertices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT irr::u16 *_wrap_SMeshBufferLightMap_getIndices__SWIG_0 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  irr::u16 * lresult = (irr::u16 *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u16 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::u16 *)((CMeshBuffer< irr::video::S3DVertex2TCoords > const *)arg1)->getIndices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16 *)0;
  }
}


EXPORT irr::u16 *_wrap_SMeshBufferLightMap_getIndices__SWIG_1 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  irr::u16 * lresult = (irr::u16 *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u16 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::u16 *)(arg1)->getIndices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16 *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBufferLightMap_getPosition__SWIG_0 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &((CMeshBuffer< irr::video::S3DVertex2TCoords > const *)arg1)->getPosition(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBufferLightMap_getPosition__SWIG_1 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &(arg1)->getPosition(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBufferLightMap_getNormal__SWIG_0 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &((CMeshBuffer< irr::video::S3DVertex2TCoords > const *)arg1)->getNormal(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBufferLightMap_getNormal__SWIG_1 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &(arg1)->getNormal(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector2df *_wrap_SMeshBufferLightMap_getTCoords__SWIG_0 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::u32 larg2) {
  core::vector2df * lresult = (core::vector2df *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u32 arg2 ;
  core::vector2df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector2df *) &((CMeshBuffer< irr::video::S3DVertex2TCoords > const *)arg1)->getTCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector2df *)0;
  }
}


EXPORT core::vector2df *_wrap_SMeshBufferLightMap_getTCoords__SWIG_1 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::u32 larg2) {
  core::vector2df * lresult = (core::vector2df *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u32 arg2 ;
  core::vector2df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector2df *) &(arg1)->getTCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector2df *)0;
  }
}


EXPORT void _wrap_SMeshBufferLightMap_append__SWIG_0 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, void *larg2, irr::u32 larg3, irr::u16 *larg4, irr::u32 larg5) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) (irr::u16 *)0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->append((void const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferLightMap_append__SWIG_1 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::scene::IMeshBuffer *larg2) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) (irr::scene::IMeshBuffer *)0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->append((irr::scene::IMeshBuffer const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferLightMap_setHardwareMappingHint__SWIG_0 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::scene::E_HARDWARE_MAPPING larg2, irr::scene::E_BUFFER_TYPE larg3) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  irr::scene::E_BUFFER_TYPE arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setHardwareMappingHint(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferLightMap_setHardwareMappingHint__SWIG_1 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setHardwareMappingHint(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferLightMap_setDirty__SWIG_0 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::scene::E_BUFFER_TYPE larg2) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::scene::E_BUFFER_TYPE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDirty(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferLightMap_setDirty__SWIG_1 (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setDirty();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferLightMap_ChangedID_Vertex_set (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::u32 larg2) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ChangedID_Vertex = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_SMeshBufferLightMap_ChangedID_Vertex_get (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32) ((arg1)->ChangedID_Vertex);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_SMeshBufferLightMap_ChangedID_Index_set (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::u32 larg2) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ChangedID_Index = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_SMeshBufferLightMap_ChangedID_Index_get (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32) ((arg1)->ChangedID_Index);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_SMeshBufferLightMap_MappingHint_Vertex_set (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MappingHint_Vertex = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_SMeshBufferLightMap_MappingHint_Vertex_get (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING) ((arg1)->MappingHint_Vertex);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT void _wrap_SMeshBufferLightMap_MappingHint_Index_set (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MappingHint_Index = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_SMeshBufferLightMap_MappingHint_Index_get (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING) ((arg1)->MappingHint_Index);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT void _wrap_SMeshBufferLightMap_Material_set (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, video::SMaterial *larg2) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  video::SMaterial *arg2 = (video::SMaterial *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Material = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT video::SMaterial *_wrap_SMeshBufferLightMap_Material_get (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  video::SMaterial * lresult = (video::SMaterial *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (video::SMaterial *)& ((arg1)->Material);
    lresult = result;
    return lresult;
  } catch (...) {
    return (video::SMaterial *)0;
  }
}


EXPORT void _wrap_SMeshBufferLightMap_Vertices_set (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > *larg2) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > *arg2 = (core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Vertices = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > *_wrap_SMeshBufferLightMap_Vertices_get (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > * lresult = (core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > *)& ((arg1)->Vertices);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > *)0;
  }
}


EXPORT void _wrap_SMeshBufferLightMap_Indices_set (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *larg2) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *arg2 = (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Indices = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *_wrap_SMeshBufferLightMap_Indices_get (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > * lresult = (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *)& ((arg1)->Indices);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *)0;
  }
}


EXPORT void _wrap_SMeshBufferLightMap_BoundingBox_set (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1, core::aabbox3d< irr::f32 > *larg2) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  core::aabbox3d< irr::f32 > *arg2 = (core::aabbox3d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->BoundingBox = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT core::aabbox3d< irr::f32 > *_wrap_SMeshBufferLightMap_BoundingBox_get (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  core::aabbox3d< irr::f32 > * lresult = (core::aabbox3d< irr::f32 > *)0 ;
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  core::aabbox3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (core::aabbox3d< irr::f32 > *)& ((arg1)->BoundingBox);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::aabbox3d< irr::f32 > *)0;
  }
}


EXPORT void _wrap_delete_SMeshBufferLightMap (CMeshBuffer< irr::video::S3DVertex2TCoords > *larg1) {
  CMeshBuffer< irr::video::S3DVertex2TCoords > *arg1 = (CMeshBuffer< irr::video::S3DVertex2TCoords > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT CMeshBuffer< irr::video::S3DVertexTangents > *_wrap_new_SMeshBufferTangents () {
  CMeshBuffer< irr::video::S3DVertexTangents > * lresult = (CMeshBuffer< irr::video::S3DVertexTangents > *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *result = 0 ;
  
  try {
    result = (CMeshBuffer< irr::video::S3DVertexTangents > *)new CMeshBuffer< irr::video::S3DVertexTangents >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (CMeshBuffer< irr::video::S3DVertexTangents > *)0;
  }
}


EXPORT video::SMaterial *_wrap_SMeshBufferTangents_getMaterial__SWIG_0 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  video::SMaterial * lresult = (video::SMaterial *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (video::SMaterial *) &((CMeshBuffer< irr::video::S3DVertexTangents > const *)arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (video::SMaterial *)0;
  }
}


EXPORT video::SMaterial *_wrap_SMeshBufferTangents_getMaterial__SWIG_1 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  video::SMaterial * lresult = (video::SMaterial *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (video::SMaterial *) &(arg1)->getMaterial();
    lresult = result;
    return lresult;
  } catch (...) {
    return (video::SMaterial *)0;
  }
}


EXPORT void *_wrap_SMeshBufferTangents_getVertices__SWIG_0 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  void * lresult = (void *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)((CMeshBuffer< irr::video::S3DVertexTangents > const *)arg1)->getVertices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void *_wrap_SMeshBufferTangents_getVertices__SWIG_1 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  void * lresult = (void *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *)(arg1)->getVertices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT irr::u16 *_wrap_SMeshBufferTangents_getIndices__SWIG_0 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  irr::u16 * lresult = (irr::u16 *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u16 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::u16 *)((CMeshBuffer< irr::video::S3DVertexTangents > const *)arg1)->getIndices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16 *)0;
  }
}


EXPORT irr::u16 *_wrap_SMeshBufferTangents_getIndices__SWIG_1 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  irr::u16 * lresult = (irr::u16 *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u16 *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::u16 *)(arg1)->getIndices();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u16 *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBufferTangents_getPosition__SWIG_0 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &((CMeshBuffer< irr::video::S3DVertexTangents > const *)arg1)->getPosition(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBufferTangents_getPosition__SWIG_1 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &(arg1)->getPosition(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBufferTangents_getNormal__SWIG_0 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &((CMeshBuffer< irr::video::S3DVertexTangents > const *)arg1)->getNormal(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector3df *_wrap_SMeshBufferTangents_getNormal__SWIG_1 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::u32 larg2) {
  core::vector3df * lresult = (core::vector3df *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u32 arg2 ;
  core::vector3df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector3df *) &(arg1)->getNormal(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector3df *)0;
  }
}


EXPORT core::vector2df *_wrap_SMeshBufferTangents_getTCoords__SWIG_0 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::u32 larg2) {
  core::vector2df * lresult = (core::vector2df *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u32 arg2 ;
  core::vector2df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector2df *) &((CMeshBuffer< irr::video::S3DVertexTangents > const *)arg1)->getTCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector2df *)0;
  }
}


EXPORT core::vector2df *_wrap_SMeshBufferTangents_getTCoords__SWIG_1 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::u32 larg2) {
  core::vector2df * lresult = (core::vector2df *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u32 arg2 ;
  core::vector2df *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (core::vector2df *) &(arg1)->getTCoords(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::vector2df *)0;
  }
}


EXPORT void _wrap_SMeshBufferTangents_append__SWIG_0 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, void *larg2, irr::u32 larg3, irr::u16 *larg4, irr::u32 larg5) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  void *arg2 = (void *) (void *)0 ;
  irr::u32 arg3 ;
  irr::u16 *arg4 = (irr::u16 *) (irr::u16 *)0 ;
  irr::u32 arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->append((void const *)arg2,arg3,(irr::u16 const *)arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferTangents_append__SWIG_1 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::scene::IMeshBuffer *larg2) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::scene::IMeshBuffer *arg2 = (irr::scene::IMeshBuffer *) (irr::scene::IMeshBuffer *)0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->append((irr::scene::IMeshBuffer const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferTangents_setHardwareMappingHint__SWIG_0 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::scene::E_HARDWARE_MAPPING larg2, irr::scene::E_BUFFER_TYPE larg3) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  irr::scene::E_BUFFER_TYPE arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setHardwareMappingHint(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferTangents_setHardwareMappingHint__SWIG_1 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setHardwareMappingHint(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferTangents_setDirty__SWIG_0 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::scene::E_BUFFER_TYPE larg2) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::scene::E_BUFFER_TYPE arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setDirty(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferTangents_setDirty__SWIG_1 (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setDirty();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_SMeshBufferTangents_ChangedID_Vertex_set (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::u32 larg2) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ChangedID_Vertex = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_SMeshBufferTangents_ChangedID_Vertex_get (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32) ((arg1)->ChangedID_Vertex);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_SMeshBufferTangents_ChangedID_Index_set (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::u32 larg2) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ChangedID_Index = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_SMeshBufferTangents_ChangedID_Index_get (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32) ((arg1)->ChangedID_Index);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_SMeshBufferTangents_MappingHint_Vertex_set (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MappingHint_Vertex = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_SMeshBufferTangents_MappingHint_Vertex_get (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING) ((arg1)->MappingHint_Vertex);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT void _wrap_SMeshBufferTangents_MappingHint_Index_set (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, irr::scene::E_HARDWARE_MAPPING larg2) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MappingHint_Index = arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::scene::E_HARDWARE_MAPPING _wrap_SMeshBufferTangents_MappingHint_Index_get (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  irr::scene::E_HARDWARE_MAPPING lresult = (irr::scene::E_HARDWARE_MAPPING)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  irr::scene::E_HARDWARE_MAPPING result;
  
  arg1 = larg1;
  try {
    result = (irr::scene::E_HARDWARE_MAPPING) ((arg1)->MappingHint_Index);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::scene::E_HARDWARE_MAPPING)0;
  }
}


EXPORT void _wrap_SMeshBufferTangents_Material_set (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, video::SMaterial *larg2) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  video::SMaterial *arg2 = (video::SMaterial *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Material = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT video::SMaterial *_wrap_SMeshBufferTangents_Material_get (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  video::SMaterial * lresult = (video::SMaterial *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  video::SMaterial *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (video::SMaterial *)& ((arg1)->Material);
    lresult = result;
    return lresult;
  } catch (...) {
    return (video::SMaterial *)0;
  }
}


EXPORT void _wrap_SMeshBufferTangents_Vertices_set (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > > *larg2) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > > *arg2 = (core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Vertices = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > > *_wrap_SMeshBufferTangents_Vertices_get (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > > * lresult = (core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > > *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > > *)& ((arg1)->Vertices);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > > *)0;
  }
}


EXPORT void _wrap_SMeshBufferTangents_Indices_set (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *larg2) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *arg2 = (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Indices = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *_wrap_SMeshBufferTangents_Indices_get (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > * lresult = (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *)& ((arg1)->Indices);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *)0;
  }
}


EXPORT void _wrap_SMeshBufferTangents_BoundingBox_set (CMeshBuffer< irr::video::S3DVertexTangents > *larg1, core::aabbox3d< irr::f32 > *larg2) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  core::aabbox3d< irr::f32 > *arg2 = (core::aabbox3d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->BoundingBox = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT core::aabbox3d< irr::f32 > *_wrap_SMeshBufferTangents_BoundingBox_get (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  core::aabbox3d< irr::f32 > * lresult = (core::aabbox3d< irr::f32 > *)0 ;
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  core::aabbox3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (core::aabbox3d< irr::f32 > *)& ((arg1)->BoundingBox);
    lresult = result;
    return lresult;
  } catch (...) {
    return (core::aabbox3d< irr::f32 > *)0;
  }
}


EXPORT void _wrap_delete_SMeshBufferTangents (CMeshBuffer< irr::video::S3DVertexTangents > *larg1) {
  CMeshBuffer< irr::video::S3DVertexTangents > *arg1 = (CMeshBuffer< irr::video::S3DVertexTangents > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::array< irr::core::stringc > *_wrap_new_tStringList__SWIG_0 () {
  irr::core::array< irr::core::stringc > * lresult = (irr::core::array< irr::core::stringc > *)0 ;
  irr::core::array< irr::core::stringc > *result = 0 ;
  
  try {
    result = (irr::core::array< irr::core::stringc > *)new irr::core::array< irr::core::stringc >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::core::stringc > *)0;
  }
}


EXPORT irr::core::array< irr::core::stringc > *_wrap_new_tStringList__SWIG_1 (irr::u32 larg1) {
  irr::core::array< irr::core::stringc > * lresult = (irr::core::array< irr::core::stringc > *)0 ;
  irr::u32 arg1 ;
  irr::core::array< irr::core::stringc > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::array< irr::core::stringc > *)new irr::core::array< irr::core::stringc >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::core::stringc > *)0;
  }
}


EXPORT irr::core::array< irr::core::stringc > *_wrap_new_tStringList__SWIG_2 (irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *larg1) {
  irr::core::array< irr::core::stringc > * lresult = (irr::core::array< irr::core::stringc > *)0 ;
  irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *arg1 = 0 ;
  irr::core::array< irr::core::stringc > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::array< irr::core::stringc > *)new irr::core::array< irr::core::stringc >((irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::core::stringc > *)0;
  }
}


EXPORT void _wrap_delete_tStringList (irr::core::array< irr::core::stringc > *larg1) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_reallocate__SWIG_0 (irr::core::array< irr::core::stringc > *larg1, irr::u32 larg2, int larg3) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->reallocate(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_reallocate__SWIG_1 (irr::core::array< irr::core::stringc > *larg1, irr::u32 larg2) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reallocate(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_setAllocStrategy__SWIG_0 (irr::core::array< irr::core::stringc > *larg1, irr::core::eAllocStrategy larg2) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::eAllocStrategy arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAllocStrategy(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_setAllocStrategy__SWIG_1 (irr::core::array< irr::core::stringc > *larg1) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setAllocStrategy();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_push_back (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->push_back((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_push_front (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->push_front((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_insert__SWIG_0 (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2, irr::u32 larg3) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->insert((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_insert__SWIG_1 (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->insert((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_clear (irr::core::array< irr::core::stringc > *larg1) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_set_pointer__SWIG_0 (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2, irr::u32 larg3, int larg4, int larg5) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = (irr::core::string< char,irr::core::irrAllocator< char > > *) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  try {
    (arg1)->set_pointer(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_set_pointer__SWIG_1 (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2, irr::u32 larg3, int larg4) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = (irr::core::string< char,irr::core::irrAllocator< char > > *) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    (arg1)->set_pointer(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_set_pointer__SWIG_2 (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2, irr::u32 larg3) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = (irr::core::string< char,irr::core::irrAllocator< char > > *) 0 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->set_pointer(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_set_free_when_destroyed (irr::core::array< irr::core::stringc > *larg1, int larg2) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->set_free_when_destroyed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_set_used (irr::core::array< irr::core::stringc > *larg1, irr::u32 larg2) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_used(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *_wrap_tStringList___assign__ (irr::core::array< irr::core::stringc > *larg1, irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *larg2) {
  irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > * lresult = (irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *arg2 = 0 ;
  irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *) &(arg1)->operator =((irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *)0;
  }
}


EXPORT int _wrap_tStringList___eq__ (irr::core::array< irr::core::stringc > *larg1, irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *larg2) {
  int lresult = (int)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::array< irr::core::stringc > const *)arg1)->operator ==((irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_tStringList___ne__ (irr::core::array< irr::core::stringc > *larg1, irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *larg2) {
  int lresult = (int)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::array< irr::core::stringc > const *)arg1)->operator !=((irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_tStringList___aref____SWIG_0 (irr::core::array< irr::core::stringc > *larg1, irr::u32 larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::u32 arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->operator [](arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_tStringList___aref____SWIG_1 (irr::core::array< irr::core::stringc > *larg1, irr::u32 larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::u32 arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &((irr::core::array< irr::core::stringc > const *)arg1)->operator [](arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_tStringList_getLast__SWIG_0 (irr::core::array< irr::core::stringc > *larg1) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->getLast();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_tStringList_getLast__SWIG_1 (irr::core::array< irr::core::stringc > *larg1) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &((irr::core::array< irr::core::stringc > const *)arg1)->getLast();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_tStringList_pointer (irr::core::array< irr::core::stringc > *larg1) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *)(arg1)->pointer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_tStringList_const_pointer (irr::core::array< irr::core::stringc > *larg1) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *)((irr::core::array< irr::core::stringc > const *)arg1)->const_pointer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::u32 _wrap_tStringList_size (irr::core::array< irr::core::stringc > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::core::array< irr::core::stringc > const *)arg1)->size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_tStringList_allocated_size (irr::core::array< irr::core::stringc > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::core::array< irr::core::stringc > const *)arg1)->allocated_size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT int _wrap_tStringList_empty (irr::core::array< irr::core::stringc > *larg1) {
  int lresult = (int)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::core::array< irr::core::stringc > const *)arg1)->empty();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_tStringList_sort (irr::core::array< irr::core::stringc > *larg1) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->sort();
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_tStringList_binary_search__SWIG_0 (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)(arg1)->binary_search((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_tStringList_binary_search__SWIG_1 (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::core::array< irr::core::stringc > const *)arg1)->binary_search((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_tStringList_binary_search__SWIG_2 (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2, irr::s32 larg3, irr::s32 larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)((irr::core::array< irr::core::stringc > const *)arg1)->binary_search((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_tStringList_binary_search_multi (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2, irr::s32 *larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::s32 *arg3 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->binary_search_multi((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_tStringList_linear_search (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::core::array< irr::core::stringc > const *)arg1)->linear_search((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_tStringList_linear_reverse_search (irr::core::array< irr::core::stringc > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::core::array< irr::core::stringc > const *)arg1)->linear_reverse_search((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_tStringList_erase__SWIG_0 (irr::core::array< irr::core::stringc > *larg1, irr::u32 larg2) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->erase(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_erase__SWIG_1 (irr::core::array< irr::core::stringc > *larg1, irr::u32 larg2, irr::s32 larg3) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->erase(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_set_sorted (irr::core::array< irr::core::stringc > *larg1, int larg2) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->set_sorted(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tStringList_swap (irr::core::array< irr::core::stringc > *larg1, irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *larg2) {
  irr::core::array< irr::core::stringc > *arg1 = (irr::core::array< irr::core::stringc > *) 0 ;
  irr::core::array< irr::core::string< char,irr::core::irrAllocator< char > >,irr::core::irrAllocator< irr::core::string< char,irr::core::irrAllocator< char > > > > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->swap(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::array< irr::video::ITexture * > *_wrap_new_tTexArray__SWIG_0 () {
  irr::core::array< irr::video::ITexture * > * lresult = (irr::core::array< irr::video::ITexture * > *)0 ;
  irr::core::array< irr::video::ITexture * > *result = 0 ;
  
  try {
    result = (irr::core::array< irr::video::ITexture * > *)new irr::core::array< irr::video::ITexture * >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::video::ITexture * > *)0;
  }
}


EXPORT irr::core::array< irr::video::ITexture * > *_wrap_new_tTexArray__SWIG_1 (irr::u32 larg1) {
  irr::core::array< irr::video::ITexture * > * lresult = (irr::core::array< irr::video::ITexture * > *)0 ;
  irr::u32 arg1 ;
  irr::core::array< irr::video::ITexture * > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::array< irr::video::ITexture * > *)new irr::core::array< irr::video::ITexture * >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::video::ITexture * > *)0;
  }
}


EXPORT irr::core::array< irr::video::ITexture * > *_wrap_new_tTexArray__SWIG_2 (irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *larg1) {
  irr::core::array< irr::video::ITexture * > * lresult = (irr::core::array< irr::video::ITexture * > *)0 ;
  irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *arg1 = 0 ;
  irr::core::array< irr::video::ITexture * > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::array< irr::video::ITexture * > *)new irr::core::array< irr::video::ITexture * >((irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::video::ITexture * > *)0;
  }
}


EXPORT void _wrap_delete_tTexArray (irr::core::array< irr::video::ITexture * > *larg1) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_reallocate__SWIG_0 (irr::core::array< irr::video::ITexture * > *larg1, irr::u32 larg2, int larg3) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->reallocate(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_reallocate__SWIG_1 (irr::core::array< irr::video::ITexture * > *larg1, irr::u32 larg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reallocate(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_setAllocStrategy__SWIG_0 (irr::core::array< irr::video::ITexture * > *larg1, irr::core::eAllocStrategy larg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::core::eAllocStrategy arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setAllocStrategy(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_setAllocStrategy__SWIG_1 (irr::core::array< irr::video::ITexture * > *larg1) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->setAllocStrategy();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_push_back (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->push_back((irr::video::ITexture *const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_push_front (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->push_front((irr::video::ITexture *const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_insert__SWIG_0 (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2, irr::u32 larg3) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->insert((irr::video::ITexture *const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_insert__SWIG_1 (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->insert((irr::video::ITexture *const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_clear (irr::core::array< irr::video::ITexture * > *larg1) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_set_pointer__SWIG_0 (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2, irr::u32 larg3, int larg4, int larg5) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = (irr::video::ITexture **) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  arg5 = (bool)larg5;
  try {
    (arg1)->set_pointer(arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_set_pointer__SWIG_1 (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2, irr::u32 larg3, int larg4) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = (irr::video::ITexture **) 0 ;
  irr::u32 arg3 ;
  bool arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    (arg1)->set_pointer(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_set_pointer__SWIG_2 (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2, irr::u32 larg3) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = (irr::video::ITexture **) 0 ;
  irr::u32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->set_pointer(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_set_free_when_destroyed (irr::core::array< irr::video::ITexture * > *larg1, int larg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->set_free_when_destroyed(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_set_used (irr::core::array< irr::video::ITexture * > *larg1, irr::u32 larg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_used(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *_wrap_tTexArray___assign__ (irr::core::array< irr::video::ITexture * > *larg1, irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *larg2) {
  irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > * lresult = (irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *) &(arg1)->operator =((irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *)0;
  }
}


EXPORT int _wrap_tTexArray___eq__ (irr::core::array< irr::video::ITexture * > *larg1, irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *larg2) {
  int lresult = (int)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::array< irr::video::ITexture * > const *)arg1)->operator ==((irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_tTexArray___ne__ (irr::core::array< irr::video::ITexture * > *larg1, irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *larg2) {
  int lresult = (int)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::array< irr::video::ITexture * > const *)arg1)->operator !=((irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::video::ITexture **_wrap_tTexArray___aref____SWIG_0 (irr::core::array< irr::video::ITexture * > *larg1, irr::u32 larg2) {
  irr::video::ITexture ** lresult = (irr::video::ITexture **)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture **result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::ITexture **) &(arg1)->operator [](arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture **)0;
  }
}


EXPORT irr::video::ITexture **_wrap_tTexArray___aref____SWIG_1 (irr::core::array< irr::video::ITexture * > *larg1, irr::u32 larg2) {
  irr::video::ITexture ** lresult = (irr::video::ITexture **)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  irr::video::ITexture **result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::video::ITexture **) &((irr::core::array< irr::video::ITexture * > const *)arg1)->operator [](arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture **)0;
  }
}


EXPORT irr::video::ITexture **_wrap_tTexArray_getLast__SWIG_0 (irr::core::array< irr::video::ITexture * > *larg1) {
  irr::video::ITexture ** lresult = (irr::video::ITexture **)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::ITexture **) &(arg1)->getLast();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture **)0;
  }
}


EXPORT irr::video::ITexture **_wrap_tTexArray_getLast__SWIG_1 (irr::core::array< irr::video::ITexture * > *larg1) {
  irr::video::ITexture ** lresult = (irr::video::ITexture **)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::ITexture **) &((irr::core::array< irr::video::ITexture * > const *)arg1)->getLast();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture **)0;
  }
}


EXPORT irr::video::ITexture **_wrap_tTexArray_pointer (irr::core::array< irr::video::ITexture * > *larg1) {
  irr::video::ITexture ** lresult = (irr::video::ITexture **)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::ITexture **)(arg1)->pointer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture **)0;
  }
}


EXPORT irr::video::ITexture **_wrap_tTexArray_const_pointer (irr::core::array< irr::video::ITexture * > *larg1) {
  irr::video::ITexture ** lresult = (irr::video::ITexture **)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::video::ITexture **)((irr::core::array< irr::video::ITexture * > const *)arg1)->const_pointer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::video::ITexture **)0;
  }
}


EXPORT irr::u32 _wrap_tTexArray_size (irr::core::array< irr::video::ITexture * > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::core::array< irr::video::ITexture * > const *)arg1)->size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_tTexArray_allocated_size (irr::core::array< irr::video::ITexture * > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::core::array< irr::video::ITexture * > const *)arg1)->allocated_size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT int _wrap_tTexArray_empty (irr::core::array< irr::video::ITexture * > *larg1) {
  int lresult = (int)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::core::array< irr::video::ITexture * > const *)arg1)->empty();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_tTexArray_sort (irr::core::array< irr::video::ITexture * > *larg1) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->sort();
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_tTexArray_binary_search__SWIG_0 (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)(arg1)->binary_search((irr::video::ITexture *const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_tTexArray_binary_search__SWIG_1 (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::core::array< irr::video::ITexture * > const *)arg1)->binary_search((irr::video::ITexture *const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_tTexArray_binary_search__SWIG_2 (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2, irr::s32 larg3, irr::s32 larg4) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::s32 arg3 ;
  irr::s32 arg4 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::s32)((irr::core::array< irr::video::ITexture * > const *)arg1)->binary_search((irr::video::ITexture *const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_tTexArray_binary_search_multi (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2, irr::s32 *larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::s32 *arg3 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)(arg1)->binary_search_multi((irr::video::ITexture *const &)*arg2,*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_tTexArray_linear_search (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::core::array< irr::video::ITexture * > const *)arg1)->linear_search((irr::video::ITexture *const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_tTexArray_linear_reverse_search (irr::core::array< irr::video::ITexture * > *larg1, irr::video::ITexture **larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::video::ITexture **arg2 = 0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::core::array< irr::video::ITexture * > const *)arg1)->linear_reverse_search((irr::video::ITexture *const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT void _wrap_tTexArray_erase__SWIG_0 (irr::core::array< irr::video::ITexture * > *larg1, irr::u32 larg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->erase(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_erase__SWIG_1 (irr::core::array< irr::video::ITexture * > *larg1, irr::u32 larg2, irr::s32 larg3) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->erase(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_set_sorted (irr::core::array< irr::video::ITexture * > *larg1, int larg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->set_sorted(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_tTexArray_swap (irr::core::array< irr::video::ITexture * > *larg1, irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *larg2) {
  irr::core::array< irr::video::ITexture * > *arg1 = (irr::core::array< irr::video::ITexture * > *) 0 ;
  irr::core::array< irr::video::ITexture *,irr::core::irrAllocator< irr::video::ITexture * > > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->swap(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::list< irr::scene::ISceneNode * > *_wrap_new_ISceneNodeList__SWIG_0 () {
  irr::core::list< irr::scene::ISceneNode * > * lresult = (irr::core::list< irr::scene::ISceneNode * > *)0 ;
  irr::core::list< irr::scene::ISceneNode * > *result = 0 ;
  
  try {
    result = (irr::core::list< irr::scene::ISceneNode * > *)new irr::core::list< irr::scene::ISceneNode * >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::list< irr::scene::ISceneNode * > *)0;
  }
}


EXPORT irr::core::list< irr::scene::ISceneNode * > *_wrap_new_ISceneNodeList__SWIG_1 (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  irr::core::list< irr::scene::ISceneNode * > * lresult = (irr::core::list< irr::scene::ISceneNode * > *)0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg1 = 0 ;
  irr::core::list< irr::scene::ISceneNode * > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::list< irr::scene::ISceneNode * > *)new irr::core::list< irr::scene::ISceneNode * >((irr::core::list< irr::scene::ISceneNode * > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::list< irr::scene::ISceneNode * > *)0;
  }
}


EXPORT void _wrap_delete_ISceneNodeList (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNodeList___assign__ (irr::core::list< irr::scene::ISceneNode * > *larg1, irr::core::list< irr::scene::ISceneNode * > *larg2) {
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator =((irr::core::list< irr::scene::ISceneNode * > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_ISceneNodeList_size (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::core::list< irr::scene::ISceneNode * > const *)arg1)->size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_ISceneNodeList_getSize (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::core::list< irr::scene::ISceneNode * > const *)arg1)->getSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_ISceneNodeList_clear (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ISceneNodeList_empty (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  int lresult = (int)0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::core::list< irr::scene::ISceneNode * > const *)arg1)->empty();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ISceneNodeList_push_back (irr::core::list< irr::scene::ISceneNode * > *larg1, irr::scene::ISceneNode **larg2) {
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  irr::scene::ISceneNode **arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->push_back((irr::scene::ISceneNode *const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNodeList_push_front (irr::core::list< irr::scene::ISceneNode * > *larg1, irr::scene::ISceneNode **larg2) {
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  irr::scene::ISceneNode **arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->push_front((irr::scene::ISceneNode *const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT core::list< irr::scene::ISceneNode * >::Iterator *_wrap_ISceneNodeList_begin__SWIG_0 (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  core::list< irr::scene::ISceneNode * >::Iterator * lresult = (core::list< irr::scene::ISceneNode * >::Iterator *)0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNode * >::Iterator > result;
  
  arg1 = larg1;
  try {
    result = (arg1)->begin();
    lresult = new core::list< irr::scene::ISceneNode * >::Iterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNode * >::Iterator *)0;
  }
}


EXPORT core::list< irr::scene::ISceneNode * >::ConstIterator *_wrap_ISceneNodeList_begin__SWIG_1 (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  core::list< irr::scene::ISceneNode * >::ConstIterator * lresult = (core::list< irr::scene::ISceneNode * >::ConstIterator *)0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNode * >::ConstIterator > result;
  
  arg1 = larg1;
  try {
    result = ((irr::core::list< irr::scene::ISceneNode * > const *)arg1)->begin();
    lresult = new core::list< irr::scene::ISceneNode * >::ConstIterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNode * >::ConstIterator *)0;
  }
}


EXPORT core::list< irr::scene::ISceneNode * >::Iterator *_wrap_ISceneNodeList_end__SWIG_0 (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  core::list< irr::scene::ISceneNode * >::Iterator * lresult = (core::list< irr::scene::ISceneNode * >::Iterator *)0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNode * >::Iterator > result;
  
  arg1 = larg1;
  try {
    result = (arg1)->end();
    lresult = new core::list< irr::scene::ISceneNode * >::Iterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNode * >::Iterator *)0;
  }
}


EXPORT core::list< irr::scene::ISceneNode * >::ConstIterator *_wrap_ISceneNodeList_end__SWIG_1 (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  core::list< irr::scene::ISceneNode * >::ConstIterator * lresult = (core::list< irr::scene::ISceneNode * >::ConstIterator *)0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNode * >::ConstIterator > result;
  
  arg1 = larg1;
  try {
    result = ((irr::core::list< irr::scene::ISceneNode * > const *)arg1)->end();
    lresult = new core::list< irr::scene::ISceneNode * >::ConstIterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNode * >::ConstIterator *)0;
  }
}


EXPORT core::list< irr::scene::ISceneNode * >::Iterator *_wrap_ISceneNodeList_getLast__SWIG_0 (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  core::list< irr::scene::ISceneNode * >::Iterator * lresult = (core::list< irr::scene::ISceneNode * >::Iterator *)0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNode * >::Iterator > result;
  
  arg1 = larg1;
  try {
    result = (arg1)->getLast();
    lresult = new core::list< irr::scene::ISceneNode * >::Iterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNode * >::Iterator *)0;
  }
}


EXPORT core::list< irr::scene::ISceneNode * >::ConstIterator *_wrap_ISceneNodeList_getLast__SWIG_1 (irr::core::list< irr::scene::ISceneNode * > *larg1) {
  core::list< irr::scene::ISceneNode * >::ConstIterator * lresult = (core::list< irr::scene::ISceneNode * >::ConstIterator *)0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNode * >::ConstIterator > result;
  
  arg1 = larg1;
  try {
    result = ((irr::core::list< irr::scene::ISceneNode * > const *)arg1)->getLast();
    lresult = new core::list< irr::scene::ISceneNode * >::ConstIterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNode * >::ConstIterator *)0;
  }
}


EXPORT void _wrap_ISceneNodeList_insert_after (irr::core::list< irr::scene::ISceneNode * > *larg1, core::list< irr::scene::ISceneNode * >::Iterator *larg2, irr::scene::ISceneNode **larg3) {
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  core::list< irr::scene::ISceneNode * >::Iterator *arg2 = 0 ;
  irr::scene::ISceneNode **arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->insert_after((core::list< irr::scene::ISceneNode * >::Iterator const &)*arg2,(irr::scene::ISceneNode *const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNodeList_insert_before (irr::core::list< irr::scene::ISceneNode * > *larg1, core::list< irr::scene::ISceneNode * >::Iterator *larg2, irr::scene::ISceneNode **larg3) {
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  core::list< irr::scene::ISceneNode * >::Iterator *arg2 = 0 ;
  irr::scene::ISceneNode **arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->insert_before((core::list< irr::scene::ISceneNode * >::Iterator const &)*arg2,(irr::scene::ISceneNode *const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT core::list< irr::scene::ISceneNode * >::Iterator *_wrap_ISceneNodeList_erase (irr::core::list< irr::scene::ISceneNode * > *larg1, core::list< irr::scene::ISceneNode * >::Iterator *larg2) {
  core::list< irr::scene::ISceneNode * >::Iterator * lresult = (core::list< irr::scene::ISceneNode * >::Iterator *)0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  core::list< irr::scene::ISceneNode * >::Iterator *arg2 = 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNode * >::Iterator > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->erase(*arg2);
    lresult = new core::list< irr::scene::ISceneNode * >::Iterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNode * >::Iterator *)0;
  }
}


EXPORT void _wrap_ISceneNodeList_swap (irr::core::list< irr::scene::ISceneNode * > *larg1, irr::core::list< irr::scene::ISceneNode * > *larg2) {
  irr::core::list< irr::scene::ISceneNode * > *arg1 = (irr::core::list< irr::scene::ISceneNode * > *) 0 ;
  irr::core::list< irr::scene::ISceneNode * > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->swap(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::list< irr::scene::ISceneNodeAnimator * > *_wrap_new_ISceneNodeAnimatorList__SWIG_0 () {
  irr::core::list< irr::scene::ISceneNodeAnimator * > * lresult = (irr::core::list< irr::scene::ISceneNodeAnimator * > *)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *result = 0 ;
  
  try {
    result = (irr::core::list< irr::scene::ISceneNodeAnimator * > *)new irr::core::list< irr::scene::ISceneNodeAnimator * >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::list< irr::scene::ISceneNodeAnimator * > *)0;
  }
}


EXPORT irr::core::list< irr::scene::ISceneNodeAnimator * > *_wrap_new_ISceneNodeAnimatorList__SWIG_1 (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  irr::core::list< irr::scene::ISceneNodeAnimator * > * lresult = (irr::core::list< irr::scene::ISceneNodeAnimator * > *)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = 0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::list< irr::scene::ISceneNodeAnimator * > *)new irr::core::list< irr::scene::ISceneNodeAnimator * >((irr::core::list< irr::scene::ISceneNodeAnimator * > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::list< irr::scene::ISceneNodeAnimator * > *)0;
  }
}


EXPORT void _wrap_delete_ISceneNodeAnimatorList (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNodeAnimatorList___assign__ (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1, irr::core::list< irr::scene::ISceneNodeAnimator * > *larg2) {
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator =((irr::core::list< irr::scene::ISceneNodeAnimator * > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::u32 _wrap_ISceneNodeAnimatorList_size (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::core::list< irr::scene::ISceneNodeAnimator * > const *)arg1)->size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT irr::u32 _wrap_ISceneNodeAnimatorList_getSize (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::core::list< irr::scene::ISceneNodeAnimator * > const *)arg1)->getSize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorList_clear (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_ISceneNodeAnimatorList_empty (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  int lresult = (int)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::core::list< irr::scene::ISceneNodeAnimator * > const *)arg1)->empty();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorList_push_back (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1, irr::scene::ISceneNodeAnimator **larg2) {
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  irr::scene::ISceneNodeAnimator **arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->push_back((irr::scene::ISceneNodeAnimator *const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNodeAnimatorList_push_front (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1, irr::scene::ISceneNodeAnimator **larg2) {
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  irr::scene::ISceneNodeAnimator **arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->push_front((irr::scene::ISceneNodeAnimator *const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT core::list< irr::scene::ISceneNodeAnimator * >::Iterator *_wrap_ISceneNodeAnimatorList_begin__SWIG_0 (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  core::list< irr::scene::ISceneNodeAnimator * >::Iterator * lresult = (core::list< irr::scene::ISceneNodeAnimator * >::Iterator *)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNodeAnimator * >::Iterator > result;
  
  arg1 = larg1;
  try {
    result = (arg1)->begin();
    lresult = new core::list< irr::scene::ISceneNodeAnimator * >::Iterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNodeAnimator * >::Iterator *)0;
  }
}


EXPORT core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator *_wrap_ISceneNodeAnimatorList_begin__SWIG_1 (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator * lresult = (core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator *)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator > result;
  
  arg1 = larg1;
  try {
    result = ((irr::core::list< irr::scene::ISceneNodeAnimator * > const *)arg1)->begin();
    lresult = new core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator *)0;
  }
}


EXPORT core::list< irr::scene::ISceneNodeAnimator * >::Iterator *_wrap_ISceneNodeAnimatorList_end__SWIG_0 (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  core::list< irr::scene::ISceneNodeAnimator * >::Iterator * lresult = (core::list< irr::scene::ISceneNodeAnimator * >::Iterator *)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNodeAnimator * >::Iterator > result;
  
  arg1 = larg1;
  try {
    result = (arg1)->end();
    lresult = new core::list< irr::scene::ISceneNodeAnimator * >::Iterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNodeAnimator * >::Iterator *)0;
  }
}


EXPORT core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator *_wrap_ISceneNodeAnimatorList_end__SWIG_1 (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator * lresult = (core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator *)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator > result;
  
  arg1 = larg1;
  try {
    result = ((irr::core::list< irr::scene::ISceneNodeAnimator * > const *)arg1)->end();
    lresult = new core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator *)0;
  }
}


EXPORT core::list< irr::scene::ISceneNodeAnimator * >::Iterator *_wrap_ISceneNodeAnimatorList_getLast__SWIG_0 (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  core::list< irr::scene::ISceneNodeAnimator * >::Iterator * lresult = (core::list< irr::scene::ISceneNodeAnimator * >::Iterator *)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNodeAnimator * >::Iterator > result;
  
  arg1 = larg1;
  try {
    result = (arg1)->getLast();
    lresult = new core::list< irr::scene::ISceneNodeAnimator * >::Iterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNodeAnimator * >::Iterator *)0;
  }
}


EXPORT core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator *_wrap_ISceneNodeAnimatorList_getLast__SWIG_1 (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1) {
  core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator * lresult = (core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator *)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator > result;
  
  arg1 = larg1;
  try {
    result = ((irr::core::list< irr::scene::ISceneNodeAnimator * > const *)arg1)->getLast();
    lresult = new core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator *)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorList_insert_after (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1, core::list< irr::scene::ISceneNodeAnimator * >::Iterator *larg2, irr::scene::ISceneNodeAnimator **larg3) {
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  core::list< irr::scene::ISceneNodeAnimator * >::Iterator *arg2 = 0 ;
  irr::scene::ISceneNodeAnimator **arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->insert_after((core::list< irr::scene::ISceneNodeAnimator * >::Iterator const &)*arg2,(irr::scene::ISceneNodeAnimator *const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ISceneNodeAnimatorList_insert_before (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1, core::list< irr::scene::ISceneNodeAnimator * >::Iterator *larg2, irr::scene::ISceneNodeAnimator **larg3) {
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  core::list< irr::scene::ISceneNodeAnimator * >::Iterator *arg2 = 0 ;
  irr::scene::ISceneNodeAnimator **arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->insert_before((core::list< irr::scene::ISceneNodeAnimator * >::Iterator const &)*arg2,(irr::scene::ISceneNodeAnimator *const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT core::list< irr::scene::ISceneNodeAnimator * >::Iterator *_wrap_ISceneNodeAnimatorList_erase (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1, core::list< irr::scene::ISceneNodeAnimator * >::Iterator *larg2) {
  core::list< irr::scene::ISceneNodeAnimator * >::Iterator * lresult = (core::list< irr::scene::ISceneNodeAnimator * >::Iterator *)0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  core::list< irr::scene::ISceneNodeAnimator * >::Iterator *arg2 = 0 ;
  SwigValueWrapper< core::list< irr::scene::ISceneNodeAnimator * >::Iterator > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->erase(*arg2);
    lresult = new core::list< irr::scene::ISceneNodeAnimator * >::Iterator(result);
    return lresult;
  } catch (...) {
    return (core::list< irr::scene::ISceneNodeAnimator * >::Iterator *)0;
  }
}


EXPORT void _wrap_ISceneNodeAnimatorList_swap (irr::core::list< irr::scene::ISceneNodeAnimator * > *larg1, irr::core::list< irr::scene::ISceneNodeAnimator * > *larg2) {
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg1 = (irr::core::list< irr::scene::ISceneNodeAnimator * > *) 0 ;
  irr::core::list< irr::scene::ISceneNodeAnimator * > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->swap(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT aabbox3d< irr::f32 > *_wrap_new_aabbox3df__SWIG_0 () {
  aabbox3d< irr::f32 > * lresult = (aabbox3d< irr::f32 > *)0 ;
  aabbox3d< irr::f32 > *result = 0 ;
  
  try {
    result = (aabbox3d< irr::f32 > *)new aabbox3d< irr::f32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (aabbox3d< irr::f32 > *)0;
  }
}


EXPORT aabbox3d< irr::f32 > *_wrap_new_aabbox3df__SWIG_1 (irr::core::vector3d< float > *larg1, irr::core::vector3d< float > *larg2) {
  aabbox3d< irr::f32 > * lresult = (aabbox3d< irr::f32 > *)0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  aabbox3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (aabbox3d< irr::f32 > *)new aabbox3d< irr::f32 >((irr::core::vector3d< float > const &)*arg1,(irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (aabbox3d< irr::f32 > *)0;
  }
}


EXPORT aabbox3d< irr::f32 > *_wrap_new_aabbox3df__SWIG_2 (irr::core::vector3d< float > *larg1) {
  aabbox3d< irr::f32 > * lresult = (aabbox3d< irr::f32 > *)0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  aabbox3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (aabbox3d< irr::f32 > *)new aabbox3d< irr::f32 >((irr::core::vector3d< float > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (aabbox3d< irr::f32 > *)0;
  }
}


EXPORT aabbox3d< irr::f32 > *_wrap_new_aabbox3df__SWIG_3 (float larg1, float larg2, float larg3, float larg4, float larg5, float larg6) {
  aabbox3d< irr::f32 > * lresult = (aabbox3d< irr::f32 > *)0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  aabbox3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (aabbox3d< irr::f32 > *)new aabbox3d< irr::f32 >(arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (aabbox3d< irr::f32 > *)0;
  }
}


EXPORT int _wrap_aabbox3df___eq__ (aabbox3d< irr::f32 > *larg1, irr::core::aabbox3d< float > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::f32 > const *)arg1)->operator ==((irr::core::aabbox3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3df___ne__ (aabbox3d< irr::f32 > *larg1, irr::core::aabbox3d< float > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::f32 > const *)arg1)->operator !=((irr::core::aabbox3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_aabbox3df_reset__SWIG_0 (aabbox3d< irr::f32 > *larg1, float larg2, float larg3, float larg4) {
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->reset(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3df_reset__SWIG_1 (aabbox3d< irr::f32 > *larg1, irr::core::aabbox3d< float > *larg2) {
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reset((irr::core::aabbox3d< float > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3df_reset__SWIG_2 (aabbox3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reset((irr::core::vector3d< float > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3df_addInternalPoint__SWIG_0 (aabbox3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addInternalPoint((irr::core::vector3d< float > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3df_addInternalBox (aabbox3d< irr::f32 > *larg1, irr::core::aabbox3d< float > *larg2) {
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addInternalBox((irr::core::aabbox3d< float > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3df_addInternalPoint__SWIG_1 (aabbox3d< irr::f32 > *larg1, float larg2, float larg3, float larg4) {
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->addInternalPoint(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< float > *_wrap_aabbox3df_getCenter (aabbox3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((aabbox3d< irr::f32 > const *)arg1)->getCenter();
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_aabbox3df_getExtent (aabbox3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((aabbox3d< irr::f32 > const *)arg1)->getExtent();
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT int _wrap_aabbox3df_isEmpty (aabbox3d< irr::f32 > *larg1) {
  int lresult = (int)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((aabbox3d< irr::f32 > const *)arg1)->isEmpty();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT float _wrap_aabbox3df_getVolume (aabbox3d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((aabbox3d< irr::f32 > const *)arg1)->getVolume();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_aabbox3df_getArea (aabbox3d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((aabbox3d< irr::f32 > const *)arg1)->getArea();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_aabbox3df_getEdges (aabbox3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((aabbox3d< irr::f32 > const *)arg1)->getEdges(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3df_repair (aabbox3d< irr::f32 > *larg1) {
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->repair();
    
  } catch (...) {
    
  }
}


EXPORT irr::core::aabbox3d< float > *_wrap_aabbox3df_getInterpolated (aabbox3d< irr::f32 > *larg1, irr::core::aabbox3d< float > *larg2, irr::f32 larg3) {
  irr::core::aabbox3d< float > * lresult = (irr::core::aabbox3d< float > *)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::aabbox3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((aabbox3d< irr::f32 > const *)arg1)->getInterpolated((irr::core::aabbox3d< float > const &)*arg2,arg3);
    lresult = new irr::core::aabbox3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3d< float > *)0;
  }
}


EXPORT int _wrap_aabbox3df_isPointInside (aabbox3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::f32 > const *)arg1)->isPointInside((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3df_isPointTotalInside (aabbox3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::f32 > const *)arg1)->isPointTotalInside((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3df_isFullInside (aabbox3d< irr::f32 > *larg1, irr::core::aabbox3d< float > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::f32 > const *)arg1)->isFullInside((irr::core::aabbox3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3df_intersectsWithBox (aabbox3d< irr::f32 > *larg1, irr::core::aabbox3d< float > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::f32 > const *)arg1)->intersectsWithBox((irr::core::aabbox3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3df_intersectsWithLine__SWIG_0 (aabbox3d< irr::f32 > *larg1, irr::core::line3d< float > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::line3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::f32 > const *)arg1)->intersectsWithLine((irr::core::line3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3df_intersectsWithLine__SWIG_1 (aabbox3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3, float larg4) {
  int lresult = (int)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((aabbox3d< irr::f32 > const *)arg1)->intersectsWithLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::EIntersectionRelation3D _wrap_aabbox3df_classifyPlaneRelation (aabbox3d< irr::f32 > *larg1, irr::core::plane3d< float > *larg2) {
  irr::core::EIntersectionRelation3D lresult = (irr::core::EIntersectionRelation3D)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  irr::core::EIntersectionRelation3D result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::EIntersectionRelation3D)((aabbox3d< irr::f32 > const *)arg1)->classifyPlaneRelation((irr::core::plane3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::EIntersectionRelation3D)0;
  }
}


EXPORT void _wrap_aabbox3df_MinEdge_set (aabbox3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MinEdge = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< float > *_wrap_aabbox3df_MinEdge_get (aabbox3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< float > *)& ((arg1)->MinEdge);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT void _wrap_aabbox3df_MaxEdge_set (aabbox3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MaxEdge = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< float > *_wrap_aabbox3df_MaxEdge_get (aabbox3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< float > *)& ((arg1)->MaxEdge);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT void _wrap_delete_aabbox3df (aabbox3d< irr::f32 > *larg1) {
  aabbox3d< irr::f32 > *arg1 = (aabbox3d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT aabbox3d< irr::s32 > *_wrap_new_aabbox3di__SWIG_0 () {
  aabbox3d< irr::s32 > * lresult = (aabbox3d< irr::s32 > *)0 ;
  aabbox3d< irr::s32 > *result = 0 ;
  
  try {
    result = (aabbox3d< irr::s32 > *)new aabbox3d< irr::s32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (aabbox3d< irr::s32 > *)0;
  }
}


EXPORT aabbox3d< irr::s32 > *_wrap_new_aabbox3di__SWIG_1 (irr::core::vector3d< int > *larg1, irr::core::vector3d< int > *larg2) {
  aabbox3d< irr::s32 > * lresult = (aabbox3d< irr::s32 > *)0 ;
  irr::core::vector3d< int > *arg1 = 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  aabbox3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (aabbox3d< irr::s32 > *)new aabbox3d< irr::s32 >((irr::core::vector3d< int > const &)*arg1,(irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (aabbox3d< irr::s32 > *)0;
  }
}


EXPORT aabbox3d< irr::s32 > *_wrap_new_aabbox3di__SWIG_2 (irr::core::vector3d< int > *larg1) {
  aabbox3d< irr::s32 > * lresult = (aabbox3d< irr::s32 > *)0 ;
  irr::core::vector3d< int > *arg1 = 0 ;
  aabbox3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (aabbox3d< irr::s32 > *)new aabbox3d< irr::s32 >((irr::core::vector3d< int > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (aabbox3d< irr::s32 > *)0;
  }
}


EXPORT aabbox3d< irr::s32 > *_wrap_new_aabbox3di__SWIG_3 (int larg1, int larg2, int larg3, int larg4, int larg5, int larg6) {
  aabbox3d< irr::s32 > * lresult = (aabbox3d< irr::s32 > *)0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  aabbox3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (aabbox3d< irr::s32 > *)new aabbox3d< irr::s32 >(arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (aabbox3d< irr::s32 > *)0;
  }
}


EXPORT int _wrap_aabbox3di___eq__ (aabbox3d< irr::s32 > *larg1, irr::core::aabbox3d< int > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::aabbox3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::s32 > const *)arg1)->operator ==((irr::core::aabbox3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3di___ne__ (aabbox3d< irr::s32 > *larg1, irr::core::aabbox3d< int > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::aabbox3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::s32 > const *)arg1)->operator !=((irr::core::aabbox3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_aabbox3di_reset__SWIG_0 (aabbox3d< irr::s32 > *larg1, int larg2, int larg3, int larg4) {
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->reset(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3di_reset__SWIG_1 (aabbox3d< irr::s32 > *larg1, irr::core::aabbox3d< int > *larg2) {
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::aabbox3d< int > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reset((irr::core::aabbox3d< int > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3di_reset__SWIG_2 (aabbox3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reset((irr::core::vector3d< int > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3di_addInternalPoint__SWIG_0 (aabbox3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addInternalPoint((irr::core::vector3d< int > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3di_addInternalBox (aabbox3d< irr::s32 > *larg1, irr::core::aabbox3d< int > *larg2) {
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::aabbox3d< int > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addInternalBox((irr::core::aabbox3d< int > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3di_addInternalPoint__SWIG_1 (aabbox3d< irr::s32 > *larg1, int larg2, int larg3, int larg4) {
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->addInternalPoint(arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< int > *_wrap_aabbox3di_getCenter (aabbox3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  try {
    result = ((aabbox3d< irr::s32 > const *)arg1)->getCenter();
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_aabbox3di_getExtent (aabbox3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  try {
    result = ((aabbox3d< irr::s32 > const *)arg1)->getExtent();
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT int _wrap_aabbox3di_isEmpty (aabbox3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((aabbox3d< irr::s32 > const *)arg1)->isEmpty();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3di_getVolume (aabbox3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((aabbox3d< irr::s32 > const *)arg1)->getVolume();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3di_getArea (aabbox3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((aabbox3d< irr::s32 > const *)arg1)->getArea();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_aabbox3di_getEdges (aabbox3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = (irr::core::vector3d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((aabbox3d< irr::s32 > const *)arg1)->getEdges(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_aabbox3di_repair (aabbox3d< irr::s32 > *larg1) {
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->repair();
    
  } catch (...) {
    
  }
}


EXPORT irr::core::aabbox3d< int > *_wrap_aabbox3di_getInterpolated (aabbox3d< irr::s32 > *larg1, irr::core::aabbox3d< int > *larg2, irr::f32 larg3) {
  irr::core::aabbox3d< int > * lresult = (irr::core::aabbox3d< int > *)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::aabbox3d< int > *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::aabbox3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((aabbox3d< irr::s32 > const *)arg1)->getInterpolated((irr::core::aabbox3d< int > const &)*arg2,arg3);
    lresult = new irr::core::aabbox3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::aabbox3d< int > *)0;
  }
}


EXPORT int _wrap_aabbox3di_isPointInside (aabbox3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::s32 > const *)arg1)->isPointInside((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3di_isPointTotalInside (aabbox3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::s32 > const *)arg1)->isPointTotalInside((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3di_isFullInside (aabbox3d< irr::s32 > *larg1, irr::core::aabbox3d< int > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::aabbox3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::s32 > const *)arg1)->isFullInside((irr::core::aabbox3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3di_intersectsWithBox (aabbox3d< irr::s32 > *larg1, irr::core::aabbox3d< int > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::aabbox3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::s32 > const *)arg1)->intersectsWithBox((irr::core::aabbox3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3di_intersectsWithLine__SWIG_0 (aabbox3d< irr::s32 > *larg1, irr::core::line3d< int > *larg2) {
  int lresult = (int)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::line3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((aabbox3d< irr::s32 > const *)arg1)->intersectsWithLine((irr::core::line3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_aabbox3di_intersectsWithLine__SWIG_1 (aabbox3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3, int larg4) {
  int lresult = (int)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((aabbox3d< irr::s32 > const *)arg1)->intersectsWithLine((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::EIntersectionRelation3D _wrap_aabbox3di_classifyPlaneRelation (aabbox3d< irr::s32 > *larg1, irr::core::plane3d< int > *larg2) {
  irr::core::EIntersectionRelation3D lresult = (irr::core::EIntersectionRelation3D)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::plane3d< int > *arg2 = 0 ;
  irr::core::EIntersectionRelation3D result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::EIntersectionRelation3D)((aabbox3d< irr::s32 > const *)arg1)->classifyPlaneRelation((irr::core::plane3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::EIntersectionRelation3D)0;
  }
}


EXPORT void _wrap_aabbox3di_MinEdge_set (aabbox3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = (irr::core::vector3d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MinEdge = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< int > *_wrap_aabbox3di_MinEdge_get (aabbox3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< int > *)& ((arg1)->MinEdge);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT void _wrap_aabbox3di_MaxEdge_set (aabbox3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = (irr::core::vector3d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->MaxEdge = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< int > *_wrap_aabbox3di_MaxEdge_get (aabbox3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< int > *)& ((arg1)->MaxEdge);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT void _wrap_delete_aabbox3di (aabbox3d< irr::s32 > *larg1) {
  aabbox3d< irr::s32 > *arg1 = (aabbox3d< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT dimension2d< irr::f32 > *_wrap_new_dimension2df__SWIG_0 () {
  dimension2d< irr::f32 > * lresult = (dimension2d< irr::f32 > *)0 ;
  dimension2d< irr::f32 > *result = 0 ;
  
  try {
    result = (dimension2d< irr::f32 > *)new dimension2d< irr::f32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (dimension2d< irr::f32 > *)0;
  }
}


EXPORT dimension2d< irr::f32 > *_wrap_new_dimension2df__SWIG_1 (float *larg1, float *larg2) {
  dimension2d< irr::f32 > * lresult = (dimension2d< irr::f32 > *)0 ;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  dimension2d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (dimension2d< irr::f32 > *)new dimension2d< irr::f32 >((float const &)*arg1,(float const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (dimension2d< irr::f32 > *)0;
  }
}


EXPORT dimension2d< irr::f32 > *_wrap_new_dimension2df__SWIG_2 (irr::core::vector2d< float > *larg1) {
  dimension2d< irr::f32 > * lresult = (dimension2d< irr::f32 > *)0 ;
  irr::core::vector2d< float > *arg1 = 0 ;
  dimension2d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (dimension2d< irr::f32 > *)new dimension2d< irr::f32 >((irr::core::vector2d< float > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (dimension2d< irr::f32 > *)0;
  }
}


EXPORT int _wrap_dimension2df___eq____SWIG_0 (dimension2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::f32 > const *)arg1)->operator ==((irr::core::dimension2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_dimension2df___ne____SWIG_0 (dimension2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::f32 > const *)arg1)->operator !=((irr::core::dimension2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_dimension2df___eq____SWIG_1 (dimension2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::f32 > const *)arg1)->operator ==((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_dimension2df___ne____SWIG_1 (dimension2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::f32 > const *)arg1)->operator !=((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df_set (dimension2d< irr::f32 > *larg1, float *larg2, float *larg3) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  irr::core::dimension2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::dimension2d< float > *) &(arg1)->set((float const &)*arg2,(float const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df___div_assign__ (dimension2d< irr::f32 > *larg1, float *larg2) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  float *arg2 = 0 ;
  irr::core::dimension2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< float > *) &(arg1)->operator /=((float const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df___div__ (dimension2d< irr::f32 > *larg1, float *larg2) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  float *arg2 = 0 ;
  irr::core::dimension2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::f32 > const *)arg1)->operator /((float const &)*arg2);
    lresult = new irr::core::dimension2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df___mul_assign__ (dimension2d< irr::f32 > *larg1, float *larg2) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  float *arg2 = 0 ;
  irr::core::dimension2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< float > *) &(arg1)->operator *=((float const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df___mul__ (dimension2d< irr::f32 > *larg1, float *larg2) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  float *arg2 = 0 ;
  irr::core::dimension2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::f32 > const *)arg1)->operator *((float const &)*arg2);
    lresult = new irr::core::dimension2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df___add_assign__ (dimension2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::dimension2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< float > *) &(arg1)->operator +=((irr::core::dimension2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df___add__ (dimension2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::dimension2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::f32 > const *)arg1)->operator +((irr::core::dimension2d< float > const &)*arg2);
    lresult = new irr::core::dimension2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df___sub_assign__ (dimension2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::dimension2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< float > *) &(arg1)->operator -=((irr::core::dimension2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df___sub__ (dimension2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::dimension2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::f32 > const *)arg1)->operator -((irr::core::dimension2d< float > const &)*arg2);
    lresult = new irr::core::dimension2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT float _wrap_dimension2df_getArea (dimension2d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((dimension2d< irr::f32 > const *)arg1)->getArea();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df_getOptimalSize__SWIG_0 (dimension2d< irr::f32 > *larg1, int larg2, int larg3, int larg4, irr::u32 larg5) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::u32 arg5 ;
  irr::core::dimension2d< float > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = ((dimension2d< irr::f32 > const *)arg1)->getOptimalSize(arg2,arg3,arg4,arg5);
    lresult = new irr::core::dimension2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df_getOptimalSize__SWIG_1 (dimension2d< irr::f32 > *larg1, int larg2, int larg3, int larg4) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::dimension2d< float > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = ((dimension2d< irr::f32 > const *)arg1)->getOptimalSize(arg2,arg3,arg4);
    lresult = new irr::core::dimension2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df_getOptimalSize__SWIG_2 (dimension2d< irr::f32 > *larg1, int larg2, int larg3) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  irr::core::dimension2d< float > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = ((dimension2d< irr::f32 > const *)arg1)->getOptimalSize(arg2,arg3);
    lresult = new irr::core::dimension2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df_getOptimalSize__SWIG_3 (dimension2d< irr::f32 > *larg1, int larg2) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  bool arg2 ;
  irr::core::dimension2d< float > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = ((dimension2d< irr::f32 > const *)arg1)->getOptimalSize(arg2);
    lresult = new irr::core::dimension2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df_getOptimalSize__SWIG_4 (dimension2d< irr::f32 > *larg1) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > result;
  
  arg1 = larg1;
  try {
    result = ((dimension2d< irr::f32 > const *)arg1)->getOptimalSize();
    lresult = new irr::core::dimension2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_dimension2df_getInterpolated (dimension2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2, irr::f32 larg3) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::dimension2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((dimension2d< irr::f32 > const *)arg1)->getInterpolated((irr::core::dimension2d< float > const &)*arg2,arg3);
    lresult = new irr::core::dimension2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT void _wrap_dimension2df_Width_set (dimension2d< irr::f32 > *larg1, float larg2) {
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Width = arg2;
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_dimension2df_Width_get (dimension2d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float) ((arg1)->Width);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_dimension2df_Height_set (dimension2d< irr::f32 > *larg1, float larg2) {
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Height = arg2;
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_dimension2df_Height_get (dimension2d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float) ((arg1)->Height);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_delete_dimension2df (dimension2d< irr::f32 > *larg1) {
  dimension2d< irr::f32 > *arg1 = (dimension2d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT dimension2d< irr::u32 > *_wrap_new_dimension2du__SWIG_0 () {
  dimension2d< irr::u32 > * lresult = (dimension2d< irr::u32 > *)0 ;
  dimension2d< irr::u32 > *result = 0 ;
  
  try {
    result = (dimension2d< irr::u32 > *)new dimension2d< irr::u32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (dimension2d< irr::u32 > *)0;
  }
}


EXPORT dimension2d< irr::u32 > *_wrap_new_dimension2du__SWIG_1 (unsigned int *larg1, unsigned int *larg2) {
  dimension2d< irr::u32 > * lresult = (dimension2d< irr::u32 > *)0 ;
  unsigned int *arg1 = 0 ;
  unsigned int *arg2 = 0 ;
  dimension2d< irr::u32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (dimension2d< irr::u32 > *)new dimension2d< irr::u32 >((unsigned int const &)*arg1,(unsigned int const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (dimension2d< irr::u32 > *)0;
  }
}


EXPORT dimension2d< irr::u32 > *_wrap_new_dimension2du__SWIG_2 (irr::core::vector2d< unsigned int > *larg1) {
  dimension2d< irr::u32 > * lresult = (dimension2d< irr::u32 > *)0 ;
  irr::core::vector2d< unsigned int > *arg1 = 0 ;
  dimension2d< irr::u32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (dimension2d< irr::u32 > *)new dimension2d< irr::u32 >((irr::core::vector2d< unsigned int > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (dimension2d< irr::u32 > *)0;
  }
}


EXPORT int _wrap_dimension2du___eq____SWIG_0 (dimension2d< irr::u32 > *larg1, irr::core::dimension2d< unsigned int > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  irr::core::dimension2d< unsigned int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::u32 > const *)arg1)->operator ==((irr::core::dimension2d< unsigned int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_dimension2du___ne____SWIG_0 (dimension2d< irr::u32 > *larg1, irr::core::dimension2d< unsigned int > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  irr::core::dimension2d< unsigned int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::u32 > const *)arg1)->operator !=((irr::core::dimension2d< unsigned int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_dimension2du___eq____SWIG_1 (dimension2d< irr::u32 > *larg1, irr::core::vector2d< unsigned int > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  irr::core::vector2d< unsigned int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::u32 > const *)arg1)->operator ==((irr::core::vector2d< unsigned int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_dimension2du___ne____SWIG_1 (dimension2d< irr::u32 > *larg1, irr::core::vector2d< unsigned int > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  irr::core::vector2d< unsigned int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::u32 > const *)arg1)->operator !=((irr::core::vector2d< unsigned int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du_set (dimension2d< irr::u32 > *larg1, unsigned int *larg2, unsigned int *larg3) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int *arg3 = 0 ;
  irr::core::dimension2d< unsigned int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::dimension2d< unsigned int > *) &(arg1)->set((unsigned int const &)*arg2,(unsigned int const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du___div_assign__ (dimension2d< irr::u32 > *larg1, unsigned int *larg2) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  irr::core::dimension2d< unsigned int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< unsigned int > *) &(arg1)->operator /=((unsigned int const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du___div__ (dimension2d< irr::u32 > *larg1, unsigned int *larg2) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  irr::core::dimension2d< unsigned int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::u32 > const *)arg1)->operator /((unsigned int const &)*arg2);
    lresult = new irr::core::dimension2d< unsigned int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du___mul_assign__ (dimension2d< irr::u32 > *larg1, unsigned int *larg2) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  irr::core::dimension2d< unsigned int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< unsigned int > *) &(arg1)->operator *=((unsigned int const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du___mul__ (dimension2d< irr::u32 > *larg1, unsigned int *larg2) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  irr::core::dimension2d< unsigned int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::u32 > const *)arg1)->operator *((unsigned int const &)*arg2);
    lresult = new irr::core::dimension2d< unsigned int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du___add_assign__ (dimension2d< irr::u32 > *larg1, irr::core::dimension2d< unsigned int > *larg2) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  irr::core::dimension2d< unsigned int > *arg2 = 0 ;
  irr::core::dimension2d< unsigned int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< unsigned int > *) &(arg1)->operator +=((irr::core::dimension2d< unsigned int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du___add__ (dimension2d< irr::u32 > *larg1, irr::core::dimension2d< unsigned int > *larg2) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  irr::core::dimension2d< unsigned int > *arg2 = 0 ;
  irr::core::dimension2d< unsigned int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::u32 > const *)arg1)->operator +((irr::core::dimension2d< unsigned int > const &)*arg2);
    lresult = new irr::core::dimension2d< unsigned int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du___sub_assign__ (dimension2d< irr::u32 > *larg1, irr::core::dimension2d< unsigned int > *larg2) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  irr::core::dimension2d< unsigned int > *arg2 = 0 ;
  irr::core::dimension2d< unsigned int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< unsigned int > *) &(arg1)->operator -=((irr::core::dimension2d< unsigned int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du___sub__ (dimension2d< irr::u32 > *larg1, irr::core::dimension2d< unsigned int > *larg2) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  irr::core::dimension2d< unsigned int > *arg2 = 0 ;
  irr::core::dimension2d< unsigned int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::u32 > const *)arg1)->operator -((irr::core::dimension2d< unsigned int > const &)*arg2);
    lresult = new irr::core::dimension2d< unsigned int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT unsigned int _wrap_dimension2du_getArea (dimension2d< irr::u32 > *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int)((dimension2d< irr::u32 > const *)arg1)->getArea();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du_getOptimalSize__SWIG_0 (dimension2d< irr::u32 > *larg1, int larg2, int larg3, int larg4, irr::u32 larg5) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::u32 arg5 ;
  irr::core::dimension2d< unsigned int > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = ((dimension2d< irr::u32 > const *)arg1)->getOptimalSize(arg2,arg3,arg4,arg5);
    lresult = new irr::core::dimension2d< unsigned int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du_getOptimalSize__SWIG_1 (dimension2d< irr::u32 > *larg1, int larg2, int larg3, int larg4) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::dimension2d< unsigned int > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = ((dimension2d< irr::u32 > const *)arg1)->getOptimalSize(arg2,arg3,arg4);
    lresult = new irr::core::dimension2d< unsigned int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du_getOptimalSize__SWIG_2 (dimension2d< irr::u32 > *larg1, int larg2, int larg3) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  irr::core::dimension2d< unsigned int > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = ((dimension2d< irr::u32 > const *)arg1)->getOptimalSize(arg2,arg3);
    lresult = new irr::core::dimension2d< unsigned int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du_getOptimalSize__SWIG_3 (dimension2d< irr::u32 > *larg1, int larg2) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  bool arg2 ;
  irr::core::dimension2d< unsigned int > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = ((dimension2d< irr::u32 > const *)arg1)->getOptimalSize(arg2);
    lresult = new irr::core::dimension2d< unsigned int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du_getOptimalSize__SWIG_4 (dimension2d< irr::u32 > *larg1) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  irr::core::dimension2d< unsigned int > result;
  
  arg1 = larg1;
  try {
    result = ((dimension2d< irr::u32 > const *)arg1)->getOptimalSize();
    lresult = new irr::core::dimension2d< unsigned int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT irr::core::dimension2d< unsigned int > *_wrap_dimension2du_getInterpolated (dimension2d< irr::u32 > *larg1, irr::core::dimension2d< unsigned int > *larg2, irr::f32 larg3) {
  irr::core::dimension2d< unsigned int > * lresult = (irr::core::dimension2d< unsigned int > *)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  irr::core::dimension2d< unsigned int > *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::dimension2d< unsigned int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((dimension2d< irr::u32 > const *)arg1)->getInterpolated((irr::core::dimension2d< unsigned int > const &)*arg2,arg3);
    lresult = new irr::core::dimension2d< unsigned int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< unsigned int > *)0;
  }
}


EXPORT void _wrap_dimension2du_Width_set (dimension2d< irr::u32 > *larg1, unsigned int larg2) {
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Width = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_dimension2du_Width_get (dimension2d< irr::u32 > *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int) ((arg1)->Width);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_dimension2du_Height_set (dimension2d< irr::u32 > *larg1, unsigned int larg2) {
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Height = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned int _wrap_dimension2du_Height_get (dimension2d< irr::u32 > *larg1) {
  unsigned int lresult = (unsigned int)0 ;
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  unsigned int result;
  
  arg1 = larg1;
  try {
    result = (unsigned int) ((arg1)->Height);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_delete_dimension2du (dimension2d< irr::u32 > *larg1) {
  dimension2d< irr::u32 > *arg1 = (dimension2d< irr::u32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT dimension2d< irr::s32 > *_wrap_new_dimension2di__SWIG_0 () {
  dimension2d< irr::s32 > * lresult = (dimension2d< irr::s32 > *)0 ;
  dimension2d< irr::s32 > *result = 0 ;
  
  try {
    result = (dimension2d< irr::s32 > *)new dimension2d< irr::s32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (dimension2d< irr::s32 > *)0;
  }
}


EXPORT dimension2d< irr::s32 > *_wrap_new_dimension2di__SWIG_1 (int *larg1, int *larg2) {
  dimension2d< irr::s32 > * lresult = (dimension2d< irr::s32 > *)0 ;
  int *arg1 = 0 ;
  int *arg2 = 0 ;
  dimension2d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (dimension2d< irr::s32 > *)new dimension2d< irr::s32 >((int const &)*arg1,(int const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (dimension2d< irr::s32 > *)0;
  }
}


EXPORT dimension2d< irr::s32 > *_wrap_new_dimension2di__SWIG_2 (irr::core::vector2d< int > *larg1) {
  dimension2d< irr::s32 > * lresult = (dimension2d< irr::s32 > *)0 ;
  irr::core::vector2d< int > *arg1 = 0 ;
  dimension2d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (dimension2d< irr::s32 > *)new dimension2d< irr::s32 >((irr::core::vector2d< int > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (dimension2d< irr::s32 > *)0;
  }
}


EXPORT int _wrap_dimension2di___eq____SWIG_0 (dimension2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::s32 > const *)arg1)->operator ==((irr::core::dimension2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_dimension2di___ne____SWIG_0 (dimension2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::s32 > const *)arg1)->operator !=((irr::core::dimension2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_dimension2di___eq____SWIG_1 (dimension2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::s32 > const *)arg1)->operator ==((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_dimension2di___ne____SWIG_1 (dimension2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((dimension2d< irr::s32 > const *)arg1)->operator !=((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di_set (dimension2d< irr::s32 > *larg1, int *larg2, int *larg3) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  irr::core::dimension2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::dimension2d< int > *) &(arg1)->set((int const &)*arg2,(int const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di___div_assign__ (dimension2d< irr::s32 > *larg1, int *larg2) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  int *arg2 = 0 ;
  irr::core::dimension2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< int > *) &(arg1)->operator /=((int const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di___div__ (dimension2d< irr::s32 > *larg1, int *larg2) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  int *arg2 = 0 ;
  irr::core::dimension2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::s32 > const *)arg1)->operator /((int const &)*arg2);
    lresult = new irr::core::dimension2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di___mul_assign__ (dimension2d< irr::s32 > *larg1, int *larg2) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  int *arg2 = 0 ;
  irr::core::dimension2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< int > *) &(arg1)->operator *=((int const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di___mul__ (dimension2d< irr::s32 > *larg1, int *larg2) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  int *arg2 = 0 ;
  irr::core::dimension2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::s32 > const *)arg1)->operator *((int const &)*arg2);
    lresult = new irr::core::dimension2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di___add_assign__ (dimension2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::dimension2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< int > *) &(arg1)->operator +=((irr::core::dimension2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di___add__ (dimension2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::dimension2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::s32 > const *)arg1)->operator +((irr::core::dimension2d< int > const &)*arg2);
    lresult = new irr::core::dimension2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di___sub_assign__ (dimension2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::dimension2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::dimension2d< int > *) &(arg1)->operator -=((irr::core::dimension2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di___sub__ (dimension2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::dimension2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((dimension2d< irr::s32 > const *)arg1)->operator -((irr::core::dimension2d< int > const &)*arg2);
    lresult = new irr::core::dimension2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT int _wrap_dimension2di_getArea (dimension2d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((dimension2d< irr::s32 > const *)arg1)->getArea();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di_getOptimalSize__SWIG_0 (dimension2d< irr::s32 > *larg1, int larg2, int larg3, int larg4, irr::u32 larg5) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::u32 arg5 ;
  irr::core::dimension2d< int > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  arg5 = larg5;
  try {
    result = ((dimension2d< irr::s32 > const *)arg1)->getOptimalSize(arg2,arg3,arg4,arg5);
    lresult = new irr::core::dimension2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di_getOptimalSize__SWIG_1 (dimension2d< irr::s32 > *larg1, int larg2, int larg3, int larg4) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  irr::core::dimension2d< int > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = ((dimension2d< irr::s32 > const *)arg1)->getOptimalSize(arg2,arg3,arg4);
    lresult = new irr::core::dimension2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di_getOptimalSize__SWIG_2 (dimension2d< irr::s32 > *larg1, int larg2, int larg3) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  bool arg2 ;
  bool arg3 ;
  irr::core::dimension2d< int > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = ((dimension2d< irr::s32 > const *)arg1)->getOptimalSize(arg2,arg3);
    lresult = new irr::core::dimension2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di_getOptimalSize__SWIG_3 (dimension2d< irr::s32 > *larg1, int larg2) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  bool arg2 ;
  irr::core::dimension2d< int > result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = ((dimension2d< irr::s32 > const *)arg1)->getOptimalSize(arg2);
    lresult = new irr::core::dimension2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di_getOptimalSize__SWIG_4 (dimension2d< irr::s32 > *larg1) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > result;
  
  arg1 = larg1;
  try {
    result = ((dimension2d< irr::s32 > const *)arg1)->getOptimalSize();
    lresult = new irr::core::dimension2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_dimension2di_getInterpolated (dimension2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2, irr::f32 larg3) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::dimension2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((dimension2d< irr::s32 > const *)arg1)->getInterpolated((irr::core::dimension2d< int > const &)*arg2,arg3);
    lresult = new irr::core::dimension2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT void _wrap_dimension2di_Width_set (dimension2d< irr::s32 > *larg1, int larg2) {
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Width = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_dimension2di_Width_get (dimension2d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int) ((arg1)->Width);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_dimension2di_Height_set (dimension2d< irr::s32 > *larg1, int larg2) {
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Height = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_dimension2di_Height_get (dimension2d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int) ((arg1)->Height);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_dimension2di (dimension2d< irr::s32 > *larg1) {
  dimension2d< irr::s32 > *arg1 = (dimension2d< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT line2d< irr::f32 > *_wrap_new_line2df__SWIG_0 () {
  line2d< irr::f32 > * lresult = (line2d< irr::f32 > *)0 ;
  line2d< irr::f32 > *result = 0 ;
  
  try {
    result = (line2d< irr::f32 > *)new line2d< irr::f32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (line2d< irr::f32 > *)0;
  }
}


EXPORT line2d< irr::f32 > *_wrap_new_line2df__SWIG_1 (float larg1, float larg2, float larg3, float larg4) {
  line2d< irr::f32 > * lresult = (line2d< irr::f32 > *)0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  line2d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (line2d< irr::f32 > *)new line2d< irr::f32 >(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line2d< irr::f32 > *)0;
  }
}


EXPORT line2d< irr::f32 > *_wrap_new_line2df__SWIG_2 (irr::core::vector2d< float > *larg1, irr::core::vector2d< float > *larg2) {
  line2d< irr::f32 > * lresult = (line2d< irr::f32 > *)0 ;
  irr::core::vector2d< float > *arg1 = 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  line2d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (line2d< irr::f32 > *)new line2d< irr::f32 >((irr::core::vector2d< float > const &)*arg1,(irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line2d< irr::f32 > *)0;
  }
}


EXPORT line2d< irr::f32 > *_wrap_new_line2df__SWIG_3 (irr::core::line2d< float > *larg1) {
  line2d< irr::f32 > * lresult = (line2d< irr::f32 > *)0 ;
  irr::core::line2d< float > *arg1 = 0 ;
  line2d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (line2d< irr::f32 > *)new line2d< irr::f32 >((irr::core::line2d< float > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line2d< irr::f32 > *)0;
  }
}


EXPORT irr::core::line2d< float > *_wrap_line2df___add__ (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::line2d< float > * lresult = (irr::core::line2d< float > *)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::line2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line2d< irr::f32 > const *)arg1)->operator +((irr::core::vector2d< float > const &)*arg2);
    lresult = new irr::core::line2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::line2d< float > *)0;
  }
}


EXPORT irr::core::line2d< float > *_wrap_line2df___add_assign__ (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::line2d< float > * lresult = (irr::core::line2d< float > *)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::line2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::line2d< float > *) &(arg1)->operator +=((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::line2d< float > *)0;
  }
}


EXPORT irr::core::line2d< float > *_wrap_line2df___sub__ (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::line2d< float > * lresult = (irr::core::line2d< float > *)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::line2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line2d< irr::f32 > const *)arg1)->operator -((irr::core::vector2d< float > const &)*arg2);
    lresult = new irr::core::line2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::line2d< float > *)0;
  }
}


EXPORT irr::core::line2d< float > *_wrap_line2df___sub_assign__ (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::line2d< float > * lresult = (irr::core::line2d< float > *)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::line2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::line2d< float > *) &(arg1)->operator -=((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::line2d< float > *)0;
  }
}


EXPORT int _wrap_line2df___eq__ (line2d< irr::f32 > *larg1, irr::core::line2d< float > *larg2) {
  int lresult = (int)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::line2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line2d< irr::f32 > const *)arg1)->operator ==((irr::core::line2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_line2df___ne__ (line2d< irr::f32 > *larg1, irr::core::line2d< float > *larg2) {
  int lresult = (int)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::line2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line2d< irr::f32 > const *)arg1)->operator !=((irr::core::line2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_line2df_setLine__SWIG_0 (line2d< irr::f32 > *larg1, float *larg2, float *larg3, float *larg4, float *larg5) {
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->setLine((float const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_line2df_setLine__SWIG_1 (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2, irr::core::vector2d< float > *larg3) {
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setLine((irr::core::vector2d< float > const &)*arg2,(irr::core::vector2d< float > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_line2df_setLine__SWIG_2 (line2d< irr::f32 > *larg1, irr::core::line2d< float > *larg2) {
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::line2d< float > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLine((irr::core::line2d< float > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_line2df_getLength (line2d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((line2d< irr::f32 > const *)arg1)->getLength();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_line2df_getLengthSQ (line2d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((line2d< irr::f32 > const *)arg1)->getLengthSQ();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_line2df_getMiddle (line2d< irr::f32 > *larg1) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  try {
    result = ((line2d< irr::f32 > const *)arg1)->getMiddle();
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_line2df_getVector (line2d< irr::f32 > *larg1) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  try {
    result = ((line2d< irr::f32 > const *)arg1)->getVector();
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT int _wrap_line2df_intersectWith__SWIG_0 (line2d< irr::f32 > *larg1, irr::core::line2d< float > *larg2, irr::core::vector2d< float > *larg3, int larg4) {
  int lresult = (int)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::line2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)((line2d< irr::f32 > const *)arg1)->intersectWith((irr::core::line2d< float > const &)*arg2,*arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_line2df_intersectWith__SWIG_1 (line2d< irr::f32 > *larg1, irr::core::line2d< float > *larg2, irr::core::vector2d< float > *larg3) {
  int lresult = (int)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::line2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((line2d< irr::f32 > const *)arg1)->intersectWith((irr::core::line2d< float > const &)*arg2,*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_line2df_getUnitVector (line2d< irr::f32 > *larg1) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  try {
    result = ((line2d< irr::f32 > const *)arg1)->getUnitVector();
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::f64 _wrap_line2df_getAngleWith (line2d< irr::f32 > *larg1, irr::core::line2d< float > *larg2) {
  irr::f64 lresult = (irr::f64)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::line2d< float > *arg2 = 0 ;
  irr::f64 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f64)((line2d< irr::f32 > const *)arg1)->getAngleWith((irr::core::line2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT float _wrap_line2df_getPointOrientation (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  float lresult = (float)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)((line2d< irr::f32 > const *)arg1)->getPointOrientation((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT int _wrap_line2df_isPointOnLine (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line2d< irr::f32 > const *)arg1)->isPointOnLine((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_line2df_isPointBetweenStartAndEnd (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line2d< irr::f32 > const *)arg1)->isPointBetweenStartAndEnd((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_line2df_getClosestPoint__SWIG_0 (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2, int larg3) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool arg3 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = ((line2d< irr::f32 > const *)arg1)->getClosestPoint((irr::core::vector2d< float > const &)*arg2,arg3);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_line2df_getClosestPoint__SWIG_1 (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line2d< irr::f32 > const *)arg1)->getClosestPoint((irr::core::vector2d< float > const &)*arg2);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT void _wrap_line2df_start_set (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = (irr::core::vector2d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->start = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector2d< float > *_wrap_line2df_start_get (line2d< irr::f32 > *larg1) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector2d< float > *)& ((arg1)->start);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT void _wrap_line2df_end_set (line2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = (irr::core::vector2d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->end = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector2d< float > *_wrap_line2df_end_get (line2d< irr::f32 > *larg1) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector2d< float > *)& ((arg1)->end);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT void _wrap_delete_line2df (line2d< irr::f32 > *larg1) {
  line2d< irr::f32 > *arg1 = (line2d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT line2d< irr::s32 > *_wrap_new_line2di__SWIG_0 () {
  line2d< irr::s32 > * lresult = (line2d< irr::s32 > *)0 ;
  line2d< irr::s32 > *result = 0 ;
  
  try {
    result = (line2d< irr::s32 > *)new line2d< irr::s32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (line2d< irr::s32 > *)0;
  }
}


EXPORT line2d< irr::s32 > *_wrap_new_line2di__SWIG_1 (int larg1, int larg2, int larg3, int larg4) {
  line2d< irr::s32 > * lresult = (line2d< irr::s32 > *)0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  line2d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (line2d< irr::s32 > *)new line2d< irr::s32 >(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line2d< irr::s32 > *)0;
  }
}


EXPORT line2d< irr::s32 > *_wrap_new_line2di__SWIG_2 (irr::core::vector2d< int > *larg1, irr::core::vector2d< int > *larg2) {
  line2d< irr::s32 > * lresult = (line2d< irr::s32 > *)0 ;
  irr::core::vector2d< int > *arg1 = 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  line2d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (line2d< irr::s32 > *)new line2d< irr::s32 >((irr::core::vector2d< int > const &)*arg1,(irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line2d< irr::s32 > *)0;
  }
}


EXPORT line2d< irr::s32 > *_wrap_new_line2di__SWIG_3 (irr::core::line2d< int > *larg1) {
  line2d< irr::s32 > * lresult = (line2d< irr::s32 > *)0 ;
  irr::core::line2d< int > *arg1 = 0 ;
  line2d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (line2d< irr::s32 > *)new line2d< irr::s32 >((irr::core::line2d< int > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line2d< irr::s32 > *)0;
  }
}


EXPORT irr::core::line2d< int > *_wrap_line2di___add__ (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::line2d< int > * lresult = (irr::core::line2d< int > *)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::line2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line2d< irr::s32 > const *)arg1)->operator +((irr::core::vector2d< int > const &)*arg2);
    lresult = new irr::core::line2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::line2d< int > *)0;
  }
}


EXPORT irr::core::line2d< int > *_wrap_line2di___add_assign__ (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::line2d< int > * lresult = (irr::core::line2d< int > *)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::line2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::line2d< int > *) &(arg1)->operator +=((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::line2d< int > *)0;
  }
}


EXPORT irr::core::line2d< int > *_wrap_line2di___sub__ (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::line2d< int > * lresult = (irr::core::line2d< int > *)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::line2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line2d< irr::s32 > const *)arg1)->operator -((irr::core::vector2d< int > const &)*arg2);
    lresult = new irr::core::line2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::line2d< int > *)0;
  }
}


EXPORT irr::core::line2d< int > *_wrap_line2di___sub_assign__ (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::line2d< int > * lresult = (irr::core::line2d< int > *)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::line2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::line2d< int > *) &(arg1)->operator -=((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::line2d< int > *)0;
  }
}


EXPORT int _wrap_line2di___eq__ (line2d< irr::s32 > *larg1, irr::core::line2d< int > *larg2) {
  int lresult = (int)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::line2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line2d< irr::s32 > const *)arg1)->operator ==((irr::core::line2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_line2di___ne__ (line2d< irr::s32 > *larg1, irr::core::line2d< int > *larg2) {
  int lresult = (int)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::line2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line2d< irr::s32 > const *)arg1)->operator !=((irr::core::line2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_line2di_setLine__SWIG_0 (line2d< irr::s32 > *larg1, int *larg2, int *larg3, int *larg4, int *larg5) {
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    (arg1)->setLine((int const &)*arg2,(int const &)*arg3,(int const &)*arg4,(int const &)*arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_line2di_setLine__SWIG_1 (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2, irr::core::vector2d< int > *larg3) {
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setLine((irr::core::vector2d< int > const &)*arg2,(irr::core::vector2d< int > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_line2di_setLine__SWIG_2 (line2d< irr::s32 > *larg1, irr::core::line2d< int > *larg2) {
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::line2d< int > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLine((irr::core::line2d< int > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_line2di_getLength (line2d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((line2d< irr::s32 > const *)arg1)->getLength();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_line2di_getLengthSQ (line2d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((line2d< irr::s32 > const *)arg1)->getLengthSQ();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_line2di_getMiddle (line2d< irr::s32 > *larg1) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  try {
    result = ((line2d< irr::s32 > const *)arg1)->getMiddle();
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_line2di_getVector (line2d< irr::s32 > *larg1) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  try {
    result = ((line2d< irr::s32 > const *)arg1)->getVector();
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT int _wrap_line2di_intersectWith__SWIG_0 (line2d< irr::s32 > *larg1, irr::core::line2d< int > *larg2, irr::core::vector2d< int > *larg3, int larg4) {
  int lresult = (int)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::line2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = (bool)((line2d< irr::s32 > const *)arg1)->intersectWith((irr::core::line2d< int > const &)*arg2,*arg3,arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_line2di_intersectWith__SWIG_1 (line2d< irr::s32 > *larg1, irr::core::line2d< int > *larg2, irr::core::vector2d< int > *larg3) {
  int lresult = (int)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::line2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((line2d< irr::s32 > const *)arg1)->intersectWith((irr::core::line2d< int > const &)*arg2,*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_line2di_getUnitVector (line2d< irr::s32 > *larg1) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  try {
    result = ((line2d< irr::s32 > const *)arg1)->getUnitVector();
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::f64 _wrap_line2di_getAngleWith (line2d< irr::s32 > *larg1, irr::core::line2d< int > *larg2) {
  irr::f64 lresult = (irr::f64)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::line2d< int > *arg2 = 0 ;
  irr::f64 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f64)((line2d< irr::s32 > const *)arg1)->getAngleWith((irr::core::line2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT int _wrap_line2di_getPointOrientation (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((line2d< irr::s32 > const *)arg1)->getPointOrientation((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_line2di_isPointOnLine (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line2d< irr::s32 > const *)arg1)->isPointOnLine((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_line2di_isPointBetweenStartAndEnd (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line2d< irr::s32 > const *)arg1)->isPointBetweenStartAndEnd((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_line2di_getClosestPoint__SWIG_0 (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2, int larg3) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool arg3 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = ((line2d< irr::s32 > const *)arg1)->getClosestPoint((irr::core::vector2d< int > const &)*arg2,arg3);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_line2di_getClosestPoint__SWIG_1 (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line2d< irr::s32 > const *)arg1)->getClosestPoint((irr::core::vector2d< int > const &)*arg2);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT void _wrap_line2di_start_set (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = (irr::core::vector2d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->start = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector2d< int > *_wrap_line2di_start_get (line2d< irr::s32 > *larg1) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector2d< int > *)& ((arg1)->start);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT void _wrap_line2di_end_set (line2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = (irr::core::vector2d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->end = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector2d< int > *_wrap_line2di_end_get (line2d< irr::s32 > *larg1) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector2d< int > *)& ((arg1)->end);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT void _wrap_delete_line2di (line2d< irr::s32 > *larg1) {
  line2d< irr::s32 > *arg1 = (line2d< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT line3d< irr::f32 > *_wrap_new_line3df__SWIG_0 () {
  line3d< irr::f32 > * lresult = (line3d< irr::f32 > *)0 ;
  line3d< irr::f32 > *result = 0 ;
  
  try {
    result = (line3d< irr::f32 > *)new line3d< irr::f32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (line3d< irr::f32 > *)0;
  }
}


EXPORT line3d< irr::f32 > *_wrap_new_line3df__SWIG_1 (float larg1, float larg2, float larg3, float larg4, float larg5, float larg6) {
  line3d< irr::f32 > * lresult = (line3d< irr::f32 > *)0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  line3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (line3d< irr::f32 > *)new line3d< irr::f32 >(arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line3d< irr::f32 > *)0;
  }
}


EXPORT line3d< irr::f32 > *_wrap_new_line3df__SWIG_2 (irr::core::vector3d< float > *larg1, irr::core::vector3d< float > *larg2) {
  line3d< irr::f32 > * lresult = (line3d< irr::f32 > *)0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  line3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (line3d< irr::f32 > *)new line3d< irr::f32 >((irr::core::vector3d< float > const &)*arg1,(irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line3d< irr::f32 > *)0;
  }
}


EXPORT irr::core::line3d< float > *_wrap_line3df___add__ (line3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::line3d< float > * lresult = (irr::core::line3d< float > *)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::line3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line3d< irr::f32 > const *)arg1)->operator +((irr::core::vector3d< float > const &)*arg2);
    lresult = new irr::core::line3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::line3d< float > *)0;
  }
}


EXPORT irr::core::line3d< float > *_wrap_line3df___add_assign__ (line3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::line3d< float > * lresult = (irr::core::line3d< float > *)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::line3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::line3d< float > *) &(arg1)->operator +=((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::line3d< float > *)0;
  }
}


EXPORT irr::core::line3d< float > *_wrap_line3df___sub__ (line3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::line3d< float > * lresult = (irr::core::line3d< float > *)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::line3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line3d< irr::f32 > const *)arg1)->operator -((irr::core::vector3d< float > const &)*arg2);
    lresult = new irr::core::line3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::line3d< float > *)0;
  }
}


EXPORT irr::core::line3d< float > *_wrap_line3df___sub_assign__ (line3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::line3d< float > * lresult = (irr::core::line3d< float > *)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::line3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::line3d< float > *) &(arg1)->operator -=((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::line3d< float > *)0;
  }
}


EXPORT int _wrap_line3df___eq__ (line3d< irr::f32 > *larg1, irr::core::line3d< float > *larg2) {
  int lresult = (int)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::line3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line3d< irr::f32 > const *)arg1)->operator ==((irr::core::line3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_line3df___ne__ (line3d< irr::f32 > *larg1, irr::core::line3d< float > *larg2) {
  int lresult = (int)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::line3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line3d< irr::f32 > const *)arg1)->operator !=((irr::core::line3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_line3df_setLine__SWIG_0 (line3d< irr::f32 > *larg1, float *larg2, float *larg3, float *larg4, float *larg5, float *larg6, float *larg7) {
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  float *arg7 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    (arg1)->setLine((float const &)*arg2,(float const &)*arg3,(float const &)*arg4,(float const &)*arg5,(float const &)*arg6,(float const &)*arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_line3df_setLine__SWIG_1 (line3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3) {
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_line3df_setLine__SWIG_2 (line3d< irr::f32 > *larg1, irr::core::line3d< float > *larg2) {
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::line3d< float > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLine((irr::core::line3d< float > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_line3df_getLength (line3d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((line3d< irr::f32 > const *)arg1)->getLength();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_line3df_getLengthSQ (line3d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((line3d< irr::f32 > const *)arg1)->getLengthSQ();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_line3df_getMiddle (line3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((line3d< irr::f32 > const *)arg1)->getMiddle();
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_line3df_getVector (line3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((line3d< irr::f32 > const *)arg1)->getVector();
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT int _wrap_line3df_isPointBetweenStartAndEnd (line3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line3d< irr::f32 > const *)arg1)->isPointBetweenStartAndEnd((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_line3df_getClosestPoint (line3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line3d< irr::f32 > const *)arg1)->getClosestPoint((irr::core::vector3d< float > const &)*arg2);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT int _wrap_line3df_getIntersectionWithSphere (line3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, float larg3, irr::f64 *larg4) {
  int lresult = (int)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > arg2 ;
  float arg3 ;
  irr::f64 *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((line3d< irr::f32 > const *)arg1)->getIntersectionWithSphere(arg2,arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_line3df_start_set (line3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->start = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< float > *_wrap_line3df_start_get (line3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< float > *)& ((arg1)->start);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT void _wrap_line3df_end_set (line3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->end = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< float > *_wrap_line3df_end_get (line3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< float > *)& ((arg1)->end);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT void _wrap_delete_line3df (line3d< irr::f32 > *larg1) {
  line3d< irr::f32 > *arg1 = (line3d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT line3d< irr::s32 > *_wrap_new_line3di__SWIG_0 () {
  line3d< irr::s32 > * lresult = (line3d< irr::s32 > *)0 ;
  line3d< irr::s32 > *result = 0 ;
  
  try {
    result = (line3d< irr::s32 > *)new line3d< irr::s32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (line3d< irr::s32 > *)0;
  }
}


EXPORT line3d< irr::s32 > *_wrap_new_line3di__SWIG_1 (int larg1, int larg2, int larg3, int larg4, int larg5, int larg6) {
  line3d< irr::s32 > * lresult = (line3d< irr::s32 > *)0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  line3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (line3d< irr::s32 > *)new line3d< irr::s32 >(arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line3d< irr::s32 > *)0;
  }
}


EXPORT line3d< irr::s32 > *_wrap_new_line3di__SWIG_2 (irr::core::vector3d< int > *larg1, irr::core::vector3d< int > *larg2) {
  line3d< irr::s32 > * lresult = (line3d< irr::s32 > *)0 ;
  irr::core::vector3d< int > *arg1 = 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  line3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (line3d< irr::s32 > *)new line3d< irr::s32 >((irr::core::vector3d< int > const &)*arg1,(irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line3d< irr::s32 > *)0;
  }
}


EXPORT irr::core::line3d< int > *_wrap_line3di___add__ (line3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::line3d< int > * lresult = (irr::core::line3d< int > *)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::line3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line3d< irr::s32 > const *)arg1)->operator +((irr::core::vector3d< int > const &)*arg2);
    lresult = new irr::core::line3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::line3d< int > *)0;
  }
}


EXPORT irr::core::line3d< int > *_wrap_line3di___add_assign__ (line3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::line3d< int > * lresult = (irr::core::line3d< int > *)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::line3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::line3d< int > *) &(arg1)->operator +=((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::line3d< int > *)0;
  }
}


EXPORT irr::core::line3d< int > *_wrap_line3di___sub__ (line3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::line3d< int > * lresult = (irr::core::line3d< int > *)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::line3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line3d< irr::s32 > const *)arg1)->operator -((irr::core::vector3d< int > const &)*arg2);
    lresult = new irr::core::line3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::line3d< int > *)0;
  }
}


EXPORT irr::core::line3d< int > *_wrap_line3di___sub_assign__ (line3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::line3d< int > * lresult = (irr::core::line3d< int > *)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::line3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::line3d< int > *) &(arg1)->operator -=((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::line3d< int > *)0;
  }
}


EXPORT int _wrap_line3di___eq__ (line3d< irr::s32 > *larg1, irr::core::line3d< int > *larg2) {
  int lresult = (int)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::line3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line3d< irr::s32 > const *)arg1)->operator ==((irr::core::line3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_line3di___ne__ (line3d< irr::s32 > *larg1, irr::core::line3d< int > *larg2) {
  int lresult = (int)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::line3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line3d< irr::s32 > const *)arg1)->operator !=((irr::core::line3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_line3di_setLine__SWIG_0 (line3d< irr::s32 > *larg1, int *larg2, int *larg3, int *larg4, int *larg5, int *larg6, int *larg7) {
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  int *arg7 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  arg7 = larg7;
  try {
    (arg1)->setLine((int const &)*arg2,(int const &)*arg3,(int const &)*arg4,(int const &)*arg5,(int const &)*arg6,(int const &)*arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_line3di_setLine__SWIG_1 (line3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3) {
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setLine((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_line3di_setLine__SWIG_2 (line3d< irr::s32 > *larg1, irr::core::line3d< int > *larg2) {
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::line3d< int > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->setLine((irr::core::line3d< int > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_line3di_getLength (line3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((line3d< irr::s32 > const *)arg1)->getLength();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_line3di_getLengthSQ (line3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((line3d< irr::s32 > const *)arg1)->getLengthSQ();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_line3di_getMiddle (line3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  try {
    result = ((line3d< irr::s32 > const *)arg1)->getMiddle();
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_line3di_getVector (line3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  try {
    result = ((line3d< irr::s32 > const *)arg1)->getVector();
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT int _wrap_line3di_isPointBetweenStartAndEnd (line3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((line3d< irr::s32 > const *)arg1)->isPointBetweenStartAndEnd((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_line3di_getClosestPoint (line3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((line3d< irr::s32 > const *)arg1)->getClosestPoint((irr::core::vector3d< int > const &)*arg2);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT int _wrap_line3di_getIntersectionWithSphere (line3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, int larg3, irr::f64 *larg4) {
  int lresult = (int)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > arg2 ;
  int arg3 ;
  irr::f64 *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = *larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((line3d< irr::s32 > const *)arg1)->getIntersectionWithSphere(arg2,arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_line3di_start_set (line3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = (irr::core::vector3d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->start = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< int > *_wrap_line3di_start_get (line3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< int > *)& ((arg1)->start);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT void _wrap_line3di_end_set (line3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = (irr::core::vector3d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->end = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< int > *_wrap_line3di_end_get (line3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< int > *)& ((arg1)->end);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT void _wrap_delete_line3di (line3d< irr::s32 > *larg1) {
  line3d< irr::s32 > *arg1 = (line3d< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT CMatrix4< irr::f32 > *_wrap_new_matrix4__SWIG_0 (CMatrix4< float >::eConstructor larg1) {
  CMatrix4< irr::f32 > * lresult = (CMatrix4< irr::f32 > *)0 ;
  CMatrix4< float >::eConstructor arg1 ;
  CMatrix4< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (CMatrix4< irr::f32 > *)new CMatrix4< irr::f32 >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (CMatrix4< irr::f32 > *)0;
  }
}


EXPORT CMatrix4< irr::f32 > *_wrap_new_matrix4__SWIG_1 () {
  CMatrix4< irr::f32 > * lresult = (CMatrix4< irr::f32 > *)0 ;
  CMatrix4< irr::f32 > *result = 0 ;
  
  try {
    result = (CMatrix4< irr::f32 > *)new CMatrix4< irr::f32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (CMatrix4< irr::f32 > *)0;
  }
}


EXPORT CMatrix4< irr::f32 > *_wrap_new_matrix4__SWIG_2 (irr::core::CMatrix4< float > *larg1, CMatrix4< float >::eConstructor larg2) {
  CMatrix4< irr::f32 > * lresult = (CMatrix4< irr::f32 > *)0 ;
  irr::core::CMatrix4< float > *arg1 = 0 ;
  CMatrix4< float >::eConstructor arg2 ;
  CMatrix4< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (CMatrix4< irr::f32 > *)new CMatrix4< irr::f32 >((irr::core::CMatrix4< float > const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (CMatrix4< irr::f32 > *)0;
  }
}


EXPORT CMatrix4< irr::f32 > *_wrap_new_matrix4__SWIG_3 (irr::core::CMatrix4< float > *larg1) {
  CMatrix4< irr::f32 > * lresult = (CMatrix4< irr::f32 > *)0 ;
  irr::core::CMatrix4< float > *arg1 = 0 ;
  CMatrix4< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (CMatrix4< irr::f32 > *)new CMatrix4< irr::f32 >((irr::core::CMatrix4< float > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (CMatrix4< irr::f32 > *)0;
  }
}


EXPORT float *_wrap_matrix4___funcall____SWIG_0 (CMatrix4< irr::f32 > *larg1, irr::s32 larg2, irr::s32 larg3) {
  float * lresult = (float *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  float *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (float *) &(arg1)->operator ()(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float *)0;
  }
}


EXPORT float *_wrap_matrix4___funcall____SWIG_1 (CMatrix4< irr::f32 > *larg1, irr::s32 larg2, irr::s32 larg3) {
  float * lresult = (float *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::s32 arg2 ;
  irr::s32 arg3 ;
  float *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (float *) &((CMatrix4< irr::f32 > const *)arg1)->operator ()(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float *)0;
  }
}


EXPORT float *_wrap_matrix4___aref____SWIG_0 (CMatrix4< irr::f32 > *larg1, irr::u32 larg2) {
  float * lresult = (float *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::u32 arg2 ;
  float *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float *) &(arg1)->operator [](arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float *)0;
  }
}


EXPORT float *_wrap_matrix4___aref____SWIG_1 (CMatrix4< irr::f32 > *larg1, irr::u32 larg2) {
  float * lresult = (float *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::u32 arg2 ;
  float *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float *) &((CMatrix4< irr::f32 > const *)arg1)->operator [](arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4___assign____SWIG_0 (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->operator =((irr::core::CMatrix4< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4___assign____SWIG_1 (CMatrix4< irr::f32 > *larg1, float *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->operator =((float const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT float *_wrap_matrix4_pointer__SWIG_0 (CMatrix4< irr::f32 > *larg1) {
  float * lresult = (float *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (float *)((CMatrix4< irr::f32 > const *)arg1)->pointer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float *)0;
  }
}


EXPORT float *_wrap_matrix4_pointer__SWIG_1 (CMatrix4< irr::f32 > *larg1) {
  float * lresult = (float *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (float *)(arg1)->pointer();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float *)0;
  }
}


EXPORT int _wrap_matrix4___eq__ (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  int lresult = (int)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((CMatrix4< irr::f32 > const *)arg1)->operator ==((irr::core::CMatrix4< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_matrix4___ne__ (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  int lresult = (int)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((CMatrix4< irr::f32 > const *)arg1)->operator !=((irr::core::CMatrix4< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4___add__ (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((CMatrix4< irr::f32 > const *)arg1)->operator +((irr::core::CMatrix4< float > const &)*arg2);
    lresult = new irr::core::CMatrix4< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4___add_assign__ (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->operator +=((irr::core::CMatrix4< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4___sub__ (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((CMatrix4< irr::f32 > const *)arg1)->operator -((irr::core::CMatrix4< float > const &)*arg2);
    lresult = new irr::core::CMatrix4< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4___sub_assign__ (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->operator -=((irr::core::CMatrix4< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setbyproduct (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2, irr::core::CMatrix4< float > *larg3) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *arg3 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setbyproduct((irr::core::CMatrix4< float > const &)*arg2,(irr::core::CMatrix4< float > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setbyproduct_nocheck (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2, irr::core::CMatrix4< float > *larg3) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *arg3 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setbyproduct_nocheck((irr::core::CMatrix4< float > const &)*arg2,(irr::core::CMatrix4< float > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4___mul____SWIG_0 (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((CMatrix4< irr::f32 > const *)arg1)->operator *((irr::core::CMatrix4< float > const &)*arg2);
    lresult = new irr::core::CMatrix4< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4___mul_assign____SWIG_0 (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->operator *=((irr::core::CMatrix4< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4___mul____SWIG_1 (CMatrix4< irr::f32 > *larg1, float *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float *arg2 = 0 ;
  irr::core::CMatrix4< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((CMatrix4< irr::f32 > const *)arg1)->operator *((float const &)*arg2);
    lresult = new irr::core::CMatrix4< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4___mul_assign____SWIG_1 (CMatrix4< irr::f32 > *larg1, float *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->operator *=((float const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_makeIdentity (CMatrix4< irr::f32 > *larg1) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->makeIdentity();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT int _wrap_matrix4_isIdentity (CMatrix4< irr::f32 > *larg1) {
  int lresult = (int)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((CMatrix4< irr::f32 > const *)arg1)->isIdentity();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_matrix4_isOrthogonal (CMatrix4< irr::f32 > *larg1) {
  int lresult = (int)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((CMatrix4< irr::f32 > const *)arg1)->isOrthogonal();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_matrix4_isIdentity_integer_base (CMatrix4< irr::f32 > *larg1) {
  int lresult = (int)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((CMatrix4< irr::f32 > const *)arg1)->isIdentity_integer_base();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setTranslation (CMatrix4< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setTranslation((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_matrix4_getTranslation (CMatrix4< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((CMatrix4< irr::f32 > const *)arg1)->getTranslation();
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setInverseTranslation (CMatrix4< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setInverseTranslation((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setRotationRadians (CMatrix4< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setRotationRadians((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setRotationDegrees (CMatrix4< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setRotationDegrees((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT core::vector3d< float > *_wrap_matrix4_getRotationDegrees (CMatrix4< irr::f32 > *larg1) {
  core::vector3d< float > * lresult = (core::vector3d< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((CMatrix4< irr::f32 > const *)arg1)->getRotationDegrees();
    lresult = new core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (core::vector3d< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setInverseRotationRadians (CMatrix4< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setInverseRotationRadians((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setInverseRotationDegrees (CMatrix4< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setInverseRotationDegrees((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setRotationAxisRadians (CMatrix4< irr::f32 > *larg1, float *larg2, irr::core::vector3d< float > *larg3) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setRotationAxisRadians((float const &)*arg2,(irr::core::vector3d< float > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setScale__SWIG_0 (CMatrix4< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setScale((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setScale__SWIG_1 (CMatrix4< irr::f32 > *larg1, float larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setScale(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT core::vector3d< float > *_wrap_matrix4_getScale (CMatrix4< irr::f32 > *larg1) {
  core::vector3d< float > * lresult = (core::vector3d< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((CMatrix4< irr::f32 > const *)arg1)->getScale();
    lresult = new core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (core::vector3d< float > *)0;
  }
}


EXPORT void _wrap_matrix4_inverseTranslateVect (CMatrix4< irr::f32 > *larg1, irr::core::vector3df *larg2) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->inverseTranslateVect(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_inverseRotateVect (CMatrix4< irr::f32 > *larg1, irr::core::vector3df *larg2) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->inverseRotateVect(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_rotateVect__SWIG_0 (CMatrix4< irr::f32 > *larg1, irr::core::vector3df *larg2) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->rotateVect(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_rotateVect__SWIG_1 (CMatrix4< irr::f32 > *larg1, core::vector3df *larg2, core::vector3df *larg3) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::vector3df *arg2 = 0 ;
  core::vector3df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->rotateVect(*arg2,(core::vector3df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_rotateVect__SWIG_2 (CMatrix4< irr::f32 > *larg1, float *larg2, core::vector3df *larg3) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  core::vector3df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->rotateVect(arg2,(core::vector3df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_transformVect__SWIG_0 (CMatrix4< irr::f32 > *larg1, irr::core::vector3df *larg2) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->transformVect(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_transformVect__SWIG_1 (CMatrix4< irr::f32 > *larg1, irr::core::vector3df *larg2, irr::core::vector3df *larg3) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->transformVect(*arg2,(irr::core::vector3df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_transformVect__SWIG_2 (CMatrix4< irr::f32 > *larg1, float *larg2, core::vector3df *larg3) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  core::vector3df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->transformVect(arg2,(core::vector3df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_transformVec3 (CMatrix4< irr::f32 > *larg1, float *larg2, float *larg3) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->transformVec3(arg2,(float const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_translateVect (CMatrix4< irr::f32 > *larg1, irr::core::vector3df *larg2) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->translateVect(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_transformPlane__SWIG_0 (CMatrix4< irr::f32 > *larg1, core::plane3d< irr::f32 > *larg2) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::plane3d< irr::f32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->transformPlane(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_transformPlane__SWIG_1 (CMatrix4< irr::f32 > *larg1, core::plane3d< irr::f32 > *larg2, core::plane3d< irr::f32 > *larg3) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::plane3d< irr::f32 > *arg2 = 0 ;
  core::plane3d< irr::f32 > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->transformPlane((core::plane3d< irr::f32 > const &)*arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_transformBox (CMatrix4< irr::f32 > *larg1, core::aabbox3d< irr::f32 > *larg2) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::aabbox3d< irr::f32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->transformBox(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_transformBoxEx (CMatrix4< irr::f32 > *larg1, core::aabbox3d< irr::f32 > *larg2) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::aabbox3d< irr::f32 > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->transformBoxEx(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_multiplyWith1x4Matrix (CMatrix4< irr::f32 > *larg1, float *larg2) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->multiplyWith1x4Matrix(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_matrix4_makeInverse (CMatrix4< irr::f32 > *larg1) {
  int lresult = (int)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->makeInverse();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_matrix4_getInversePrimitive (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  int lresult = (int)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((CMatrix4< irr::f32 > const *)arg1)->getInversePrimitive(*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_matrix4_getInverse (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  int lresult = (int)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((CMatrix4< irr::f32 > const *)arg1)->getInverse(*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildProjectionMatrixPerspectiveFovRH (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildProjectionMatrixPerspectiveFovRH(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildProjectionMatrixPerspectiveFovLH (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildProjectionMatrixPerspectiveFovLH(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildProjectionMatrixPerspectiveFovInfinityLH__SWIG_0 (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildProjectionMatrixPerspectiveFovInfinityLH(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildProjectionMatrixPerspectiveFovInfinityLH__SWIG_1 (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildProjectionMatrixPerspectiveFovInfinityLH(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildProjectionMatrixPerspectiveRH (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildProjectionMatrixPerspectiveRH(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildProjectionMatrixPerspectiveLH (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildProjectionMatrixPerspectiveLH(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildProjectionMatrixOrthoLH (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildProjectionMatrixOrthoLH(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildProjectionMatrixOrthoRH (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3, irr::f32 larg4, irr::f32 larg5) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::f32 arg4 ;
  irr::f32 arg5 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildProjectionMatrixOrthoRH(arg2,arg3,arg4,arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildCameraLookAtMatrixLH (CMatrix4< irr::f32 > *larg1, irr::core::vector3df *larg2, irr::core::vector3df *larg3, irr::core::vector3df *larg4) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildCameraLookAtMatrixLH((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildCameraLookAtMatrixRH (CMatrix4< irr::f32 > *larg1, irr::core::vector3df *larg2, irr::core::vector3df *larg3, irr::core::vector3df *larg4) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::vector3df *arg2 = 0 ;
  irr::core::vector3df *arg3 = 0 ;
  irr::core::vector3df *arg4 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildCameraLookAtMatrixRH((irr::core::vector3df const &)*arg2,(irr::core::vector3df const &)*arg3,(irr::core::vector3df const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildShadowMatrix__SWIG_0 (CMatrix4< irr::f32 > *larg1, core::vector3df *larg2, core::plane3df *larg3, irr::f32 larg4) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::vector3df *arg2 = 0 ;
  core::plane3df arg3 ;
  irr::f32 arg4 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = larg4;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildShadowMatrix((core::vector3df const &)*arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildShadowMatrix__SWIG_1 (CMatrix4< irr::f32 > *larg1, core::vector3df *larg2, core::plane3df *larg3) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::vector3df *arg2 = 0 ;
  core::plane3df arg3 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildShadowMatrix((core::vector3df const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildNDCToDCMatrix (CMatrix4< irr::f32 > *larg1, core::rect< irr::s32 > *larg2, irr::f32 larg3) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::rect< irr::s32 > *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildNDCToDCMatrix((core::rect< irr::s32 > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_interpolate (CMatrix4< irr::f32 > *larg1, core::CMatrix4< float > *larg2, irr::f32 larg3) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::CMatrix4< float > *arg2 = 0 ;
  irr::f32 arg3 ;
  irr::core::CMatrix4< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((CMatrix4< irr::f32 > const *)arg1)->interpolate((core::CMatrix4< float > const &)*arg2,arg3);
    lresult = new irr::core::CMatrix4< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_getTransposed__SWIG_0 (CMatrix4< irr::f32 > *larg1) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > result;
  
  arg1 = larg1;
  try {
    result = ((CMatrix4< irr::f32 > const *)arg1)->getTransposed();
    lresult = new irr::core::CMatrix4< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT void _wrap_matrix4_getTransposed__SWIG_1 (CMatrix4< irr::f32 > *larg1, irr::core::CMatrix4< float > *larg2) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::core::CMatrix4< float > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((CMatrix4< irr::f32 > const *)arg1)->getTransposed(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildRotateFromTo (CMatrix4< irr::f32 > *larg1, core::vector3df *larg2, core::vector3df *larg3) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::vector3df *arg2 = 0 ;
  core::vector3df *arg3 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildRotateFromTo((core::vector3df const &)*arg2,(core::vector3df const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT void _wrap_matrix4_setRotationCenter (CMatrix4< irr::f32 > *larg1, core::vector3df *larg2, core::vector3df *larg3) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::vector3df *arg2 = 0 ;
  core::vector3df *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setRotationCenter((core::vector3df const &)*arg2,(core::vector3df const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_matrix4_buildAxisAlignedBillboard (CMatrix4< irr::f32 > *larg1, core::vector3df *larg2, core::vector3df *larg3, core::vector3df *larg4, core::vector3df *larg5, core::vector3df *larg6) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::vector3df *arg2 = 0 ;
  core::vector3df *arg3 = 0 ;
  core::vector3df *arg4 = 0 ;
  core::vector3df *arg5 = 0 ;
  core::vector3df *arg6 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    (arg1)->buildAxisAlignedBillboard((core::vector3df const &)*arg2,(core::vector3df const &)*arg3,(core::vector3df const &)*arg4,(core::vector3df const &)*arg5,(core::vector3df const &)*arg6);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_buildTextureTransform (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, core::vector2df *larg3, core::vector2df *larg4, core::vector2df *larg5) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  core::vector2df *arg3 = 0 ;
  core::vector2df *arg4 = 0 ;
  core::vector2df *arg5 = 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->buildTextureTransform(arg2,(core::vector2df const &)*arg3,(core::vector2df const &)*arg4,(core::vector2df const &)*arg5);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setTextureRotationCenter (CMatrix4< irr::f32 > *larg1, irr::f32 larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setTextureRotationCenter(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setTextureTranslate (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setTextureTranslate(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setTextureTranslateTransposed (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setTextureTranslateTransposed(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setTextureScale (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setTextureScale(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setTextureScaleCenter (CMatrix4< irr::f32 > *larg1, irr::f32 larg2, irr::f32 larg3) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  irr::f32 arg2 ;
  irr::f32 arg3 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setTextureScaleCenter(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT irr::core::CMatrix4< float > *_wrap_matrix4_setM (CMatrix4< irr::f32 > *larg1, float *larg2) {
  irr::core::CMatrix4< float > * lresult = (irr::core::CMatrix4< float > *)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  irr::core::CMatrix4< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::CMatrix4< float > *) &(arg1)->setM((float const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::CMatrix4< float > *)0;
  }
}


EXPORT void _wrap_matrix4_setDefinitelyIdentityMatrix (CMatrix4< irr::f32 > *larg1, int larg2) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    (arg1)->setDefinitelyIdentityMatrix(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_matrix4_getDefinitelyIdentityMatrix (CMatrix4< irr::f32 > *larg1) {
  int lresult = (int)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((CMatrix4< irr::f32 > const *)arg1)->getDefinitelyIdentityMatrix();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_matrix4_equals__SWIG_0 (CMatrix4< irr::f32 > *larg1, core::CMatrix4< float > *larg2, float larg3) {
  int lresult = (int)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::CMatrix4< float > *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((CMatrix4< irr::f32 > const *)arg1)->equals((core::CMatrix4< float > const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_matrix4_equals__SWIG_1 (CMatrix4< irr::f32 > *larg1, core::CMatrix4< float > *larg2) {
  int lresult = (int)0 ;
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  core::CMatrix4< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((CMatrix4< irr::f32 > const *)arg1)->equals((core::CMatrix4< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_matrix4 (CMatrix4< irr::f32 > *larg1) {
  CMatrix4< irr::f32 > *arg1 = (CMatrix4< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::string< irr::fschar_t > *_wrap_new_path__SWIG_0 () {
  irr::core::string< irr::fschar_t > * lresult = (irr::core::string< irr::fschar_t > *)0 ;
  irr::core::string< irr::fschar_t > *result = 0 ;
  
  try {
    result = (irr::core::string< irr::fschar_t > *)new irr::core::string< irr::fschar_t >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< irr::fschar_t > *)0;
  }
}


EXPORT irr::core::string< irr::fschar_t > *_wrap_new_path__SWIG_1 (irr::core::string< char,irr::core::irrAllocator< char > > *larg1) {
  irr::core::string< irr::fschar_t > * lresult = (irr::core::string< irr::fschar_t > *)0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg1 = 0 ;
  irr::core::string< irr::fschar_t > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< irr::fschar_t > *)new irr::core::string< irr::fschar_t >((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< irr::fschar_t > *)0;
  }
}


EXPORT irr::core::string< irr::fschar_t > *_wrap_new_path__SWIG_2 (double larg1) {
  irr::core::string< irr::fschar_t > * lresult = (irr::core::string< irr::fschar_t > *)0 ;
  double arg1 ;
  irr::core::string< irr::fschar_t > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< irr::fschar_t > *)new irr::core::string< irr::fschar_t >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< irr::fschar_t > *)0;
  }
}


EXPORT irr::core::string< irr::fschar_t > *_wrap_new_path__SWIG_3 (int larg1) {
  irr::core::string< irr::fschar_t > * lresult = (irr::core::string< irr::fschar_t > *)0 ;
  int arg1 ;
  irr::core::string< irr::fschar_t > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< irr::fschar_t > *)new irr::core::string< irr::fschar_t >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< irr::fschar_t > *)0;
  }
}


EXPORT irr::core::string< irr::fschar_t > *_wrap_new_path__SWIG_4 (unsigned int larg1) {
  irr::core::string< irr::fschar_t > * lresult = (irr::core::string< irr::fschar_t > *)0 ;
  unsigned int arg1 ;
  irr::core::string< irr::fschar_t > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< irr::fschar_t > *)new irr::core::string< irr::fschar_t >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< irr::fschar_t > *)0;
  }
}


EXPORT irr::core::string< irr::fschar_t > *_wrap_new_path__SWIG_5 (long larg1) {
  irr::core::string< irr::fschar_t > * lresult = (irr::core::string< irr::fschar_t > *)0 ;
  long arg1 ;
  irr::core::string< irr::fschar_t > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< irr::fschar_t > *)new irr::core::string< irr::fschar_t >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< irr::fschar_t > *)0;
  }
}


EXPORT irr::core::string< irr::fschar_t > *_wrap_new_path__SWIG_6 (unsigned long larg1) {
  irr::core::string< irr::fschar_t > * lresult = (irr::core::string< irr::fschar_t > *)0 ;
  unsigned long arg1 ;
  irr::core::string< irr::fschar_t > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< irr::fschar_t > *)new irr::core::string< irr::fschar_t >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< irr::fschar_t > *)0;
  }
}


EXPORT void _wrap_delete_path (irr::core::string< irr::fschar_t > *larg1) {
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path___assign__ (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->operator =((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path___add__ (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((irr::core::string< irr::fschar_t > const *)arg1)->operator +((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = new irr::core::string< char,irr::core::irrAllocator< char > >(result);
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT char *_wrap_path___aref____SWIG_0 (irr::core::string< irr::fschar_t > *larg1, irr::u32 larg2) {
  char * lresult = (char *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::u32 arg2 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (char *) &(arg1)->operator [](arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT char *_wrap_path___aref____SWIG_1 (irr::core::string< irr::fschar_t > *larg1, irr::u32 larg2) {
  char * lresult = (char *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::u32 arg2 ;
  char *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (char *) &((irr::core::string< irr::fschar_t > const *)arg1)->operator [](arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT int _wrap_path___eq____SWIG_0 (irr::core::string< irr::fschar_t > *larg1, char *larg2) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->operator ==((char const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_path___eq____SWIG_1 (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->operator ==((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_path___lt__ (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->operator <((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_path___ne____SWIG_0 (irr::core::string< irr::fschar_t > *larg1, char *larg2) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->operator !=((char const *)arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_path___ne____SWIG_1 (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->operator !=((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::u32 _wrap_path_size (irr::core::string< irr::fschar_t > *larg1) {
  irr::u32 lresult = (irr::u32)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::u32 result;
  
  arg1 = larg1;
  try {
    result = (irr::u32)((irr::core::string< irr::fschar_t > const *)arg1)->size();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::u32)0;
  }
}


EXPORT int _wrap_path_empty (irr::core::string< irr::fschar_t > *larg1) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->empty();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_path_c_str (irr::core::string< irr::fschar_t > *larg1) {
  char * lresult = (char *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((irr::core::string< irr::fschar_t > const *)arg1)->c_str();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_make_lower (irr::core::string< irr::fschar_t > *larg1) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->make_lower();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_make_upper (irr::core::string< irr::fschar_t > *larg1) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->make_upper();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT int _wrap_path_equals_ignore_case (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->equals_ignore_case((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_path_equals_substring_ignore_case__SWIG_0 (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2, irr::s32 larg3) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::s32 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->equals_substring_ignore_case((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_path_equals_substring_ignore_case__SWIG_1 (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->equals_substring_ignore_case((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_path_lower_ignore_case (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->lower_ignore_case((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_path_equalsn__SWIG_0 (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2, irr::u32 larg3) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::u32 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->equalsn((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_path_equalsn__SWIG_1 (irr::core::string< irr::fschar_t > *larg1, char *larg2, irr::u32 larg3) {
  int lresult = (int)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  irr::u32 arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((irr::core::string< irr::fschar_t > const *)arg1)->equalsn((char const *)arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_append__SWIG_0 (irr::core::string< irr::fschar_t > *larg1, char larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->append(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_append__SWIG_1 (irr::core::string< irr::fschar_t > *larg1, char *larg2, irr::u32 larg3) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  irr::u32 arg3 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->append((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_append__SWIG_2 (irr::core::string< irr::fschar_t > *larg1, char *larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->append((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_append__SWIG_3 (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->append((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_append__SWIG_4 (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2, irr::u32 larg3) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::u32 arg3 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->append((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT void _wrap_path_reserve (irr::core::string< irr::fschar_t > *larg1, irr::u32 larg2) {
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::u32 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->reserve(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::s32 _wrap_path_findFirst (irr::core::string< irr::fschar_t > *larg1, char larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char arg2 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::core::string< irr::fschar_t > const *)arg1)->findFirst(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_path_findFirstChar__SWIG_0 (irr::core::string< irr::fschar_t > *larg1, char *larg2, irr::u32 larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  irr::u32 arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)((irr::core::string< irr::fschar_t > const *)arg1)->findFirstChar((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_path_findFirstChar__SWIG_1 (irr::core::string< irr::fschar_t > *larg1, char *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::core::string< irr::fschar_t > const *)arg1)->findFirstChar((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_path_findNext (irr::core::string< irr::fschar_t > *larg1, char larg2, irr::u32 larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char arg2 ;
  irr::u32 arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)((irr::core::string< irr::fschar_t > const *)arg1)->findNext(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_path_findLast__SWIG_0 (irr::core::string< irr::fschar_t > *larg1, char larg2, irr::s32 larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char arg2 ;
  irr::s32 arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)((irr::core::string< irr::fschar_t > const *)arg1)->findLast(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_path_findLast__SWIG_1 (irr::core::string< irr::fschar_t > *larg1, char larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char arg2 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::core::string< irr::fschar_t > const *)arg1)->findLast(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_path_findLastChar__SWIG_0 (irr::core::string< irr::fschar_t > *larg1, char *larg2, irr::u32 larg3) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  irr::u32 arg3 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::s32)((irr::core::string< irr::fschar_t > const *)arg1)->findLastChar((char const *)arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::s32 _wrap_path_findLastChar__SWIG_1 (irr::core::string< irr::fschar_t > *larg1, char *larg2) {
  irr::s32 lresult = (irr::s32)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  irr::s32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::s32)((irr::core::string< irr::fschar_t > const *)arg1)->findLastChar((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::s32)0;
  }
}


EXPORT irr::core::string< char > *_wrap_path_subString__SWIG_0 (irr::core::string< irr::fschar_t > *larg1, irr::u32 larg2, irr::s32 larg3, int larg4) {
  irr::core::string< char > * lresult = (irr::core::string< char > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  bool arg4 ;
  irr::core::string< char > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = (bool)larg4;
  try {
    result = ((irr::core::string< irr::fschar_t > const *)arg1)->subString(arg2,arg3,arg4);
    lresult = new irr::core::string< char >(result);
    return lresult;
  } catch (...) {
    return (irr::core::string< char > *)0;
  }
}


EXPORT irr::core::string< char > *_wrap_path_subString__SWIG_1 (irr::core::string< irr::fschar_t > *larg1, irr::u32 larg2, irr::s32 larg3) {
  irr::core::string< char > * lresult = (irr::core::string< char > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::u32 arg2 ;
  irr::s32 arg3 ;
  irr::core::string< char > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((irr::core::string< irr::fschar_t > const *)arg1)->subString(arg2,arg3);
    lresult = new irr::core::string< char >(result);
    return lresult;
  } catch (...) {
    return (irr::core::string< char > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path___add_assign____SWIG_0 (irr::core::string< irr::fschar_t > *larg1, char larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->operator +=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path___add_assign____SWIG_1 (irr::core::string< irr::fschar_t > *larg1, char *larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->operator +=((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path___add_assign____SWIG_2 (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->operator +=((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path___add_assign____SWIG_3 (irr::core::string< irr::fschar_t > *larg1, int larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  int arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->operator +=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path___add_assign____SWIG_4 (irr::core::string< irr::fschar_t > *larg1, unsigned int larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  unsigned int arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->operator +=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path___add_assign____SWIG_5 (irr::core::string< irr::fschar_t > *larg1, long larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  long arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->operator +=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path___add_assign____SWIG_6 (irr::core::string< irr::fschar_t > *larg1, unsigned long larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  unsigned long arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->operator +=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path___add_assign____SWIG_7 (irr::core::string< irr::fschar_t > *larg1, double larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  double arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->operator +=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path___add_assign____SWIG_8 (irr::core::string< irr::fschar_t > *larg1, float larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  float arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->operator +=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_replace__SWIG_0 (irr::core::string< irr::fschar_t > *larg1, char larg2, char larg3) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char arg2 ;
  char arg3 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->replace(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_replace__SWIG_1 (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2, irr::core::string< char,irr::core::irrAllocator< char > > *larg3) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg3 = 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->replace((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2,(irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_remove__SWIG_0 (irr::core::string< irr::fschar_t > *larg1, char larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->remove(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_remove__SWIG_1 (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->remove((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_removeChars (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->removeChars((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_trim__SWIG_0 (irr::core::string< irr::fschar_t > *larg1, irr::core::string< char,irr::core::irrAllocator< char > > *larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *arg2 = 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->trim((irr::core::string< char,irr::core::irrAllocator< char > > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_trim__SWIG_1 (irr::core::string< irr::fschar_t > *larg1) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->trim();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_erase (irr::core::string< irr::fschar_t > *larg1, irr::u32 larg2) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::u32 arg2 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->erase(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT irr::core::string< char,irr::core::irrAllocator< char > > *_wrap_path_validate (irr::core::string< irr::fschar_t > *larg1) {
  irr::core::string< char,irr::core::irrAllocator< char > > * lresult = (irr::core::string< char,irr::core::irrAllocator< char > > *)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  irr::core::string< char,irr::core::irrAllocator< char > > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< char,irr::core::irrAllocator< char > > *) &(arg1)->validate();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< char,irr::core::irrAllocator< char > > *)0;
  }
}


EXPORT char _wrap_path_lastChar (irr::core::string< irr::fschar_t > *larg1) {
  char lresult = (char)0 ;
  irr::core::string< irr::fschar_t > *arg1 = (irr::core::string< irr::fschar_t > *) 0 ;
  char result;
  
  arg1 = larg1;
  try {
    result = (char)((irr::core::string< irr::fschar_t > const *)arg1)->lastChar();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char)0;
  }
}


EXPORT irr::core::string< irr::fschar_t > *_wrap_new_fromCString__SWIG_0 (char *larg1, irr::u32 larg2) {
  irr::core::string< irr::fschar_t > * lresult = (irr::core::string< irr::fschar_t > *)0 ;
  char *arg1 = (char *) (char *)0 ;
  irr::u32 arg2 ;
  irr::core::string< irr::fschar_t > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::string< irr::fschar_t > *)new irr::core::string< irr::fschar_t >((char const *)arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< irr::fschar_t > *)0;
  }
}


EXPORT irr::core::string< irr::fschar_t > *_wrap_new_fromCString__SWIG_1 (char *larg1) {
  irr::core::string< irr::fschar_t > * lresult = (irr::core::string< irr::fschar_t > *)0 ;
  char *arg1 = (char *) (char *)0 ;
  irr::core::string< irr::fschar_t > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::string< irr::fschar_t > *)new irr::core::string< irr::fschar_t >((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::string< irr::fschar_t > *)0;
  }
}


EXPORT plane3d< irr::f32 > *_wrap_new_plane3df__SWIG_0 () {
  plane3d< irr::f32 > * lresult = (plane3d< irr::f32 > *)0 ;
  plane3d< irr::f32 > *result = 0 ;
  
  try {
    result = (plane3d< irr::f32 > *)new plane3d< irr::f32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (plane3d< irr::f32 > *)0;
  }
}


EXPORT plane3d< irr::f32 > *_wrap_new_plane3df__SWIG_1 (irr::core::vector3d< float > *larg1, irr::core::vector3d< float > *larg2) {
  plane3d< irr::f32 > * lresult = (plane3d< irr::f32 > *)0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  plane3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (plane3d< irr::f32 > *)new plane3d< irr::f32 >((irr::core::vector3d< float > const &)*arg1,(irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (plane3d< irr::f32 > *)0;
  }
}


EXPORT plane3d< irr::f32 > *_wrap_new_plane3df__SWIG_2 (float larg1, float larg2, float larg3, float larg4, float larg5, float larg6) {
  plane3d< irr::f32 > * lresult = (plane3d< irr::f32 > *)0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  plane3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (plane3d< irr::f32 > *)new plane3d< irr::f32 >(arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (plane3d< irr::f32 > *)0;
  }
}


EXPORT plane3d< irr::f32 > *_wrap_new_plane3df__SWIG_3 (irr::core::vector3d< float > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3) {
  plane3d< irr::f32 > * lresult = (plane3d< irr::f32 > *)0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  plane3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (plane3d< irr::f32 > *)new plane3d< irr::f32 >((irr::core::vector3d< float > const &)*arg1,(irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (plane3d< irr::f32 > *)0;
  }
}


EXPORT plane3d< irr::f32 > *_wrap_new_plane3df__SWIG_4 (irr::core::vector3d< float > *larg1, float larg2) {
  plane3d< irr::f32 > * lresult = (plane3d< irr::f32 > *)0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  float arg2 ;
  plane3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (plane3d< irr::f32 > *)new plane3d< irr::f32 >((irr::core::vector3d< float > const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (plane3d< irr::f32 > *)0;
  }
}


EXPORT int _wrap_plane3df___eq__ (plane3d< irr::f32 > *larg1, irr::core::plane3d< float > *larg2) {
  int lresult = (int)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((plane3d< irr::f32 > const *)arg1)->operator ==((irr::core::plane3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_plane3df___ne__ (plane3d< irr::f32 > *larg1, irr::core::plane3d< float > *larg2) {
  int lresult = (int)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((plane3d< irr::f32 > const *)arg1)->operator !=((irr::core::plane3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_plane3df_setPlane__SWIG_0 (plane3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3) {
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setPlane((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_plane3df_setPlane__SWIG_1 (plane3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, float larg3) {
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setPlane((irr::core::vector3d< float > const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_plane3df_setPlane__SWIG_2 (plane3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3, irr::core::vector3d< float > *larg4) {
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setPlane((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,(irr::core::vector3d< float > const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_plane3df_getIntersectionWithLine (plane3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3, irr::core::vector3d< float > *larg4) {
  int lresult = (int)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((plane3d< irr::f32 > const *)arg1)->getIntersectionWithLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::f32 _wrap_plane3df_getKnownIntersectionWithLine (plane3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3) {
  irr::f32 lresult = (irr::f32)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::f32)((plane3d< irr::f32 > const *)arg1)->getKnownIntersectionWithLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT int _wrap_plane3df_getIntersectionWithLimitedLine (plane3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3, irr::core::vector3d< float > *larg4) {
  int lresult = (int)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((plane3d< irr::f32 > const *)arg1)->getIntersectionWithLimitedLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::EIntersectionRelation3D _wrap_plane3df_classifyPointRelation (plane3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::EIntersectionRelation3D lresult = (irr::core::EIntersectionRelation3D)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::EIntersectionRelation3D result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::EIntersectionRelation3D)((plane3d< irr::f32 > const *)arg1)->classifyPointRelation((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::EIntersectionRelation3D)0;
  }
}


EXPORT void _wrap_plane3df_recalculateD (plane3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->recalculateD((irr::core::vector3d< float > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< float > *_wrap_plane3df_getMemberPoint (plane3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((plane3d< irr::f32 > const *)arg1)->getMemberPoint();
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT int _wrap_plane3df_existsIntersection (plane3d< irr::f32 > *larg1, irr::core::plane3d< float > *larg2) {
  int lresult = (int)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((plane3d< irr::f32 > const *)arg1)->existsIntersection((irr::core::plane3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_plane3df_getIntersectionWithPlane (plane3d< irr::f32 > *larg1, irr::core::plane3d< float > *larg2, irr::core::vector3d< float > *larg3, irr::core::vector3d< float > *larg4) {
  int lresult = (int)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((plane3d< irr::f32 > const *)arg1)->getIntersectionWithPlane((irr::core::plane3d< float > const &)*arg2,*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_plane3df_getIntersectionWithPlanes (plane3d< irr::f32 > *larg1, irr::core::plane3d< float > *larg2, irr::core::plane3d< float > *larg3, irr::core::vector3d< float > *larg4) {
  int lresult = (int)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::plane3d< float > *arg2 = 0 ;
  irr::core::plane3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((plane3d< irr::f32 > const *)arg1)->getIntersectionWithPlanes((irr::core::plane3d< float > const &)*arg2,(irr::core::plane3d< float > const &)*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_plane3df_isFrontFacing (plane3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((plane3d< irr::f32 > const *)arg1)->isFrontFacing((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT float _wrap_plane3df_getDistanceTo (plane3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  float lresult = (float)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)((plane3d< irr::f32 > const *)arg1)->getDistanceTo((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_plane3df_Normal_set (plane3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Normal = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< float > *_wrap_plane3df_Normal_get (plane3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< float > *)& ((arg1)->Normal);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT void _wrap_plane3df_D_set (plane3d< irr::f32 > *larg1, float larg2) {
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->D = arg2;
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_plane3df_D_get (plane3d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float) ((arg1)->D);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_delete_plane3df (plane3d< irr::f32 > *larg1) {
  plane3d< irr::f32 > *arg1 = (plane3d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT plane3d< irr::s32 > *_wrap_new_plane3di__SWIG_0 () {
  plane3d< irr::s32 > * lresult = (plane3d< irr::s32 > *)0 ;
  plane3d< irr::s32 > *result = 0 ;
  
  try {
    result = (plane3d< irr::s32 > *)new plane3d< irr::s32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (plane3d< irr::s32 > *)0;
  }
}


EXPORT plane3d< irr::s32 > *_wrap_new_plane3di__SWIG_1 (irr::core::vector3d< int > *larg1, irr::core::vector3d< int > *larg2) {
  plane3d< irr::s32 > * lresult = (plane3d< irr::s32 > *)0 ;
  irr::core::vector3d< int > *arg1 = 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  plane3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (plane3d< irr::s32 > *)new plane3d< irr::s32 >((irr::core::vector3d< int > const &)*arg1,(irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (plane3d< irr::s32 > *)0;
  }
}


EXPORT plane3d< irr::s32 > *_wrap_new_plane3di__SWIG_2 (int larg1, int larg2, int larg3, int larg4, int larg5, int larg6) {
  plane3d< irr::s32 > * lresult = (plane3d< irr::s32 > *)0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  plane3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (plane3d< irr::s32 > *)new plane3d< irr::s32 >(arg1,arg2,arg3,arg4,arg5,arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (plane3d< irr::s32 > *)0;
  }
}


EXPORT plane3d< irr::s32 > *_wrap_new_plane3di__SWIG_3 (irr::core::vector3d< int > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3) {
  plane3d< irr::s32 > * lresult = (plane3d< irr::s32 > *)0 ;
  irr::core::vector3d< int > *arg1 = 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  plane3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (plane3d< irr::s32 > *)new plane3d< irr::s32 >((irr::core::vector3d< int > const &)*arg1,(irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (plane3d< irr::s32 > *)0;
  }
}


EXPORT plane3d< irr::s32 > *_wrap_new_plane3di__SWIG_4 (irr::core::vector3d< int > *larg1, int larg2) {
  plane3d< irr::s32 > * lresult = (plane3d< irr::s32 > *)0 ;
  irr::core::vector3d< int > *arg1 = 0 ;
  int arg2 ;
  plane3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (plane3d< irr::s32 > *)new plane3d< irr::s32 >((irr::core::vector3d< int > const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (plane3d< irr::s32 > *)0;
  }
}


EXPORT int _wrap_plane3di___eq__ (plane3d< irr::s32 > *larg1, irr::core::plane3d< int > *larg2) {
  int lresult = (int)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::plane3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((plane3d< irr::s32 > const *)arg1)->operator ==((irr::core::plane3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_plane3di___ne__ (plane3d< irr::s32 > *larg1, irr::core::plane3d< int > *larg2) {
  int lresult = (int)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::plane3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((plane3d< irr::s32 > const *)arg1)->operator !=((irr::core::plane3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_plane3di_setPlane__SWIG_0 (plane3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3) {
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setPlane((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_plane3di_setPlane__SWIG_1 (plane3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, int larg3) {
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->setPlane((irr::core::vector3d< int > const &)*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_plane3di_setPlane__SWIG_2 (plane3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3, irr::core::vector3d< int > *larg4) {
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  irr::core::vector3d< int > *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->setPlane((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3,(irr::core::vector3d< int > const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_plane3di_getIntersectionWithLine (plane3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3, irr::core::vector3d< int > *larg4) {
  int lresult = (int)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  irr::core::vector3d< int > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((plane3d< irr::s32 > const *)arg1)->getIntersectionWithLine((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::f32 _wrap_plane3di_getKnownIntersectionWithLine (plane3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3) {
  irr::f32 lresult = (irr::f32)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  irr::f32 result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::f32)((plane3d< irr::s32 > const *)arg1)->getKnownIntersectionWithLine((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f32)0;
  }
}


EXPORT int _wrap_plane3di_getIntersectionWithLimitedLine (plane3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3, irr::core::vector3d< int > *larg4) {
  int lresult = (int)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  irr::core::vector3d< int > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((plane3d< irr::s32 > const *)arg1)->getIntersectionWithLimitedLine((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::EIntersectionRelation3D _wrap_plane3di_classifyPointRelation (plane3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::EIntersectionRelation3D lresult = (irr::core::EIntersectionRelation3D)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::EIntersectionRelation3D result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::EIntersectionRelation3D)((plane3d< irr::s32 > const *)arg1)->classifyPointRelation((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::EIntersectionRelation3D)0;
  }
}


EXPORT void _wrap_plane3di_recalculateD (plane3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->recalculateD((irr::core::vector3d< int > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< int > *_wrap_plane3di_getMemberPoint (plane3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  try {
    result = ((plane3d< irr::s32 > const *)arg1)->getMemberPoint();
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT int _wrap_plane3di_existsIntersection (plane3d< irr::s32 > *larg1, irr::core::plane3d< int > *larg2) {
  int lresult = (int)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::plane3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((plane3d< irr::s32 > const *)arg1)->existsIntersection((irr::core::plane3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_plane3di_getIntersectionWithPlane (plane3d< irr::s32 > *larg1, irr::core::plane3d< int > *larg2, irr::core::vector3d< int > *larg3, irr::core::vector3d< int > *larg4) {
  int lresult = (int)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::plane3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  irr::core::vector3d< int > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((plane3d< irr::s32 > const *)arg1)->getIntersectionWithPlane((irr::core::plane3d< int > const &)*arg2,*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_plane3di_getIntersectionWithPlanes (plane3d< irr::s32 > *larg1, irr::core::plane3d< int > *larg2, irr::core::plane3d< int > *larg3, irr::core::vector3d< int > *larg4) {
  int lresult = (int)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::plane3d< int > *arg2 = 0 ;
  irr::core::plane3d< int > *arg3 = 0 ;
  irr::core::vector3d< int > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((plane3d< irr::s32 > const *)arg1)->getIntersectionWithPlanes((irr::core::plane3d< int > const &)*arg2,(irr::core::plane3d< int > const &)*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_plane3di_isFrontFacing (plane3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((plane3d< irr::s32 > const *)arg1)->isFrontFacing((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_plane3di_getDistanceTo (plane3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((plane3d< irr::s32 > const *)arg1)->getDistanceTo((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_plane3di_Normal_set (plane3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = (irr::core::vector3d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Normal = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< int > *_wrap_plane3di_Normal_get (plane3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< int > *)& ((arg1)->Normal);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT void _wrap_plane3di_D_set (plane3d< irr::s32 > *larg1, int larg2) {
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->D = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_plane3di_D_get (plane3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int) ((arg1)->D);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_plane3di (plane3d< irr::s32 > *larg1) {
  plane3d< irr::s32 > *arg1 = (plane3d< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT rect< irr::f32 > *_wrap_new_rectf__SWIG_0 () {
  rect< irr::f32 > * lresult = (rect< irr::f32 > *)0 ;
  rect< irr::f32 > *result = 0 ;
  
  try {
    result = (rect< irr::f32 > *)new rect< irr::f32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (rect< irr::f32 > *)0;
  }
}


EXPORT rect< irr::f32 > *_wrap_new_rectf__SWIG_1 (float larg1, float larg2, float larg3, float larg4) {
  rect< irr::f32 > * lresult = (rect< irr::f32 > *)0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  rect< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (rect< irr::f32 > *)new rect< irr::f32 >(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (rect< irr::f32 > *)0;
  }
}


EXPORT rect< irr::f32 > *_wrap_new_rectf__SWIG_2 (irr::core::vector2d< float > *larg1, irr::core::vector2d< float > *larg2) {
  rect< irr::f32 > * lresult = (rect< irr::f32 > *)0 ;
  irr::core::vector2d< float > *arg1 = 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  rect< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (rect< irr::f32 > *)new rect< irr::f32 >((irr::core::vector2d< float > const &)*arg1,(irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (rect< irr::f32 > *)0;
  }
}


EXPORT irr::core::rect< float > *_wrap_rectf___add__ (rect< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::rect< float > * lresult = (irr::core::rect< float > *)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::rect< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((rect< irr::f32 > const *)arg1)->operator +((irr::core::vector2d< float > const &)*arg2);
    lresult = new irr::core::rect< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< float > *)0;
  }
}


EXPORT irr::core::rect< float > *_wrap_rectf___add_assign__ (rect< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::rect< float > * lresult = (irr::core::rect< float > *)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::rect< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::rect< float > *) &(arg1)->operator +=((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::rect< float > *)0;
  }
}


EXPORT irr::core::rect< float > *_wrap_rectf___sub__ (rect< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::rect< float > * lresult = (irr::core::rect< float > *)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::rect< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((rect< irr::f32 > const *)arg1)->operator -((irr::core::vector2d< float > const &)*arg2);
    lresult = new irr::core::rect< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< float > *)0;
  }
}


EXPORT irr::core::rect< float > *_wrap_rectf___sub_assign__ (rect< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::rect< float > * lresult = (irr::core::rect< float > *)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::rect< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::rect< float > *) &(arg1)->operator -=((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::rect< float > *)0;
  }
}


EXPORT int _wrap_rectf___eq__ (rect< irr::f32 > *larg1, irr::core::rect< float > *larg2) {
  int lresult = (int)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::rect< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((rect< irr::f32 > const *)arg1)->operator ==((irr::core::rect< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_rectf___ne__ (rect< irr::f32 > *larg1, irr::core::rect< float > *larg2) {
  int lresult = (int)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::rect< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((rect< irr::f32 > const *)arg1)->operator !=((irr::core::rect< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_rectf___lt__ (rect< irr::f32 > *larg1, irr::core::rect< float > *larg2) {
  int lresult = (int)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::rect< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((rect< irr::f32 > const *)arg1)->operator <((irr::core::rect< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT float _wrap_rectf_getArea (rect< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((rect< irr::f32 > const *)arg1)->getArea();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT int _wrap_rectf_isPointInside (rect< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((rect< irr::f32 > const *)arg1)->isPointInside((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_rectf_isRectCollided (rect< irr::f32 > *larg1, irr::core::rect< float > *larg2) {
  int lresult = (int)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::rect< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((rect< irr::f32 > const *)arg1)->isRectCollided((irr::core::rect< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_rectf_clipAgainst (rect< irr::f32 > *larg1, irr::core::rect< float > *larg2) {
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::rect< float > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->clipAgainst((irr::core::rect< float > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_rectf_constrainTo (rect< irr::f32 > *larg1, irr::core::rect< float > *larg2) {
  int lresult = (int)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::rect< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->constrainTo((irr::core::rect< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT float _wrap_rectf_getWidth (rect< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((rect< irr::f32 > const *)arg1)->getWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_rectf_getHeight (rect< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((rect< irr::f32 > const *)arg1)->getHeight();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_rectf_repair (rect< irr::f32 > *larg1) {
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->repair();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_rectf_isValid (rect< irr::f32 > *larg1) {
  int lresult = (int)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((rect< irr::f32 > const *)arg1)->isValid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_rectf_getCenter (rect< irr::f32 > *larg1) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  try {
    result = ((rect< irr::f32 > const *)arg1)->getCenter();
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::dimension2d< float > *_wrap_rectf_getSize (rect< irr::f32 > *larg1) {
  irr::core::dimension2d< float > * lresult = (irr::core::dimension2d< float > *)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > result;
  
  arg1 = larg1;
  try {
    result = ((rect< irr::f32 > const *)arg1)->getSize();
    lresult = new irr::core::dimension2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< float > *)0;
  }
}


EXPORT void _wrap_rectf_addInternalPoint__SWIG_0 (rect< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addInternalPoint((irr::core::vector2d< float > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_rectf_addInternalPoint__SWIG_1 (rect< irr::f32 > *larg1, float larg2, float larg3) {
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addInternalPoint(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_rectf_UpperLeftCorner_set (rect< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = (irr::core::vector2d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->UpperLeftCorner = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector2d< float > *_wrap_rectf_UpperLeftCorner_get (rect< irr::f32 > *larg1) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector2d< float > *)& ((arg1)->UpperLeftCorner);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT void _wrap_rectf_LowerRightCorner_set (rect< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = (irr::core::vector2d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->LowerRightCorner = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector2d< float > *_wrap_rectf_LowerRightCorner_get (rect< irr::f32 > *larg1) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector2d< float > *)& ((arg1)->LowerRightCorner);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT void _wrap_delete_rectf (rect< irr::f32 > *larg1) {
  rect< irr::f32 > *arg1 = (rect< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT rect< irr::s32 > *_wrap_new_recti__SWIG_0 () {
  rect< irr::s32 > * lresult = (rect< irr::s32 > *)0 ;
  rect< irr::s32 > *result = 0 ;
  
  try {
    result = (rect< irr::s32 > *)new rect< irr::s32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (rect< irr::s32 > *)0;
  }
}


EXPORT rect< irr::s32 > *_wrap_new_recti__SWIG_1 (int larg1, int larg2, int larg3, int larg4) {
  rect< irr::s32 > * lresult = (rect< irr::s32 > *)0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  rect< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (rect< irr::s32 > *)new rect< irr::s32 >(arg1,arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (rect< irr::s32 > *)0;
  }
}


EXPORT rect< irr::s32 > *_wrap_new_recti__SWIG_2 (irr::core::vector2d< int > *larg1, irr::core::vector2d< int > *larg2) {
  rect< irr::s32 > * lresult = (rect< irr::s32 > *)0 ;
  irr::core::vector2d< int > *arg1 = 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  rect< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (rect< irr::s32 > *)new rect< irr::s32 >((irr::core::vector2d< int > const &)*arg1,(irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (rect< irr::s32 > *)0;
  }
}


EXPORT irr::core::rect< int > *_wrap_recti___add__ (rect< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::rect< int > * lresult = (irr::core::rect< int > *)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::rect< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((rect< irr::s32 > const *)arg1)->operator +((irr::core::vector2d< int > const &)*arg2);
    lresult = new irr::core::rect< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< int > *)0;
  }
}


EXPORT irr::core::rect< int > *_wrap_recti___add_assign__ (rect< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::rect< int > * lresult = (irr::core::rect< int > *)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::rect< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::rect< int > *) &(arg1)->operator +=((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::rect< int > *)0;
  }
}


EXPORT irr::core::rect< int > *_wrap_recti___sub__ (rect< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::rect< int > * lresult = (irr::core::rect< int > *)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::rect< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((rect< irr::s32 > const *)arg1)->operator -((irr::core::vector2d< int > const &)*arg2);
    lresult = new irr::core::rect< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::rect< int > *)0;
  }
}


EXPORT irr::core::rect< int > *_wrap_recti___sub_assign__ (rect< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::rect< int > * lresult = (irr::core::rect< int > *)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::rect< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::rect< int > *) &(arg1)->operator -=((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::rect< int > *)0;
  }
}


EXPORT int _wrap_recti___eq__ (rect< irr::s32 > *larg1, irr::core::rect< int > *larg2) {
  int lresult = (int)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((rect< irr::s32 > const *)arg1)->operator ==((irr::core::rect< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_recti___ne__ (rect< irr::s32 > *larg1, irr::core::rect< int > *larg2) {
  int lresult = (int)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((rect< irr::s32 > const *)arg1)->operator !=((irr::core::rect< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_recti___lt__ (rect< irr::s32 > *larg1, irr::core::rect< int > *larg2) {
  int lresult = (int)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((rect< irr::s32 > const *)arg1)->operator <((irr::core::rect< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_recti_getArea (rect< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((rect< irr::s32 > const *)arg1)->getArea();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_recti_isPointInside (rect< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((rect< irr::s32 > const *)arg1)->isPointInside((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_recti_isRectCollided (rect< irr::s32 > *larg1, irr::core::rect< int > *larg2) {
  int lresult = (int)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((rect< irr::s32 > const *)arg1)->isRectCollided((irr::core::rect< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_recti_clipAgainst (rect< irr::s32 > *larg1, irr::core::rect< int > *larg2) {
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->clipAgainst((irr::core::rect< int > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_recti_constrainTo (rect< irr::s32 > *larg1, irr::core::rect< int > *larg2) {
  int lresult = (int)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::rect< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->constrainTo((irr::core::rect< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_recti_getWidth (rect< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((rect< irr::s32 > const *)arg1)->getWidth();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_recti_getHeight (rect< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((rect< irr::s32 > const *)arg1)->getHeight();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_recti_repair (rect< irr::s32 > *larg1) {
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->repair();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_recti_isValid (rect< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((rect< irr::s32 > const *)arg1)->isValid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_recti_getCenter (rect< irr::s32 > *larg1) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  try {
    result = ((rect< irr::s32 > const *)arg1)->getCenter();
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::dimension2d< int > *_wrap_recti_getSize (rect< irr::s32 > *larg1) {
  irr::core::dimension2d< int > * lresult = (irr::core::dimension2d< int > *)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > result;
  
  arg1 = larg1;
  try {
    result = ((rect< irr::s32 > const *)arg1)->getSize();
    lresult = new irr::core::dimension2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::dimension2d< int > *)0;
  }
}


EXPORT void _wrap_recti_addInternalPoint__SWIG_0 (rect< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->addInternalPoint((irr::core::vector2d< int > const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_recti_addInternalPoint__SWIG_1 (rect< irr::s32 > *larg1, int larg2, int larg3) {
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->addInternalPoint(arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_recti_UpperLeftCorner_set (rect< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = (irr::core::vector2d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->UpperLeftCorner = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector2d< int > *_wrap_recti_UpperLeftCorner_get (rect< irr::s32 > *larg1) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector2d< int > *)& ((arg1)->UpperLeftCorner);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT void _wrap_recti_LowerRightCorner_set (rect< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = (irr::core::vector2d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->LowerRightCorner = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector2d< int > *_wrap_recti_LowerRightCorner_get (rect< irr::s32 > *larg1) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector2d< int > *)& ((arg1)->LowerRightCorner);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT void _wrap_delete_recti (rect< irr::s32 > *larg1) {
  rect< irr::s32 > *arg1 = (rect< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT triangle3d< irr::f32 > *_wrap_new_triangle3df__SWIG_0 () {
  triangle3d< irr::f32 > * lresult = (triangle3d< irr::f32 > *)0 ;
  triangle3d< irr::f32 > *result = 0 ;
  
  try {
    result = (triangle3d< irr::f32 > *)new triangle3d< irr::f32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (triangle3d< irr::f32 > *)0;
  }
}


EXPORT triangle3d< irr::f32 > *_wrap_new_triangle3df__SWIG_1 (irr::core::vector3d< float > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3) {
  triangle3d< irr::f32 > * lresult = (triangle3d< irr::f32 > *)0 ;
  irr::core::vector3d< float > arg1 ;
  irr::core::vector3d< float > arg2 ;
  irr::core::vector3d< float > arg3 ;
  triangle3d< irr::f32 > *result = 0 ;
  
  arg1 = *larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  try {
    result = (triangle3d< irr::f32 > *)new triangle3d< irr::f32 >(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (triangle3d< irr::f32 > *)0;
  }
}


EXPORT int _wrap_triangle3df___eq__ (triangle3d< irr::f32 > *larg1, irr::core::triangle3d< float > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::triangle3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::f32 > const *)arg1)->operator ==((irr::core::triangle3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3df___ne__ (triangle3d< irr::f32 > *larg1, irr::core::triangle3d< float > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::triangle3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::f32 > const *)arg1)->operator !=((irr::core::triangle3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3df_isTotalInsideBox (triangle3d< irr::f32 > *larg1, irr::core::aabbox3d< float > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::f32 > const *)arg1)->isTotalInsideBox((irr::core::aabbox3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3df_isTotalOutsideBox (triangle3d< irr::f32 > *larg1, irr::core::aabbox3d< float > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::aabbox3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::f32 > const *)arg1)->isTotalOutsideBox((irr::core::aabbox3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT core::vector3d< float > *_wrap_triangle3df_closestPointOnTriangle (triangle3d< irr::f32 > *larg1, core::vector3d< float > *larg2) {
  core::vector3d< float > * lresult = (core::vector3d< float > *)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  core::vector3d< float > *arg2 = 0 ;
  core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((triangle3d< irr::f32 > const *)arg1)->closestPointOnTriangle((core::vector3d< float > const &)*arg2);
    lresult = new core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (core::vector3d< float > *)0;
  }
}


EXPORT int _wrap_triangle3df_isPointInside (triangle3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::f32 > const *)arg1)->isPointInside((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3df_isPointInsideFast (triangle3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::f32 > const *)arg1)->isPointInsideFast((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3df_getIntersectionWithLimitedLine (triangle3d< irr::f32 > *larg1, irr::core::line3d< float > *larg2, irr::core::vector3d< float > *larg3) {
  int lresult = (int)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::line3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((triangle3d< irr::f32 > const *)arg1)->getIntersectionWithLimitedLine((irr::core::line3d< float > const &)*arg2,*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3df_getIntersectionWithLine (triangle3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3, irr::core::vector3d< float > *larg4) {
  int lresult = (int)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((triangle3d< irr::f32 > const *)arg1)->getIntersectionWithLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3df_getIntersectionOfPlaneWithLine (triangle3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3, irr::core::vector3d< float > *larg4) {
  int lresult = (int)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::core::vector3d< float > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((triangle3d< irr::f32 > const *)arg1)->getIntersectionOfPlaneWithLine((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_triangle3df_getNormal (triangle3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((triangle3d< irr::f32 > const *)arg1)->getNormal();
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT int _wrap_triangle3df_isFrontFacing (triangle3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::f32 > const *)arg1)->isFrontFacing((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::plane3d< float > *_wrap_triangle3df_getPlane (triangle3d< irr::f32 > *larg1) {
  irr::core::plane3d< float > * lresult = (irr::core::plane3d< float > *)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::plane3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((triangle3d< irr::f32 > const *)arg1)->getPlane();
    lresult = new irr::core::plane3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::plane3d< float > *)0;
  }
}


EXPORT float _wrap_triangle3df_getArea (triangle3d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((triangle3d< irr::f32 > const *)arg1)->getArea();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_triangle3df_set (triangle3d< irr::f32 > *larg1, core::vector3d< float > *larg2, core::vector3d< float > *larg3, core::vector3d< float > *larg4) {
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  core::vector3d< float > *arg2 = 0 ;
  core::vector3d< float > *arg3 = 0 ;
  core::vector3d< float > *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->set((core::vector3d< float > const &)*arg2,(core::vector3d< float > const &)*arg3,(core::vector3d< float > const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_triangle3df_pointA_set (triangle3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->pointA = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< float > *_wrap_triangle3df_pointA_get (triangle3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< float > *)& ((arg1)->pointA);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT void _wrap_triangle3df_pointB_set (triangle3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->pointB = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< float > *_wrap_triangle3df_pointB_get (triangle3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< float > *)& ((arg1)->pointB);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT void _wrap_triangle3df_pointC_set (triangle3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = (irr::core::vector3d< float > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->pointC = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< float > *_wrap_triangle3df_pointC_get (triangle3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< float > *)& ((arg1)->pointC);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT void _wrap_delete_triangle3df (triangle3d< irr::f32 > *larg1) {
  triangle3d< irr::f32 > *arg1 = (triangle3d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT triangle3d< irr::s32 > *_wrap_new_triangle3di__SWIG_0 () {
  triangle3d< irr::s32 > * lresult = (triangle3d< irr::s32 > *)0 ;
  triangle3d< irr::s32 > *result = 0 ;
  
  try {
    result = (triangle3d< irr::s32 > *)new triangle3d< irr::s32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (triangle3d< irr::s32 > *)0;
  }
}


EXPORT triangle3d< irr::s32 > *_wrap_new_triangle3di__SWIG_1 (irr::core::vector3d< int > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3) {
  triangle3d< irr::s32 > * lresult = (triangle3d< irr::s32 > *)0 ;
  irr::core::vector3d< int > arg1 ;
  irr::core::vector3d< int > arg2 ;
  irr::core::vector3d< int > arg3 ;
  triangle3d< irr::s32 > *result = 0 ;
  
  arg1 = *larg1;
  arg2 = *larg2;
  arg3 = *larg3;
  try {
    result = (triangle3d< irr::s32 > *)new triangle3d< irr::s32 >(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (triangle3d< irr::s32 > *)0;
  }
}


EXPORT int _wrap_triangle3di___eq__ (triangle3d< irr::s32 > *larg1, irr::core::triangle3d< int > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::triangle3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::s32 > const *)arg1)->operator ==((irr::core::triangle3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3di___ne__ (triangle3d< irr::s32 > *larg1, irr::core::triangle3d< int > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::triangle3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::s32 > const *)arg1)->operator !=((irr::core::triangle3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3di_isTotalInsideBox (triangle3d< irr::s32 > *larg1, irr::core::aabbox3d< int > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::aabbox3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::s32 > const *)arg1)->isTotalInsideBox((irr::core::aabbox3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3di_isTotalOutsideBox (triangle3d< irr::s32 > *larg1, irr::core::aabbox3d< int > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::aabbox3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::s32 > const *)arg1)->isTotalOutsideBox((irr::core::aabbox3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT core::vector3d< int > *_wrap_triangle3di_closestPointOnTriangle (triangle3d< irr::s32 > *larg1, core::vector3d< int > *larg2) {
  core::vector3d< int > * lresult = (core::vector3d< int > *)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  core::vector3d< int > *arg2 = 0 ;
  core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((triangle3d< irr::s32 > const *)arg1)->closestPointOnTriangle((core::vector3d< int > const &)*arg2);
    lresult = new core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (core::vector3d< int > *)0;
  }
}


EXPORT int _wrap_triangle3di_isPointInside (triangle3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::s32 > const *)arg1)->isPointInside((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3di_isPointInsideFast (triangle3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::s32 > const *)arg1)->isPointInsideFast((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3di_getIntersectionWithLimitedLine (triangle3d< irr::s32 > *larg1, irr::core::line3d< int > *larg2, irr::core::vector3d< int > *larg3) {
  int lresult = (int)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::line3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((triangle3d< irr::s32 > const *)arg1)->getIntersectionWithLimitedLine((irr::core::line3d< int > const &)*arg2,*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3di_getIntersectionWithLine (triangle3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3, irr::core::vector3d< int > *larg4) {
  int lresult = (int)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  irr::core::vector3d< int > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((triangle3d< irr::s32 > const *)arg1)->getIntersectionWithLine((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_triangle3di_getIntersectionOfPlaneWithLine (triangle3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3, irr::core::vector3d< int > *larg4) {
  int lresult = (int)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  irr::core::vector3d< int > *arg4 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (bool)((triangle3d< irr::s32 > const *)arg1)->getIntersectionOfPlaneWithLine((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3,*arg4);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_triangle3di_getNormal (triangle3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  try {
    result = ((triangle3d< irr::s32 > const *)arg1)->getNormal();
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT int _wrap_triangle3di_isFrontFacing (triangle3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((triangle3d< irr::s32 > const *)arg1)->isFrontFacing((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::plane3d< int > *_wrap_triangle3di_getPlane (triangle3d< irr::s32 > *larg1) {
  irr::core::plane3d< int > * lresult = (irr::core::plane3d< int > *)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::plane3d< int > result;
  
  arg1 = larg1;
  try {
    result = ((triangle3d< irr::s32 > const *)arg1)->getPlane();
    lresult = new irr::core::plane3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::plane3d< int > *)0;
  }
}


EXPORT int _wrap_triangle3di_getArea (triangle3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((triangle3d< irr::s32 > const *)arg1)->getArea();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_triangle3di_set (triangle3d< irr::s32 > *larg1, core::vector3d< int > *larg2, core::vector3d< int > *larg3, core::vector3d< int > *larg4) {
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  core::vector3d< int > *arg2 = 0 ;
  core::vector3d< int > *arg3 = 0 ;
  core::vector3d< int > *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->set((core::vector3d< int > const &)*arg2,(core::vector3d< int > const &)*arg3,(core::vector3d< int > const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_triangle3di_pointA_set (triangle3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = (irr::core::vector3d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->pointA = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< int > *_wrap_triangle3di_pointA_get (triangle3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< int > *)& ((arg1)->pointA);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT void _wrap_triangle3di_pointB_set (triangle3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = (irr::core::vector3d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->pointB = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< int > *_wrap_triangle3di_pointB_get (triangle3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< int > *)& ((arg1)->pointB);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT void _wrap_triangle3di_pointC_set (triangle3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = (irr::core::vector3d< int > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->pointC = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< int > *_wrap_triangle3di_pointC_get (triangle3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< int > *)& ((arg1)->pointC);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT void _wrap_delete_triangle3di (triangle3d< irr::s32 > *larg1) {
  triangle3d< irr::s32 > *arg1 = (triangle3d< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT vector2d< irr::f32 > *_wrap_new_vector2df__SWIG_0 () {
  vector2d< irr::f32 > * lresult = (vector2d< irr::f32 > *)0 ;
  vector2d< irr::f32 > *result = 0 ;
  
  try {
    result = (vector2d< irr::f32 > *)new vector2d< irr::f32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector2d< irr::f32 > *)0;
  }
}


EXPORT vector2d< irr::f32 > *_wrap_new_vector2df__SWIG_1 (float larg1, float larg2) {
  vector2d< irr::f32 > * lresult = (vector2d< irr::f32 > *)0 ;
  float arg1 ;
  float arg2 ;
  vector2d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (vector2d< irr::f32 > *)new vector2d< irr::f32 >(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector2d< irr::f32 > *)0;
  }
}


EXPORT vector2d< irr::f32 > *_wrap_new_vector2df__SWIG_2 (float larg1) {
  vector2d< irr::f32 > * lresult = (vector2d< irr::f32 > *)0 ;
  float arg1 ;
  vector2d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (vector2d< irr::f32 > *)new vector2d< irr::f32 >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector2d< irr::f32 > *)0;
  }
}


EXPORT vector2d< irr::f32 > *_wrap_new_vector2df__SWIG_3 (irr::core::vector2d< float > *larg1) {
  vector2d< irr::f32 > * lresult = (vector2d< irr::f32 > *)0 ;
  irr::core::vector2d< float > *arg1 = 0 ;
  vector2d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (vector2d< irr::f32 > *)new vector2d< irr::f32 >((irr::core::vector2d< float > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector2d< irr::f32 > *)0;
  }
}


EXPORT vector2d< irr::f32 > *_wrap_new_vector2df__SWIG_4 (irr::core::dimension2d< float > *larg1) {
  vector2d< irr::f32 > * lresult = (vector2d< irr::f32 > *)0 ;
  irr::core::dimension2d< float > *arg1 = 0 ;
  vector2d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (vector2d< irr::f32 > *)new vector2d< irr::f32 >((irr::core::dimension2d< float > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector2d< irr::f32 > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___neg__ (vector2d< irr::f32 > *larg1) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->operator -();
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___assign____SWIG_0 (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator =((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___assign____SWIG_1 (vector2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator =((irr::core::dimension2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___add____SWIG_0 (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->operator +((irr::core::vector2d< float > const &)*arg2);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___add____SWIG_1 (vector2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->operator +((irr::core::dimension2d< float > const &)*arg2);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___add_assign____SWIG_0 (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator +=((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___add____SWIG_2 (vector2d< irr::f32 > *larg1, float larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->operator +(arg2);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___add_assign____SWIG_1 (vector2d< irr::f32 > *larg1, float larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator +=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___add_assign____SWIG_2 (vector2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator +=((irr::core::dimension2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___sub____SWIG_0 (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->operator -((irr::core::vector2d< float > const &)*arg2);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___sub____SWIG_1 (vector2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->operator -((irr::core::dimension2d< float > const &)*arg2);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___sub_assign____SWIG_0 (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator -=((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___sub____SWIG_2 (vector2d< irr::f32 > *larg1, float larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->operator -(arg2);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___sub_assign____SWIG_1 (vector2d< irr::f32 > *larg1, float larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator -=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___sub_assign____SWIG_2 (vector2d< irr::f32 > *larg1, irr::core::dimension2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::dimension2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator -=((irr::core::dimension2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___mul____SWIG_0 (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->operator *((irr::core::vector2d< float > const &)*arg2);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___mul_assign____SWIG_0 (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator *=((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___mul____SWIG_1 (vector2d< irr::f32 > *larg1, float larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->operator *(arg2);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___mul_assign____SWIG_1 (vector2d< irr::f32 > *larg1, float larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator *=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___div____SWIG_0 (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->operator /((irr::core::vector2d< float > const &)*arg2);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___div_assign____SWIG_0 (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator /=((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___div____SWIG_1 (vector2d< irr::f32 > *larg1, float larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->operator /(arg2);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df___div_assign____SWIG_1 (vector2d< irr::f32 > *larg1, float larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->operator /=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT int _wrap_vector2df___lte__ (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::f32 > const *)arg1)->operator <=((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2df___gte__ (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::f32 > const *)arg1)->operator >=((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2df___lt__ (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::f32 > const *)arg1)->operator <((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2df___gt__ (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::f32 > const *)arg1)->operator >((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2df___eq__ (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::f32 > const *)arg1)->operator ==((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2df___ne__ (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::f32 > const *)arg1)->operator !=((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2df_equals (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::f32 > const *)arg1)->equals((irr::core::vector2d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df_set__SWIG_0 (vector2d< irr::f32 > *larg1, float larg2, float larg3) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->set(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df_set__SWIG_1 (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->set((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT float _wrap_vector2df_getLength (vector2d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((vector2d< irr::f32 > const *)arg1)->getLength();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_vector2df_getLengthSQ (vector2d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((vector2d< irr::f32 > const *)arg1)->getLengthSQ();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_vector2df_dotProduct (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  float lresult = (float)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)((vector2d< irr::f32 > const *)arg1)->dotProduct((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_vector2df_getDistanceFrom (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  float lresult = (float)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)((vector2d< irr::f32 > const *)arg1)->getDistanceFrom((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_vector2df_getDistanceFromSQ (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  float lresult = (float)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)((vector2d< irr::f32 > const *)arg1)->getDistanceFromSQ((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df_rotateBy__SWIG_0 (vector2d< irr::f32 > *larg1, irr::f64 larg2, irr::core::vector2d< float > *larg3) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->rotateBy(arg2,(irr::core::vector2d< float > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df_rotateBy__SWIG_1 (vector2d< irr::f32 > *larg1, irr::f64 larg2) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->rotateBy(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df_normalize (vector2d< irr::f32 > *larg1) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->normalize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::f64 _wrap_vector2df_getAngleTrig (vector2d< irr::f32 > *larg1) {
  irr::f64 lresult = (irr::f64)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::f64 result;
  
  arg1 = larg1;
  try {
    result = (irr::f64)((vector2d< irr::f32 > const *)arg1)->getAngleTrig();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT irr::f64 _wrap_vector2df_getAngle (vector2d< irr::f32 > *larg1) {
  irr::f64 lresult = (irr::f64)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::f64 result;
  
  arg1 = larg1;
  try {
    result = (irr::f64)((vector2d< irr::f32 > const *)arg1)->getAngle();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT irr::f64 _wrap_vector2df_getAngleWith (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2) {
  irr::f64 lresult = (irr::f64)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::f64 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f64)((vector2d< irr::f32 > const *)arg1)->getAngleWith((irr::core::vector2d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT int _wrap_vector2df_isBetweenPoints (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2, irr::core::vector2d< float > *larg3) {
  int lresult = (int)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((vector2d< irr::f32 > const *)arg1)->isBetweenPoints((irr::core::vector2d< float > const &)*arg2,(irr::core::vector2d< float > const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df_getInterpolated (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2, irr::f64 larg3) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::f64 arg3 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->getInterpolated((irr::core::vector2d< float > const &)*arg2,arg3);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df_getInterpolated_quadratic (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2, irr::core::vector2d< float > *larg3, irr::f64 larg4) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = ((vector2d< irr::f32 > const *)arg1)->getInterpolated_quadratic((irr::core::vector2d< float > const &)*arg2,(irr::core::vector2d< float > const &)*arg3,arg4);
    lresult = new irr::core::vector2d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT irr::core::vector2d< float > *_wrap_vector2df_interpolate (vector2d< irr::f32 > *larg1, irr::core::vector2d< float > *larg2, irr::core::vector2d< float > *larg3, irr::f64 larg4) {
  irr::core::vector2d< float > * lresult = (irr::core::vector2d< float > *)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  irr::core::vector2d< float > *arg2 = 0 ;
  irr::core::vector2d< float > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::core::vector2d< float > *) &(arg1)->interpolate((irr::core::vector2d< float > const &)*arg2,(irr::core::vector2d< float > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< float > *)0;
  }
}


EXPORT void _wrap_vector2df_X_set (vector2d< irr::f32 > *larg1, float larg2) {
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->X = arg2;
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_vector2df_X_get (vector2d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float) ((arg1)->X);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_vector2df_Y_set (vector2d< irr::f32 > *larg1, float larg2) {
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Y = arg2;
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_vector2df_Y_get (vector2d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float) ((arg1)->Y);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_delete_vector2df (vector2d< irr::f32 > *larg1) {
  vector2d< irr::f32 > *arg1 = (vector2d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT vector2d< irr::s32 > *_wrap_new_vector2di__SWIG_0 () {
  vector2d< irr::s32 > * lresult = (vector2d< irr::s32 > *)0 ;
  vector2d< irr::s32 > *result = 0 ;
  
  try {
    result = (vector2d< irr::s32 > *)new vector2d< irr::s32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector2d< irr::s32 > *)0;
  }
}


EXPORT vector2d< irr::s32 > *_wrap_new_vector2di__SWIG_1 (int larg1, int larg2) {
  vector2d< irr::s32 > * lresult = (vector2d< irr::s32 > *)0 ;
  int arg1 ;
  int arg2 ;
  vector2d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (vector2d< irr::s32 > *)new vector2d< irr::s32 >(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector2d< irr::s32 > *)0;
  }
}


EXPORT vector2d< irr::s32 > *_wrap_new_vector2di__SWIG_2 (int larg1) {
  vector2d< irr::s32 > * lresult = (vector2d< irr::s32 > *)0 ;
  int arg1 ;
  vector2d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (vector2d< irr::s32 > *)new vector2d< irr::s32 >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector2d< irr::s32 > *)0;
  }
}


EXPORT vector2d< irr::s32 > *_wrap_new_vector2di__SWIG_3 (irr::core::vector2d< int > *larg1) {
  vector2d< irr::s32 > * lresult = (vector2d< irr::s32 > *)0 ;
  irr::core::vector2d< int > *arg1 = 0 ;
  vector2d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (vector2d< irr::s32 > *)new vector2d< irr::s32 >((irr::core::vector2d< int > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector2d< irr::s32 > *)0;
  }
}


EXPORT vector2d< irr::s32 > *_wrap_new_vector2di__SWIG_4 (irr::core::dimension2d< int > *larg1) {
  vector2d< irr::s32 > * lresult = (vector2d< irr::s32 > *)0 ;
  irr::core::dimension2d< int > *arg1 = 0 ;
  vector2d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (vector2d< irr::s32 > *)new vector2d< irr::s32 >((irr::core::dimension2d< int > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector2d< irr::s32 > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___neg__ (vector2d< irr::s32 > *larg1) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->operator -();
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___assign____SWIG_0 (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator =((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___assign____SWIG_1 (vector2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator =((irr::core::dimension2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___add____SWIG_0 (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->operator +((irr::core::vector2d< int > const &)*arg2);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___add____SWIG_1 (vector2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->operator +((irr::core::dimension2d< int > const &)*arg2);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___add_assign____SWIG_0 (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator +=((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___add____SWIG_2 (vector2d< irr::s32 > *larg1, int larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->operator +(arg2);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___add_assign____SWIG_1 (vector2d< irr::s32 > *larg1, int larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator +=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___add_assign____SWIG_2 (vector2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator +=((irr::core::dimension2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___sub____SWIG_0 (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->operator -((irr::core::vector2d< int > const &)*arg2);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___sub____SWIG_1 (vector2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->operator -((irr::core::dimension2d< int > const &)*arg2);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___sub_assign____SWIG_0 (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator -=((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___sub____SWIG_2 (vector2d< irr::s32 > *larg1, int larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->operator -(arg2);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___sub_assign____SWIG_1 (vector2d< irr::s32 > *larg1, int larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator -=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___sub_assign____SWIG_2 (vector2d< irr::s32 > *larg1, irr::core::dimension2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::dimension2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator -=((irr::core::dimension2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___mul____SWIG_0 (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->operator *((irr::core::vector2d< int > const &)*arg2);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___mul_assign____SWIG_0 (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator *=((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___mul____SWIG_1 (vector2d< irr::s32 > *larg1, int larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->operator *(arg2);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___mul_assign____SWIG_1 (vector2d< irr::s32 > *larg1, int larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator *=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___div____SWIG_0 (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->operator /((irr::core::vector2d< int > const &)*arg2);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___div_assign____SWIG_0 (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator /=((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___div____SWIG_1 (vector2d< irr::s32 > *larg1, int larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->operator /(arg2);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di___div_assign____SWIG_1 (vector2d< irr::s32 > *larg1, int larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->operator /=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT int _wrap_vector2di___lte__ (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::s32 > const *)arg1)->operator <=((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2di___gte__ (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::s32 > const *)arg1)->operator >=((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2di___lt__ (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::s32 > const *)arg1)->operator <((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2di___gt__ (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::s32 > const *)arg1)->operator >((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2di___eq__ (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::s32 > const *)arg1)->operator ==((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2di___ne__ (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::s32 > const *)arg1)->operator !=((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2di_equals (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector2d< irr::s32 > const *)arg1)->equals((irr::core::vector2d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di_set__SWIG_0 (vector2d< irr::s32 > *larg1, int larg2, int larg3) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int arg2 ;
  int arg3 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->set(arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di_set__SWIG_1 (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->set((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT int _wrap_vector2di_getLength (vector2d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((vector2d< irr::s32 > const *)arg1)->getLength();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2di_getLengthSQ (vector2d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((vector2d< irr::s32 > const *)arg1)->getLengthSQ();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2di_dotProduct (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((vector2d< irr::s32 > const *)arg1)->dotProduct((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2di_getDistanceFrom (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((vector2d< irr::s32 > const *)arg1)->getDistanceFrom((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector2di_getDistanceFromSQ (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((vector2d< irr::s32 > const *)arg1)->getDistanceFromSQ((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di_rotateBy__SWIG_0 (vector2d< irr::s32 > *larg1, irr::f64 larg2, irr::core::vector2d< int > *larg3) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->rotateBy(arg2,(irr::core::vector2d< int > const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di_rotateBy__SWIG_1 (vector2d< irr::s32 > *larg1, irr::f64 larg2) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->rotateBy(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di_normalize (vector2d< irr::s32 > *larg1) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->normalize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::f64 _wrap_vector2di_getAngleTrig (vector2d< irr::s32 > *larg1) {
  irr::f64 lresult = (irr::f64)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::f64 result;
  
  arg1 = larg1;
  try {
    result = (irr::f64)((vector2d< irr::s32 > const *)arg1)->getAngleTrig();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT irr::f64 _wrap_vector2di_getAngle (vector2d< irr::s32 > *larg1) {
  irr::f64 lresult = (irr::f64)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::f64 result;
  
  arg1 = larg1;
  try {
    result = (irr::f64)((vector2d< irr::s32 > const *)arg1)->getAngle();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT irr::f64 _wrap_vector2di_getAngleWith (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2) {
  irr::f64 lresult = (irr::f64)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::f64 result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::f64)((vector2d< irr::s32 > const *)arg1)->getAngleWith((irr::core::vector2d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::f64)0;
  }
}


EXPORT int _wrap_vector2di_isBetweenPoints (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2, irr::core::vector2d< int > *larg3) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((vector2d< irr::s32 > const *)arg1)->isBetweenPoints((irr::core::vector2d< int > const &)*arg2,(irr::core::vector2d< int > const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di_getInterpolated (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2, irr::f64 larg3) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::f64 arg3 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->getInterpolated((irr::core::vector2d< int > const &)*arg2,arg3);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di_getInterpolated_quadratic (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2, irr::core::vector2d< int > *larg3, irr::f64 larg4) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = ((vector2d< irr::s32 > const *)arg1)->getInterpolated_quadratic((irr::core::vector2d< int > const &)*arg2,(irr::core::vector2d< int > const &)*arg3,arg4);
    lresult = new irr::core::vector2d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT irr::core::vector2d< int > *_wrap_vector2di_interpolate (vector2d< irr::s32 > *larg1, irr::core::vector2d< int > *larg2, irr::core::vector2d< int > *larg3, irr::f64 larg4) {
  irr::core::vector2d< int > * lresult = (irr::core::vector2d< int > *)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  irr::core::vector2d< int > *arg2 = 0 ;
  irr::core::vector2d< int > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector2d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::core::vector2d< int > *) &(arg1)->interpolate((irr::core::vector2d< int > const &)*arg2,(irr::core::vector2d< int > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector2d< int > *)0;
  }
}


EXPORT void _wrap_vector2di_X_set (vector2d< irr::s32 > *larg1, int larg2) {
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->X = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_vector2di_X_get (vector2d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int) ((arg1)->X);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_vector2di_Y_set (vector2d< irr::s32 > *larg1, int larg2) {
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Y = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_vector2di_Y_get (vector2d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int) ((arg1)->Y);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_vector2di (vector2d< irr::s32 > *larg1) {
  vector2d< irr::s32 > *arg1 = (vector2d< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT vector3d< irr::f32 > *_wrap_new_vector3df__SWIG_0 () {
  vector3d< irr::f32 > * lresult = (vector3d< irr::f32 > *)0 ;
  vector3d< irr::f32 > *result = 0 ;
  
  try {
    result = (vector3d< irr::f32 > *)new vector3d< irr::f32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector3d< irr::f32 > *)0;
  }
}


EXPORT vector3d< irr::f32 > *_wrap_new_vector3df__SWIG_1 (float larg1, float larg2, float larg3) {
  vector3d< irr::f32 > * lresult = (vector3d< irr::f32 > *)0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  vector3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (vector3d< irr::f32 > *)new vector3d< irr::f32 >(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector3d< irr::f32 > *)0;
  }
}


EXPORT vector3d< irr::f32 > *_wrap_new_vector3df__SWIG_2 (float larg1) {
  vector3d< irr::f32 > * lresult = (vector3d< irr::f32 > *)0 ;
  float arg1 ;
  vector3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (vector3d< irr::f32 > *)new vector3d< irr::f32 >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector3d< irr::f32 > *)0;
  }
}


EXPORT vector3d< irr::f32 > *_wrap_new_vector3df__SWIG_3 (irr::core::vector3d< float > *larg1) {
  vector3d< irr::f32 > * lresult = (vector3d< irr::f32 > *)0 ;
  irr::core::vector3d< float > *arg1 = 0 ;
  vector3d< irr::f32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (vector3d< irr::f32 > *)new vector3d< irr::f32 >((irr::core::vector3d< float > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector3d< irr::f32 > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___neg__ (vector3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->operator -();
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___assign__ (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->operator =((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___add____SWIG_0 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->operator +((irr::core::vector3d< float > const &)*arg2);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___add_assign____SWIG_0 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->operator +=((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___add____SWIG_1 (vector3d< irr::f32 > *larg1, float larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->operator +(arg2);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___add_assign____SWIG_1 (vector3d< irr::f32 > *larg1, float larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->operator +=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___sub____SWIG_0 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->operator -((irr::core::vector3d< float > const &)*arg2);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___sub_assign____SWIG_0 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->operator -=((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___sub____SWIG_1 (vector3d< irr::f32 > *larg1, float larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->operator -(arg2);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___sub_assign____SWIG_1 (vector3d< irr::f32 > *larg1, float larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->operator -=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___mul____SWIG_0 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->operator *((irr::core::vector3d< float > const &)*arg2);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___mul_assign____SWIG_0 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->operator *=((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___mul____SWIG_1 (vector3d< irr::f32 > *larg1, float larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->operator *(arg2);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___mul_assign____SWIG_1 (vector3d< irr::f32 > *larg1, float larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->operator *=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___div____SWIG_0 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->operator /((irr::core::vector3d< float > const &)*arg2);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___div_assign____SWIG_0 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->operator /=((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___div____SWIG_1 (vector3d< irr::f32 > *larg1, float larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->operator /(arg2);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df___div_assign____SWIG_1 (vector3d< irr::f32 > *larg1, float larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->operator /=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT int _wrap_vector3df___lte__ (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::f32 > const *)arg1)->operator <=((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3df___gte__ (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::f32 > const *)arg1)->operator >=((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3df___lt__ (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::f32 > const *)arg1)->operator <((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3df___gt__ (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::f32 > const *)arg1)->operator >((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3df___eq__ (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::f32 > const *)arg1)->operator ==((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3df___ne__ (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::f32 > const *)arg1)->operator !=((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3df_equals__SWIG_0 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, float larg3) {
  int lresult = (int)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((vector3d< irr::f32 > const *)arg1)->equals((irr::core::vector3d< float > const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3df_equals__SWIG_1 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::f32 > const *)arg1)->equals((irr::core::vector3d< float > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_set__SWIG_0 (vector3d< irr::f32 > *larg1, float larg2, float larg3, float larg4) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->set(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_set__SWIG_1 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->set((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT float _wrap_vector3df_getLength (vector3d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((vector3d< irr::f32 > const *)arg1)->getLength();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_vector3df_getLengthSQ (vector3d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float)((vector3d< irr::f32 > const *)arg1)->getLengthSQ();
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_vector3df_dotProduct (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  float lresult = (float)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)((vector3d< irr::f32 > const *)arg1)->dotProduct((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_vector3df_getDistanceFrom (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  float lresult = (float)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)((vector3d< irr::f32 > const *)arg1)->getDistanceFrom((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT float _wrap_vector3df_getDistanceFromSQ (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  float lresult = (float)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  float result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (float)((vector3d< irr::f32 > const *)arg1)->getDistanceFromSQ((irr::core::vector3d< float > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_crossProduct (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->crossProduct((irr::core::vector3d< float > const &)*arg2);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT int _wrap_vector3df_isBetweenPoints (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3) {
  int lresult = (int)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((vector3d< irr::f32 > const *)arg1)->isBetweenPoints((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_normalize (vector3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->normalize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_setLength (vector3d< irr::f32 > *larg1, float larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->setLength(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_invert (vector3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->invert();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT void _wrap_vector3df_rotateXZBy__SWIG_0 (vector3d< irr::f32 > *larg1, irr::f64 larg2, irr::core::vector3d< float > *larg3) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->rotateXZBy(arg2,(irr::core::vector3d< float > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3df_rotateXZBy__SWIG_1 (vector3d< irr::f32 > *larg1, irr::f64 larg2) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::f64 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->rotateXZBy(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3df_rotateXYBy__SWIG_0 (vector3d< irr::f32 > *larg1, irr::f64 larg2, irr::core::vector3d< float > *larg3) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->rotateXYBy(arg2,(irr::core::vector3d< float > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3df_rotateXYBy__SWIG_1 (vector3d< irr::f32 > *larg1, irr::f64 larg2) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::f64 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->rotateXYBy(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3df_rotateYZBy__SWIG_0 (vector3d< irr::f32 > *larg1, irr::f64 larg2, irr::core::vector3d< float > *larg3) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->rotateYZBy(arg2,(irr::core::vector3d< float > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3df_rotateYZBy__SWIG_1 (vector3d< irr::f32 > *larg1, irr::f64 larg2) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::f64 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->rotateYZBy(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_getInterpolated (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::f64 larg3) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::f64 arg3 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->getInterpolated((irr::core::vector3d< float > const &)*arg2,arg3);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_getInterpolated_quadratic (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3, irr::f64 larg4) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->getInterpolated_quadratic((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,arg4);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_interpolate (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2, irr::core::vector3d< float > *larg3, irr::f64 larg4) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector3d< float > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::core::vector3d< float > *) &(arg1)->interpolate((irr::core::vector3d< float > const &)*arg2,(irr::core::vector3d< float > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_getHorizontalAngle (vector3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->getHorizontalAngle();
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_getSphericalCoordinateAngles (vector3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->getSphericalCoordinateAngles();
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_rotationToDirection__SWIG_0 (vector3d< irr::f32 > *larg1, irr::core::vector3d< float > *larg2) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > *arg2 = 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->rotationToDirection((irr::core::vector3d< float > const &)*arg2);
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT irr::core::vector3d< float > *_wrap_vector3df_rotationToDirection__SWIG_1 (vector3d< irr::f32 > *larg1) {
  irr::core::vector3d< float > * lresult = (irr::core::vector3d< float > *)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  irr::core::vector3d< float > result;
  
  arg1 = larg1;
  try {
    result = ((vector3d< irr::f32 > const *)arg1)->rotationToDirection();
    lresult = new irr::core::vector3d< float >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< float > *)0;
  }
}


EXPORT void _wrap_vector3df_getAs4Values (vector3d< irr::f32 > *larg1, float *larg2) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((vector3d< irr::f32 > const *)arg1)->getAs4Values(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3df_getAs3Values (vector3d< irr::f32 > *larg1, float *larg2) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((vector3d< irr::f32 > const *)arg1)->getAs3Values(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3df_X_set (vector3d< irr::f32 > *larg1, float larg2) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->X = arg2;
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_vector3df_X_get (vector3d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float) ((arg1)->X);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_vector3df_Y_set (vector3d< irr::f32 > *larg1, float larg2) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Y = arg2;
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_vector3df_Y_get (vector3d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float) ((arg1)->Y);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_vector3df_Z_set (vector3d< irr::f32 > *larg1, float larg2) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Z = arg2;
    
  } catch (...) {
    
  }
}


EXPORT float _wrap_vector3df_Z_get (vector3d< irr::f32 > *larg1) {
  float lresult = (float)0 ;
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  float result;
  
  arg1 = larg1;
  try {
    result = (float) ((arg1)->Z);
    lresult = result;
    return lresult;
  } catch (...) {
    return (float)0;
  }
}


EXPORT void _wrap_delete_vector3df (vector3d< irr::f32 > *larg1) {
  vector3d< irr::f32 > *arg1 = (vector3d< irr::f32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT vector3d< irr::s32 > *_wrap_new_vector3di__SWIG_0 () {
  vector3d< irr::s32 > * lresult = (vector3d< irr::s32 > *)0 ;
  vector3d< irr::s32 > *result = 0 ;
  
  try {
    result = (vector3d< irr::s32 > *)new vector3d< irr::s32 >();
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector3d< irr::s32 > *)0;
  }
}


EXPORT vector3d< irr::s32 > *_wrap_new_vector3di__SWIG_1 (int larg1, int larg2, int larg3) {
  vector3d< irr::s32 > * lresult = (vector3d< irr::s32 > *)0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  vector3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (vector3d< irr::s32 > *)new vector3d< irr::s32 >(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector3d< irr::s32 > *)0;
  }
}


EXPORT vector3d< irr::s32 > *_wrap_new_vector3di__SWIG_2 (int larg1) {
  vector3d< irr::s32 > * lresult = (vector3d< irr::s32 > *)0 ;
  int arg1 ;
  vector3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (vector3d< irr::s32 > *)new vector3d< irr::s32 >(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector3d< irr::s32 > *)0;
  }
}


EXPORT vector3d< irr::s32 > *_wrap_new_vector3di__SWIG_3 (irr::core::vector3d< int > *larg1) {
  vector3d< irr::s32 > * lresult = (vector3d< irr::s32 > *)0 ;
  irr::core::vector3d< int > *arg1 = 0 ;
  vector3d< irr::s32 > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (vector3d< irr::s32 > *)new vector3d< irr::s32 >((irr::core::vector3d< int > const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (vector3d< irr::s32 > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___neg__ (vector3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->operator -();
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___assign__ (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->operator =((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___add____SWIG_0 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->operator +((irr::core::vector3d< int > const &)*arg2);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___add_assign____SWIG_0 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->operator +=((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___add____SWIG_1 (vector3d< irr::s32 > *larg1, int larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->operator +(arg2);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___add_assign____SWIG_1 (vector3d< irr::s32 > *larg1, int larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->operator +=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___sub____SWIG_0 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->operator -((irr::core::vector3d< int > const &)*arg2);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___sub_assign____SWIG_0 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->operator -=((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___sub____SWIG_1 (vector3d< irr::s32 > *larg1, int larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->operator -(arg2);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___sub_assign____SWIG_1 (vector3d< irr::s32 > *larg1, int larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->operator -=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___mul____SWIG_0 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->operator *((irr::core::vector3d< int > const &)*arg2);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___mul_assign____SWIG_0 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->operator *=((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___mul____SWIG_1 (vector3d< irr::s32 > *larg1, int larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->operator *(arg2);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___mul_assign____SWIG_1 (vector3d< irr::s32 > *larg1, int larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->operator *=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___div____SWIG_0 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->operator /((irr::core::vector3d< int > const &)*arg2);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___div_assign____SWIG_0 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->operator /=((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___div____SWIG_1 (vector3d< irr::s32 > *larg1, int larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->operator /(arg2);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di___div_assign____SWIG_1 (vector3d< irr::s32 > *larg1, int larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->operator /=(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT int _wrap_vector3di___lte__ (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::s32 > const *)arg1)->operator <=((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3di___gte__ (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::s32 > const *)arg1)->operator >=((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3di___lt__ (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::s32 > const *)arg1)->operator <((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3di___gt__ (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::s32 > const *)arg1)->operator >((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3di___eq__ (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::s32 > const *)arg1)->operator ==((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3di___ne__ (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::s32 > const *)arg1)->operator !=((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3di_equals__SWIG_0 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, int larg3) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((vector3d< irr::s32 > const *)arg1)->equals((irr::core::vector3d< int > const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3di_equals__SWIG_1 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((vector3d< irr::s32 > const *)arg1)->equals((irr::core::vector3d< int > const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_set__SWIG_0 (vector3d< irr::s32 > *larg1, int larg2, int larg3, int larg4) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->set(arg2,arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_set__SWIG_1 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->set((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT int _wrap_vector3di_getLength (vector3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((vector3d< irr::s32 > const *)arg1)->getLength();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3di_getLengthSQ (vector3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((vector3d< irr::s32 > const *)arg1)->getLengthSQ();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3di_dotProduct (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((vector3d< irr::s32 > const *)arg1)->dotProduct((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3di_getDistanceFrom (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((vector3d< irr::s32 > const *)arg1)->getDistanceFrom((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_vector3di_getDistanceFromSQ (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((vector3d< irr::s32 > const *)arg1)->getDistanceFromSQ((irr::core::vector3d< int > const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_crossProduct (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->crossProduct((irr::core::vector3d< int > const &)*arg2);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT int _wrap_vector3di_isBetweenPoints (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)((vector3d< irr::s32 > const *)arg1)->isBetweenPoints((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_normalize (vector3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->normalize();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_setLength (vector3d< irr::s32 > *larg1, int larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->setLength(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_invert (vector3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->invert();
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT void _wrap_vector3di_rotateXZBy__SWIG_0 (vector3d< irr::s32 > *larg1, irr::f64 larg2, irr::core::vector3d< int > *larg3) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->rotateXZBy(arg2,(irr::core::vector3d< int > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3di_rotateXZBy__SWIG_1 (vector3d< irr::s32 > *larg1, irr::f64 larg2) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::f64 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->rotateXZBy(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3di_rotateXYBy__SWIG_0 (vector3d< irr::s32 > *larg1, irr::f64 larg2, irr::core::vector3d< int > *larg3) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->rotateXYBy(arg2,(irr::core::vector3d< int > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3di_rotateXYBy__SWIG_1 (vector3d< irr::s32 > *larg1, irr::f64 larg2) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::f64 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->rotateXYBy(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3di_rotateYZBy__SWIG_0 (vector3d< irr::s32 > *larg1, irr::f64 larg2, irr::core::vector3d< int > *larg3) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::f64 arg2 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->rotateYZBy(arg2,(irr::core::vector3d< int > const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3di_rotateYZBy__SWIG_1 (vector3d< irr::s32 > *larg1, irr::f64 larg2) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::f64 arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->rotateYZBy(arg2);
    
  } catch (...) {
    
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_getInterpolated (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::f64 larg3) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::f64 arg3 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->getInterpolated((irr::core::vector3d< int > const &)*arg2,arg3);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_getInterpolated_quadratic (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3, irr::f64 larg4) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->getInterpolated_quadratic((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3,arg4);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_interpolate (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2, irr::core::vector3d< int > *larg3, irr::f64 larg4) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > *arg3 = 0 ;
  irr::f64 arg4 ;
  irr::core::vector3d< int > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (irr::core::vector3d< int > *) &(arg1)->interpolate((irr::core::vector3d< int > const &)*arg2,(irr::core::vector3d< int > const &)*arg3,arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_getHorizontalAngle (vector3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->getHorizontalAngle();
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_getSphericalCoordinateAngles (vector3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->getSphericalCoordinateAngles();
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_rotationToDirection__SWIG_0 (vector3d< irr::s32 > *larg1, irr::core::vector3d< int > *larg2) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > *arg2 = 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->rotationToDirection((irr::core::vector3d< int > const &)*arg2);
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT irr::core::vector3d< int > *_wrap_vector3di_rotationToDirection__SWIG_1 (vector3d< irr::s32 > *larg1) {
  irr::core::vector3d< int > * lresult = (irr::core::vector3d< int > *)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  irr::core::vector3d< int > result;
  
  arg1 = larg1;
  try {
    result = ((vector3d< irr::s32 > const *)arg1)->rotationToDirection();
    lresult = new irr::core::vector3d< int >(result);
    return lresult;
  } catch (...) {
    return (irr::core::vector3d< int > *)0;
  }
}


EXPORT void _wrap_vector3di_getAs4Values (vector3d< irr::s32 > *larg1, int *larg2) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((vector3d< irr::s32 > const *)arg1)->getAs4Values(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3di_getAs3Values (vector3d< irr::s32 > *larg1, int *larg2) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int *arg2 = (int *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((vector3d< irr::s32 > const *)arg1)->getAs3Values(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_vector3di_X_set (vector3d< irr::s32 > *larg1, int larg2) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->X = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_vector3di_X_get (vector3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int) ((arg1)->X);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_vector3di_Y_set (vector3d< irr::s32 > *larg1, int larg2) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Y = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_vector3di_Y_get (vector3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int) ((arg1)->Y);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_vector3di_Z_set (vector3d< irr::s32 > *larg1, int larg2) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->Z = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_vector3di_Z_get (vector3d< irr::s32 > *larg1) {
  int lresult = (int)0 ;
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int) ((arg1)->Z);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_delete_vector3di (vector3d< irr::s32 > *larg1) {
  vector3d< irr::s32 > *arg1 = (vector3d< irr::s32 > *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


