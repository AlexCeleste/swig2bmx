;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


(cl:defconstant IRRLICHT_VERSION_MAJOR 1)

(cl:defconstant IRRLICHT_VERSION_MINOR 8)

(cl:defconstant IRRLICHT_VERSION_REVISION 1)

(cl:defconstant IRRLICHT_SDK_VERSION "1.8.1")

(cl:defconstant _IRR_MATERIAL_MAX_TEXTURES_ 4)

(cl:defconstant FLT_MAX 3.402823466d+38)

(cl:defconstant FLT_MIN 1.17549435d-38)

(cffi:defcvar ("ROUNDING_ERROR_S32" ROUNDING_ERROR_S32)
 :int)

(cffi:defcvar ("ROUNDING_ERROR_S64" ROUNDING_ERROR_S64)
 :long-long)

(cffi:defcvar ("ROUNDING_ERROR_f32" ROUNDING_ERROR_f32)
 :float)

(cffi:defcvar ("ROUNDING_ERROR_f64" ROUNDING_ERROR_f64)
 :double)

(cffi:defcvar ("PI" PI)
 :float)

(cffi:defcvar ("RECIPROCAL_PI" RECIPROCAL_PI)
 :float)

(cffi:defcvar ("HALF_PI" HALF_PI)
 :float)

(cffi:defcvar ("PI64" PI64)
 :double)

(cffi:defcvar ("RECIPROCAL_PI64" RECIPROCAL_PI64)
 :double)

(cffi:defcvar ("DEGTORAD" DEGTORAD)
 :float)

(cffi:defcvar ("RADTODEG" RADTODEG)
 :float)

(cffi:defcvar ("DEGTORAD64" DEGTORAD64)
 :double)

(cffi:defcvar ("RADTODEG64" RADTODEG64)
 :double)

(cffi:defcfun ("_wrap_radToDeg__SWIG_0" radToDeg) :float
  (radians :float))

(cffi:defcfun ("_wrap_radToDeg__SWIG_1" radToDeg) :double
  (radians :double))

(cffi:defcfun ("_wrap_degToRad__SWIG_0" degToRad) :float
  (degrees :float))

(cffi:defcfun ("_wrap_degToRad__SWIG_1" degToRad) :double
  (degrees :double))

(cffi:defcfun ("_wrap_equals__SWIG_0" equals) :bool
  (a :double)
  (b :double)
  (tolerance :double))

(cffi:defcfun ("_wrap_equals__SWIG_1" equals) :bool
  (a :double)
  (b :double))

(cffi:defcfun ("_wrap_equals__SWIG_2" equals) :bool
  (a :float)
  (b :float)
  (tolerance :float))

(cffi:defcfun ("_wrap_equals__SWIG_3" equals) :bool
  (a :float)
  (b :float))

(cffi:defcunion FloatIntUnion32
	(sign (:pointer "bool ()"))
	(i :int)
	(f :float))

(cffi:defcfun ("_wrap_equalsByUlp" equalsByUlp) :bool
  (a :float)
  (b :float)
  (maxUlpDiff :int))

(cffi:defcfun ("_wrap_equals__SWIG_4" equals) :bool
  (a :int)
  (b :int)
  (tolerance :int))

(cffi:defcfun ("_wrap_equals__SWIG_5" equals) :bool
  (a :int)
  (b :int))

(cffi:defcfun ("_wrap_equals__SWIG_6" equals) :bool
  (a :uint)
  (b :uint)
  (tolerance :int))

(cffi:defcfun ("_wrap_equals__SWIG_7" equals) :bool
  (a :uint)
  (b :uint))

(cffi:defcfun ("_wrap_equals__SWIG_8" equals) :bool
  (a :long-long)
  (b :long-long)
  (tolerance :long-long))

(cffi:defcfun ("_wrap_equals__SWIG_9" equals) :bool
  (a :long-long)
  (b :long-long))

(cffi:defcfun ("_wrap_iszero__SWIG_0" iszero) :bool
  (a :double)
  (tolerance :double))

(cffi:defcfun ("_wrap_iszero__SWIG_1" iszero) :bool
  (a :double))

(cffi:defcfun ("_wrap_iszero__SWIG_2" iszero) :bool
  (a :float)
  (tolerance :float))

(cffi:defcfun ("_wrap_iszero__SWIG_3" iszero) :bool
  (a :float))

(cffi:defcfun ("_wrap_isnotzero__SWIG_0" isnotzero) :bool
  (a :float)
  (tolerance :float))

(cffi:defcfun ("_wrap_isnotzero__SWIG_1" isnotzero) :bool
  (a :float))

(cffi:defcfun ("_wrap_iszero__SWIG_4" iszero) :bool
  (a :int)
  (tolerance :int))

(cffi:defcfun ("_wrap_iszero__SWIG_5" iszero) :bool
  (a :int))

(cffi:defcfun ("_wrap_iszero__SWIG_6" iszero) :bool
  (a :uint)
  (tolerance :uint))

(cffi:defcfun ("_wrap_iszero__SWIG_7" iszero) :bool
  (a :uint))

(cffi:defcfun ("_wrap_iszero__SWIG_8" iszero) :bool
  (a :long-long)
  (tolerance :long-long))

(cffi:defcfun ("_wrap_iszero__SWIG_9" iszero) :bool
  (a :long-long))

(cffi:defcfun ("_wrap_s32_min" s32_min) :int
  (a :int)
  (b :int))

(cffi:defcfun ("_wrap_s32_max" s32_max) :int
  (a :int)
  (b :int))

(cffi:defcfun ("_wrap_s32_clamp" s32_clamp) :int
  (value :int)
  (low :int)
  (high :int))

(cffi:defcunion inttofloat
	(u :uint)
	(s :int)
	(f :float))

(cl:defconstant F32_VALUE_0 #x00000000)

(cl:defconstant F32_VALUE_1 #x3f800000)

(cl:defconstant F32_SIGN_BIT #x80000000)

(cl:defconstant F32_EXPON_MANTISSA #x7FFFFFFF)

(cffi:defcfun ("_wrap_IR" IR) :uint
  (x :float))

(cffi:defcfun ("_wrap_FR__SWIG_0" FR) :float
  (x :uint))

(cffi:defcfun ("_wrap_FR__SWIG_1" FR) :float
  (x :int))

(cl:defconstant IEEE_1_0 #x3f800000)

(cl:defconstant IEEE_255_0 #x437f0000)

(cffi:defcfun ("_wrap_if_c_a_else_b__SWIG_0" if_c_a_else_b) :uint
  (condition :int)
  (a :uint)
  (b :uint))

(cffi:defcfun ("_wrap_if_c_a_else_b__SWIG_1" if_c_a_else_b) :ushort
  (condition :short)
  (a :ushort)
  (b :ushort))

(cffi:defcfun ("_wrap_if_c_a_else_0" if_c_a_else_0) :uint
  (condition :int)
  (a :uint))

(cffi:defcfun ("_wrap_setbit_cond" setbit_cond) :void
  (state (:pointer "irr::u32 *"))
  (condition :int)
  (mask :uint))

(cffi:defcfun ("_wrap_round_" round_) :float
  (x :float))

(cffi:defcfun ("_wrap_clearFPUException" clearFPUException) :void)

(cffi:defcfun ("_wrap_squareroot__SWIG_0" squareroot) :float
  (f :float))

(cffi:defcfun ("_wrap_squareroot__SWIG_1" squareroot) :double
  (f :double))

(cffi:defcfun ("_wrap_squareroot__SWIG_2" squareroot) :int
  (f :int))

(cffi:defcfun ("_wrap_squareroot__SWIG_3" squareroot) :long-long
  (f :long-long))

(cffi:defcfun ("_wrap_reciprocal_squareroot__SWIG_0" reciprocal_squareroot) :double
  (x :double))

(cffi:defcfun ("_wrap_reciprocal_squareroot__SWIG_1" reciprocal_squareroot) :float
  (f :float))

(cffi:defcfun ("_wrap_reciprocal_squareroot__SWIG_2" reciprocal_squareroot) :int
  (x :int))

(cffi:defcfun ("_wrap_reciprocal__SWIG_0" reciprocal) :float
  (f :float))

(cffi:defcfun ("_wrap_reciprocal__SWIG_1" reciprocal) :double
  (f :double))

(cffi:defcfun ("_wrap_reciprocal_approxim" reciprocal_approxim) :float
  (f :float))

(cffi:defcfun ("_wrap_floor32" floor32) :int
  (x :float))

(cffi:defcfun ("_wrap_ceil32" ceil32) :int
  (x :float))

(cffi:defcfun ("_wrap_round32" round32) :int
  (x :float))

(cffi:defcfun ("_wrap_f32_max3" f32_max3) :float
  (a :float)
  (b :float)
  (c :float))

(cffi:defcfun ("_wrap_f32_min3" f32_min3) :float
  (a :float)
  (b :float)
  (c :float))

(cffi:defcfun ("_wrap_fract" fract) :float
  (x :float))

(cffi:defcenum EIntersectionRelation3D
	(:ISREL3D_FRONT 0)
	:ISREL3D_BACK
	:ISREL3D_PLANAR
	:ISREL3D_SPANNING
	:ISREL3D_CLIPPED)

(cffi:defcfun ("_wrap_new_IReferenceCounted" new_IReferenceCounted) (:pointer "irr::IReferenceCounted *"))

(cffi:defcfun ("_wrap_delete_IReferenceCounted" delete_IReferenceCounted) :void
  (self (:pointer "irr::IReferenceCounted *")))

(cffi:defcfun ("_wrap_IReferenceCounted_grab" IReferenceCounted_grab) :void
  (self (:pointer "irr::IReferenceCounted *")))

(cffi:defcfun ("_wrap_IReferenceCounted_drop" IReferenceCounted_drop) :bool
  (self (:pointer "irr::IReferenceCounted *")))

(cffi:defcfun ("_wrap_IReferenceCounted_getReferenceCount" IReferenceCounted_getReferenceCount) :int
  (self (:pointer "irr::IReferenceCounted *")))

(cffi:defcfun ("_wrap_IReferenceCounted_getDebugName" IReferenceCounted_getDebugName) :string
  (self (:pointer "irr::IReferenceCounted *")))

(cffi:defcenum ECOLOR_FORMAT
	(:ECF_A1R5G5B5 0)
	:ECF_R5G6B5
	:ECF_R8G8B8
	:ECF_A8R8G8B8
	:ECF_R16F
	:ECF_G16R16F
	:ECF_A16B16G16R16F
	:ECF_R32F
	:ECF_G32R32F
	:ECF_A32B32G32R32F
	:ECF_UNKNOWN)

(cffi:defcfun ("_wrap_RGBA16__SWIG_0" RGBA16) :ushort
  (r :uint)
  (g :uint)
  (b :uint)
  (a :uint))

(cffi:defcfun ("_wrap_RGBA16__SWIG_1" RGBA16) :ushort
  (r :uint)
  (g :uint)
  (b :uint))

(cffi:defcfun ("_wrap_RGB16" RGB16) :ushort
  (r :uint)
  (g :uint)
  (b :uint))

(cffi:defcfun ("_wrap_RGB16from16" RGB16from16) :ushort
  (r :ushort)
  (g :ushort)
  (b :ushort))

(cffi:defcfun ("_wrap_X8R8G8B8toA1R5G5B5" X8R8G8B8toA1R5G5B5) :ushort
  (color :uint))

(cffi:defcfun ("_wrap_A8R8G8B8toA1R5G5B5" A8R8G8B8toA1R5G5B5) :ushort
  (color :uint))

(cffi:defcfun ("_wrap_A8R8G8B8toR5G6B5" A8R8G8B8toR5G6B5) :ushort
  (color :uint))

(cffi:defcfun ("_wrap_A1R5G5B5toA8R8G8B8" A1R5G5B5toA8R8G8B8) :uint
  (color :ushort))

(cffi:defcfun ("_wrap_R5G6B5toA8R8G8B8" R5G6B5toA8R8G8B8) :uint
  (color :ushort))

(cffi:defcfun ("_wrap_R5G6B5toA1R5G5B5" R5G6B5toA1R5G5B5) :ushort
  (color :ushort))

(cffi:defcfun ("_wrap_A1R5G5B5toR5G6B5" A1R5G5B5toR5G6B5) :ushort
  (color :ushort))

(cffi:defcfun ("_wrap_getAlpha" getAlpha) :uint
  (color :ushort))

(cffi:defcfun ("_wrap_getRed" getRed) :uint
  (color :ushort))

(cffi:defcfun ("_wrap_getGreen" getGreen) :uint
  (color :ushort))

(cffi:defcfun ("_wrap_getBlue" getBlue) :uint
  (color :ushort))

(cffi:defcfun ("_wrap_getAverage" getAverage) :int
  (color :short))

(cffi:defcfun ("_wrap_new_SColor__SWIG_0" new_SColor) (:pointer "irr::video::SColor *"))

(cffi:defcfun ("_wrap_new_SColor__SWIG_1" new_SColor) (:pointer "irr::video::SColor *")
  (a :uint)
  (r :uint)
  (g :uint)
  (b :uint))

(cffi:defcfun ("_wrap_new_SColor__SWIG_2" new_SColor) (:pointer "irr::video::SColor *")
  (clr :uint))

(cffi:defcfun ("_wrap_SColor_getAlpha" SColor_getAlpha) :uint
  (self (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor_getRed" SColor_getRed) :uint
  (self (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor_getGreen" SColor_getGreen) :uint
  (self (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor_getBlue" SColor_getBlue) :uint
  (self (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor_getLightness" SColor_getLightness) :float
  (self (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor_getLuminance" SColor_getLuminance) :float
  (self (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor_getAverage" SColor_getAverage) :uint
  (self (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor_setAlpha" SColor_setAlpha) :void
  (self (:pointer "irr::video::SColor *"))
  (a :uint))

(cffi:defcfun ("_wrap_SColor_setRed" SColor_setRed) :void
  (self (:pointer "irr::video::SColor *"))
  (r :uint))

(cffi:defcfun ("_wrap_SColor_setGreen" SColor_setGreen) :void
  (self (:pointer "irr::video::SColor *"))
  (g :uint))

(cffi:defcfun ("_wrap_SColor_setBlue" SColor_setBlue) :void
  (self (:pointer "irr::video::SColor *"))
  (b :uint))

(cffi:defcfun ("_wrap_SColor_toA1R5G5B5" SColor_toA1R5G5B5) :ushort
  (self (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor_toOpenGLColor" SColor_toOpenGLColor) :void
  (self (:pointer "irr::video::SColor *"))
  (dest (:pointer "irr::u8 *")))

(cffi:defcfun ("_wrap_SColor_set__SWIG_0" SColor_set) :void
  (self (:pointer "irr::video::SColor *"))
  (a :uint)
  (r :uint)
  (g :uint)
  (b :uint))

(cffi:defcfun ("_wrap_SColor_set__SWIG_1" SColor_set) :void
  (self (:pointer "irr::video::SColor *"))
  (col :uint))

(cffi:defcfun ("_wrap_SColor___eq__" SColor___eq__) :bool
  (self (:pointer "irr::video::SColor *"))
  (other (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor___ne__" SColor___ne__) :bool
  (self (:pointer "irr::video::SColor *"))
  (other (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor___lt__" SColor___lt__) :bool
  (self (:pointer "irr::video::SColor *"))
  (other (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor___add__" SColor___add__) (:by-value "irr::video::SColor")
  (self (:pointer "irr::video::SColor *"))
  (other (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SColor_getInterpolated" SColor_getInterpolated) (:by-value "irr::video::SColor")
  (self (:pointer "irr::video::SColor *"))
  (other (:pointer "irr::video::SColor *"))
  (d :float))

(cffi:defcfun ("_wrap_SColor_getInterpolated_quadratic" SColor_getInterpolated_quadratic) (:by-value "irr::video::SColor")
  (self (:pointer "irr::video::SColor *"))
  (c1 (:pointer "irr::video::SColor *"))
  (c2 (:pointer "irr::video::SColor *"))
  (d :float))

(cffi:defcfun ("_wrap_SColor_setData" SColor_setData) :void
  (self (:pointer "irr::video::SColor *"))
  (data (:pointer "void *"))
  (format :enum))

(cffi:defcfun ("_wrap_SColor_getData" SColor_getData) :void
  (self (:pointer "irr::video::SColor *"))
  (data (:pointer "void *"))
  (format :enum))

(cffi:defcfun ("_wrap_SColor_color_set" SColor_color_set) :void
  (self (:pointer "irr::video::SColor *"))
  (color :uint))

(cffi:defcfun ("_wrap_SColor_color_get" SColor_color_get) :uint
  (self (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_delete_SColor" delete_SColor) :void
  (self (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_new_SColorf__SWIG_0" new_SColorf) (:pointer "irr::video::SColorf *"))

(cffi:defcfun ("_wrap_new_SColorf__SWIG_1" new_SColorf) (:pointer "irr::video::SColorf *")
  (r :float)
  (g :float)
  (b :float)
  (a :float))

(cffi:defcfun ("_wrap_new_SColorf__SWIG_2" new_SColorf) (:pointer "irr::video::SColorf *")
  (r :float)
  (g :float)
  (b :float))

(cffi:defcfun ("_wrap_new_SColorf__SWIG_3" new_SColorf) (:pointer "irr::video::SColorf *")
  (c (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_SColorf_toSColor" SColorf_toSColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_SColorf_set__SWIG_0" SColorf_set) :void
  (self (:pointer "irr::video::SColorf *"))
  (rr :float)
  (gg :float)
  (bb :float))

(cffi:defcfun ("_wrap_SColorf_set__SWIG_1" SColorf_set) :void
  (self (:pointer "irr::video::SColorf *"))
  (aa :float)
  (rr :float)
  (gg :float)
  (bb :float))

(cffi:defcfun ("_wrap_SColorf_getInterpolated" SColorf_getInterpolated) (:by-value "irr::video::SColorf")
  (self (:pointer "irr::video::SColorf *"))
  (other (:pointer "irr::video::SColorf *"))
  (d :float))

(cffi:defcfun ("_wrap_SColorf_getInterpolated_quadratic" SColorf_getInterpolated_quadratic) (:by-value "irr::video::SColorf")
  (self (:pointer "irr::video::SColorf *"))
  (c1 (:pointer "irr::video::SColorf *"))
  (c2 (:pointer "irr::video::SColorf *"))
  (d :float))

(cffi:defcfun ("_wrap_SColorf_setColorComponentValue" SColorf_setColorComponentValue) :void
  (self (:pointer "irr::video::SColorf *"))
  (index :int)
  (value :float))

(cffi:defcfun ("_wrap_SColorf_getAlpha" SColorf_getAlpha) :float
  (self (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_SColorf_getRed" SColorf_getRed) :float
  (self (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_SColorf_getGreen" SColorf_getGreen) :float
  (self (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_SColorf_getBlue" SColorf_getBlue) :float
  (self (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_SColorf_r_set" SColorf_r_set) :void
  (self (:pointer "irr::video::SColorf *"))
  (r :float))

(cffi:defcfun ("_wrap_SColorf_r_get" SColorf_r_get) :float
  (self (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_SColorf_g_set" SColorf_g_set) :void
  (self (:pointer "irr::video::SColorf *"))
  (g :float))

(cffi:defcfun ("_wrap_SColorf_g_get" SColorf_g_get) :float
  (self (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_SColorf_b_set" SColorf_b_set) :void
  (self (:pointer "irr::video::SColorf *"))
  (b :float))

(cffi:defcfun ("_wrap_SColorf_b_get" SColorf_b_get) :float
  (self (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_SColorf_a_set" SColorf_a_set) :void
  (self (:pointer "irr::video::SColorf *"))
  (a :float))

(cffi:defcfun ("_wrap_SColorf_a_get" SColorf_a_get) :float
  (self (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_delete_SColorf" delete_SColorf) :void
  (self (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_new_SColorHSL__SWIG_0" new_SColorHSL) (:pointer "irr::video::SColorHSL *")
  (h :float)
  (s :float)
  (l :float))

(cffi:defcfun ("_wrap_new_SColorHSL__SWIG_1" new_SColorHSL) (:pointer "irr::video::SColorHSL *")
  (h :float)
  (s :float))

(cffi:defcfun ("_wrap_new_SColorHSL__SWIG_2" new_SColorHSL) (:pointer "irr::video::SColorHSL *")
  (h :float))

(cffi:defcfun ("_wrap_new_SColorHSL__SWIG_3" new_SColorHSL) (:pointer "irr::video::SColorHSL *"))

(cffi:defcfun ("_wrap_SColorHSL_fromRGB" SColorHSL_fromRGB) :void
  (self (:pointer "irr::video::SColorHSL *"))
  (color (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_SColorHSL_toRGB" SColorHSL_toRGB) :void
  (self (:pointer "irr::video::SColorHSL *"))
  (color (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_SColorHSL_Hue_set" SColorHSL_Hue_set) :void
  (self (:pointer "irr::video::SColorHSL *"))
  (Hue :float))

(cffi:defcfun ("_wrap_SColorHSL_Hue_get" SColorHSL_Hue_get) :float
  (self (:pointer "irr::video::SColorHSL *")))

(cffi:defcfun ("_wrap_SColorHSL_Saturation_set" SColorHSL_Saturation_set) :void
  (self (:pointer "irr::video::SColorHSL *"))
  (Saturation :float))

(cffi:defcfun ("_wrap_SColorHSL_Saturation_get" SColorHSL_Saturation_get) :float
  (self (:pointer "irr::video::SColorHSL *")))

(cffi:defcfun ("_wrap_SColorHSL_Luminance_set" SColorHSL_Luminance_set) :void
  (self (:pointer "irr::video::SColorHSL *"))
  (Luminance :float))

(cffi:defcfun ("_wrap_SColorHSL_Luminance_get" SColorHSL_Luminance_get) :float
  (self (:pointer "irr::video::SColorHSL *")))

(cffi:defcfun ("_wrap_delete_SColorHSL" delete_SColorHSL) :void
  (self (:pointer "irr::video::SColorHSL *")))

(cffi:defcenum eAllocStrategy
	(:ALLOC_STRATEGY_SAFE 0)
	(:ALLOC_STRATEGY_DOUBLE 1)
	(:ALLOC_STRATEGY_SQRT 2))

(cffi:defcenum eLocaleID
	(:IRR_LOCALE_ANSI 0)
	(:IRR_LOCALE_GERMAN 1))

(cffi:defcvar ("locale_current" locale_current)
 :enum)

(cffi:defcfun ("_wrap_locale_set" locale_set) :void
  (id :enum))

(cffi:defcfun ("_wrap_locale_lower" locale_lower) :uint
  (x :uint))

(cffi:defcfun ("_wrap_locale_upper" locale_upper) :uint
  (x :uint))

(cffi:defcvar ("IdentityMatrix" IdentityMatrix)
 (:pointer "matrix4"))

(cffi:defcenum E_MATERIAL_TYPE
	(:EMT_SOLID 0)
	:EMT_SOLID_2_LAYER
	:EMT_LIGHTMAP
	:EMT_LIGHTMAP_ADD
	:EMT_LIGHTMAP_M2
	:EMT_LIGHTMAP_M4
	:EMT_LIGHTMAP_LIGHTING
	:EMT_LIGHTMAP_LIGHTING_M2
	:EMT_LIGHTMAP_LIGHTING_M4
	:EMT_DETAIL_MAP
	:EMT_SPHERE_MAP
	:EMT_REFLECTION_2_LAYER
	:EMT_TRANSPARENT_ADD_COLOR
	:EMT_TRANSPARENT_ALPHA_CHANNEL
	:EMT_TRANSPARENT_ALPHA_CHANNEL_REF
	:EMT_TRANSPARENT_VERTEX_ALPHA
	:EMT_TRANSPARENT_REFLECTION_2_LAYER
	:EMT_NORMAL_MAP_SOLID
	:EMT_NORMAL_MAP_TRANSPARENT_ADD_COLOR
	:EMT_NORMAL_MAP_TRANSPARENT_VERTEX_ALPHA
	:EMT_PARALLAX_MAP_SOLID
	:EMT_PARALLAX_MAP_TRANSPARENT_ADD_COLOR
	:EMT_PARALLAX_MAP_TRANSPARENT_VERTEX_ALPHA
	:EMT_ONETEXTURE_BLEND
	(:EMT_FORCE_32BIT #x7fffffff))

(cffi:defcvar ("sBuiltInMaterialTypeNames" sBuiltInMaterialTypeNames)
 (:pointer "char **"))

(cffi:defcenum E_MATERIAL_FLAG
	(:EMF_WIREFRAME #x1)
	(:EMF_POINTCLOUD #x2)
	(:EMF_GOURAUD_SHADING #x4)
	(:EMF_LIGHTING #x8)
	(:EMF_ZBUFFER #x10)
	(:EMF_ZWRITE_ENABLE #x20)
	(:EMF_BACK_FACE_CULLING #x40)
	(:EMF_FRONT_FACE_CULLING #x80)
	(:EMF_BILINEAR_FILTER #x100)
	(:EMF_TRILINEAR_FILTER #x200)
	(:EMF_ANISOTROPIC_FILTER #x400)
	(:EMF_FOG_ENABLE #x800)
	(:EMF_NORMALIZE_NORMALS #x1000)
	(:EMF_TEXTURE_WRAP #x2000)
	(:EMF_ANTI_ALIASING #x4000)
	(:EMF_COLOR_MASK #x8000)
	(:EMF_COLOR_MATERIAL #x10000)
	(:EMF_USE_MIP_MAPS #x20000)
	(:EMF_BLEND_OPERATION #x40000)
	(:EMF_POLYGON_OFFSET #x80000))

(cffi:defcenum E_TEXTURE_CLAMP
	(:ETC_REPEAT 0)
	:ETC_CLAMP
	:ETC_CLAMP_TO_EDGE
	:ETC_CLAMP_TO_BORDER
	:ETC_MIRROR
	:ETC_MIRROR_CLAMP
	:ETC_MIRROR_CLAMP_TO_EDGE
	:ETC_MIRROR_CLAMP_TO_BORDER)

(cffi:defcvar ("aTextureClampNames" aTextureClampNames)
 (:pointer "char **"))

(cffi:defcfun ("_wrap_new_SMaterialLayer__SWIG_0" new_SMaterialLayer) (:pointer "irr::video::SMaterialLayer *"))

(cffi:defcfun ("_wrap_new_SMaterialLayer__SWIG_1" new_SMaterialLayer) (:pointer "irr::video::SMaterialLayer *")
  (other (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_delete_SMaterialLayer" delete_SMaterialLayer) :void
  (self (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer___assign__" SMaterialLayer___assign__) (:reference "irr::video::SMaterialLayer *")
  (self (:pointer "irr::video::SMaterialLayer *"))
  (other (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer_getTextureMatrix__SWIG_0" SMaterialLayer_getTextureMatrix) (:reference "matrix4")
  (self (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer_getTextureMatrix__SWIG_1" SMaterialLayer_getTextureMatrix) (:reference "matrix4")
  (self (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer_setTextureMatrix" SMaterialLayer_setTextureMatrix) :void
  (self (:pointer "irr::video::SMaterialLayer *"))
  (mat (:pointer "matrix4")))

(cffi:defcfun ("_wrap_SMaterialLayer___ne__" SMaterialLayer___ne__) :bool
  (self (:pointer "irr::video::SMaterialLayer *"))
  (b (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer___eq__" SMaterialLayer___eq__) :bool
  (self (:pointer "irr::video::SMaterialLayer *"))
  (b (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer_Texture_set" SMaterialLayer_Texture_set) :void
  (self (:pointer "irr::video::SMaterialLayer *"))
  (Texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_SMaterialLayer_Texture_get" SMaterialLayer_Texture_get) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer_TextureWrapU_set" SMaterialLayer_TextureWrapU_set) :void
  (self (:pointer "irr::video::SMaterialLayer *"))
  (TextureWrapU :uchar))

(cffi:defcfun ("_wrap_SMaterialLayer_TextureWrapU_get" SMaterialLayer_TextureWrapU_get) :uchar
  (self (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer_TextureWrapV_set" SMaterialLayer_TextureWrapV_set) :void
  (self (:pointer "irr::video::SMaterialLayer *"))
  (TextureWrapV :uchar))

(cffi:defcfun ("_wrap_SMaterialLayer_TextureWrapV_get" SMaterialLayer_TextureWrapV_get) :uchar
  (self (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer_BilinearFilter_set" SMaterialLayer_BilinearFilter_set) :void
  (self (:pointer "irr::video::SMaterialLayer *"))
  (BilinearFilter :bool))

(cffi:defcfun ("_wrap_SMaterialLayer_BilinearFilter_get" SMaterialLayer_BilinearFilter_get) :bool
  (self (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer_TrilinearFilter_set" SMaterialLayer_TrilinearFilter_set) :void
  (self (:pointer "irr::video::SMaterialLayer *"))
  (TrilinearFilter :bool))

(cffi:defcfun ("_wrap_SMaterialLayer_TrilinearFilter_get" SMaterialLayer_TrilinearFilter_get) :bool
  (self (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer_AnisotropicFilter_set" SMaterialLayer_AnisotropicFilter_set) :void
  (self (:pointer "irr::video::SMaterialLayer *"))
  (AnisotropicFilter :uchar))

(cffi:defcfun ("_wrap_SMaterialLayer_AnisotropicFilter_get" SMaterialLayer_AnisotropicFilter_get) :uchar
  (self (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterialLayer_LODBias_set" SMaterialLayer_LODBias_set) :void
  (self (:pointer "irr::video::SMaterialLayer *"))
  (LODBias :char))

(cffi:defcfun ("_wrap_SMaterialLayer_LODBias_get" SMaterialLayer_LODBias_get) :char
  (self (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcenum E_BLEND_FACTOR
	(:EBF_ZERO 0)
	:EBF_ONE
	:EBF_DST_COLOR
	:EBF_ONE_MINUS_DST_COLOR
	:EBF_SRC_COLOR
	:EBF_ONE_MINUS_SRC_COLOR
	:EBF_SRC_ALPHA
	:EBF_ONE_MINUS_SRC_ALPHA
	:EBF_DST_ALPHA
	:EBF_ONE_MINUS_DST_ALPHA
	:EBF_SRC_ALPHA_SATURATE)

(cffi:defcenum E_BLEND_OPERATION
	(:EBO_NONE 0)
	:EBO_ADD
	:EBO_SUBTRACT
	:EBO_REVSUBTRACT
	:EBO_MIN
	:EBO_MAX
	:EBO_MIN_FACTOR
	:EBO_MAX_FACTOR
	:EBO_MIN_ALPHA
	:EBO_MAX_ALPHA)

(cffi:defcenum E_MODULATE_FUNC
	(:EMFN_MODULATE_1X 1)
	(:EMFN_MODULATE_2X 2)
	(:EMFN_MODULATE_4X 4))

(cffi:defcenum E_COMPARISON_FUNC
	(:ECFN_NEVER 0)
	(:ECFN_LESSEQUAL 1)
	(:ECFN_EQUAL 2)
	:ECFN_LESS
	:ECFN_NOTEQUAL
	:ECFN_GREATEREQUAL
	:ECFN_GREATER
	:ECFN_ALWAYS)

(cffi:defcenum E_COLOR_PLANE
	(:ECP_NONE 0)
	(:ECP_ALPHA 1)
	(:ECP_RED 2)
	(:ECP_GREEN 4)
	(:ECP_BLUE 8)
	(:ECP_RGB 14)
	(:ECP_ALL 15))

(cffi:defcenum E_ALPHA_SOURCE
	(:EAS_NONE 0)
	:EAS_VERTEX_COLOR
	:EAS_TEXTURE)

(cffi:defcfun ("_wrap_pack_textureBlendFunc__SWIG_0" pack_textureBlendFunc) :float
  (srcFact :enum)
  (dstFact :enum)
  (modulate :enum)
  (alphaSource :uint))

(cffi:defcfun ("_wrap_pack_textureBlendFunc__SWIG_1" pack_textureBlendFunc) :float
  (srcFact :enum)
  (dstFact :enum)
  (modulate :enum))

(cffi:defcfun ("_wrap_pack_textureBlendFunc__SWIG_2" pack_textureBlendFunc) :float
  (srcFact :enum)
  (dstFact :enum))

(cffi:defcfun ("_wrap_unpack_textureBlendFunc" unpack_textureBlendFunc) :void
  (srcFact :enum-ref)
  (dstFact :enum-ref)
  (modulo :enum-ref)
  (alphaSource (:pointer "irr::u32 *"))
  (param :float))

(cffi:defcfun ("_wrap_textureBlendFunc_hasAlpha" textureBlendFunc_hasAlpha) :bool
  (factor :enum))

(cffi:defcenum E_ANTI_ALIASING_MODE
	(:EAAM_OFF 0)
	(:EAAM_SIMPLE 1)
	(:EAAM_QUALITY 3)
	(:EAAM_LINE_SMOOTH 4)
	(:EAAM_POINT_SMOOTH 8)
	(:EAAM_FULL_BASIC 15)
	(:EAAM_ALPHA_TO_COVERAGE 16))

(cffi:defcenum E_COLOR_MATERIAL
	(:ECM_NONE 0)
	:ECM_DIFFUSE
	:ECM_AMBIENT
	:ECM_EMISSIVE
	:ECM_SPECULAR
	:ECM_DIFFUSE_AND_AMBIENT)

(cffi:defcenum E_POLYGON_OFFSET
	(:EPO_BACK 0)
	(:EPO_FRONT 1))

(cffi:defcvar ("PolygonOffsetDirectionNames" PolygonOffsetDirectionNames)
 (:pointer "irr::c8 **"))

(cffi:defcvar ("MATERIAL_MAX_TEXTURES" MATERIAL_MAX_TEXTURES)
 :uint)

(cffi:defcfun ("_wrap_new_SMaterial__SWIG_0" new_SMaterial) (:pointer "irr::video::SMaterial *"))

(cffi:defcfun ("_wrap_new_SMaterial__SWIG_1" new_SMaterial) (:pointer "irr::video::SMaterial *")
  (other (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial___assign__" SMaterial___assign__) (:reference "irr::video::SMaterial *")
  (self (:pointer "irr::video::SMaterial *"))
  (other (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_TextureLayer_set" SMaterial_TextureLayer_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (TextureLayer (:pointer "irr::video::SMaterialLayer *")))

(cffi:defcfun ("_wrap_SMaterial_TextureLayer_get" SMaterial_TextureLayer_get) (:pointer "irr::video::SMaterialLayer *")
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_MaterialType_set" SMaterial_MaterialType_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (MaterialType :enum))

(cffi:defcfun ("_wrap_SMaterial_MaterialType_get" SMaterial_MaterialType_get) :enum
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_AmbientColor_set" SMaterial_AmbientColor_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (AmbientColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SMaterial_AmbientColor_get" SMaterial_AmbientColor_get) (:pointer "irr::video::SColor *")
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_DiffuseColor_set" SMaterial_DiffuseColor_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (DiffuseColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SMaterial_DiffuseColor_get" SMaterial_DiffuseColor_get) (:pointer "irr::video::SColor *")
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_EmissiveColor_set" SMaterial_EmissiveColor_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (EmissiveColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SMaterial_EmissiveColor_get" SMaterial_EmissiveColor_get) (:pointer "irr::video::SColor *")
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_SpecularColor_set" SMaterial_SpecularColor_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (SpecularColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_SMaterial_SpecularColor_get" SMaterial_SpecularColor_get) (:pointer "irr::video::SColor *")
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_Shininess_set" SMaterial_Shininess_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (Shininess :float))

(cffi:defcfun ("_wrap_SMaterial_Shininess_get" SMaterial_Shininess_get) :float
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_MaterialTypeParam_set" SMaterial_MaterialTypeParam_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (MaterialTypeParam :float))

(cffi:defcfun ("_wrap_SMaterial_MaterialTypeParam_get" SMaterial_MaterialTypeParam_get) :float
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_MaterialTypeParam2_set" SMaterial_MaterialTypeParam2_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (MaterialTypeParam2 :float))

(cffi:defcfun ("_wrap_SMaterial_MaterialTypeParam2_get" SMaterial_MaterialTypeParam2_get) :float
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_Thickness_set" SMaterial_Thickness_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (Thickness :float))

(cffi:defcfun ("_wrap_SMaterial_Thickness_get" SMaterial_Thickness_get) :float
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_ZBuffer_set" SMaterial_ZBuffer_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (ZBuffer :uchar))

(cffi:defcfun ("_wrap_SMaterial_ZBuffer_get" SMaterial_ZBuffer_get) :uchar
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_AntiAliasing_set" SMaterial_AntiAliasing_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (AntiAliasing :uchar))

(cffi:defcfun ("_wrap_SMaterial_AntiAliasing_get" SMaterial_AntiAliasing_get) :uchar
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_ColorMask_set" SMaterial_ColorMask_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (ColorMask :uchar))

(cffi:defcfun ("_wrap_SMaterial_ColorMask_get" SMaterial_ColorMask_get) :uchar
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_ColorMaterial_set" SMaterial_ColorMaterial_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (ColorMaterial :uchar))

(cffi:defcfun ("_wrap_SMaterial_ColorMaterial_get" SMaterial_ColorMaterial_get) :uchar
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_BlendOperation_set" SMaterial_BlendOperation_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (BlendOperation :enum))

(cffi:defcfun ("_wrap_SMaterial_BlendOperation_get" SMaterial_BlendOperation_get) :enum
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_PolygonOffsetFactor_set" SMaterial_PolygonOffsetFactor_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (PolygonOffsetFactor :uchar))

(cffi:defcfun ("_wrap_SMaterial_PolygonOffsetFactor_get" SMaterial_PolygonOffsetFactor_get) :uchar
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_PolygonOffsetDirection_set" SMaterial_PolygonOffsetDirection_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (PolygonOffsetDirection :enum))

(cffi:defcfun ("_wrap_SMaterial_PolygonOffsetDirection_get" SMaterial_PolygonOffsetDirection_get) :enum
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_Wireframe_set" SMaterial_Wireframe_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (Wireframe :bool))

(cffi:defcfun ("_wrap_SMaterial_Wireframe_get" SMaterial_Wireframe_get) :bool
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_PointCloud_set" SMaterial_PointCloud_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (PointCloud :bool))

(cffi:defcfun ("_wrap_SMaterial_PointCloud_get" SMaterial_PointCloud_get) :bool
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_GouraudShading_set" SMaterial_GouraudShading_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (GouraudShading :bool))

(cffi:defcfun ("_wrap_SMaterial_GouraudShading_get" SMaterial_GouraudShading_get) :bool
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_Lighting_set" SMaterial_Lighting_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (Lighting :bool))

(cffi:defcfun ("_wrap_SMaterial_Lighting_get" SMaterial_Lighting_get) :bool
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_ZWriteEnable_set" SMaterial_ZWriteEnable_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (ZWriteEnable :bool))

(cffi:defcfun ("_wrap_SMaterial_ZWriteEnable_get" SMaterial_ZWriteEnable_get) :bool
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_BackfaceCulling_set" SMaterial_BackfaceCulling_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (BackfaceCulling :bool))

(cffi:defcfun ("_wrap_SMaterial_BackfaceCulling_get" SMaterial_BackfaceCulling_get) :bool
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_FrontfaceCulling_set" SMaterial_FrontfaceCulling_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (FrontfaceCulling :bool))

(cffi:defcfun ("_wrap_SMaterial_FrontfaceCulling_get" SMaterial_FrontfaceCulling_get) :bool
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_FogEnable_set" SMaterial_FogEnable_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (FogEnable :bool))

(cffi:defcfun ("_wrap_SMaterial_FogEnable_get" SMaterial_FogEnable_get) :bool
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_NormalizeNormals_set" SMaterial_NormalizeNormals_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (NormalizeNormals :bool))

(cffi:defcfun ("_wrap_SMaterial_NormalizeNormals_get" SMaterial_NormalizeNormals_get) :bool
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_UseMipMaps_set" SMaterial_UseMipMaps_set) :void
  (self (:pointer "irr::video::SMaterial *"))
  (UseMipMaps :bool))

(cffi:defcfun ("_wrap_SMaterial_UseMipMaps_get" SMaterial_UseMipMaps_get) :bool
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_getTextureMatrix__SWIG_0" SMaterial_getTextureMatrix) (:reference "matrix4")
  (self (:pointer "irr::video::SMaterial *"))
  (i :uint))

(cffi:defcfun ("_wrap_SMaterial_getTextureMatrix__SWIG_1" SMaterial_getTextureMatrix) (:reference "matrix4")
  (self (:pointer "irr::video::SMaterial *"))
  (i :uint))

(cffi:defcfun ("_wrap_SMaterial_setTextureMatrix" SMaterial_setTextureMatrix) :void
  (self (:pointer "irr::video::SMaterial *"))
  (i :uint)
  (mat (:pointer "matrix4")))

(cffi:defcfun ("_wrap_SMaterial_getTexture" SMaterial_getTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::SMaterial *"))
  (i :uint))

(cffi:defcfun ("_wrap_SMaterial_setTexture" SMaterial_setTexture) :void
  (self (:pointer "irr::video::SMaterial *"))
  (i :uint)
  (tex (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_SMaterial_setFlag" SMaterial_setFlag) :void
  (self (:pointer "irr::video::SMaterial *"))
  (flag :enum)
  (value :bool))

(cffi:defcfun ("_wrap_SMaterial_getFlag" SMaterial_getFlag) :bool
  (self (:pointer "irr::video::SMaterial *"))
  (flag :enum))

(cffi:defcfun ("_wrap_SMaterial___ne__" SMaterial___ne__) :bool
  (self (:pointer "irr::video::SMaterial *"))
  (b (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial___eq__" SMaterial___eq__) :bool
  (self (:pointer "irr::video::SMaterial *"))
  (b (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_SMaterial_isTransparent" SMaterial_isTransparent) :bool
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_delete_SMaterial" delete_SMaterial) :void
  (self (:pointer "irr::video::SMaterial *")))

(cffi:defcvar ("IdentityMaterial" IdentityMaterial)
 (:pointer "irr::video::SMaterial"))

(cffi:defcenum E_VERTEX_TYPE
	(:EVT_STANDARD 0)
	:EVT_2TCOORDS
	:EVT_TANGENTS)

(cffi:defcvar ("sBuiltInVertexTypeNames" sBuiltInVertexTypeNames)
 (:pointer "char **"))

(cffi:defcstruct S3DVertex
	(Pos (:pointer "vector3df"))
	(Normal (:pointer "vector3df"))
	(Color (:pointer "irr::video::SColor"))
	(TCoords (:pointer "vector2df"))
	(__eq__ (:pointer "bool (irr::video::S3DVertex const &)"))
	(__ne__ (:pointer "bool (irr::video::S3DVertex const &)"))
	(__lt__ (:pointer "bool (irr::video::S3DVertex const &)"))
	(getType (:pointer "irr::video::E_VERTEX_TYPE ()"))
	(getInterpolated (:pointer "irr::video::S3DVertex (irr::video::S3DVertex const &,irr::f32)")))

(cffi:defcstruct S3DVertex2TCoords
	(TCoords2 (:pointer "vector2df"))
	(__eq__ (:pointer "bool (irr::video::S3DVertex2TCoords const &)"))
	(__ne__ (:pointer "bool (irr::video::S3DVertex2TCoords const &)"))
	(__lt__ (:pointer "bool (irr::video::S3DVertex2TCoords const &)"))
	(getType (:pointer "irr::video::E_VERTEX_TYPE ()"))
	(getInterpolated (:pointer "irr::video::S3DVertex2TCoords (irr::video::S3DVertex2TCoords const &,irr::f32)")))

(cffi:defcstruct S3DVertexTangents
	(Tangent (:pointer "vector3df"))
	(Binormal (:pointer "vector3df"))
	(__eq__ (:pointer "bool (irr::video::S3DVertexTangents const &)"))
	(__ne__ (:pointer "bool (irr::video::S3DVertexTangents const &)"))
	(__lt__ (:pointer "bool (irr::video::S3DVertexTangents const &)"))
	(getType (:pointer "irr::video::E_VERTEX_TYPE ()"))
	(getInterpolated (:pointer "irr::video::S3DVertexTangents (irr::video::S3DVertexTangents const &,irr::f32)")))

(cffi:defcfun ("_wrap_getVertexPitchFromType" getVertexPitchFromType) :uint
  (vertexType :enum))

(cffi:defcenum E_INDEX_TYPE
	(:EIT_16BIT 0)
	:EIT_32BIT)

(cffi:defcenum E_HARDWARE_MAPPING
	(:EHM_NEVER 0)
	:EHM_STATIC
	:EHM_DYNAMIC
	:EHM_STREAM)

(cffi:defcenum E_BUFFER_TYPE
	(:EBT_NONE 0)
	:EBT_VERTEX
	:EBT_INDEX
	:EBT_VERTEX_AND_INDEX)

(cffi:defcenum E_PRIMITIVE_TYPE
	(:EPT_POINTS 0)
	:EPT_LINE_STRIP
	:EPT_LINE_LOOP
	:EPT_LINES
	:EPT_TRIANGLE_STRIP
	:EPT_TRIANGLE_FAN
	:EPT_TRIANGLES
	:EPT_QUAD_STRIP
	:EPT_QUADS
	:EPT_POLYGON
	:EPT_POINT_SPRITES)

(cffi:defcfun ("_wrap_IMeshBuffer_getMaterial__SWIG_0" IMeshBuffer_getMaterial) (:reference "irr::video::SMaterial *")
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getMaterial__SWIG_1" IMeshBuffer_getMaterial) (:reference "irr::video::SMaterial *")
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getVertexType" IMeshBuffer_getVertexType) :enum
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getVertices__SWIG_0" IMeshBuffer_getVertices) (:pointer "void *")
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getVertices__SWIG_1" IMeshBuffer_getVertices) (:pointer "void *")
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getVertexCount" IMeshBuffer_getVertexCount) :uint
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getIndexType" IMeshBuffer_getIndexType) :enum
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getIndices__SWIG_0" IMeshBuffer_getIndices) (:pointer "irr::u16 *")
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getIndices__SWIG_1" IMeshBuffer_getIndices) (:pointer "irr::u16 *")
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getIndexCount" IMeshBuffer_getIndexCount) :uint
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getBoundingBox" IMeshBuffer_getBoundingBox) (:reference "aabbox3df")
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_setBoundingBox" IMeshBuffer_setBoundingBox) :void
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (box (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_IMeshBuffer_recalculateBoundingBox" IMeshBuffer_recalculateBoundingBox) :void
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getPosition__SWIG_0" IMeshBuffer_getPosition) (:reference "vector3df")
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_IMeshBuffer_getPosition__SWIG_1" IMeshBuffer_getPosition) (:reference "vector3df")
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_IMeshBuffer_getNormal__SWIG_0" IMeshBuffer_getNormal) (:reference "vector3df")
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_IMeshBuffer_getNormal__SWIG_1" IMeshBuffer_getNormal) (:reference "vector3df")
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_IMeshBuffer_getTCoords__SWIG_0" IMeshBuffer_getTCoords) (:reference "vector2df")
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_IMeshBuffer_getTCoords__SWIG_1" IMeshBuffer_getTCoords) (:reference "vector2df")
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_IMeshBuffer_append__SWIG_0" IMeshBuffer_append) :void
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (vertices (:pointer "void *"))
  (numVertices :uint)
  (indices (:pointer "irr::u16 *"))
  (numIndices :uint))

(cffi:defcfun ("_wrap_IMeshBuffer_append__SWIG_1" IMeshBuffer_append) :void
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (other (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getHardwareMappingHint_Vertex" IMeshBuffer_getHardwareMappingHint_Vertex) :enum
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getHardwareMappingHint_Index" IMeshBuffer_getHardwareMappingHint_Index) :enum
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_setHardwareMappingHint__SWIG_0" IMeshBuffer_setHardwareMappingHint) :void
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (newMappingHint :enum)
  (buffer :enum))

(cffi:defcfun ("_wrap_IMeshBuffer_setHardwareMappingHint__SWIG_1" IMeshBuffer_setHardwareMappingHint) :void
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (newMappingHint :enum))

(cffi:defcfun ("_wrap_IMeshBuffer_setDirty__SWIG_0" IMeshBuffer_setDirty) :void
  (self (:pointer "irr::scene::IMeshBuffer *"))
  (buffer :enum))

(cffi:defcfun ("_wrap_IMeshBuffer_setDirty__SWIG_1" IMeshBuffer_setDirty) :void
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getChangedID_Vertex" IMeshBuffer_getChangedID_Vertex) :uint
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshBuffer_getChangedID_Index" IMeshBuffer_getChangedID_Index) :uint
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_delete_IMeshBuffer" delete_IMeshBuffer) :void
  (self (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IVertexBuffer_getData" IVertexBuffer_getData) (:pointer "void *")
  (self (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_IVertexBuffer_getType" IVertexBuffer_getType) :enum
  (self (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_IVertexBuffer_setType" IVertexBuffer_setType) :void
  (self (:pointer "irr::scene::IVertexBuffer *"))
  (vertexType :enum))

(cffi:defcfun ("_wrap_IVertexBuffer_stride" IVertexBuffer_stride) :uint
  (self (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_IVertexBuffer_size" IVertexBuffer_size) :uint
  (self (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_IVertexBuffer_push_back" IVertexBuffer_push_back) :void
  (self (:pointer "irr::scene::IVertexBuffer *"))
  (element (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_IVertexBuffer___aref__" IVertexBuffer___aref__) (:reference "irr::video::S3DVertex *")
  (self (:pointer "irr::scene::IVertexBuffer *"))
  (index :uint))

(cffi:defcfun ("_wrap_IVertexBuffer_getLast" IVertexBuffer_getLast) (:reference "irr::video::S3DVertex *")
  (self (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_IVertexBuffer_set_used" IVertexBuffer_set_used) :void
  (self (:pointer "irr::scene::IVertexBuffer *"))
  (usedNow :uint))

(cffi:defcfun ("_wrap_IVertexBuffer_reallocate" IVertexBuffer_reallocate) :void
  (self (:pointer "irr::scene::IVertexBuffer *"))
  (new_size :uint))

(cffi:defcfun ("_wrap_IVertexBuffer_allocated_size" IVertexBuffer_allocated_size) :uint
  (self (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_IVertexBuffer_pointer" IVertexBuffer_pointer) (:pointer "irr::video::S3DVertex *")
  (self (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_IVertexBuffer_getHardwareMappingHint" IVertexBuffer_getHardwareMappingHint) :enum
  (self (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_IVertexBuffer_setHardwareMappingHint" IVertexBuffer_setHardwareMappingHint) :void
  (self (:pointer "irr::scene::IVertexBuffer *"))
  (NewMappingHint :enum))

(cffi:defcfun ("_wrap_IVertexBuffer_setDirty" IVertexBuffer_setDirty) :void
  (self (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_IVertexBuffer_getChangedID" IVertexBuffer_getChangedID) :uint
  (self (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_delete_IVertexBuffer" delete_IVertexBuffer) :void
  (self (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_IIndexBuffer_getData" IIndexBuffer_getData) (:pointer "void *")
  (self (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_IIndexBuffer_getType" IIndexBuffer_getType) :enum
  (self (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_IIndexBuffer_setType" IIndexBuffer_setType) :void
  (self (:pointer "irr::scene::IIndexBuffer *"))
  (IndexType :enum))

(cffi:defcfun ("_wrap_IIndexBuffer_stride" IIndexBuffer_stride) :uint
  (self (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_IIndexBuffer_size" IIndexBuffer_size) :uint
  (self (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_IIndexBuffer_push_back" IIndexBuffer_push_back) :void
  (self (:pointer "irr::scene::IIndexBuffer *"))
  (element :uint-ref))

(cffi:defcfun ("_wrap_IIndexBuffer___aref__" IIndexBuffer___aref__) :uint
  (self (:pointer "irr::scene::IIndexBuffer *"))
  (index :uint))

(cffi:defcfun ("_wrap_IIndexBuffer_getLast" IIndexBuffer_getLast) :uint
  (self (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_IIndexBuffer_setValue" IIndexBuffer_setValue) :void
  (self (:pointer "irr::scene::IIndexBuffer *"))
  (index :uint)
  (value :uint))

(cffi:defcfun ("_wrap_IIndexBuffer_set_used" IIndexBuffer_set_used) :void
  (self (:pointer "irr::scene::IIndexBuffer *"))
  (usedNow :uint))

(cffi:defcfun ("_wrap_IIndexBuffer_reallocate" IIndexBuffer_reallocate) :void
  (self (:pointer "irr::scene::IIndexBuffer *"))
  (new_size :uint))

(cffi:defcfun ("_wrap_IIndexBuffer_allocated_size" IIndexBuffer_allocated_size) :uint
  (self (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_IIndexBuffer_pointer" IIndexBuffer_pointer) (:pointer "void *")
  (self (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_IIndexBuffer_getHardwareMappingHint" IIndexBuffer_getHardwareMappingHint) :enum
  (self (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_IIndexBuffer_setHardwareMappingHint" IIndexBuffer_setHardwareMappingHint) :void
  (self (:pointer "irr::scene::IIndexBuffer *"))
  (NewMappingHint :enum))

(cffi:defcfun ("_wrap_IIndexBuffer_setDirty" IIndexBuffer_setDirty) :void
  (self (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_IIndexBuffer_getChangedID" IIndexBuffer_getChangedID) :uint
  (self (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_delete_IIndexBuffer" delete_IIndexBuffer) :void
  (self (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getVertexBuffer" IDynamicMeshBuffer_getVertexBuffer) (:reference "irr::scene::IVertexBuffer *")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getIndexBuffer" IDynamicMeshBuffer_getIndexBuffer) (:reference "irr::scene::IIndexBuffer *")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_setVertexBuffer" IDynamicMeshBuffer_setVertexBuffer) :void
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (vertexBuffer (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_setIndexBuffer" IDynamicMeshBuffer_setIndexBuffer) :void
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (indexBuffer (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getMaterial__SWIG_0" IDynamicMeshBuffer_getMaterial) (:reference "irr::video::SMaterial *")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getMaterial__SWIG_1" IDynamicMeshBuffer_getMaterial) (:reference "irr::video::SMaterial *")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_append__SWIG_0" IDynamicMeshBuffer_append) :void
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (vertices (:pointer "void *"))
  (numVertices :uint)
  (indices (:pointer "irr::u16 *"))
  (numIndices :uint))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_append__SWIG_1" IDynamicMeshBuffer_append) :void
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (other (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_setHardwareMappingHint__SWIG_0" IDynamicMeshBuffer_setHardwareMappingHint) :void
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (NewMappingHint :enum)
  (Buffer :enum))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_setHardwareMappingHint__SWIG_1" IDynamicMeshBuffer_setHardwareMappingHint) :void
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (NewMappingHint :enum))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_setDirty__SWIG_0" IDynamicMeshBuffer_setDirty) :void
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (Buffer :enum))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_setDirty__SWIG_1" IDynamicMeshBuffer_setDirty) :void
  (self (:pointer "irr::scene::IDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getVertices__SWIG_0" IDynamicMeshBuffer_getVertices) (:pointer "void *")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getVertices__SWIG_1" IDynamicMeshBuffer_getVertices) (:pointer "void *")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getIndices__SWIG_0" IDynamicMeshBuffer_getIndices) (:pointer "irr::u16 *")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getIndices__SWIG_1" IDynamicMeshBuffer_getIndices) (:pointer "irr::u16 *")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getPosition__SWIG_0" IDynamicMeshBuffer_getPosition) (:reference "vector3df")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getPosition__SWIG_1" IDynamicMeshBuffer_getPosition) (:reference "vector3df")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getTCoords__SWIG_0" IDynamicMeshBuffer_getTCoords) (:reference "vector2df")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getTCoords__SWIG_1" IDynamicMeshBuffer_getTCoords) (:reference "vector2df")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getNormal__SWIG_0" IDynamicMeshBuffer_getNormal) (:reference "vector3df")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_IDynamicMeshBuffer_getNormal__SWIG_1" IDynamicMeshBuffer_getNormal) (:reference "vector3df")
  (self (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (i :uint))

(cffi:defcfun ("_wrap_delete_IDynamicMeshBuffer" delete_IDynamicMeshBuffer) :void
  (self (:pointer "irr::scene::IDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_new_CVertexBuffer__SWIG_0" new_CVertexBuffer) (:pointer "irr::scene::CVertexBuffer *")
  (vertexType :enum))

(cffi:defcfun ("_wrap_new_CVertexBuffer__SWIG_1" new_CVertexBuffer) (:pointer "irr::scene::CVertexBuffer *")
  (VertexBufferCopy (:pointer "irr::scene::IVertexBuffer *")))

(cffi:defcfun ("_wrap_delete_CVertexBuffer" delete_CVertexBuffer) :void
  (self (:pointer "irr::scene::CVertexBuffer *")))

(cffi:defcfun ("_wrap_CVertexBuffer_MappingHint_set" CVertexBuffer_MappingHint_set) :void
  (self (:pointer "irr::scene::CVertexBuffer *"))
  (MappingHint :enum))

(cffi:defcfun ("_wrap_CVertexBuffer_MappingHint_get" CVertexBuffer_MappingHint_get) :enum
  (self (:pointer "irr::scene::CVertexBuffer *")))

(cffi:defcfun ("_wrap_CVertexBuffer_ChangedID_set" CVertexBuffer_ChangedID_set) :void
  (self (:pointer "irr::scene::CVertexBuffer *"))
  (ChangedID :uint))

(cffi:defcfun ("_wrap_CVertexBuffer_ChangedID_get" CVertexBuffer_ChangedID_get) :uint
  (self (:pointer "irr::scene::CVertexBuffer *")))

(cffi:defcfun ("_wrap_new_CIndexBuffer__SWIG_0" new_CIndexBuffer) (:pointer "irr::scene::CIndexBuffer *")
  (IndexType :enum))

(cffi:defcfun ("_wrap_new_CIndexBuffer__SWIG_1" new_CIndexBuffer) (:pointer "irr::scene::CIndexBuffer *")
  (IndexBufferCopy (:pointer "irr::scene::IIndexBuffer *")))

(cffi:defcfun ("_wrap_delete_CIndexBuffer" delete_CIndexBuffer) :void
  (self (:pointer "irr::scene::CIndexBuffer *")))

(cffi:defcfun ("_wrap_CIndexBuffer_MappingHint_set" CIndexBuffer_MappingHint_set) :void
  (self (:pointer "irr::scene::CIndexBuffer *"))
  (MappingHint :enum))

(cffi:defcfun ("_wrap_CIndexBuffer_MappingHint_get" CIndexBuffer_MappingHint_get) :enum
  (self (:pointer "irr::scene::CIndexBuffer *")))

(cffi:defcfun ("_wrap_CIndexBuffer_ChangedID_set" CIndexBuffer_ChangedID_set) :void
  (self (:pointer "irr::scene::CIndexBuffer *"))
  (ChangedID :uint))

(cffi:defcfun ("_wrap_CIndexBuffer_ChangedID_get" CIndexBuffer_ChangedID_get) :uint
  (self (:pointer "irr::scene::CIndexBuffer *")))

(cffi:defcfun ("_wrap_new_CDynamicMeshBuffer" new_CDynamicMeshBuffer) (:pointer "irr::scene::CDynamicMeshBuffer *")
  (vertexType :enum)
  (indexType :enum))

(cffi:defcfun ("_wrap_delete_CDynamicMeshBuffer" delete_CDynamicMeshBuffer) :void
  (self (:pointer "irr::scene::CDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_CDynamicMeshBuffer_getMaterial__SWIG_0" CDynamicMeshBuffer_getMaterial) (:reference "irr::video::SMaterial *")
  (self (:pointer "irr::scene::CDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_CDynamicMeshBuffer_getMaterial__SWIG_1" CDynamicMeshBuffer_getMaterial) (:reference "irr::video::SMaterial *")
  (self (:pointer "irr::scene::CDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_CDynamicMeshBuffer_Material_set" CDynamicMeshBuffer_Material_set) :void
  (self (:pointer "irr::scene::CDynamicMeshBuffer *"))
  (Material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_CDynamicMeshBuffer_Material_get" CDynamicMeshBuffer_Material_get) (:pointer "irr::video::SMaterial *")
  (self (:pointer "irr::scene::CDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_CDynamicMeshBuffer_BoundingBox_set" CDynamicMeshBuffer_BoundingBox_set) :void
  (self (:pointer "irr::scene::CDynamicMeshBuffer *"))
  (BoundingBox (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_CDynamicMeshBuffer_BoundingBox_get" CDynamicMeshBuffer_BoundingBox_get) (:pointer "aabbox3df")
  (self (:pointer "irr::scene::CDynamicMeshBuffer *")))

(cffi:defcstruct SNamedPath
	(__lt__ (:pointer "bool (irr::io::SNamedPath const &)"))
	(setPath (:pointer "void (irr::io::path const &)"))
	(getPath (:pointer "irr::io::path &()"))
	(getInternalName (:pointer "irr::io::path &()"))
	(operator core::stringc (:pointer "irr::core::stringc ()"))
	(operator core::stringw (:pointer "irr::core::stringw ()"))
	(PathToName (:pointer "irr::io::path (irr::io::path const &)"))
	( (:pointer "path"))
	( (:pointer "path")))

(cffi:defcfun ("_wrap_isFileExtension" isFileExtension) :int
  (filename (:pointer "path"))
  (ext0 (:pointer "path"))
  (ext1 (:pointer "path"))
  (ext2 (:pointer "path")))

(cffi:defcfun ("_wrap_hasFileExtension__SWIG_0" hasFileExtension) :bool
  (filename (:pointer "path"))
  (ext0 (:pointer "path"))
  (ext1 (:pointer "path"))
  (ext2 (:pointer "path")))

(cffi:defcfun ("_wrap_hasFileExtension__SWIG_1" hasFileExtension) :bool
  (filename (:pointer "path"))
  (ext0 (:pointer "path"))
  (ext1 (:pointer "path")))

(cffi:defcfun ("_wrap_hasFileExtension__SWIG_2" hasFileExtension) :bool
  (filename (:pointer "path"))
  (ext0 (:pointer "path")))

(cffi:defcfun ("_wrap_cutFilenameExtension" cutFilenameExtension) (:reference "path")
  (dest (:pointer "path"))
  (source (:pointer "path")))

(cffi:defcfun ("_wrap_getFileNameExtension" getFileNameExtension) (:reference "path")
  (dest (:pointer "path"))
  (source (:pointer "path")))

(cffi:defcfun ("_wrap_deletePathFromFilename" deletePathFromFilename) (:reference "path")
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_deletePathFromPath" deletePathFromPath) (:reference "path")
  (filename (:pointer "path"))
  (pathCount :int))

(cffi:defcfun ("_wrap_isInSameDirectory" isInSameDirectory) :int
  (path (:pointer "path"))
  (file (:pointer "path")))

(cffi:defcfun ("_wrap_splitFilename__SWIG_0" splitFilename) :void
  (name (:pointer "path"))
  (path (:pointer "path"))
  (filename (:pointer "path"))
  (extension (:pointer "path"))
  (make_lower :bool))

(cffi:defcfun ("_wrap_splitFilename__SWIG_1" splitFilename) :void
  (name (:pointer "path"))
  (path (:pointer "path"))
  (filename (:pointer "path"))
  (extension (:pointer "path")))

(cffi:defcfun ("_wrap_splitFilename__SWIG_2" splitFilename) :void
  (name (:pointer "path"))
  (path (:pointer "path"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_splitFilename__SWIG_3" splitFilename) :void
  (name (:pointer "path"))
  (path (:pointer "path")))

(cffi:defcfun ("_wrap_splitFilename__SWIG_4" splitFilename) :void
  (name (:pointer "path")))

(cffi:defcfun ("_wrap_isdigit" isdigit) :int
  (c :int))

(cffi:defcfun ("_wrap_isspace" isspace) :int
  (c :int))

(cffi:defcfun ("_wrap_isupper" isupper) :int
  (c :int))

(cffi:defcenum E_CULLING_TYPE
	(:EAC_OFF 0)
	(:EAC_BOX 1)
	(:EAC_FRUSTUM_BOX 2)
	(:EAC_FRUSTUM_SPHERE 4)
	(:EAC_OCC_QUERY 8))

(cffi:defcvar ("AutomaticCullingNames" AutomaticCullingNames)
 (:pointer "irr::c8 **"))

(cffi:defcenum E_DEBUG_SCENE_TYPE
	(:EDS_OFF 0)
	(:EDS_BBOX 1)
	(:EDS_NORMALS 2)
	(:EDS_SKELETON 4)
	(:EDS_MESH_WIRE_OVERLAY 8)
	(:EDS_HALF_TRANSPARENCY 16)
	(:EDS_BBOX_BUFFERS 32)
	(:EDS_BBOX_ALL (cl:logior EDS_BBOX EDS_BBOX_BUFFERS))
	(:EDS_FULL #xffffffff))

(cffi:defcenum E_VIDEO_DRIVER_FEATURE
	(:EVDF_RENDER_TO_TARGET 0)
	:EVDF_HARDWARE_TL
	:EVDF_MULTITEXTURE
	:EVDF_BILINEAR_FILTER
	:EVDF_MIP_MAP
	:EVDF_MIP_MAP_AUTO_UPDATE
	:EVDF_STENCIL_BUFFER
	:EVDF_VERTEX_SHADER_1_1
	:EVDF_VERTEX_SHADER_2_0
	:EVDF_VERTEX_SHADER_3_0
	:EVDF_PIXEL_SHADER_1_1
	:EVDF_PIXEL_SHADER_1_2
	:EVDF_PIXEL_SHADER_1_3
	:EVDF_PIXEL_SHADER_1_4
	:EVDF_PIXEL_SHADER_2_0
	:EVDF_PIXEL_SHADER_3_0
	:EVDF_ARB_VERTEX_PROGRAM_1
	:EVDF_ARB_FRAGMENT_PROGRAM_1
	:EVDF_ARB_GLSL
	:EVDF_HLSL
	:EVDF_TEXTURE_NSQUARE
	:EVDF_TEXTURE_NPOT
	:EVDF_FRAMEBUFFER_OBJECT
	:EVDF_VERTEX_BUFFER_OBJECT
	:EVDF_ALPHA_TO_COVERAGE
	:EVDF_COLOR_MASK
	:EVDF_MULTIPLE_RENDER_TARGETS
	:EVDF_MRT_BLEND
	:EVDF_MRT_COLOR_MASK
	:EVDF_MRT_BLEND_FUNC
	:EVDF_GEOMETRY_SHADER
	:EVDF_OCCLUSION_QUERY
	:EVDF_POLYGON_OFFSET
	:EVDF_BLEND_OPERATIONS
	:EVDF_TEXTURE_MATRIX
	:EVDF_CG
	:EVDF_COUNT)

(cffi:defcenum E_DRIVER_TYPE
	:EDT_NULL
	:EDT_SOFTWARE
	:EDT_BURNINGSVIDEO
	:EDT_DIRECT3D8
	:EDT_DIRECT3D9
	:EDT_OPENGL
	:EDT_COUNT)

(cffi:defcenum EGUI_ALIGNMENT
	(:EGUIA_UPPERLEFT 0)
	:EGUIA_LOWERRIGHT
	:EGUIA_CENTER
	:EGUIA_SCALE)

(cffi:defcvar ("GUIAlignmentNames" GUIAlignmentNames)
 (:pointer "irr::c8 **"))

(cffi:defcenum EGUI_ELEMENT_TYPE
	(:EGUIET_BUTTON 0)
	:EGUIET_CHECK_BOX
	:EGUIET_COMBO_BOX
	:EGUIET_CONTEXT_MENU
	:EGUIET_MENU
	:EGUIET_EDIT_BOX
	:EGUIET_FILE_OPEN_DIALOG
	:EGUIET_COLOR_SELECT_DIALOG
	:EGUIET_IN_OUT_FADER
	:EGUIET_IMAGE
	:EGUIET_LIST_BOX
	:EGUIET_MESH_VIEWER
	:EGUIET_MESSAGE_BOX
	:EGUIET_MODAL_SCREEN
	:EGUIET_SCROLL_BAR
	:EGUIET_SPIN_BOX
	:EGUIET_STATIC_TEXT
	:EGUIET_TAB
	:EGUIET_TAB_CONTROL
	:EGUIET_TABLE
	:EGUIET_TOOL_BAR
	:EGUIET_TREE_VIEW
	:EGUIET_WINDOW
	:EGUIET_ELEMENT
	:EGUIET_ROOT
	:EGUIET_COUNT
	(:EGUIET_FORCE_32_BIT #x7fffffff))

(cffi:defcvar ("GUIElementTypeNames" GUIElementTypeNames)
 (:pointer "irr::c8 **"))

(cffi:defcenum EMESH_WRITER_TYPE
	(:EMWT_IRR_MESH (cl:logior irr::u32) (irr::u8) (i (irr::u32) (irr::u8) (r) << 8 (irr::u32) (irr::u8) (r) << 16 (irr::u32) (irr::u8) (m) << 24))
	(:EMWT_COLLADA (cl:logior irr::u32) (irr::u8) (c (irr::u32) (irr::u8) (o) << 8 (irr::u32) (irr::u8) (l) << 16 (irr::u32) (irr::u8) (l) << 24))
	(:EMWT_STL (cl:logior irr::u32) (irr::u8) (s (irr::u32) (irr::u8) (t) << 8 (irr::u32) (irr::u8) (l) << 16 (irr::u32) (irr::u8) (0) << 24))
	(:EMWT_OBJ (cl:logior irr::u32) (irr::u8) (o (irr::u32) (irr::u8) (b) << 8 (irr::u32) (irr::u8) (j) << 16 (irr::u32) (irr::u8) (0) << 24))
	(:EMWT_PLY (cl:logior irr::u32) (irr::u8) (p (irr::u32) (irr::u8) (l) << 8 (irr::u32) (irr::u8) (y) << 16 (irr::u32) (irr::u8) (0) << 24)))

(cffi:defcenum E_MESH_WRITER_FLAGS
	(:EMWF_NONE 0)
	(:EMWF_WRITE_LIGHTMAPS #x1)
	(:EMWF_WRITE_COMPRESSED #x2)
	(:EMWF_WRITE_BINARY #x4))

(cffi:defcenum EMESSAGE_BOX_FLAG
	(:EMBF_OK #x1)
	(:EMBF_CANCEL #x2)
	(:EMBF_YES #x4)
	(:EMBF_NO #x8)
	(:EMBF_FORCE_32BIT #x7fffffff))

(cffi:defcenum ESCENE_NODE_ANIMATOR_TYPE
	(:ESNAT_FLY_CIRCLE 0)
	:ESNAT_FLY_STRAIGHT
	:ESNAT_FOLLOW_SPLINE
	:ESNAT_ROTATION
	:ESNAT_TEXTURE
	:ESNAT_DELETION
	:ESNAT_COLLISION_RESPONSE
	:ESNAT_CAMERA_FPS
	:ESNAT_CAMERA_MAYA
	:ESNAT_COUNT
	:ESNAT_UNKNOWN
	(:ESNAT_FORCE_32_BIT #x7fffffff))

(cffi:defcenum ESCENE_NODE_TYPE
	(:ESNT_SCENE_MANAGER (cl:logior irr::u32) (irr::u8) (s (irr::u32) (irr::u8) (m) << 8 (irr::u32) (irr::u8) (n) << 16 (irr::u32) (irr::u8) (g) << 24))
	(:ESNT_CUBE (cl:logior irr::u32) (irr::u8) (c (irr::u32) (irr::u8) (u) << 8 (irr::u32) (irr::u8) (b) << 16 (irr::u32) (irr::u8) (e) << 24))
	(:ESNT_SPHERE (cl:logior irr::u32) (irr::u8) (s (irr::u32) (irr::u8) (p) << 8 (irr::u32) (irr::u8) (h) << 16 (irr::u32) (irr::u8) (r) << 24))
	(:ESNT_TEXT (cl:logior irr::u32) (irr::u8) (t (irr::u32) (irr::u8) (e) << 8 (irr::u32) (irr::u8) (x) << 16 (irr::u32) (irr::u8) (t) << 24))
	(:ESNT_WATER_SURFACE (cl:logior irr::u32) (irr::u8) (w (irr::u32) (irr::u8) (a) << 8 (irr::u32) (irr::u8) (t) << 16 (irr::u32) (irr::u8) (r) << 24))
	(:ESNT_TERRAIN (cl:logior irr::u32) (irr::u8) (t (irr::u32) (irr::u8) (e) << 8 (irr::u32) (irr::u8) (r) << 16 (irr::u32) (irr::u8) (r) << 24))
	(:ESNT_SKY_BOX (cl:logior irr::u32) (irr::u8) (s (irr::u32) (irr::u8) (k) << 8 (irr::u32) (irr::u8) (y) << 16 (irr::u32) (irr::u8) (_) << 24))
	(:ESNT_SKY_DOME (cl:logior irr::u32) (irr::u8) (s (irr::u32) (irr::u8) (k) << 8 (irr::u32) (irr::u8) (y) << 16 (irr::u32) (irr::u8) (d) << 24))
	(:ESNT_SHADOW_VOLUME (cl:logior irr::u32) (irr::u8) (s (irr::u32) (irr::u8) (h) << 8 (irr::u32) (irr::u8) (d) << 16 (irr::u32) (irr::u8) (w) << 24))
	(:ESNT_OCTREE (cl:logior irr::u32) (irr::u8) (o (irr::u32) (irr::u8) (c) << 8 (irr::u32) (irr::u8) (t) << 16 (irr::u32) (irr::u8) (r) << 24))
	(:ESNT_MESH (cl:logior irr::u32) (irr::u8) (m (irr::u32) (irr::u8) (e) << 8 (irr::u32) (irr::u8) (s) << 16 (irr::u32) (irr::u8) (h) << 24))
	(:ESNT_LIGHT (cl:logior irr::u32) (irr::u8) (l (irr::u32) (irr::u8) (g) << 8 (irr::u32) (irr::u8) (h) << 16 (irr::u32) (irr::u8) (t) << 24))
	(:ESNT_EMPTY (cl:logior irr::u32) (irr::u8) (e (irr::u32) (irr::u8) (m) << 8 (irr::u32) (irr::u8) (t) << 16 (irr::u32) (irr::u8) (y) << 24))
	(:ESNT_DUMMY_TRANSFORMATION (cl:logior irr::u32) (irr::u8) (d (irr::u32) (irr::u8) (m) << 8 (irr::u32) (irr::u8) (m) << 16 (irr::u32) (irr::u8) (y) << 24))
	(:ESNT_CAMERA (cl:logior irr::u32) (irr::u8) (c (irr::u32) (irr::u8) (a) << 8 (irr::u32) (irr::u8) (m) << 16 (irr::u32) (irr::u8) (_) << 24))
	(:ESNT_BILLBOARD (cl:logior irr::u32) (irr::u8) (b (irr::u32) (irr::u8) (i) << 8 (irr::u32) (irr::u8) (l) << 16 (irr::u32) (irr::u8) (l) << 24))
	(:ESNT_ANIMATED_MESH (cl:logior irr::u32) (irr::u8) (a (irr::u32) (irr::u8) (m) << 8 (irr::u32) (irr::u8) (s) << 16 (irr::u32) (irr::u8) (h) << 24))
	(:ESNT_PARTICLE_SYSTEM (cl:logior irr::u32) (irr::u8) (p (irr::u32) (irr::u8) (t) << 8 (irr::u32) (irr::u8) (c) << 16 (irr::u32) (irr::u8) (l) << 24))
	(:ESNT_Q3SHADER_SCENE_NODE (cl:logior irr::u32) (irr::u8) (q (irr::u32) (irr::u8) (3) << 8 (irr::u32) (irr::u8) (s) << 16 (irr::u32) (irr::u8) (h) << 24))
	(:ESNT_MD3_SCENE_NODE (cl:logior irr::u32) (irr::u8) (m (irr::u32) (irr::u8) (d) << 8 (irr::u32) (irr::u8) (3) << 16 (irr::u32) (irr::u8) (_) << 24))
	(:ESNT_VOLUME_LIGHT (cl:logior irr::u32) (irr::u8) (v (irr::u32) (irr::u8) (o) << 8 (irr::u32) (irr::u8) (l) << 16 (irr::u32) (irr::u8) (l) << 24))
	(:ESNT_CAMERA_MAYA (cl:logior irr::u32) (irr::u8) (c (irr::u32) (irr::u8) (a) << 8 (irr::u32) (irr::u8) (m) << 16 (irr::u32) (irr::u8) (M) << 24))
	(:ESNT_CAMERA_FPS (cl:logior irr::u32) (irr::u8) (c (irr::u32) (irr::u8) (a) << 8 (irr::u32) (irr::u8) (m) << 16 (irr::u32) (irr::u8) (F) << 24))
	(:ESNT_UNKNOWN (cl:logior irr::u32) (irr::u8) (u (irr::u32) (irr::u8) (n) << 8 (irr::u32) (irr::u8) (k) << 16 (irr::u32) (irr::u8) (n) << 24))
	(:ESNT_ANY (cl:logior irr::u32) (irr::u8) (a (irr::u32) (irr::u8) (n) << 8 (irr::u32) (irr::u8) (y) << 16 (irr::u32) (irr::u8) (_) << 24)))

(cffi:defcenum E_TERRAIN_PATCH_SIZE
	(:ETPS_9 9)
	(:ETPS_17 17)
	(:ETPS_33 33)
	(:ETPS_65 65)
	(:ETPS_129 129))

(cffi:defcvar ("LOCALE_DECIMAL_POINTS" LOCALE_DECIMAL_POINTS)
 (:by-value :irrstring))

(cffi:defcvar ("fast_atof_table" fast_atof_table)
 (:pointer "float *"))

(cffi:defcfun ("_wrap_strtoul10__SWIG_0" strtoul10) :uint
  (in :string)
  (out (:pointer "char **")))

(cffi:defcfun ("_wrap_strtoul10__SWIG_1" strtoul10) :uint
  (in :string))

(cffi:defcfun ("_wrap_strtol10__SWIG_0" strtol10) :int
  (in :string)
  (out (:pointer "char **")))

(cffi:defcfun ("_wrap_strtol10__SWIG_1" strtol10) :int
  (in :string))

(cffi:defcfun ("_wrap_ctoul16" ctoul16) :uint
  (in :char))

(cffi:defcfun ("_wrap_strtoul16__SWIG_0" strtoul16) :uint
  (in :string)
  (out (:pointer "char **")))

(cffi:defcfun ("_wrap_strtoul16__SWIG_1" strtoul16) :uint
  (in :string))

(cffi:defcfun ("_wrap_strtoul8__SWIG_0" strtoul8) :uint
  (in :string)
  (out (:pointer "char **")))

(cffi:defcfun ("_wrap_strtoul8__SWIG_1" strtoul8) :uint
  (in :string))

(cffi:defcfun ("_wrap_strtoul_prefix__SWIG_0" strtoul_prefix) :uint
  (in :string)
  (out (:pointer "char **")))

(cffi:defcfun ("_wrap_strtoul_prefix__SWIG_1" strtoul_prefix) :uint
  (in :string))

(cffi:defcfun ("_wrap_strtof10__SWIG_0" strtof10) :float
  (in :string)
  (out (:pointer "char **")))

(cffi:defcfun ("_wrap_strtof10__SWIG_1" strtof10) :float
  (in :string))

(cffi:defcfun ("_wrap_fast_atof_move" fast_atof_move) :string
  (in :string)
  (result (:pointer "irr::f32 *")))

(cffi:defcfun ("_wrap_fast_atof__SWIG_0" fast_atof) :float
  (floatAsString :string)
  (out (:pointer "char **")))

(cffi:defcfun ("_wrap_fast_atof__SWIG_1" fast_atof) :float
  (floatAsString :string))

(cffi:defcfun ("_wrap_IMesh_getMeshBufferCount" IMesh_getMeshBufferCount) :uint
  (self (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMesh_getMeshBuffer__SWIG_0" IMesh_getMeshBuffer) (:pointer "irr::scene::IMeshBuffer *")
  (self (:pointer "irr::scene::IMesh *"))
  (nr :uint))

(cffi:defcfun ("_wrap_IMesh_getMeshBuffer__SWIG_1" IMesh_getMeshBuffer) (:pointer "irr::scene::IMeshBuffer *")
  (self (:pointer "irr::scene::IMesh *"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_IMesh_getBoundingBox" IMesh_getBoundingBox) (:reference "aabbox3df")
  (self (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMesh_setBoundingBox" IMesh_setBoundingBox) :void
  (self (:pointer "irr::scene::IMesh *"))
  (box (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_IMesh_setMaterialFlag" IMesh_setMaterialFlag) :void
  (self (:pointer "irr::scene::IMesh *"))
  (flag :enum)
  (newvalue :bool))

(cffi:defcfun ("_wrap_IMesh_setHardwareMappingHint__SWIG_0" IMesh_setHardwareMappingHint) :void
  (self (:pointer "irr::scene::IMesh *"))
  (newMappingHint :enum)
  (buffer :enum))

(cffi:defcfun ("_wrap_IMesh_setHardwareMappingHint__SWIG_1" IMesh_setHardwareMappingHint) :void
  (self (:pointer "irr::scene::IMesh *"))
  (newMappingHint :enum))

(cffi:defcfun ("_wrap_IMesh_setDirty__SWIG_0" IMesh_setDirty) :void
  (self (:pointer "irr::scene::IMesh *"))
  (buffer :enum))

(cffi:defcfun ("_wrap_IMesh_setDirty__SWIG_1" IMesh_setDirty) :void
  (self (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_delete_IMesh" delete_IMesh) :void
  (self (:pointer "irr::scene::IMesh *")))

(cffi:defcenum E_ANIMATED_MESH_TYPE
	(:EAMT_UNKNOWN 0)
	:EAMT_MD2
	:EAMT_MD3
	:EAMT_OBJ
	:EAMT_BSP
	:EAMT_3DS
	:EAMT_MY3D
	:EAMT_LMTS
	:EAMT_CSM
	:EAMT_OCT
	:EAMT_MDL_HALFLIFE
	:EAMT_SKINNED)

(cffi:defcfun ("_wrap_IAnimatedMesh_getFrameCount" IAnimatedMesh_getFrameCount) :uint
  (self (:pointer "irr::scene::IAnimatedMesh *")))

(cffi:defcfun ("_wrap_IAnimatedMesh_getAnimationSpeed" IAnimatedMesh_getAnimationSpeed) :float
  (self (:pointer "irr::scene::IAnimatedMesh *")))

(cffi:defcfun ("_wrap_IAnimatedMesh_setAnimationSpeed" IAnimatedMesh_setAnimationSpeed) :void
  (self (:pointer "irr::scene::IAnimatedMesh *"))
  (fps :float))

(cffi:defcfun ("_wrap_IAnimatedMesh_getMesh__SWIG_0" IAnimatedMesh_getMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IAnimatedMesh *"))
  (frame :int)
  (detailLevel :int)
  (startFrameLoop :int)
  (endFrameLoop :int))

(cffi:defcfun ("_wrap_IAnimatedMesh_getMesh__SWIG_1" IAnimatedMesh_getMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IAnimatedMesh *"))
  (frame :int)
  (detailLevel :int)
  (startFrameLoop :int))

(cffi:defcfun ("_wrap_IAnimatedMesh_getMesh__SWIG_2" IAnimatedMesh_getMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IAnimatedMesh *"))
  (frame :int)
  (detailLevel :int))

(cffi:defcfun ("_wrap_IAnimatedMesh_getMesh__SWIG_3" IAnimatedMesh_getMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IAnimatedMesh *"))
  (frame :int))

(cffi:defcfun ("_wrap_IAnimatedMesh_getMeshType" IAnimatedMesh_getMeshType) :enum
  (self (:pointer "irr::scene::IAnimatedMesh *")))

(cffi:defcfun ("_wrap_delete_IAnimatedMesh" delete_IAnimatedMesh) :void
  (self (:pointer "irr::scene::IAnimatedMesh *")))

(cffi:defcenum EMD2_ANIMATION_TYPE
	(:EMAT_STAND 0)
	:EMAT_RUN
	:EMAT_ATTACK
	:EMAT_PAIN_A
	:EMAT_PAIN_B
	:EMAT_PAIN_C
	:EMAT_JUMP
	:EMAT_FLIP
	:EMAT_SALUTE
	:EMAT_FALLBACK
	:EMAT_WAVE
	:EMAT_POINT
	:EMAT_CROUCH_STAND
	:EMAT_CROUCH_WALK
	:EMAT_CROUCH_ATTACK
	:EMAT_CROUCH_PAIN
	:EMAT_CROUCH_DEATH
	:EMAT_DEATH_FALLBACK
	:EMAT_DEATH_FALLFORWARD
	:EMAT_DEATH_FALLBACKSLOW
	:EMAT_BOOM
	:EMAT_COUNT)

(cffi:defcfun ("_wrap_IAnimatedMeshMD2_getFrameLoop__SWIG_0" IAnimatedMeshMD2_getFrameLoop) :void
  (self (:pointer "irr::scene::IAnimatedMeshMD2 *"))
  (l :enum)
  (outBegin (:pointer "irr::s32 *"))
  (outEnd (:pointer "irr::s32 *"))
  (outFPS (:pointer "irr::s32 *")))

(cffi:defcfun ("_wrap_IAnimatedMeshMD2_getFrameLoop__SWIG_1" IAnimatedMeshMD2_getFrameLoop) :bool
  (self (:pointer "irr::scene::IAnimatedMeshMD2 *"))
  (name :string)
  (outBegin (:pointer "irr::s32 *"))
  (outEnd (:pointer "irr::s32 *"))
  (outFPS (:pointer "irr::s32 *")))

(cffi:defcfun ("_wrap_IAnimatedMeshMD2_getAnimationCount" IAnimatedMeshMD2_getAnimationCount) :int
  (self (:pointer "irr::scene::IAnimatedMeshMD2 *")))

(cffi:defcfun ("_wrap_IAnimatedMeshMD2_getAnimationName" IAnimatedMeshMD2_getAnimationName) :string
  (self (:pointer "irr::scene::IAnimatedMeshMD2 *"))
  (nr :int))

(cffi:defcfun ("_wrap_delete_IAnimatedMeshMD2" delete_IAnimatedMeshMD2) :void
  (self (:pointer "irr::scene::IAnimatedMeshMD2 *")))

(cffi:defcenum ETEXT_FORMAT
	:ETF_ASCII
	:ETF_UTF8
	:ETF_UTF16_BE
	:ETF_UTF16_LE
	:ETF_UTF32_BE
	:ETF_UTF32_LE)

(cffi:defcenum EXML_NODE
	:EXN_NONE
	:EXN_ELEMENT
	:EXN_ELEMENT_END
	:EXN_TEXT
	:EXN_COMMENT
	:EXN_CDATA
	:EXN_UNKNOWN)

(cffi:defcfun ("_wrap_delete_IFileReadCallBack" delete_IFileReadCallBack) :void
  (self (:pointer "irr::io::IFileReadCallBack *")))

(cffi:defcfun ("_wrap_IFileReadCallBack_read" IFileReadCallBack_read) :int
  (self (:pointer "irr::io::IFileReadCallBack *"))
  (buffer (:pointer "void *"))
  (sizeToRead :int))

(cffi:defcfun ("_wrap_IFileReadCallBack_getSize" IFileReadCallBack_getSize) :long
  (self (:pointer "irr::io::IFileReadCallBack *")))

(cffi:defcfun ("_wrap_new_IXMLBase" new_IXMLBase) (:pointer "irr::io::IXMLBase *"))

(cffi:defcfun ("_wrap_delete_IXMLBase" delete_IXMLBase) :void
  (self (:pointer "irr::io::IXMLBase *")))

(cffi:defcfun ("_wrap_IReadFile_read" IReadFile_read) :int
  (self (:pointer "irr::io::IReadFile *"))
  (buffer (:pointer "void *"))
  (sizeToRead :uint))

(cffi:defcfun ("_wrap_IReadFile_seek__SWIG_0" IReadFile_seek) :bool
  (self (:pointer "irr::io::IReadFile *"))
  (finalPos :long)
  (relativeMovement :bool))

(cffi:defcfun ("_wrap_IReadFile_seek__SWIG_1" IReadFile_seek) :bool
  (self (:pointer "irr::io::IReadFile *"))
  (finalPos :long))

(cffi:defcfun ("_wrap_IReadFile_getSize" IReadFile_getSize) :long
  (self (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IReadFile_getPos" IReadFile_getPos) :long
  (self (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IReadFile_getFileName" IReadFile_getFileName) (:reference "path")
  (self (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_delete_IReadFile" delete_IReadFile) :void
  (self (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IFileList_getFileCount" IFileList_getFileCount) :uint
  (self (:pointer "irr::io::IFileList *")))

(cffi:defcfun ("_wrap_IFileList_getFileName" IFileList_getFileName) (:reference "path")
  (self (:pointer "irr::io::IFileList *"))
  (index :uint))

(cffi:defcfun ("_wrap_IFileList_getFullFileName" IFileList_getFullFileName) (:reference "path")
  (self (:pointer "irr::io::IFileList *"))
  (index :uint))

(cffi:defcfun ("_wrap_IFileList_getFileSize" IFileList_getFileSize) :uint
  (self (:pointer "irr::io::IFileList *"))
  (index :uint))

(cffi:defcfun ("_wrap_IFileList_getFileOffset" IFileList_getFileOffset) :uint
  (self (:pointer "irr::io::IFileList *"))
  (index :uint))

(cffi:defcfun ("_wrap_IFileList_getID" IFileList_getID) :uint
  (self (:pointer "irr::io::IFileList *"))
  (index :uint))

(cffi:defcfun ("_wrap_IFileList_isDirectory" IFileList_isDirectory) :bool
  (self (:pointer "irr::io::IFileList *"))
  (index :uint))

(cffi:defcfun ("_wrap_IFileList_findFile__SWIG_0" IFileList_findFile) :int
  (self (:pointer "irr::io::IFileList *"))
  (filename (:pointer "path"))
  (isFolder :bool))

(cffi:defcfun ("_wrap_IFileList_findFile__SWIG_1" IFileList_findFile) :int
  (self (:pointer "irr::io::IFileList *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileList_getPath" IFileList_getPath) (:reference "path")
  (self (:pointer "irr::io::IFileList *")))

(cffi:defcfun ("_wrap_IFileList_addItem__SWIG_0" IFileList_addItem) :uint
  (self (:pointer "irr::io::IFileList *"))
  (fullPath (:pointer "path"))
  (offset :uint)
  (size :uint)
  (isDirectory :bool)
  (id :uint))

(cffi:defcfun ("_wrap_IFileList_addItem__SWIG_1" IFileList_addItem) :uint
  (self (:pointer "irr::io::IFileList *"))
  (fullPath (:pointer "path"))
  (offset :uint)
  (size :uint)
  (isDirectory :bool))

(cffi:defcfun ("_wrap_IFileList_sort" IFileList_sort) :void
  (self (:pointer "irr::io::IFileList *")))

(cffi:defcfun ("_wrap_delete_IFileList" delete_IFileList) :void
  (self (:pointer "irr::io::IFileList *")))

(cffi:defcenum EFileSystemType
	(:FILESYSTEM_NATIVE 0)
	:FILESYSTEM_VIRTUAL)

(cffi:defcenum E_FILE_ARCHIVE_TYPE
	(:EFAT_ZIP (cl:logior irr::u32) (irr::u8) (Z (irr::u32) (irr::u8) (I) << 8 (irr::u32) (irr::u8) (P) << 16 (irr::u32) (irr::u8) (0) << 24))
	(:EFAT_GZIP (cl:logior irr::u32) (irr::u8) (g (irr::u32) (irr::u8) (z) << 8 (irr::u32) (irr::u8) (i) << 16 (irr::u32) (irr::u8) (p) << 24))
	(:EFAT_FOLDER (cl:logior irr::u32) (irr::u8) (f (irr::u32) (irr::u8) (l) << 8 (irr::u32) (irr::u8) (d) << 16 (irr::u32) (irr::u8) (r) << 24))
	(:EFAT_PAK (cl:logior irr::u32) (irr::u8) (P (irr::u32) (irr::u8) (A) << 8 (irr::u32) (irr::u8) (K) << 16 (irr::u32) (irr::u8) (0) << 24))
	(:EFAT_NPK (cl:logior irr::u32) (irr::u8) (N (irr::u32) (irr::u8) (P) << 8 (irr::u32) (irr::u8) (K) << 16 (irr::u32) (irr::u8) (0) << 24))
	(:EFAT_TAR (cl:logior irr::u32) (irr::u8) (T (irr::u32) (irr::u8) (A) << 8 (irr::u32) (irr::u8) (R) << 16 (irr::u32) (irr::u8) (0) << 24))
	(:EFAT_WAD (cl:logior irr::u32) (irr::u8) (W (irr::u32) (irr::u8) (A) << 8 (irr::u32) (irr::u8) (D) << 16 (irr::u32) (irr::u8) (0) << 24))
	(:EFAT_UNKNOWN (cl:logior irr::u32) (irr::u8) (u (irr::u32) (irr::u8) (n) << 8 (irr::u32) (irr::u8) (k) << 16 (irr::u32) (irr::u8) (n) << 24)))

(cffi:defcfun ("_wrap_IFileArchive_createAndOpenFile__SWIG_0" IFileArchive_createAndOpenFile) (:pointer "irr::io::IReadFile *")
  (self (:pointer "irr::io::IFileArchive *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileArchive_createAndOpenFile__SWIG_1" IFileArchive_createAndOpenFile) (:pointer "irr::io::IReadFile *")
  (self (:pointer "irr::io::IFileArchive *"))
  (index :uint))

(cffi:defcfun ("_wrap_IFileArchive_getFileList" IFileArchive_getFileList) (:pointer "irr::io::IFileList *")
  (self (:pointer "irr::io::IFileArchive *")))

(cffi:defcfun ("_wrap_IFileArchive_getType" IFileArchive_getType) :enum
  (self (:pointer "irr::io::IFileArchive *")))

(cffi:defcfun ("_wrap_IFileArchive_Password_set" IFileArchive_Password_set) :void
  (self (:pointer "irr::io::IFileArchive *"))
  (Password (:pointer :irrstring)))

(cffi:defcfun ("_wrap_IFileArchive_Password_get" IFileArchive_Password_get) (:pointer :irrstring)
  (self (:pointer "irr::io::IFileArchive *")))

(cffi:defcfun ("_wrap_delete_IFileArchive" delete_IFileArchive) :void
  (self (:pointer "irr::io::IFileArchive *")))

(cffi:defcfun ("_wrap_IArchiveLoader_isALoadableFileFormat__SWIG_0" IArchiveLoader_isALoadableFileFormat) :bool
  (self (:pointer "irr::io::IArchiveLoader *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IArchiveLoader_isALoadableFileFormat__SWIG_1" IArchiveLoader_isALoadableFileFormat) :bool
  (self (:pointer "irr::io::IArchiveLoader *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IArchiveLoader_isALoadableFileFormat__SWIG_2" IArchiveLoader_isALoadableFileFormat) :bool
  (self (:pointer "irr::io::IArchiveLoader *"))
  (fileType :enum))

(cffi:defcfun ("_wrap_IArchiveLoader_createArchive__SWIG_0" IArchiveLoader_createArchive) (:pointer "irr::io::IFileArchive *")
  (self (:pointer "irr::io::IArchiveLoader *"))
  (filename (:pointer "path"))
  (ignoreCase :bool)
  (ignorePaths :bool))

(cffi:defcfun ("_wrap_IArchiveLoader_createArchive__SWIG_1" IArchiveLoader_createArchive) (:pointer "irr::io::IFileArchive *")
  (self (:pointer "irr::io::IArchiveLoader *"))
  (file (:pointer "irr::io::IReadFile *"))
  (ignoreCase :bool)
  (ignorePaths :bool))

(cffi:defcfun ("_wrap_delete_IArchiveLoader" delete_IArchiveLoader) :void
  (self (:pointer "irr::io::IArchiveLoader *")))

(cffi:defcfun ("_wrap_IFileSystem_createAndOpenFile" IFileSystem_createAndOpenFile) (:pointer "irr::io::IReadFile *")
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_createMemoryWriteFile__SWIG_0" IFileSystem_createMemoryWriteFile) (:pointer "irr::io::IWriteFile *")
  (self (:pointer "irr::io::IFileSystem *"))
  (memory (:pointer "void *"))
  (len :int)
  (fileName (:pointer "path"))
  (deleteMemoryWhenDropped :bool))

(cffi:defcfun ("_wrap_IFileSystem_createMemoryWriteFile__SWIG_1" IFileSystem_createMemoryWriteFile) (:pointer "irr::io::IWriteFile *")
  (self (:pointer "irr::io::IFileSystem *"))
  (memory (:pointer "void *"))
  (len :int)
  (fileName (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_createAndWriteFile__SWIG_0" IFileSystem_createAndWriteFile) (:pointer "irr::io::IWriteFile *")
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path"))
  (append :bool))

(cffi:defcfun ("_wrap_IFileSystem_createAndWriteFile__SWIG_1" IFileSystem_createAndWriteFile) (:pointer "irr::io::IWriteFile *")
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_0" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path"))
  (ignoreCase :bool)
  (ignorePaths :bool)
  (archiveType :enum)
  (password (:reference :irrstring))
  (retArchive (:pointer "irr::io::IFileArchive **")))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_1" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path"))
  (ignoreCase :bool)
  (ignorePaths :bool)
  (archiveType :enum)
  (password (:reference :irrstring)))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_2" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path"))
  (ignoreCase :bool)
  (ignorePaths :bool)
  (archiveType :enum))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_3" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path"))
  (ignoreCase :bool)
  (ignorePaths :bool))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_4" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path"))
  (ignoreCase :bool))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_5" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_6" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (file (:pointer "irr::io::IReadFile *"))
  (ignoreCase :bool)
  (ignorePaths :bool)
  (archiveType :enum)
  (password (:reference :irrstring))
  (retArchive (:pointer "irr::io::IFileArchive **")))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_7" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (file (:pointer "irr::io::IReadFile *"))
  (ignoreCase :bool)
  (ignorePaths :bool)
  (archiveType :enum)
  (password (:reference :irrstring)))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_8" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (file (:pointer "irr::io::IReadFile *"))
  (ignoreCase :bool)
  (ignorePaths :bool)
  (archiveType :enum))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_9" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (file (:pointer "irr::io::IReadFile *"))
  (ignoreCase :bool)
  (ignorePaths :bool))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_10" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (file (:pointer "irr::io::IReadFile *"))
  (ignoreCase :bool))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_11" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IFileSystem_addFileArchive__SWIG_12" IFileSystem_addFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (archive (:pointer "irr::io::IFileArchive *")))

(cffi:defcfun ("_wrap_IFileSystem_getFileArchiveCount" IFileSystem_getFileArchiveCount) :uint
  (self (:pointer "irr::io::IFileSystem *")))

(cffi:defcfun ("_wrap_IFileSystem_removeFileArchive__SWIG_0" IFileSystem_removeFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (index :uint))

(cffi:defcfun ("_wrap_IFileSystem_removeFileArchive__SWIG_1" IFileSystem_removeFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_removeFileArchive__SWIG_2" IFileSystem_removeFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (archive (:pointer "irr::io::IFileArchive *")))

(cffi:defcfun ("_wrap_IFileSystem_moveFileArchive" IFileSystem_moveFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (sourceIndex :uint)
  (relative :int))

(cffi:defcfun ("_wrap_IFileSystem_getFileArchive" IFileSystem_getFileArchive) (:pointer "irr::io::IFileArchive *")
  (self (:pointer "irr::io::IFileSystem *"))
  (index :uint))

(cffi:defcfun ("_wrap_IFileSystem_addArchiveLoader" IFileSystem_addArchiveLoader) :void
  (self (:pointer "irr::io::IFileSystem *"))
  (loader (:pointer "irr::io::IArchiveLoader *")))

(cffi:defcfun ("_wrap_IFileSystem_getArchiveLoaderCount" IFileSystem_getArchiveLoaderCount) :uint
  (self (:pointer "irr::io::IFileSystem *")))

(cffi:defcfun ("_wrap_IFileSystem_getArchiveLoader" IFileSystem_getArchiveLoader) (:pointer "irr::io::IArchiveLoader *")
  (self (:pointer "irr::io::IFileSystem *"))
  (index :uint))

(cffi:defcfun ("_wrap_IFileSystem_addZipFileArchive__SWIG_0" IFileSystem_addZipFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename :string)
  (ignoreCase :bool)
  (ignorePaths :bool))

(cffi:defcfun ("_wrap_IFileSystem_addZipFileArchive__SWIG_1" IFileSystem_addZipFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename :string)
  (ignoreCase :bool))

(cffi:defcfun ("_wrap_IFileSystem_addZipFileArchive__SWIG_2" IFileSystem_addZipFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename :string))

(cffi:defcfun ("_wrap_IFileSystem_addFolderFileArchive__SWIG_0" IFileSystem_addFolderFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename :string)
  (ignoreCase :bool)
  (ignorePaths :bool))

(cffi:defcfun ("_wrap_IFileSystem_addFolderFileArchive__SWIG_1" IFileSystem_addFolderFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename :string)
  (ignoreCase :bool))

(cffi:defcfun ("_wrap_IFileSystem_addFolderFileArchive__SWIG_2" IFileSystem_addFolderFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename :string))

(cffi:defcfun ("_wrap_IFileSystem_addPakFileArchive__SWIG_0" IFileSystem_addPakFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename :string)
  (ignoreCase :bool)
  (ignorePaths :bool))

(cffi:defcfun ("_wrap_IFileSystem_addPakFileArchive__SWIG_1" IFileSystem_addPakFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename :string)
  (ignoreCase :bool))

(cffi:defcfun ("_wrap_IFileSystem_addPakFileArchive__SWIG_2" IFileSystem_addPakFileArchive) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename :string))

(cffi:defcfun ("_wrap_IFileSystem_getWorkingDirectory" IFileSystem_getWorkingDirectory) (:reference "path")
  (self (:pointer "irr::io::IFileSystem *")))

(cffi:defcfun ("_wrap_IFileSystem_changeWorkingDirectoryTo" IFileSystem_changeWorkingDirectoryTo) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (newDirectory (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_getAbsolutePath" IFileSystem_getAbsolutePath) (:by-value "path")
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_getFileDir" IFileSystem_getFileDir) (:by-value "path")
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_getFileBasename__SWIG_0" IFileSystem_getFileBasename) (:by-value "path")
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path"))
  (keepExtension :bool))

(cffi:defcfun ("_wrap_IFileSystem_getFileBasename__SWIG_1" IFileSystem_getFileBasename) (:by-value "path")
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_flattenFilename__SWIG_0" IFileSystem_flattenFilename) (:reference "path")
  (self (:pointer "irr::io::IFileSystem *"))
  (directory (:pointer "path"))
  (root (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_flattenFilename__SWIG_1" IFileSystem_flattenFilename) (:reference "path")
  (self (:pointer "irr::io::IFileSystem *"))
  (directory (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_getRelativeFilename" IFileSystem_getRelativeFilename) (:by-value "path")
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path"))
  (directory (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_createFileList" IFileSystem_createFileList) (:pointer "irr::io::IFileList *")
  (self (:pointer "irr::io::IFileSystem *")))

(cffi:defcfun ("_wrap_IFileSystem_createEmptyFileList" IFileSystem_createEmptyFileList) (:pointer "irr::io::IFileList *")
  (self (:pointer "irr::io::IFileSystem *"))
  (path (:pointer "path"))
  (ignoreCase :bool)
  (ignorePaths :bool))

(cffi:defcfun ("_wrap_IFileSystem_setFileListSystem" IFileSystem_setFileListSystem) :enum
  (self (:pointer "irr::io::IFileSystem *"))
  (listType :enum))

(cffi:defcfun ("_wrap_IFileSystem_existFile" IFileSystem_existFile) :bool
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_createXMLReader__SWIG_0" IFileSystem_createXMLReader) (:pointer "irr::io::IXMLReader *")
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_createXMLReader__SWIG_1" IFileSystem_createXMLReader) (:pointer "irr::io::IXMLReader *")
  (self (:pointer "irr::io::IFileSystem *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IFileSystem_createXMLReaderUTF8__SWIG_0" IFileSystem_createXMLReaderUTF8) (:pointer "irr::io::IXMLReaderUTF8 *")
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_createXMLReaderUTF8__SWIG_1" IFileSystem_createXMLReaderUTF8) (:pointer "irr::io::IXMLReaderUTF8 *")
  (self (:pointer "irr::io::IFileSystem *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IFileSystem_createXMLWriter__SWIG_0" IFileSystem_createXMLWriter) (:pointer "irr::io::IXMLWriter *")
  (self (:pointer "irr::io::IFileSystem *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IFileSystem_createXMLWriter__SWIG_1" IFileSystem_createXMLWriter) (:pointer "irr::io::IXMLWriter *")
  (self (:pointer "irr::io::IFileSystem *"))
  (file (:pointer "irr::io::IWriteFile *")))

(cffi:defcfun ("_wrap_IFileSystem_createEmptyAttributes__SWIG_0" IFileSystem_createEmptyAttributes) (:pointer "irr::io::IAttributes *")
  (self (:pointer "irr::io::IFileSystem *"))
  (driver (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IFileSystem_createEmptyAttributes__SWIG_1" IFileSystem_createEmptyAttributes) (:pointer "irr::io::IAttributes *")
  (self (:pointer "irr::io::IFileSystem *")))

(cffi:defcfun ("_wrap_delete_IFileSystem" delete_IFileSystem) :void
  (self (:pointer "irr::io::IFileSystem *")))

(cffi:defcfun ("_wrap_IImage_lock" IImage_lock) (:pointer "void *")
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_unlock" IImage_unlock) :void
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_getDimension" IImage_getDimension) (:reference "dimension2du")
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_getBitsPerPixel" IImage_getBitsPerPixel) :uint
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_getBytesPerPixel" IImage_getBytesPerPixel) :uint
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_getImageDataSizeInBytes" IImage_getImageDataSizeInBytes) :uint
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_getImageDataSizeInPixels" IImage_getImageDataSizeInPixels) :uint
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_getPixel" IImage_getPixel) (:by-value "irr::video::SColor")
  (self (:pointer "irr::video::IImage *"))
  (x :uint)
  (y :uint))

(cffi:defcfun ("_wrap_IImage_setPixel__SWIG_0" IImage_setPixel) :void
  (self (:pointer "irr::video::IImage *"))
  (x :uint)
  (y :uint)
  (color (:pointer "irr::video::SColor *"))
  (blend :bool))

(cffi:defcfun ("_wrap_IImage_setPixel__SWIG_1" IImage_setPixel) :void
  (self (:pointer "irr::video::IImage *"))
  (x :uint)
  (y :uint)
  (color (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IImage_getColorFormat" IImage_getColorFormat) :enum
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_getRedMask" IImage_getRedMask) :uint
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_getGreenMask" IImage_getGreenMask) :uint
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_getBlueMask" IImage_getBlueMask) :uint
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_getAlphaMask" IImage_getAlphaMask) :uint
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_getPitch" IImage_getPitch) :uint
  (self (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_copyToScaling__SWIG_0" IImage_copyToScaling) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "void *"))
  (width :uint)
  (height :uint)
  (format :enum)
  (pitch :uint))

(cffi:defcfun ("_wrap_IImage_copyToScaling__SWIG_1" IImage_copyToScaling) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "void *"))
  (width :uint)
  (height :uint)
  (format :enum))

(cffi:defcfun ("_wrap_IImage_copyToScaling__SWIG_2" IImage_copyToScaling) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "void *"))
  (width :uint)
  (height :uint))

(cffi:defcfun ("_wrap_IImage_copyToScaling__SWIG_3" IImage_copyToScaling) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_copyTo__SWIG_0" IImage_copyTo) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "irr::video::IImage *"))
  (pos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IImage_copyTo__SWIG_1" IImage_copyTo) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_copyTo__SWIG_2" IImage_copyTo) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "irr::video::IImage *"))
  (pos (:pointer "vector2di"))
  (sourceRect (:pointer "recti"))
  (clipRect (:pointer "recti")))

(cffi:defcfun ("_wrap_IImage_copyTo__SWIG_3" IImage_copyTo) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "irr::video::IImage *"))
  (pos (:pointer "vector2di"))
  (sourceRect (:pointer "recti")))

(cffi:defcfun ("_wrap_IImage_copyToWithAlpha__SWIG_0" IImage_copyToWithAlpha) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "irr::video::IImage *"))
  (pos (:pointer "vector2di"))
  (sourceRect (:pointer "recti"))
  (color (:pointer "irr::video::SColor *"))
  (clipRect (:pointer "recti")))

(cffi:defcfun ("_wrap_IImage_copyToWithAlpha__SWIG_1" IImage_copyToWithAlpha) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "irr::video::IImage *"))
  (pos (:pointer "vector2di"))
  (sourceRect (:pointer "recti"))
  (color (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IImage_copyToScalingBoxFilter__SWIG_0" IImage_copyToScalingBoxFilter) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "irr::video::IImage *"))
  (bias :int)
  (blend :bool))

(cffi:defcfun ("_wrap_IImage_copyToScalingBoxFilter__SWIG_1" IImage_copyToScalingBoxFilter) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "irr::video::IImage *"))
  (bias :int))

(cffi:defcfun ("_wrap_IImage_copyToScalingBoxFilter__SWIG_2" IImage_copyToScalingBoxFilter) :void
  (self (:pointer "irr::video::IImage *"))
  (target (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IImage_fill" IImage_fill) :void
  (self (:pointer "irr::video::IImage *"))
  (color (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IImage_getBitsPerPixelFromFormat" IImage_getBitsPerPixelFromFormat) :uint
  (format :enum))

(cffi:defcfun ("_wrap_IImage_isRenderTargetOnlyFormat" IImage_isRenderTargetOnlyFormat) :bool
  (format :enum))

(cffi:defcfun ("_wrap_delete_IImage" delete_IImage) :void
  (self (:pointer "irr::video::IImage *")))

(cffi:defcenum E_TEXTURE_CREATION_FLAG
	(:ETCF_ALWAYS_16_BIT #x00000001)
	(:ETCF_ALWAYS_32_BIT #x00000002)
	(:ETCF_OPTIMIZED_FOR_QUALITY #x00000004)
	(:ETCF_OPTIMIZED_FOR_SPEED #x00000008)
	(:ETCF_CREATE_MIP_MAPS #x00000010)
	(:ETCF_NO_ALPHA_CHANNEL #x00000020)
	(:ETCF_ALLOW_NON_POWER_2 #x00000040)
	(:ETCF_FORCE_32_BIT_DO_NOT_USE #x7fffffff))

(cffi:defcenum E_TEXTURE_LOCK_MODE
	(:ETLM_READ_WRITE 0)
	:ETLM_READ_ONLY
	:ETLM_WRITE_ONLY)

(cffi:defcfun ("_wrap_ITexture_lock__SWIG_0" ITexture_lock) (:pointer "void *")
  (self (:pointer "irr::video::ITexture *"))
  (mode :enum)
  (mipmapLevel :uint))

(cffi:defcfun ("_wrap_ITexture_lock__SWIG_1" ITexture_lock) (:pointer "void *")
  (self (:pointer "irr::video::ITexture *"))
  (mode :enum))

(cffi:defcfun ("_wrap_ITexture_lock__SWIG_2" ITexture_lock) (:pointer "void *")
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ITexture_unlock" ITexture_unlock) :void
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ITexture_getOriginalSize" ITexture_getOriginalSize) (:reference "dimension2du")
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ITexture_getSize" ITexture_getSize) (:reference "dimension2du")
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ITexture_getDriverType" ITexture_getDriverType) :enum
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ITexture_getColorFormat" ITexture_getColorFormat) :enum
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ITexture_getPitch" ITexture_getPitch) :uint
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ITexture_hasMipMaps" ITexture_hasMipMaps) :bool
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ITexture_hasAlpha" ITexture_hasAlpha) :bool
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ITexture_regenerateMipMapLevels__SWIG_0" ITexture_regenerateMipMapLevels) :void
  (self (:pointer "irr::video::ITexture *"))
  (mipmapData (:pointer "void *")))

(cffi:defcfun ("_wrap_ITexture_regenerateMipMapLevels__SWIG_1" ITexture_regenerateMipMapLevels) :void
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ITexture_isRenderTarget" ITexture_isRenderTarget) :bool
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ITexture_getName" ITexture_getName) (:reference "irr::io::SNamedPath *")
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_delete_ITexture" delete_ITexture) :void
  (self (:pointer "irr::video::ITexture *")))

(cffi:defcstruct SExposedVideoData)

(cffi:defcenum E_TRANSFORMATION_STATE
	(:ETS_VIEW 0)
	:ETS_WORLD
	:ETS_PROJECTION
	:ETS_TEXTURE_0
	:ETS_TEXTURE_1
	:ETS_TEXTURE_2
	:ETS_TEXTURE_3
	:ETS_COUNT)

(cffi:defcenum E_LOST_RESOURCE
	(:ELR_DEVICE 1)
	(:ELR_TEXTURES 2)
	(:ELR_RTTS 4)
	(:ELR_HW_BUFFERS 8))

(cffi:defcenum E_RENDER_TARGET
	(:ERT_FRAME_BUFFER 0)
	:ERT_RENDER_TEXTURE
	:ERT_MULTI_RENDER_TEXTURES
	:ERT_STEREO_LEFT_BUFFER
	:ERT_STEREO_RIGHT_BUFFER
	:ERT_STEREO_BOTH_BUFFERS
	:ERT_AUX_BUFFER0
	:ERT_AUX_BUFFER1
	:ERT_AUX_BUFFER2
	:ERT_AUX_BUFFER3
	:ERT_AUX_BUFFER4)

(cffi:defcenum E_FOG_TYPE
	(:EFT_FOG_EXP 0)
	:EFT_FOG_LINEAR
	:EFT_FOG_EXP2)

(cffi:defcvar ("FogTypeNames" FogTypeNames)
 (:pointer "irr::c8 **"))

(cffi:defcstruct SOverrideMaterial
	(Material (:pointer "irr::video::SMaterial"))
	(EnableFlags :uint)
	(EnablePasses :ushort)
	(Enabled :bool)
	(apply (:pointer "void (irr::video::SMaterial &)")))

(cffi:defcstruct IRenderTarget
	(__ne__ (:pointer "bool (irr::video::IRenderTarget const &)"))
	(RenderTexture (:pointer "irr::video::ITexture *"))
	(TargetType :enum)
	(ColorMask :enum)
	(BlendFuncSrc :enum)
	(BlendFuncDst :enum)
	(BlendOp :enum))

(cffi:defcfun ("_wrap_IVideoDriver_beginScene__SWIG_0" IVideoDriver_beginScene) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (backBuffer :bool)
  (zBuffer :bool)
  (color (:pointer "irr::video::SColor"))
  (videoData (:pointer "irr::video::SExposedVideoData *"))
  (sourceRect (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_beginScene__SWIG_1" IVideoDriver_beginScene) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (backBuffer :bool)
  (zBuffer :bool)
  (color (:pointer "irr::video::SColor"))
  (videoData (:pointer "irr::video::SExposedVideoData *")))

(cffi:defcfun ("_wrap_IVideoDriver_beginScene__SWIG_2" IVideoDriver_beginScene) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (backBuffer :bool)
  (zBuffer :bool)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_beginScene__SWIG_3" IVideoDriver_beginScene) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (backBuffer :bool)
  (zBuffer :bool))

(cffi:defcfun ("_wrap_IVideoDriver_beginScene__SWIG_4" IVideoDriver_beginScene) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (backBuffer :bool))

(cffi:defcfun ("_wrap_IVideoDriver_beginScene__SWIG_5" IVideoDriver_beginScene) :bool
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_endScene" IVideoDriver_endScene) :bool
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_queryFeature" IVideoDriver_queryFeature) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (feature :enum))

(cffi:defcfun ("_wrap_IVideoDriver_disableFeature__SWIG_0" IVideoDriver_disableFeature) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (feature :enum)
  (flag :bool))

(cffi:defcfun ("_wrap_IVideoDriver_disableFeature__SWIG_1" IVideoDriver_disableFeature) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (feature :enum))

(cffi:defcfun ("_wrap_IVideoDriver_getDriverAttributes" IVideoDriver_getDriverAttributes) (:reference "irr::io::IAttributes *")
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_checkDriverReset" IVideoDriver_checkDriverReset) :bool
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_setTransform" IVideoDriver_setTransform) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (state :enum)
  (mat (:pointer "matrix4")))

(cffi:defcfun ("_wrap_IVideoDriver_getTransform" IVideoDriver_getTransform) (:reference "matrix4")
  (self (:pointer "irr::video::IVideoDriver *"))
  (state :enum))

(cffi:defcfun ("_wrap_IVideoDriver_getImageLoaderCount" IVideoDriver_getImageLoaderCount) :uint
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getImageLoader" IVideoDriver_getImageLoader) (:pointer "irr::video::IImageLoader *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (n :uint))

(cffi:defcfun ("_wrap_IVideoDriver_getImageWriterCount" IVideoDriver_getImageWriterCount) :uint
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getImageWriter" IVideoDriver_getImageWriter) (:pointer "irr::video::IImageWriter *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (n :uint))

(cffi:defcfun ("_wrap_IVideoDriver_setMaterial" IVideoDriver_setMaterial) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_IVideoDriver_getTexture__SWIG_0" IVideoDriver_getTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IVideoDriver_getTexture__SWIG_1" IVideoDriver_getTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IVideoDriver_getTextureByIndex" IVideoDriver_getTextureByIndex) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (index :uint))

(cffi:defcfun ("_wrap_IVideoDriver_getTextureCount" IVideoDriver_getTextureCount) :uint
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_renameTexture" IVideoDriver_renameTexture) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (newName (:pointer "path")))

(cffi:defcfun ("_wrap_IVideoDriver_addTexture__SWIG_0" IVideoDriver_addTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (size (:pointer "dimension2du"))
  (name (:pointer "path"))
  (format :enum))

(cffi:defcfun ("_wrap_IVideoDriver_addTexture__SWIG_1" IVideoDriver_addTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (size (:pointer "dimension2du"))
  (name (:pointer "path")))

(cffi:defcfun ("_wrap_IVideoDriver_addTexture__SWIG_2" IVideoDriver_addTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (name (:pointer "path"))
  (image (:pointer "irr::video::IImage *"))
  (mipmapData (:pointer "void *")))

(cffi:defcfun ("_wrap_IVideoDriver_addTexture__SWIG_3" IVideoDriver_addTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (name (:pointer "path"))
  (image (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IVideoDriver_addRenderTargetTexture__SWIG_0" IVideoDriver_addRenderTargetTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (size (:pointer "dimension2du"))
  (name (:pointer "path"))
  (format :enum))

(cffi:defcfun ("_wrap_IVideoDriver_addRenderTargetTexture__SWIG_1" IVideoDriver_addRenderTargetTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (size (:pointer "dimension2du"))
  (name (:pointer "path")))

(cffi:defcfun ("_wrap_IVideoDriver_addRenderTargetTexture__SWIG_2" IVideoDriver_addRenderTargetTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (size (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IVideoDriver_removeTexture" IVideoDriver_removeTexture) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IVideoDriver_removeAllTextures" IVideoDriver_removeAllTextures) :void
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_removeHardwareBuffer" IVideoDriver_removeHardwareBuffer) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (mb (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IVideoDriver_removeAllHardwareBuffers" IVideoDriver_removeAllHardwareBuffers) :void
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_addOcclusionQuery__SWIG_0" IVideoDriver_addOcclusionQuery) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (node (:pointer "irr::scene::ISceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IVideoDriver_addOcclusionQuery__SWIG_1" IVideoDriver_addOcclusionQuery) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_IVideoDriver_removeOcclusionQuery" IVideoDriver_removeOcclusionQuery) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_IVideoDriver_removeAllOcclusionQueries" IVideoDriver_removeAllOcclusionQueries) :void
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_runOcclusionQuery__SWIG_0" IVideoDriver_runOcclusionQuery) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (node (:pointer "irr::scene::ISceneNode *"))
  (visible :bool))

(cffi:defcfun ("_wrap_IVideoDriver_runOcclusionQuery__SWIG_1" IVideoDriver_runOcclusionQuery) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_IVideoDriver_runAllOcclusionQueries__SWIG_0" IVideoDriver_runAllOcclusionQueries) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (visible :bool))

(cffi:defcfun ("_wrap_IVideoDriver_runAllOcclusionQueries__SWIG_1" IVideoDriver_runAllOcclusionQueries) :void
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_updateOcclusionQuery__SWIG_0" IVideoDriver_updateOcclusionQuery) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (node (:pointer "irr::scene::ISceneNode *"))
  (block :bool))

(cffi:defcfun ("_wrap_IVideoDriver_updateOcclusionQuery__SWIG_1" IVideoDriver_updateOcclusionQuery) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_IVideoDriver_updateAllOcclusionQueries__SWIG_0" IVideoDriver_updateAllOcclusionQueries) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (block :bool))

(cffi:defcfun ("_wrap_IVideoDriver_updateAllOcclusionQueries__SWIG_1" IVideoDriver_updateAllOcclusionQueries) :void
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getOcclusionQueryResult" IVideoDriver_getOcclusionQueryResult) :uint
  (self (:pointer "irr::video::IVideoDriver *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_IVideoDriver_makeColorKeyTexture__SWIG_0" IVideoDriver_makeColorKeyTexture) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (color (:pointer "irr::video::SColor"))
  (zeroTexels :bool))

(cffi:defcfun ("_wrap_IVideoDriver_makeColorKeyTexture__SWIG_1" IVideoDriver_makeColorKeyTexture) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_makeColorKeyTexture__SWIG_2" IVideoDriver_makeColorKeyTexture) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (colorKeyPixelPos (:pointer "vector2di"))
  (zeroTexels :bool))

(cffi:defcfun ("_wrap_IVideoDriver_makeColorKeyTexture__SWIG_3" IVideoDriver_makeColorKeyTexture) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (colorKeyPixelPos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IVideoDriver_makeNormalMapTexture__SWIG_0" IVideoDriver_makeNormalMapTexture) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (amplitude :float))

(cffi:defcfun ("_wrap_IVideoDriver_makeNormalMapTexture__SWIG_1" IVideoDriver_makeNormalMapTexture) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_0" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (clearBackBuffer :bool)
  (clearZBuffer :bool)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_1" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (clearBackBuffer :bool)
  (clearZBuffer :bool))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_2" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (clearBackBuffer :bool))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_3" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_4" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (target :enum)
  (clearTarget :bool)
  (clearZBuffer :bool)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_5" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (target :enum)
  (clearTarget :bool)
  (clearZBuffer :bool))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_6" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (target :enum)
  (clearTarget :bool))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_7" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (target :enum))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_8" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *"))
  (clearBackBuffer :bool)
  (clearZBuffer :bool)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_9" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *"))
  (clearBackBuffer :bool)
  (clearZBuffer :bool))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_10" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *"))
  (clearBackBuffer :bool))

(cffi:defcfun ("_wrap_IVideoDriver_setRenderTarget__SWIG_11" IVideoDriver_setRenderTarget) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::core::array< irr::video::IRenderTarget,irr::core::irrAllocator< irr::video::IRenderTarget > > *")))

(cffi:defcfun ("_wrap_IVideoDriver_setViewPort" IVideoDriver_setViewPort) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (area (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_getViewPort" IVideoDriver_getViewPort) (:reference "recti")
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_drawVertexPrimitiveList__SWIG_0" IVideoDriver_drawVertexPrimitiveList) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "void *"))
  (vertexCount :uint)
  (indexList (:pointer "void *"))
  (primCount :uint)
  (vType :enum)
  (pType :enum)
  (iType :enum))

(cffi:defcfun ("_wrap_IVideoDriver_drawVertexPrimitiveList__SWIG_1" IVideoDriver_drawVertexPrimitiveList) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "void *"))
  (vertexCount :uint)
  (indexList (:pointer "void *"))
  (primCount :uint)
  (vType :enum)
  (pType :enum))

(cffi:defcfun ("_wrap_IVideoDriver_drawVertexPrimitiveList__SWIG_2" IVideoDriver_drawVertexPrimitiveList) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "void *"))
  (vertexCount :uint)
  (indexList (:pointer "void *"))
  (primCount :uint)
  (vType :enum))

(cffi:defcfun ("_wrap_IVideoDriver_drawVertexPrimitiveList__SWIG_3" IVideoDriver_drawVertexPrimitiveList) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "void *"))
  (vertexCount :uint)
  (indexList (:pointer "void *"))
  (primCount :uint))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DVertexPrimitiveList__SWIG_0" IVideoDriver_draw2DVertexPrimitiveList) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "void *"))
  (vertexCount :uint)
  (indexList (:pointer "void *"))
  (primCount :uint)
  (vType :enum)
  (pType :enum)
  (iType :enum))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DVertexPrimitiveList__SWIG_1" IVideoDriver_draw2DVertexPrimitiveList) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "void *"))
  (vertexCount :uint)
  (indexList (:pointer "void *"))
  (primCount :uint)
  (vType :enum)
  (pType :enum))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DVertexPrimitiveList__SWIG_2" IVideoDriver_draw2DVertexPrimitiveList) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "void *"))
  (vertexCount :uint)
  (indexList (:pointer "void *"))
  (primCount :uint)
  (vType :enum))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DVertexPrimitiveList__SWIG_3" IVideoDriver_draw2DVertexPrimitiveList) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "void *"))
  (vertexCount :uint)
  (indexList (:pointer "void *"))
  (primCount :uint))

(cffi:defcfun ("_wrap_IVideoDriver_drawIndexedTriangleList__SWIG_0" IVideoDriver_drawIndexedTriangleList) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "irr::video::S3DVertex *"))
  (vertexCount :uint)
  (indexList (:pointer "irr::u16 *"))
  (triangleCount :uint))

(cffi:defcfun ("_wrap_IVideoDriver_drawIndexedTriangleList__SWIG_1" IVideoDriver_drawIndexedTriangleList) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "irr::video::S3DVertex2TCoords *"))
  (vertexCount :uint)
  (indexList (:pointer "irr::u16 *"))
  (triangleCount :uint))

(cffi:defcfun ("_wrap_IVideoDriver_drawIndexedTriangleList__SWIG_2" IVideoDriver_drawIndexedTriangleList) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "irr::video::S3DVertexTangents *"))
  (vertexCount :uint)
  (indexList (:pointer "irr::u16 *"))
  (triangleCount :uint))

(cffi:defcfun ("_wrap_IVideoDriver_drawIndexedTriangleFan__SWIG_0" IVideoDriver_drawIndexedTriangleFan) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "irr::video::S3DVertex *"))
  (vertexCount :uint)
  (indexList (:pointer "irr::u16 *"))
  (triangleCount :uint))

(cffi:defcfun ("_wrap_IVideoDriver_drawIndexedTriangleFan__SWIG_1" IVideoDriver_drawIndexedTriangleFan) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "irr::video::S3DVertex2TCoords *"))
  (vertexCount :uint)
  (indexList (:pointer "irr::u16 *"))
  (triangleCount :uint))

(cffi:defcfun ("_wrap_IVideoDriver_drawIndexedTriangleFan__SWIG_2" IVideoDriver_drawIndexedTriangleFan) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (vertices (:pointer "irr::video::S3DVertexTangents *"))
  (vertexCount :uint)
  (indexList (:pointer "irr::u16 *"))
  (triangleCount :uint))

(cffi:defcfun ("_wrap_IVideoDriver_draw3DLine__SWIG_0" IVideoDriver_draw3DLine) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (start (:pointer "vector3df"))
  (end (:pointer "vector3df"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_draw3DLine__SWIG_1" IVideoDriver_draw3DLine) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (start (:pointer "vector3df"))
  (end (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IVideoDriver_draw3DTriangle__SWIG_0" IVideoDriver_draw3DTriangle) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (triangle (:pointer "triangle3df"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_draw3DTriangle__SWIG_1" IVideoDriver_draw3DTriangle) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (triangle (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_IVideoDriver_draw3DBox__SWIG_0" IVideoDriver_draw3DBox) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (box (:pointer "aabbox3df"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_draw3DBox__SWIG_1" IVideoDriver_draw3DBox) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (box (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImage__SWIG_0" IVideoDriver_draw2DImage) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (destPos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImage__SWIG_1" IVideoDriver_draw2DImage) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (destPos (:pointer "vector2di"))
  (sourceRect (:pointer "recti"))
  (clipRect (:pointer "recti"))
  (color (:pointer "irr::video::SColor"))
  (useAlphaChannelOfTexture :bool))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImage__SWIG_2" IVideoDriver_draw2DImage) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (destPos (:pointer "vector2di"))
  (sourceRect (:pointer "recti"))
  (clipRect (:pointer "recti"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImage__SWIG_3" IVideoDriver_draw2DImage) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (destPos (:pointer "vector2di"))
  (sourceRect (:pointer "recti"))
  (clipRect (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImage__SWIG_4" IVideoDriver_draw2DImage) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (destPos (:pointer "vector2di"))
  (sourceRect (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImageBatch__SWIG_0" IVideoDriver_draw2DImageBatch) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (pos (:pointer "vector2di"))
  (sourceRects (:pointer "irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *"))
  (indices (:pointer "irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *"))
  (kerningWidth :int)
  (clipRect (:pointer "recti"))
  (color (:pointer "irr::video::SColor"))
  (useAlphaChannelOfTexture :bool))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImageBatch__SWIG_1" IVideoDriver_draw2DImageBatch) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (pos (:pointer "vector2di"))
  (sourceRects (:pointer "irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *"))
  (indices (:pointer "irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *"))
  (kerningWidth :int)
  (clipRect (:pointer "recti"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImageBatch__SWIG_2" IVideoDriver_draw2DImageBatch) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (pos (:pointer "vector2di"))
  (sourceRects (:pointer "irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *"))
  (indices (:pointer "irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *"))
  (kerningWidth :int)
  (clipRect (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImageBatch__SWIG_3" IVideoDriver_draw2DImageBatch) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (pos (:pointer "vector2di"))
  (sourceRects (:pointer "irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *"))
  (indices (:pointer "irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *"))
  (kerningWidth :int))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImageBatch__SWIG_4" IVideoDriver_draw2DImageBatch) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (pos (:pointer "vector2di"))
  (sourceRects (:pointer "irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *"))
  (indices (:pointer "irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImageBatch__SWIG_5" IVideoDriver_draw2DImageBatch) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (positions (:pointer "irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *"))
  (sourceRects (:pointer "irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *"))
  (clipRect (:pointer "recti"))
  (color (:pointer "irr::video::SColor"))
  (useAlphaChannelOfTexture :bool))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImageBatch__SWIG_6" IVideoDriver_draw2DImageBatch) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (positions (:pointer "irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *"))
  (sourceRects (:pointer "irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *"))
  (clipRect (:pointer "recti"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImageBatch__SWIG_7" IVideoDriver_draw2DImageBatch) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (positions (:pointer "irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *"))
  (sourceRects (:pointer "irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *"))
  (clipRect (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImageBatch__SWIG_8" IVideoDriver_draw2DImageBatch) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (positions (:pointer "irr::core::array< irr::core::vector2d< irr::s32 >,irr::core::irrAllocator< irr::core::vector2d< irr::s32 > > > *"))
  (sourceRects (:pointer "irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImage__SWIG_5" IVideoDriver_draw2DImage) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (destRect (:pointer "recti"))
  (sourceRect (:pointer "recti"))
  (clipRect (:pointer "recti"))
  (colors (:pointer "irr::video::SColor *"))
  (useAlphaChannelOfTexture :bool))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImage__SWIG_6" IVideoDriver_draw2DImage) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (destRect (:pointer "recti"))
  (sourceRect (:pointer "recti"))
  (clipRect (:pointer "recti"))
  (colors (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImage__SWIG_7" IVideoDriver_draw2DImage) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (destRect (:pointer "recti"))
  (sourceRect (:pointer "recti"))
  (clipRect (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DImage__SWIG_8" IVideoDriver_draw2DImage) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (destRect (:pointer "recti"))
  (sourceRect (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DRectangle__SWIG_0" IVideoDriver_draw2DRectangle) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (color (:pointer "irr::video::SColor"))
  (pos (:pointer "recti"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DRectangle__SWIG_1" IVideoDriver_draw2DRectangle) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (color (:pointer "irr::video::SColor"))
  (pos (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DRectangle__SWIG_2" IVideoDriver_draw2DRectangle) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (pos (:pointer "recti"))
  (colorLeftUp (:pointer "irr::video::SColor"))
  (colorRightUp (:pointer "irr::video::SColor"))
  (colorLeftDown (:pointer "irr::video::SColor"))
  (colorRightDown (:pointer "irr::video::SColor"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DRectangle__SWIG_3" IVideoDriver_draw2DRectangle) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (pos (:pointer "recti"))
  (colorLeftUp (:pointer "irr::video::SColor"))
  (colorRightUp (:pointer "irr::video::SColor"))
  (colorLeftDown (:pointer "irr::video::SColor"))
  (colorRightDown (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DRectangleOutline__SWIG_0" IVideoDriver_draw2DRectangleOutline) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (pos (:pointer "recti"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DRectangleOutline__SWIG_1" IVideoDriver_draw2DRectangleOutline) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (pos (:pointer "recti")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DLine__SWIG_0" IVideoDriver_draw2DLine) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (start (:pointer "vector2di"))
  (end (:pointer "vector2di"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DLine__SWIG_1" IVideoDriver_draw2DLine) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (start (:pointer "vector2di"))
  (end (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IVideoDriver_drawPixel" IVideoDriver_drawPixel) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (x :uint)
  (y :uint)
  (color (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DPolygon__SWIG_0" IVideoDriver_draw2DPolygon) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (center (:pointer "vector2di"))
  (radius :float)
  (color (:pointer "irr::video::SColor"))
  (vertexCount :int))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DPolygon__SWIG_1" IVideoDriver_draw2DPolygon) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (center (:pointer "vector2di"))
  (radius :float)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_draw2DPolygon__SWIG_2" IVideoDriver_draw2DPolygon) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (center (:pointer "vector2di"))
  (radius :float))

(cffi:defcfun ("_wrap_IVideoDriver_drawStencilShadowVolume__SWIG_0" IVideoDriver_drawStencilShadowVolume) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (triangles (:pointer "irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *"))
  (zfail :bool)
  (debugDataVisible :uint))

(cffi:defcfun ("_wrap_IVideoDriver_drawStencilShadowVolume__SWIG_1" IVideoDriver_drawStencilShadowVolume) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (triangles (:pointer "irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *"))
  (zfail :bool))

(cffi:defcfun ("_wrap_IVideoDriver_drawStencilShadowVolume__SWIG_2" IVideoDriver_drawStencilShadowVolume) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (triangles (:pointer "irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *")))

(cffi:defcfun ("_wrap_IVideoDriver_drawStencilShadow__SWIG_0" IVideoDriver_drawStencilShadow) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (clearStencilBuffer :bool)
  (leftUpEdge (:pointer "irr::video::SColor"))
  (rightUpEdge (:pointer "irr::video::SColor"))
  (leftDownEdge (:pointer "irr::video::SColor"))
  (rightDownEdge (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_drawStencilShadow__SWIG_1" IVideoDriver_drawStencilShadow) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (clearStencilBuffer :bool)
  (leftUpEdge (:pointer "irr::video::SColor"))
  (rightUpEdge (:pointer "irr::video::SColor"))
  (leftDownEdge (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_drawStencilShadow__SWIG_2" IVideoDriver_drawStencilShadow) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (clearStencilBuffer :bool)
  (leftUpEdge (:pointer "irr::video::SColor"))
  (rightUpEdge (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_drawStencilShadow__SWIG_3" IVideoDriver_drawStencilShadow) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (clearStencilBuffer :bool)
  (leftUpEdge (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_drawStencilShadow__SWIG_4" IVideoDriver_drawStencilShadow) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (clearStencilBuffer :bool))

(cffi:defcfun ("_wrap_IVideoDriver_drawStencilShadow__SWIG_5" IVideoDriver_drawStencilShadow) :void
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_drawMeshBuffer" IVideoDriver_drawMeshBuffer) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (mb (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IVideoDriver_drawMeshBufferNormals__SWIG_0" IVideoDriver_drawMeshBufferNormals) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (mb (:pointer "irr::scene::IMeshBuffer *"))
  (length :float)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_drawMeshBufferNormals__SWIG_1" IVideoDriver_drawMeshBufferNormals) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (mb (:pointer "irr::scene::IMeshBuffer *"))
  (length :float))

(cffi:defcfun ("_wrap_IVideoDriver_drawMeshBufferNormals__SWIG_2" IVideoDriver_drawMeshBufferNormals) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (mb (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IVideoDriver_setFog__SWIG_0" IVideoDriver_setFog) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (color (:pointer "irr::video::SColor"))
  (fogType :enum)
  (start :float)
  (end :float)
  (density :float)
  (pixelFog :bool)
  (rangeFog :bool))

(cffi:defcfun ("_wrap_IVideoDriver_setFog__SWIG_1" IVideoDriver_setFog) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (color (:pointer "irr::video::SColor"))
  (fogType :enum)
  (start :float)
  (end :float)
  (density :float)
  (pixelFog :bool))

(cffi:defcfun ("_wrap_IVideoDriver_setFog__SWIG_2" IVideoDriver_setFog) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (color (:pointer "irr::video::SColor"))
  (fogType :enum)
  (start :float)
  (end :float)
  (density :float))

(cffi:defcfun ("_wrap_IVideoDriver_setFog__SWIG_3" IVideoDriver_setFog) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (color (:pointer "irr::video::SColor"))
  (fogType :enum)
  (start :float)
  (end :float))

(cffi:defcfun ("_wrap_IVideoDriver_setFog__SWIG_4" IVideoDriver_setFog) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (color (:pointer "irr::video::SColor"))
  (fogType :enum)
  (start :float))

(cffi:defcfun ("_wrap_IVideoDriver_setFog__SWIG_5" IVideoDriver_setFog) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (color (:pointer "irr::video::SColor"))
  (fogType :enum))

(cffi:defcfun ("_wrap_IVideoDriver_setFog__SWIG_6" IVideoDriver_setFog) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVideoDriver_setFog__SWIG_7" IVideoDriver_setFog) :void
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getFog" IVideoDriver_getFog) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (color (:pointer "irr::video::SColor *"))
  (fogType :enum-ref)
  (start (:pointer "irr::f32 *"))
  (end (:pointer "irr::f32 *"))
  (density (:pointer "irr::f32 *"))
  (pixelFog (:pointer "bool *"))
  (rangeFog (:pointer "bool *")))

(cffi:defcfun ("_wrap_IVideoDriver_getColorFormat" IVideoDriver_getColorFormat) :enum
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getScreenSize" IVideoDriver_getScreenSize) (:reference "dimension2du")
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getCurrentRenderTargetSize" IVideoDriver_getCurrentRenderTargetSize) (:reference "dimension2du")
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getFPS" IVideoDriver_getFPS) :int
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getPrimitiveCountDrawn__SWIG_0" IVideoDriver_getPrimitiveCountDrawn) :uint
  (self (:pointer "irr::video::IVideoDriver *"))
  (mode :uint))

(cffi:defcfun ("_wrap_IVideoDriver_getPrimitiveCountDrawn__SWIG_1" IVideoDriver_getPrimitiveCountDrawn) :uint
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_deleteAllDynamicLights" IVideoDriver_deleteAllDynamicLights) :void
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_addDynamicLight" IVideoDriver_addDynamicLight) :int
  (self (:pointer "irr::video::IVideoDriver *"))
  (light (:pointer "irr::video::SLight *")))

(cffi:defcfun ("_wrap_IVideoDriver_getMaximalDynamicLightAmount" IVideoDriver_getMaximalDynamicLightAmount) :uint
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getDynamicLightCount" IVideoDriver_getDynamicLightCount) :uint
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getDynamicLight" IVideoDriver_getDynamicLight) (:reference "irr::video::SLight *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IVideoDriver_turnLightOn" IVideoDriver_turnLightOn) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (lightIndex :int)
  (turnOn :bool))

(cffi:defcfun ("_wrap_IVideoDriver_getName" IVideoDriver_getName) :w-string
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_addExternalImageLoader" IVideoDriver_addExternalImageLoader) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (loader (:pointer "irr::video::IImageLoader *")))

(cffi:defcfun ("_wrap_IVideoDriver_addExternalImageWriter" IVideoDriver_addExternalImageWriter) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (writer (:pointer "irr::video::IImageWriter *")))

(cffi:defcfun ("_wrap_IVideoDriver_getMaximalPrimitiveCount" IVideoDriver_getMaximalPrimitiveCount) :uint
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_setTextureCreationFlag__SWIG_0" IVideoDriver_setTextureCreationFlag) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (flag :enum)
  (enabled :bool))

(cffi:defcfun ("_wrap_IVideoDriver_setTextureCreationFlag__SWIG_1" IVideoDriver_setTextureCreationFlag) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (flag :enum))

(cffi:defcfun ("_wrap_IVideoDriver_getTextureCreationFlag" IVideoDriver_getTextureCreationFlag) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (flag :enum))

(cffi:defcfun ("_wrap_IVideoDriver_createImageFromFile__SWIG_0" IVideoDriver_createImageFromFile) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IVideoDriver_createImageFromFile__SWIG_1" IVideoDriver_createImageFromFile) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IVideoDriver_writeImageToFile__SWIG_0" IVideoDriver_writeImageToFile) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (image (:pointer "irr::video::IImage *"))
  (filename (:pointer "path"))
  (param :uint))

(cffi:defcfun ("_wrap_IVideoDriver_writeImageToFile__SWIG_1" IVideoDriver_writeImageToFile) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (image (:pointer "irr::video::IImage *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IVideoDriver_writeImageToFile__SWIG_2" IVideoDriver_writeImageToFile) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (image (:pointer "irr::video::IImage *"))
  (file (:pointer "irr::io::IWriteFile *"))
  (param :uint))

(cffi:defcfun ("_wrap_IVideoDriver_writeImageToFile__SWIG_3" IVideoDriver_writeImageToFile) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (image (:pointer "irr::video::IImage *"))
  (file (:pointer "irr::io::IWriteFile *")))

(cffi:defcfun ("_wrap_IVideoDriver_createImageFromData__SWIG_0" IVideoDriver_createImageFromData) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (format :enum)
  (size (:pointer "dimension2du"))
  (data (:pointer "void *"))
  (ownForeignMemory :bool)
  (deleteMemory :bool))

(cffi:defcfun ("_wrap_IVideoDriver_createImageFromData__SWIG_1" IVideoDriver_createImageFromData) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (format :enum)
  (size (:pointer "dimension2du"))
  (data (:pointer "void *"))
  (ownForeignMemory :bool))

(cffi:defcfun ("_wrap_IVideoDriver_createImageFromData__SWIG_2" IVideoDriver_createImageFromData) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (format :enum)
  (size (:pointer "dimension2du"))
  (data (:pointer "void *")))

(cffi:defcfun ("_wrap_IVideoDriver_createImage__SWIG_0" IVideoDriver_createImage) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (format :enum)
  (size (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IVideoDriver_createImage__SWIG_1" IVideoDriver_createImage) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (format :enum)
  (imageToCopy (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_IVideoDriver_createImage__SWIG_2" IVideoDriver_createImage) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (imageToCopy (:pointer "irr::video::IImage *"))
  (pos (:pointer "vector2di"))
  (size (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IVideoDriver_createImage__SWIG_3" IVideoDriver_createImage) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (texture (:pointer "irr::video::ITexture *"))
  (pos (:pointer "vector2di"))
  (size (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IVideoDriver_OnResize" IVideoDriver_OnResize) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (size (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IVideoDriver_addMaterialRenderer__SWIG_0" IVideoDriver_addMaterialRenderer) :int
  (self (:pointer "irr::video::IVideoDriver *"))
  (renderer (:pointer "irr::video::IMaterialRenderer *"))
  (name :string))

(cffi:defcfun ("_wrap_IVideoDriver_addMaterialRenderer__SWIG_1" IVideoDriver_addMaterialRenderer) :int
  (self (:pointer "irr::video::IVideoDriver *"))
  (renderer (:pointer "irr::video::IMaterialRenderer *")))

(cffi:defcfun ("_wrap_IVideoDriver_getMaterialRenderer" IVideoDriver_getMaterialRenderer) (:pointer "irr::video::IMaterialRenderer *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IVideoDriver_getMaterialRendererCount" IVideoDriver_getMaterialRendererCount) :uint
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getMaterialRendererName" IVideoDriver_getMaterialRendererName) :string
  (self (:pointer "irr::video::IVideoDriver *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IVideoDriver_setMaterialRendererName" IVideoDriver_setMaterialRendererName) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (idx :int)
  (name :string))

(cffi:defcfun ("_wrap_IVideoDriver_createAttributesFromMaterial__SWIG_0" IVideoDriver_createAttributesFromMaterial) (:pointer "irr::io::IAttributes *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (material (:pointer "irr::video::SMaterial *"))
  (options (:pointer "irr::io::SAttributeReadWriteOptions *")))

(cffi:defcfun ("_wrap_IVideoDriver_createAttributesFromMaterial__SWIG_1" IVideoDriver_createAttributesFromMaterial) (:pointer "irr::io::IAttributes *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_IVideoDriver_fillMaterialStructureFromAttributes" IVideoDriver_fillMaterialStructureFromAttributes) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (outMaterial (:pointer "irr::video::SMaterial *"))
  (attributes (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_IVideoDriver_getExposedVideoData" IVideoDriver_getExposedVideoData) (:reference "irr::video::SExposedVideoData *")
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getDriverType" IVideoDriver_getDriverType) :enum
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getGPUProgrammingServices" IVideoDriver_getGPUProgrammingServices) (:pointer "irr::video::IGPUProgrammingServices *")
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getMeshManipulator" IVideoDriver_getMeshManipulator) (:pointer "irr::scene::IMeshManipulator *")
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_clearZBuffer" IVideoDriver_clearZBuffer) :void
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_createScreenShot__SWIG_0" IVideoDriver_createScreenShot) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (format :enum)
  (target :enum))

(cffi:defcfun ("_wrap_IVideoDriver_createScreenShot__SWIG_1" IVideoDriver_createScreenShot) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (format :enum))

(cffi:defcfun ("_wrap_IVideoDriver_createScreenShot__SWIG_2" IVideoDriver_createScreenShot) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_findTexture" IVideoDriver_findTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::video::IVideoDriver *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IVideoDriver_setClipPlane__SWIG_0" IVideoDriver_setClipPlane) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (index :uint)
  (plane (:pointer "plane3df"))
  (enable :bool))

(cffi:defcfun ("_wrap_IVideoDriver_setClipPlane__SWIG_1" IVideoDriver_setClipPlane) :bool
  (self (:pointer "irr::video::IVideoDriver *"))
  (index :uint)
  (plane (:pointer "plane3df")))

(cffi:defcfun ("_wrap_IVideoDriver_enableClipPlane" IVideoDriver_enableClipPlane) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (index :uint)
  (enable :bool))

(cffi:defcfun ("_wrap_IVideoDriver_setMinHardwareBufferVertexCount" IVideoDriver_setMinHardwareBufferVertexCount) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (count :uint))

(cffi:defcfun ("_wrap_IVideoDriver_getOverrideMaterial" IVideoDriver_getOverrideMaterial) (:reference "irr::video::SOverrideMaterial *")
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getMaterial2D" IVideoDriver_getMaterial2D) (:reference "irr::video::SMaterial *")
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_enableMaterial2D__SWIG_0" IVideoDriver_enableMaterial2D) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (enable :bool))

(cffi:defcfun ("_wrap_IVideoDriver_enableMaterial2D__SWIG_1" IVideoDriver_enableMaterial2D) :void
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_getVendorInfo" IVideoDriver_getVendorInfo) (:by-value :irrstring)
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_setAmbientLight" IVideoDriver_setAmbientLight) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (color (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_IVideoDriver_setAllowZWriteOnTransparent" IVideoDriver_setAllowZWriteOnTransparent) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (flag :bool))

(cffi:defcfun ("_wrap_IVideoDriver_getMaxTextureSize" IVideoDriver_getMaxTextureSize) (:by-value "dimension2du")
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_IVideoDriver_convertColor" IVideoDriver_convertColor) :void
  (self (:pointer "irr::video::IVideoDriver *"))
  (sP (:pointer "void *"))
  (sF :enum)
  (sN :int)
  (dP (:pointer "void *"))
  (dF :enum))

(cffi:defcfun ("_wrap_delete_IVideoDriver" delete_IVideoDriver) :void
  (self (:pointer "irr::video::IVideoDriver *")))

(cffi:defcenum eQ3MeshIndex
	(:E_Q3_MESH_GEOMETRY 0)
	:E_Q3_MESH_ITEMS
	:E_Q3_MESH_BILLBOARD
	:E_Q3_MESH_FOG
	:E_Q3_MESH_UNRESOLVED
	:E_Q3_MESH_SIZE)

(cffi:defcstruct Q3LevelLoadParameter
	(defaultLightMapMaterial :enum)
	(defaultModulate :enum)
	(defaultFilter :enum)
	(patchTesselation :int)
	(verbose :int)
	(startTime :uint)
	(endTime :uint)
	(mergeShaderBuffer :int)
	(cleanUnResolvedMeshes :int)
	(loadAllShaders :int)
	(loadSkyShader :int)
	(alpharef :int)
	(swapLump :int)
	(swapHeader :int)
	(scriptDir (:pointer "irr::c8 *")))

(cffi:defcfun ("_wrap_isEqual" isEqual) :short
  (string (:reference :irrstring))
  (pos (:pointer "irr::u32 *"))
  (list (:pointer "irr::c8 **"))
  (listSize :ushort))

(cffi:defcfun ("_wrap_getAsFloat" getAsFloat) :float
  (string (:reference :irrstring))
  (pos (:pointer "irr::u32 *")))

(cffi:defcfun ("_wrap_getAsVector3df" getAsVector3df) (:by-value "vector3df")
  (string (:reference :irrstring))
  (pos (:pointer "irr::u32 *")))

(cffi:defcfun ("_wrap_getAsStringList" getAsStringList) :void
  (list (:pointer "tStringList"))
  (max :int)
  (string (:reference :irrstring))
  (startPos (:pointer "irr::u32 *")))

(cffi:defcstruct SBlendFunc
	(type :enum)
	(modulate :enum)
	(param0 :float)
	(isTransparent :uint))

(cffi:defcfun ("_wrap_getCullingFunction" getCullingFunction) :bool
  (cull (:reference :irrstring)))

(cffi:defcfun ("_wrap_getDepthFunction" getDepthFunction) :uchar
  (string (:reference :irrstring)))

(cffi:defcfun ("_wrap_getBlendFunc" getBlendFunc) :void
  (string (:reference :irrstring))
  (blendfunc (:pointer "irr::scene::quake3::SBlendFunc *")))

(cffi:defcstruct Noiser
	(get (:pointer "irr::f32 ()")))

(cffi:defcenum eQ3ModifierFunction
	(:TCMOD 0)
	(:DEFORMVERTEXES 1)
	(:RGBGEN 2)
	(:TCGEN 3)
	(:MAP 4)
	(:ALPHAGEN 5)
	(:FUNCTION2 #x10)
	(:SCROLL (cl:+ FUNCTION2 1))
	(:SCALE (cl:+ FUNCTION2 2))
	(:ROTATE (cl:+ FUNCTION2 3))
	(:STRETCH (cl:+ FUNCTION2 4))
	(:TURBULENCE (cl:+ FUNCTION2 5))
	(:WAVE (cl:+ FUNCTION2 6))
	(:IDENTITY (cl:+ FUNCTION2 7))
	(:VERTEX (cl:+ FUNCTION2 8))
	(:TEXTURE (cl:+ FUNCTION2 9))
	(:LIGHTMAP (cl:+ FUNCTION2 10))
	(:ENVIRONMENT (cl:+ FUNCTION2 11))
	(:DOLLAR_LIGHTMAP (cl:+ FUNCTION2 12))
	(:BULGE (cl:+ FUNCTION2 13))
	(:AUTOSPRITE (cl:+ FUNCTION2 14))
	(:AUTOSPRITE2 (cl:+ FUNCTION2 15))
	(:TRANSFORM (cl:+ FUNCTION2 16))
	(:EXACTVERTEX (cl:+ FUNCTION2 17))
	(:CONSTANT (cl:+ FUNCTION2 18))
	(:LIGHTINGSPECULAR (cl:+ FUNCTION2 19))
	(:MOVE (cl:+ FUNCTION2 20))
	(:NORMAL (cl:+ FUNCTION2 21))
	(:IDENTITYLIGHTING (cl:+ FUNCTION2 22))
	(:WAVE_MODIFIER_FUNCTION #x30)
	(:SINUS (cl:+ WAVE_MODIFIER_FUNCTION 1))
	(:COSINUS (cl:+ WAVE_MODIFIER_FUNCTION 2))
	(:SQUARE (cl:+ WAVE_MODIFIER_FUNCTION 3))
	(:TRIANGLE (cl:+ WAVE_MODIFIER_FUNCTION 4))
	(:SAWTOOTH (cl:+ WAVE_MODIFIER_FUNCTION 5))
	(:SAWTOOTH_INVERSE (cl:+ WAVE_MODIFIER_FUNCTION 6))
	(:NOISE (cl:+ WAVE_MODIFIER_FUNCTION 7))
	(:UNKNOWN -2))

(cffi:defcstruct SModifierFunction
	(masterfunc0 :enum)
	(masterfunc1 :enum)
	(func :enum)
	(tcgen :enum)
	(rgbgen :enum)
	(alphagen :enum)
	(phase :float)
	(x :float)
	(y :float)
	(z :float)
	(count :uint)
	(evaluate (:pointer "irr::f32 (irr::f32)")))

(cffi:defcfun ("_wrap_getMD3Normal" getMD3Normal) (:by-value "vector3df")
  (i :uint)
  (j :uint))

(cffi:defcfun ("_wrap_getModifierFunc" getModifierFunc) :void
  (fill (:pointer "irr::scene::quake3::SModifierFunction *"))
  (string (:reference :irrstring))
  (pos (:pointer "irr::u32 *")))

(cffi:defcstruct SVariable
	(name (:by-value :irrstring))
	(content (:by-value :irrstring))
	(clear (:pointer "void ()"))
	(isValid (:pointer "irr::s32 ()"))
	(__eq__ (:pointer "bool (irr::scene::quake3::SVariable const &)"))
	(__lt__ (:pointer "bool (irr::scene::quake3::SVariable const &)")))

(cffi:defcstruct SVarGroup
	(isDefined (:pointer "irr::u32 (irr::c8 const *,irr::c8 const *)"))
	(isDefined (:pointer "irr::u32 (irr::c8 const *)"))
	(get (:pointer "irr::core::stringc &(irr::c8 const *)"))
	(set (:pointer "void (irr::c8 const *,irr::c8 const *)"))
	(set (:pointer "void (irr::c8 const *)"))
	(Variable (:pointer "irr::core::array< irr::scene::quake3::SVariable,irr::core::irrAllocator< irr::scene::quake3::SVariable > >")))

(cffi:defcstruct SVarGroupList
	(VariableGroup (:pointer "irr::core::array< irr::scene::quake3::SVarGroup,irr::core::irrAllocator< irr::scene::quake3::SVarGroup > >")))

(cffi:defcstruct IShader
	(__assign__ (:pointer "void (irr::scene::quake3::IShader const &)"))
	(__eq__ (:pointer "bool (irr::scene::quake3::IShader const &)"))
	(__lt__ (:pointer "bool (irr::scene::quake3::IShader const &)"))
	(getGroupSize (:pointer "irr::u32 ()"))
	(getGroup (:pointer "irr::scene::quake3::SVarGroup *(irr::u32)"))
	(ID :int)
	(VarGroup (:pointer "irr::scene::quake3::SVarGroupList *"))
	(name (:by-value :irrstring)))

(cffi:defcfun ("_wrap_dumpVarGroup" dumpVarGroup) :void
  (dest (:reference :irrstring))
  (group (:pointer "irr::scene::quake3::SVarGroup *"))
  (stack :int))

(cffi:defcfun ("_wrap_dumpShader__SWIG_0" dumpShader) (:reference :irrstring)
  (dest (:reference :irrstring))
  (shader (:pointer "irr::scene::quake3::IShader *"))
  (entity :bool))

(cffi:defcfun ("_wrap_dumpShader__SWIG_1" dumpShader) (:reference :irrstring)
  (dest (:reference :irrstring))
  (shader (:pointer "irr::scene::quake3::IShader *")))

(cffi:defcfun ("_wrap_getTextures" getTextures) :void
  (textures (:pointer "tTexArray"))
  (name (:reference :irrstring))
  (startPos (:pointer "irr::u32 *"))
  (fileSystem (:pointer "irr::io::IFileSystem *"))
  (driver (:pointer "irr::video::IVideoDriver *")))

(cffi:defcfun ("_wrap_new_IShaderManager" new_IShaderManager) (:pointer "irr::scene::quake3::IShaderManager *"))

(cffi:defcfun ("_wrap_delete_IShaderManager" delete_IShaderManager) :void
  (self (:pointer "irr::scene::quake3::IShaderManager *")))

(cl:defconstant IRR_TEST_BROKEN_QUATERNION_USE 0)

(cffi:defcfun ("_wrap_new_quaternion__SWIG_0" new_quaternion) (:pointer "irr::core::quaternion *"))

(cffi:defcfun ("_wrap_new_quaternion__SWIG_1" new_quaternion) (:pointer "irr::core::quaternion *")
  (x :float)
  (y :float)
  (z :float)
  (w :float))

(cffi:defcfun ("_wrap_new_quaternion__SWIG_2" new_quaternion) (:pointer "irr::core::quaternion *")
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("_wrap_new_quaternion__SWIG_3" new_quaternion) (:pointer "irr::core::quaternion *")
  (vec (:pointer "vector3df")))

(cffi:defcfun ("_wrap_new_quaternion__SWIG_4" new_quaternion) (:pointer "irr::core::quaternion *")
  (mat (:pointer "matrix4")))

(cffi:defcfun ("_wrap_quaternion___eq__" quaternion___eq__) :bool
  (self (:pointer "irr::core::quaternion *"))
  (other (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion___ne__" quaternion___ne__) :bool
  (self (:pointer "irr::core::quaternion *"))
  (other (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion___assign____SWIG_0" quaternion___assign__) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (other (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion___assign____SWIG_1" quaternion___assign__) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_quaternion___add__" quaternion___add__) (:by-value "irr::core::quaternion")
  (self (:pointer "irr::core::quaternion *"))
  (other (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion___mul____SWIG_0" quaternion___mul__) (:by-value "irr::core::quaternion")
  (self (:pointer "irr::core::quaternion *"))
  (other (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion___mul____SWIG_1" quaternion___mul__) (:by-value "irr::core::quaternion")
  (self (:pointer "irr::core::quaternion *"))
  (s :float))

(cffi:defcfun ("_wrap_quaternion___mul_assign____SWIG_0" quaternion___mul_assign__) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (s :float))

(cffi:defcfun ("_wrap_quaternion___mul____SWIG_2" quaternion___mul__) (:by-value "vector3df")
  (self (:pointer "irr::core::quaternion *"))
  (v (:pointer "vector3df")))

(cffi:defcfun ("_wrap_quaternion___mul_assign____SWIG_1" quaternion___mul_assign__) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (other (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion_dotProduct" quaternion_dotProduct) :float
  (self (:pointer "irr::core::quaternion *"))
  (other (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion_set__SWIG_0" quaternion_set) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (x :float)
  (y :float)
  (z :float)
  (w :float))

(cffi:defcfun ("_wrap_quaternion_set__SWIG_1" quaternion_set) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("_wrap_quaternion_set__SWIG_2" quaternion_set) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (vec (:pointer "vector3df")))

(cffi:defcfun ("_wrap_quaternion_set__SWIG_3" quaternion_set) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (quat (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion_equals__SWIG_0" quaternion_equals) :bool
  (self (:pointer "irr::core::quaternion *"))
  (other (:pointer "irr::core::quaternion *"))
  (tolerance :float))

(cffi:defcfun ("_wrap_quaternion_equals__SWIG_1" quaternion_equals) :bool
  (self (:pointer "irr::core::quaternion *"))
  (other (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion_normalize" quaternion_normalize) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion_getMatrix__SWIG_0" quaternion_getMatrix) (:by-value "matrix4")
  (self (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion_getMatrix__SWIG_1" quaternion_getMatrix) :void
  (self (:pointer "irr::core::quaternion *"))
  (dest (:pointer "matrix4"))
  (translation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_quaternion_getMatrix__SWIG_2" quaternion_getMatrix) :void
  (self (:pointer "irr::core::quaternion *"))
  (dest (:pointer "matrix4")))

(cffi:defcfun ("_wrap_quaternion_getMatrixCenter" quaternion_getMatrixCenter) :void
  (self (:pointer "irr::core::quaternion *"))
  (dest (:pointer "matrix4"))
  (center (:pointer "vector3df"))
  (translation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_quaternion_getMatrix_transposed" quaternion_getMatrix_transposed) :void
  (self (:pointer "irr::core::quaternion *"))
  (dest (:pointer "matrix4")))

(cffi:defcfun ("_wrap_quaternion_makeInverse" quaternion_makeInverse) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion_lerp" quaternion_lerp) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (q1 (:pointer "irr::core::quaternion"))
  (q2 (:pointer "irr::core::quaternion"))
  (time :float))

(cffi:defcfun ("_wrap_quaternion_slerp__SWIG_0" quaternion_slerp) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (q1 (:pointer "irr::core::quaternion"))
  (q2 (:pointer "irr::core::quaternion"))
  (time :float)
  (threshold :float))

(cffi:defcfun ("_wrap_quaternion_slerp__SWIG_1" quaternion_slerp) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (q1 (:pointer "irr::core::quaternion"))
  (q2 (:pointer "irr::core::quaternion"))
  (time :float))

(cffi:defcfun ("_wrap_quaternion_fromAngleAxis" quaternion_fromAngleAxis) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (angle :float)
  (axis (:pointer "vector3df")))

(cffi:defcfun ("_wrap_quaternion_toAngleAxis" quaternion_toAngleAxis) :void
  (self (:pointer "irr::core::quaternion *"))
  (angle (:pointer "irr::f32 *"))
  (axis (:pointer "vector3df")))

(cffi:defcfun ("_wrap_quaternion_toEuler" quaternion_toEuler) :void
  (self (:pointer "irr::core::quaternion *"))
  (euler (:pointer "vector3df")))

(cffi:defcfun ("_wrap_quaternion_makeIdentity" quaternion_makeIdentity) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion_rotationFromTo" quaternion_rotationFromTo) (:reference "irr::core::quaternion *")
  (self (:pointer "irr::core::quaternion *"))
  (from (:pointer "vector3df"))
  (to (:pointer "vector3df")))

(cffi:defcfun ("_wrap_quaternion_X_set" quaternion_X_set) :void
  (self (:pointer "irr::core::quaternion *"))
  (X :float))

(cffi:defcfun ("_wrap_quaternion_X_get" quaternion_X_get) :float
  (self (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion_Y_set" quaternion_Y_set) :void
  (self (:pointer "irr::core::quaternion *"))
  (Y :float))

(cffi:defcfun ("_wrap_quaternion_Y_get" quaternion_Y_get) :float
  (self (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion_Z_set" quaternion_Z_set) :void
  (self (:pointer "irr::core::quaternion *"))
  (Z :float))

(cffi:defcfun ("_wrap_quaternion_Z_get" quaternion_Z_get) :float
  (self (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_quaternion_W_set" quaternion_W_set) :void
  (self (:pointer "irr::core::quaternion *"))
  (W :float))

(cffi:defcfun ("_wrap_quaternion_W_get" quaternion_W_get) :float
  (self (:pointer "irr::core::quaternion *")))

(cffi:defcfun ("_wrap_delete_quaternion" delete_quaternion) :void
  (self (:pointer "irr::core::quaternion *")))

(cffi:defcenum eMD3Models
	(:EMD3_HEAD 0)
	:EMD3_UPPER
	:EMD3_LOWER
	:EMD3_WEAPON
	:EMD3_NUMMODELS)

(cffi:defcenum EMD3_ANIMATION_TYPE
	(:EMD3_BOTH_DEATH_1 0)
	:EMD3_BOTH_DEAD_1
	:EMD3_BOTH_DEATH_2
	:EMD3_BOTH_DEAD_2
	:EMD3_BOTH_DEATH_3
	:EMD3_BOTH_DEAD_3
	:EMD3_TORSO_GESTURE
	:EMD3_TORSO_ATTACK_1
	:EMD3_TORSO_ATTACK_2
	:EMD3_TORSO_DROP
	:EMD3_TORSO_RAISE
	:EMD3_TORSO_STAND_1
	:EMD3_TORSO_STAND_2
	:EMD3_LEGS_WALK_CROUCH
	:EMD3_LEGS_WALK
	:EMD3_LEGS_RUN
	:EMD3_LEGS_BACK
	:EMD3_LEGS_SWIM
	:EMD3_LEGS_JUMP_1
	:EMD3_LEGS_LAND_1
	:EMD3_LEGS_JUMP_2
	:EMD3_LEGS_LAND_2
	:EMD3_LEGS_IDLE
	:EMD3_LEGS_IDLE_CROUCH
	:EMD3_LEGS_TURN
	:EMD3_ANIMATION_COUNT)

(cffi:defcstruct SMD3AnimationInfo
	(first :int)
	(num :int)
	(looping :int)
	(fps :int))

(cffi:defcstruct SMD3Header
	(headerID (:pointer "irr::c8 *"))
	(Version :int)
	(fileName (:pointer "irr::s8 *"))
	(numFrames :int)
	(numTags :int)
	(numMeshes :int)
	(numMaxSkins :int)
	(frameStart :int)
	(tagStart :int)
	(tagEnd :int)
	(fileSize :int))

(cffi:defcstruct SMD3MeshHeader
	(meshID (:pointer "irr::c8 *"))
	(meshName (:pointer "irr::c8 *"))
	(numFrames :int)
	(numShader :int)
	(numVertices :int)
	(numTriangles :int)
	(offset_triangles :int)
	(offset_shaders :int)
	(offset_st :int)
	(vertexStart :int)
	(offset_end :int))

(cffi:defcstruct SMD3Vertex
	(position (:pointer "irr::s16 *"))
	(normal (:pointer "irr::u8 *")))

(cffi:defcstruct SMD3TexCoord
	(u :float)
	(v :float))

(cffi:defcstruct SMD3Face
	(Index (:pointer "irr::s32 *")))

(cffi:defcstruct SMD3MeshBuffer
	(MeshHeader (:pointer "irr::scene::SMD3MeshHeader"))
	(Shader (:by-value :irrstring))
	(Indices (:pointer "irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > >"))
	(Vertices (:pointer "irr::core::array< irr::scene::SMD3Vertex,irr::core::irrAllocator< irr::scene::SMD3Vertex > >"))
	(Tex (:pointer "irr::core::array< irr::scene::SMD3TexCoord,irr::core::irrAllocator< irr::scene::SMD3TexCoord > >")))

(cffi:defcstruct SMD3QuaternionTag
	(setto (:pointer "void (irr::core::matrix4 &)"))
	(__eq__ (:pointer "bool (irr::scene::SMD3QuaternionTag const &)"))
	(__assign__ (:pointer "irr::scene::SMD3QuaternionTag &(irr::scene::SMD3QuaternionTag const &)"))
	(Name (:by-value :irrstring))
	(position (:pointer "vector3df"))
	(rotation (:pointer "irr::core::quaternion")))

(cffi:defcstruct SMD3QuaternionTagList
	(get (:pointer "irr::scene::SMD3QuaternionTag *(irr::core::stringc const &)"))
	(size (:pointer "irr::u32 ()"))
	(set_used (:pointer "void (irr::u32)"))
	(__aref__ (:pointer "irr::scene::SMD3QuaternionTag &(irr::u32)"))
	(__aref__ (:pointer "irr::scene::SMD3QuaternionTag &(irr::u32)"))
	(push_back (:pointer "void (irr::scene::SMD3QuaternionTag const &)"))
	(__assign__ (:pointer "irr::scene::SMD3QuaternionTagList &(irr::scene::SMD3QuaternionTagList const &)"))
	( (:pointer "irr::core::array< irr::scene::SMD3QuaternionTag,irr::core::irrAllocator< irr::scene::SMD3QuaternionTag > >")))

(cffi:defcstruct SMD3Mesh
	(Name (:by-value :irrstring))
	(Buffer (:pointer "irr::core::array< irr::scene::SMD3MeshBuffer *,irr::core::irrAllocator< irr::scene::SMD3MeshBuffer * > >"))
	(TagList (:pointer "irr::scene::SMD3QuaternionTagList"))
	(MD3Header (:pointer "irr::scene::SMD3Header")))

(cffi:defcfun ("_wrap_IAnimatedMeshMD3_setInterpolationShift" IAnimatedMeshMD3_setInterpolationShift) :void
  (self (:pointer "irr::scene::IAnimatedMeshMD3 *"))
  (shift :uint)
  (loopMode :uint))

(cffi:defcfun ("_wrap_IAnimatedMeshMD3_getTagList" IAnimatedMeshMD3_getTagList) (:pointer "irr::scene::SMD3QuaternionTagList *")
  (self (:pointer "irr::scene::IAnimatedMeshMD3 *"))
  (frame :int)
  (detailLevel :int)
  (startFrameLoop :int)
  (endFrameLoop :int))

(cffi:defcfun ("_wrap_IAnimatedMeshMD3_getOriginalMesh" IAnimatedMeshMD3_getOriginalMesh) (:pointer "irr::scene::SMD3Mesh *")
  (self (:pointer "irr::scene::IAnimatedMeshMD3 *")))

(cffi:defcfun ("_wrap_delete_IAnimatedMeshMD3" delete_IAnimatedMeshMD3) :void
  (self (:pointer "irr::scene::IAnimatedMeshMD3 *")))

(cffi:defcenum E_ATTRIBUTE_READ_WRITE_FLAGS
	(:EARWF_FOR_FILE #x00000001)
	(:EARWF_FOR_EDITOR #x00000002)
	(:EARWF_USE_RELATIVE_PATHS #x00000004))

(cffi:defcstruct SAttributeReadWriteOptions
	(Flags :int)
	(Filename :string))

(cffi:defcfun ("_wrap_IAttributeExchangingObject_serializeAttributes__SWIG_0" IAttributeExchangingObject_serializeAttributes) :void
  (self (:pointer "irr::io::IAttributeExchangingObject *"))
  (out (:pointer "irr::io::IAttributes *"))
  (options (:pointer "irr::io::SAttributeReadWriteOptions *")))

(cffi:defcfun ("_wrap_IAttributeExchangingObject_serializeAttributes__SWIG_1" IAttributeExchangingObject_serializeAttributes) :void
  (self (:pointer "irr::io::IAttributeExchangingObject *"))
  (out (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_IAttributeExchangingObject_deserializeAttributes__SWIG_0" IAttributeExchangingObject_deserializeAttributes) :void
  (self (:pointer "irr::io::IAttributeExchangingObject *"))
  (in (:pointer "irr::io::IAttributes *"))
  (options (:pointer "irr::io::SAttributeReadWriteOptions *")))

(cffi:defcfun ("_wrap_IAttributeExchangingObject_deserializeAttributes__SWIG_1" IAttributeExchangingObject_deserializeAttributes) :void
  (self (:pointer "irr::io::IAttributeExchangingObject *"))
  (in (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_new_IAttributeExchangingObject" new_IAttributeExchangingObject) (:pointer "irr::io::IAttributeExchangingObject *"))

(cffi:defcfun ("_wrap_delete_IAttributeExchangingObject" delete_IAttributeExchangingObject) :void
  (self (:pointer "irr::io::IAttributeExchangingObject *")))

(cffi:defcenum ELOG_LEVEL
	:ELL_DEBUG
	:ELL_INFORMATION
	:ELL_WARNING
	:ELL_ERROR
	:ELL_NONE)

(cffi:defcfun ("_wrap_delete_ILogger" delete_ILogger) :void
  (self (:pointer "irr::ILogger *")))

(cffi:defcfun ("_wrap_ILogger_getLogLevel" ILogger_getLogLevel) :enum
  (self (:pointer "irr::ILogger *")))

(cffi:defcfun ("_wrap_ILogger_setLogLevel" ILogger_setLogLevel) :void
  (self (:pointer "irr::ILogger *"))
  (ll :enum))

(cffi:defcfun ("_wrap_ILogger_log__SWIG_0" ILogger_log) :void
  (self (:pointer "irr::ILogger *"))
  (text :string)
  (ll :enum))

(cffi:defcfun ("_wrap_ILogger_log__SWIG_1" ILogger_log) :void
  (self (:pointer "irr::ILogger *"))
  (text :string))

(cffi:defcfun ("_wrap_ILogger_log__SWIG_2" ILogger_log) :void
  (self (:pointer "irr::ILogger *"))
  (text :string)
  (hint :string)
  (ll :enum))

(cffi:defcfun ("_wrap_ILogger_log__SWIG_3" ILogger_log) :void
  (self (:pointer "irr::ILogger *"))
  (text :string)
  (hint :string))

(cffi:defcfun ("_wrap_ILogger_log__SWIG_4" ILogger_log) :void
  (self (:pointer "irr::ILogger *"))
  (text :string)
  (hint :w-string)
  (ll :enum))

(cffi:defcfun ("_wrap_ILogger_log__SWIG_5" ILogger_log) :void
  (self (:pointer "irr::ILogger *"))
  (text :string)
  (hint :w-string))

(cffi:defcfun ("_wrap_ILogger_log__SWIG_6" ILogger_log) :void
  (self (:pointer "irr::ILogger *"))
  (text :w-string)
  (hint :w-string)
  (ll :enum))

(cffi:defcfun ("_wrap_ILogger_log__SWIG_7" ILogger_log) :void
  (self (:pointer "irr::ILogger *"))
  (text :w-string)
  (hint :w-string))

(cffi:defcfun ("_wrap_ILogger_log__SWIG_8" ILogger_log) :void
  (self (:pointer "irr::ILogger *"))
  (text :w-string)
  (ll :enum))

(cffi:defcfun ("_wrap_ILogger_log__SWIG_9" ILogger_log) :void
  (self (:pointer "irr::ILogger *"))
  (text :w-string))

(cffi:defcenum EKEY_CODE
	(:KEY_LBUTTON #x01)
	(:KEY_RBUTTON #x02)
	(:KEY_CANCEL #x03)
	(:KEY_MBUTTON #x04)
	(:KEY_XBUTTON1 #x05)
	(:KEY_XBUTTON2 #x06)
	(:KEY_BACK #x08)
	(:KEY_TAB #x09)
	(:KEY_CLEAR #x0C)
	(:KEY_RETURN #x0D)
	(:KEY_SHIFT #x10)
	(:KEY_CONTROL #x11)
	(:KEY_MENU #x12)
	(:KEY_PAUSE #x13)
	(:KEY_CAPITAL #x14)
	(:KEY_KANA #x15)
	(:KEY_HANGUEL #x15)
	(:KEY_HANGUL #x15)
	(:KEY_JUNJA #x17)
	(:KEY_FINAL #x18)
	(:KEY_HANJA #x19)
	(:KEY_KANJI #x19)
	(:KEY_ESCAPE #x1B)
	(:KEY_CONVERT #x1C)
	(:KEY_NONCONVERT #x1D)
	(:KEY_ACCEPT #x1E)
	(:KEY_MODECHANGE #x1F)
	(:KEY_SPACE #x20)
	(:KEY_PRIOR #x21)
	(:KEY_NEXT #x22)
	(:KEY_END #x23)
	(:KEY_HOME #x24)
	(:KEY_LEFT #x25)
	(:KEY_UP #x26)
	(:KEY_RIGHT #x27)
	(:KEY_DOWN #x28)
	(:KEY_SELECT #x29)
	(:KEY_PRINT #x2A)
	(:KEY_EXECUT #x2B)
	(:KEY_SNAPSHOT #x2C)
	(:KEY_INSERT #x2D)
	(:KEY_DELETE #x2E)
	(:KEY_HELP #x2F)
	(:KEY_KEY_0 #x30)
	(:KEY_KEY_1 #x31)
	(:KEY_KEY_2 #x32)
	(:KEY_KEY_3 #x33)
	(:KEY_KEY_4 #x34)
	(:KEY_KEY_5 #x35)
	(:KEY_KEY_6 #x36)
	(:KEY_KEY_7 #x37)
	(:KEY_KEY_8 #x38)
	(:KEY_KEY_9 #x39)
	(:KEY_KEY_A #x41)
	(:KEY_KEY_B #x42)
	(:KEY_KEY_C #x43)
	(:KEY_KEY_D #x44)
	(:KEY_KEY_E #x45)
	(:KEY_KEY_F #x46)
	(:KEY_KEY_G #x47)
	(:KEY_KEY_H #x48)
	(:KEY_KEY_I #x49)
	(:KEY_KEY_J #x4A)
	(:KEY_KEY_K #x4B)
	(:KEY_KEY_L #x4C)
	(:KEY_KEY_M #x4D)
	(:KEY_KEY_N #x4E)
	(:KEY_KEY_O #x4F)
	(:KEY_KEY_P #x50)
	(:KEY_KEY_Q #x51)
	(:KEY_KEY_R #x52)
	(:KEY_KEY_S #x53)
	(:KEY_KEY_T #x54)
	(:KEY_KEY_U #x55)
	(:KEY_KEY_V #x56)
	(:KEY_KEY_W #x57)
	(:KEY_KEY_X #x58)
	(:KEY_KEY_Y #x59)
	(:KEY_KEY_Z #x5A)
	(:KEY_LWIN #x5B)
	(:KEY_RWIN #x5C)
	(:KEY_APPS #x5D)
	(:KEY_SLEEP #x5F)
	(:KEY_NUMPAD0 #x60)
	(:KEY_NUMPAD1 #x61)
	(:KEY_NUMPAD2 #x62)
	(:KEY_NUMPAD3 #x63)
	(:KEY_NUMPAD4 #x64)
	(:KEY_NUMPAD5 #x65)
	(:KEY_NUMPAD6 #x66)
	(:KEY_NUMPAD7 #x67)
	(:KEY_NUMPAD8 #x68)
	(:KEY_NUMPAD9 #x69)
	(:KEY_MULTIPLY #x6A)
	(:KEY_ADD #x6B)
	(:KEY_SEPARATOR #x6C)
	(:KEY_SUBTRACT #x6D)
	(:KEY_DECIMAL #x6E)
	(:KEY_DIVIDE #x6F)
	(:KEY_F1 #x70)
	(:KEY_F2 #x71)
	(:KEY_F3 #x72)
	(:KEY_F4 #x73)
	(:KEY_F5 #x74)
	(:KEY_F6 #x75)
	(:KEY_F7 #x76)
	(:KEY_F8 #x77)
	(:KEY_F9 #x78)
	(:KEY_F10 #x79)
	(:KEY_F11 #x7A)
	(:KEY_F12 #x7B)
	(:KEY_F13 #x7C)
	(:KEY_F14 #x7D)
	(:KEY_F15 #x7E)
	(:KEY_F16 #x7F)
	(:KEY_F17 #x80)
	(:KEY_F18 #x81)
	(:KEY_F19 #x82)
	(:KEY_F20 #x83)
	(:KEY_F21 #x84)
	(:KEY_F22 #x85)
	(:KEY_F23 #x86)
	(:KEY_F24 #x87)
	(:KEY_NUMLOCK #x90)
	(:KEY_SCROLL #x91)
	(:KEY_LSHIFT #xA0)
	(:KEY_RSHIFT #xA1)
	(:KEY_LCONTROL #xA2)
	(:KEY_RCONTROL #xA3)
	(:KEY_LMENU #xA4)
	(:KEY_RMENU #xA5)
	(:KEY_OEM_1 #xBA)
	(:KEY_PLUS #xBB)
	(:KEY_COMMA #xBC)
	(:KEY_MINUS #xBD)
	(:KEY_PERIOD #xBE)
	(:KEY_OEM_2 #xBF)
	(:KEY_OEM_3 #xC0)
	(:KEY_OEM_4 #xDB)
	(:KEY_OEM_5 #xDC)
	(:KEY_OEM_6 #xDD)
	(:KEY_OEM_7 #xDE)
	(:KEY_OEM_8 #xDF)
	(:KEY_OEM_AX #xE1)
	(:KEY_OEM_102 #xE2)
	(:KEY_ATTN #xF6)
	(:KEY_CRSEL #xF7)
	(:KEY_EXSEL #xF8)
	(:KEY_EREOF #xF9)
	(:KEY_PLAY #xFA)
	(:KEY_ZOOM #xFB)
	(:KEY_PA1 #xFD)
	(:KEY_OEM_CLEAR #xFE)
	(:KEY_KEY_CODES_COUNT #xFF))

(cffi:defcenum EEVENT_TYPE
	(:EET_GUI_EVENT 0)
	:EET_MOUSE_INPUT_EVENT
	:EET_KEY_INPUT_EVENT
	:EET_JOYSTICK_INPUT_EVENT
	:EET_LOG_TEXT_EVENT
	:EET_USER_EVENT
	(:EGUIET_FORCE_32_BIT #x7fffffff))

(cffi:defcenum EMOUSE_INPUT_EVENT
	(:EMIE_LMOUSE_PRESSED_DOWN 0)
	:EMIE_RMOUSE_PRESSED_DOWN
	:EMIE_MMOUSE_PRESSED_DOWN
	:EMIE_LMOUSE_LEFT_UP
	:EMIE_RMOUSE_LEFT_UP
	:EMIE_MMOUSE_LEFT_UP
	:EMIE_MOUSE_MOVED
	:EMIE_MOUSE_WHEEL
	:EMIE_LMOUSE_DOUBLE_CLICK
	:EMIE_RMOUSE_DOUBLE_CLICK
	:EMIE_MMOUSE_DOUBLE_CLICK
	:EMIE_LMOUSE_TRIPLE_CLICK
	:EMIE_RMOUSE_TRIPLE_CLICK
	:EMIE_MMOUSE_TRIPLE_CLICK
	:EMIE_COUNT)

(cffi:defcenum E_MOUSE_BUTTON_STATE_MASK
	(:EMBSM_LEFT #x01)
	(:EMBSM_RIGHT #x02)
	(:EMBSM_MIDDLE #x04)
	(:EMBSM_EXTRA1 #x08)
	(:EMBSM_EXTRA2 #x10)
	(:EMBSM_FORCE_32_BIT #x7fffffff))

(cffi:defcenum EGUI_EVENT_TYPE
	(:EGET_ELEMENT_FOCUS_LOST 0)
	:EGET_ELEMENT_FOCUSED
	:EGET_ELEMENT_HOVERED
	:EGET_ELEMENT_LEFT
	:EGET_ELEMENT_CLOSED
	:EGET_BUTTON_CLICKED
	:EGET_SCROLL_BAR_CHANGED
	:EGET_CHECKBOX_CHANGED
	:EGET_LISTBOX_CHANGED
	:EGET_LISTBOX_SELECTED_AGAIN
	:EGET_FILE_SELECTED
	:EGET_DIRECTORY_SELECTED
	:EGET_FILE_CHOOSE_DIALOG_CANCELLED
	:EGET_MESSAGEBOX_YES
	:EGET_MESSAGEBOX_NO
	:EGET_MESSAGEBOX_OK
	:EGET_MESSAGEBOX_CANCEL
	:EGET_EDITBOX_ENTER
	:EGET_EDITBOX_CHANGED
	:EGET_EDITBOX_MARKING_CHANGED
	:EGET_TAB_CHANGED
	:EGET_MENU_ITEM_SELECTED
	:EGET_COMBO_BOX_CHANGED
	:EGET_SPINBOX_CHANGED
	:EGET_TABLE_CHANGED
	:EGET_TABLE_HEADER_CHANGED
	:EGET_TABLE_SELECTED_AGAIN
	:EGET_TREEVIEW_NODE_DESELECT
	:EGET_TREEVIEW_NODE_SELECT
	:EGET_TREEVIEW_NODE_EXPAND
	:EGET_TREEVIEW_NODE_COLLAPSE
	(:EGET_TREEVIEW_NODE_COLLAPS EGET_TREEVIEW_NODE_COLLAPSE)
	:EGET_COUNT)

(cffi:defcstruct SEvent
	(EventType :enum))

(cffi:defcfun ("_wrap_delete_IEventReceiver" delete_IEventReceiver) :void
  (self (:pointer "irr::IEventReceiver *")))

(cffi:defcfun ("_wrap_IEventReceiver_OnEvent" IEventReceiver_OnEvent) :bool
  (self (:pointer "irr::IEventReceiver *"))
  (event (:pointer "irr::SEvent *")))

(cffi:defcstruct SJoystickInfo
	(Joystick :uchar)
	(Name (:by-value :irrstring))
	(Buttons :uint)
	(Axes :uint)
	(PovHat :enum))

(cffi:defcfun ("_wrap_ISceneNodeAnimator_animateNode" ISceneNodeAnimator_animateNode) :void
  (self (:pointer "irr::scene::ISceneNodeAnimator *"))
  (node (:pointer "irr::scene::ISceneNode *"))
  (timeMs :uint))

(cffi:defcfun ("_wrap_ISceneNodeAnimator_createClone__SWIG_0" ISceneNodeAnimator_createClone) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneNodeAnimator *"))
  (node (:pointer "irr::scene::ISceneNode *"))
  (newManager (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimator_createClone__SWIG_1" ISceneNodeAnimator_createClone) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneNodeAnimator *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimator_isEventReceiverEnabled" ISceneNodeAnimator_isEventReceiverEnabled) :bool
  (self (:pointer "irr::scene::ISceneNodeAnimator *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimator_getType" ISceneNodeAnimator_getType) :enum
  (self (:pointer "irr::scene::ISceneNodeAnimator *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimator_hasFinished" ISceneNodeAnimator_hasFinished) :bool
  (self (:pointer "irr::scene::ISceneNodeAnimator *")))

(cffi:defcfun ("_wrap_delete_ISceneNodeAnimator" delete_ISceneNodeAnimator) :void
  (self (:pointer "irr::scene::ISceneNodeAnimator *")))

(cffi:defcfun ("_wrap_ITriangleSelector_getTriangleCount" ITriangleSelector_getTriangleCount) :int
  (self (:pointer "irr::scene::ITriangleSelector *")))

(cffi:defcfun ("_wrap_ITriangleSelector_getTriangles__SWIG_0" ITriangleSelector_getTriangles) :void
  (self (:pointer "irr::scene::ITriangleSelector *"))
  (triangles (:pointer "triangle3df"))
  (arraySize :int)
  (outTriangleCount (:pointer "irr::s32 *"))
  (transform (:pointer "matrix4")))

(cffi:defcfun ("_wrap_ITriangleSelector_getTriangles__SWIG_1" ITriangleSelector_getTriangles) :void
  (self (:pointer "irr::scene::ITriangleSelector *"))
  (triangles (:pointer "triangle3df"))
  (arraySize :int)
  (outTriangleCount (:pointer "irr::s32 *")))

(cffi:defcfun ("_wrap_ITriangleSelector_getTriangles__SWIG_2" ITriangleSelector_getTriangles) :void
  (self (:pointer "irr::scene::ITriangleSelector *"))
  (triangles (:pointer "triangle3df"))
  (arraySize :int)
  (outTriangleCount (:pointer "irr::s32 *"))
  (box (:pointer "aabbox3df"))
  (transform (:pointer "matrix4")))

(cffi:defcfun ("_wrap_ITriangleSelector_getTriangles__SWIG_3" ITriangleSelector_getTriangles) :void
  (self (:pointer "irr::scene::ITriangleSelector *"))
  (triangles (:pointer "triangle3df"))
  (arraySize :int)
  (outTriangleCount (:pointer "irr::s32 *"))
  (box (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_ITriangleSelector_getTriangles__SWIG_4" ITriangleSelector_getTriangles) :void
  (self (:pointer "irr::scene::ITriangleSelector *"))
  (triangles (:pointer "triangle3df"))
  (arraySize :int)
  (outTriangleCount (:pointer "irr::s32 *"))
  (line (:pointer "line3df"))
  (transform (:pointer "matrix4")))

(cffi:defcfun ("_wrap_ITriangleSelector_getTriangles__SWIG_5" ITriangleSelector_getTriangles) :void
  (self (:pointer "irr::scene::ITriangleSelector *"))
  (triangles (:pointer "triangle3df"))
  (arraySize :int)
  (outTriangleCount (:pointer "irr::s32 *"))
  (line (:pointer "line3df")))

(cffi:defcfun ("_wrap_ITriangleSelector_getSceneNodeForTriangle" ITriangleSelector_getSceneNodeForTriangle) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ITriangleSelector *"))
  (triangleIndex :uint))

(cffi:defcfun ("_wrap_ITriangleSelector_getSelectorCount" ITriangleSelector_getSelectorCount) :uint
  (self (:pointer "irr::scene::ITriangleSelector *")))

(cffi:defcfun ("_wrap_ITriangleSelector_getSelector__SWIG_0" ITriangleSelector_getSelector) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ITriangleSelector *"))
  (index :uint))

(cffi:defcfun ("_wrap_ITriangleSelector_getSelector__SWIG_1" ITriangleSelector_getSelector) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ITriangleSelector *"))
  (index :uint))

(cffi:defcfun ("_wrap_delete_ITriangleSelector" delete_ITriangleSelector) :void
  (self (:pointer "irr::scene::ITriangleSelector *")))

(cffi:defcenum E_ATTRIBUTE_TYPE
	(:EAT_INT 0)
	:EAT_FLOAT
	:EAT_STRING
	:EAT_BOOL
	:EAT_ENUM
	:EAT_COLOR
	:EAT_COLORF
	:EAT_VECTOR3D
	:EAT_POSITION2D
	:EAT_VECTOR2D
	:EAT_RECT
	:EAT_MATRIX
	:EAT_QUATERNION
	:EAT_BBOX
	:EAT_PLANE
	:EAT_TRIANGLE3D
	:EAT_LINE2D
	:EAT_LINE3D
	:EAT_STRINGWARRAY
	:EAT_FLOATARRAY
	:EAT_INTARRAY
	:EAT_BINARY
	:EAT_TEXTURE
	:EAT_USER_POINTER
	:EAT_DIMENSION2D
	:EAT_COUNT
	:EAT_UNKNOWN)

(cffi:defcfun ("_wrap_IAttributes_getAttributeCount" IAttributes_getAttributeCount) :uint
  (self (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeName" IAttributes_getAttributeName) :string
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_getAttributeType__SWIG_0" IAttributes_getAttributeType) :enum
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeType__SWIG_1" IAttributes_getAttributeType) :enum
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_getAttributeTypeString__SWIG_0" IAttributes_getAttributeTypeString) :w-string
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeTypeString__SWIG_1" IAttributes_getAttributeTypeString) :w-string
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_existsAttribute" IAttributes_existsAttribute) :bool
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_findAttribute" IAttributes_findAttribute) :int
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_clear" IAttributes_clear) :void
  (self (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_IAttributes_read__SWIG_0" IAttributes_read) :bool
  (self (:pointer "irr::io::IAttributes *"))
  (reader (:pointer "irr::io::IXMLReader *"))
  (readCurrentElementOnly :bool)
  (elementName :w-string))

(cffi:defcfun ("_wrap_IAttributes_read__SWIG_1" IAttributes_read) :bool
  (self (:pointer "irr::io::IAttributes *"))
  (reader (:pointer "irr::io::IXMLReader *"))
  (readCurrentElementOnly :bool))

(cffi:defcfun ("_wrap_IAttributes_read__SWIG_2" IAttributes_read) :bool
  (self (:pointer "irr::io::IAttributes *"))
  (reader (:pointer "irr::io::IXMLReader *")))

(cffi:defcfun ("_wrap_IAttributes_write__SWIG_0" IAttributes_write) :bool
  (self (:pointer "irr::io::IAttributes *"))
  (writer (:pointer "irr::io::IXMLWriter *"))
  (writeXMLHeader :bool)
  (elementName :w-string))

(cffi:defcfun ("_wrap_IAttributes_write__SWIG_1" IAttributes_write) :bool
  (self (:pointer "irr::io::IAttributes *"))
  (writer (:pointer "irr::io::IXMLWriter *"))
  (writeXMLHeader :bool))

(cffi:defcfun ("_wrap_IAttributes_write__SWIG_2" IAttributes_write) :bool
  (self (:pointer "irr::io::IAttributes *"))
  (writer (:pointer "irr::io::IXMLWriter *")))

(cffi:defcfun ("_wrap_IAttributes_addInt" IAttributes_addInt) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_0" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value :int))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsInt__SWIG_0" IAttributes_getAttributeAsInt) :int
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsInt__SWIG_1" IAttributes_getAttributeAsInt) :int
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_1" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (value :int))

(cffi:defcfun ("_wrap_IAttributes_addFloat" IAttributes_addFloat) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value :float))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_2" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value :float))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsFloat__SWIG_0" IAttributes_getAttributeAsFloat) :float
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsFloat__SWIG_1" IAttributes_getAttributeAsFloat) :float
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_3" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (value :float))

(cffi:defcfun ("_wrap_IAttributes_addString__SWIG_0" IAttributes_addString) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value :string))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_4" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsString__SWIG_0" IAttributes_getAttributeAsString) (:by-value :irrstring)
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsString__SWIG_1" IAttributes_getAttributeAsString) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (target :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsString__SWIG_2" IAttributes_getAttributeAsString) (:by-value :irrstring)
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_5" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (value :string))

(cffi:defcfun ("_wrap_IAttributes_addString__SWIG_1" IAttributes_addString) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value :w-string))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_6" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value :w-string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsStringW__SWIG_0" IAttributes_getAttributeAsStringW) (:by-value :irrstring)
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsStringW__SWIG_1" IAttributes_getAttributeAsStringW) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (target :w-string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsStringW__SWIG_2" IAttributes_getAttributeAsStringW) (:by-value :irrstring)
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_7" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (value :w-string))

(cffi:defcfun ("_wrap_IAttributes_addBinary" IAttributes_addBinary) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (data (:pointer "void *"))
  (dataSizeInBytes :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_8" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (data (:pointer "void *"))
  (dataSizeInBytes :int))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsBinaryData__SWIG_0" IAttributes_getAttributeAsBinaryData) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (outData (:pointer "void *"))
  (maxSizeInBytes :int))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsBinaryData__SWIG_1" IAttributes_getAttributeAsBinaryData) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (outData (:pointer "void *"))
  (maxSizeInBytes :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_9" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (data (:pointer "void *"))
  (dataSizeInBytes :int))

(cffi:defcfun ("_wrap_IAttributes_addArray" IAttributes_addArray) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value (:pointer "irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_10" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value (:pointer "irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsArray__SWIG_0" IAttributes_getAttributeAsArray) (:by-value "irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > >")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsArray__SWIG_1" IAttributes_getAttributeAsArray) (:by-value "irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > >")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_11" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (value (:pointer "irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *")))

(cffi:defcfun ("_wrap_IAttributes_addBool" IAttributes_addBool) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value :bool))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_12" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value :bool))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsBool__SWIG_0" IAttributes_getAttributeAsBool) :bool
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsBool__SWIG_1" IAttributes_getAttributeAsBool) :bool
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_13" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (value :bool))

(cffi:defcfun ("_wrap_IAttributes_addEnum__SWIG_0" IAttributes_addEnum) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (enumValue :string)
  (enumerationLiterals (:pointer "irr::c8 **")))

(cffi:defcfun ("_wrap_IAttributes_addEnum__SWIG_1" IAttributes_addEnum) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (enumValue :int)
  (enumerationLiterals (:pointer "irr::c8 **")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_14" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (enumValue :string)
  (enumerationLiterals (:pointer "irr::c8 **")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsEnumeration__SWIG_0" IAttributes_getAttributeAsEnumeration) :string
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsEnumeration__SWIG_1" IAttributes_getAttributeAsEnumeration) :int
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (enumerationLiteralsToUse (:pointer "irr::c8 **")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsEnumeration__SWIG_2" IAttributes_getAttributeAsEnumeration) :int
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (enumerationLiteralsToUse (:pointer "irr::c8 **")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsEnumeration__SWIG_3" IAttributes_getAttributeAsEnumeration) :string
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_getAttributeEnumerationLiteralsOfEnumeration__SWIG_0" IAttributes_getAttributeEnumerationLiteralsOfEnumeration) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (outLiterals (:pointer "tStringList")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeEnumerationLiteralsOfEnumeration__SWIG_1" IAttributes_getAttributeEnumerationLiteralsOfEnumeration) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (outLiterals (:pointer "tStringList")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_15" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (enumValue :string)
  (enumerationLiterals (:pointer "irr::c8 **")))

(cffi:defcfun ("_wrap_IAttributes_addColor" IAttributes_addColor) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_16" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsColor__SWIG_0" IAttributes_getAttributeAsColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsColor__SWIG_1" IAttributes_getAttributeAsColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_17" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IAttributes_addColorf" IAttributes_addColorf) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value (:pointer "irr::video::SColorf")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_18" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (color (:pointer "irr::video::SColorf")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsColorf__SWIG_0" IAttributes_getAttributeAsColorf) (:by-value "irr::video::SColorf")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsColorf__SWIG_1" IAttributes_getAttributeAsColorf) (:by-value "irr::video::SColorf")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_19" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (color (:pointer "irr::video::SColorf")))

(cffi:defcfun ("_wrap_IAttributes_addVector3d" IAttributes_addVector3d) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_20" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsVector3d__SWIG_0" IAttributes_getAttributeAsVector3d) (:by-value "vector3df")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsVector3d__SWIG_1" IAttributes_getAttributeAsVector3d) (:by-value "vector3df")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_21" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IAttributes_addVector2d" IAttributes_addVector2d) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value (:pointer "vector2df")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_22" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "vector2df")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsVector2d__SWIG_0" IAttributes_getAttributeAsVector2d) (:by-value "vector2df")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsVector2d__SWIG_1" IAttributes_getAttributeAsVector2d) (:by-value "vector2df")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_23" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "vector2df")))

(cffi:defcfun ("_wrap_IAttributes_addPosition2d" IAttributes_addPosition2d) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_24" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsPosition2d__SWIG_0" IAttributes_getAttributeAsPosition2d) (:by-value "vector2di")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsPosition2d__SWIG_1" IAttributes_getAttributeAsPosition2d) (:by-value "vector2di")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_25" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IAttributes_addRect" IAttributes_addRect) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value (:pointer "recti")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_26" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "recti")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsRect__SWIG_0" IAttributes_getAttributeAsRect) (:by-value "recti")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsRect__SWIG_1" IAttributes_getAttributeAsRect) (:by-value "recti")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_27" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "recti")))

(cffi:defcfun ("_wrap_IAttributes_addDimension2d" IAttributes_addDimension2d) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (value (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_28" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsDimension2d__SWIG_0" IAttributes_getAttributeAsDimension2d) (:by-value "dimension2du")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsDimension2d__SWIG_1" IAttributes_getAttributeAsDimension2d) (:by-value "dimension2du")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_29" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IAttributes_addMatrix" IAttributes_addMatrix) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "matrix4")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_30" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "matrix4")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsMatrix__SWIG_0" IAttributes_getAttributeAsMatrix) (:by-value "matrix4")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsMatrix__SWIG_1" IAttributes_getAttributeAsMatrix) (:by-value "matrix4")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_31" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "matrix4")))

(cffi:defcfun ("_wrap_IAttributes_addQuaternion" IAttributes_addQuaternion) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "irr::core::quaternion")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_32" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "irr::core::quaternion")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsQuaternion__SWIG_0" IAttributes_getAttributeAsQuaternion) (:by-value "irr::core::quaternion")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsQuaternion__SWIG_1" IAttributes_getAttributeAsQuaternion) (:by-value "irr::core::quaternion")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_33" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "irr::core::quaternion")))

(cffi:defcfun ("_wrap_IAttributes_addBox3d" IAttributes_addBox3d) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_34" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsBox3d__SWIG_0" IAttributes_getAttributeAsBox3d) (:by-value "aabbox3df")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsBox3d__SWIG_1" IAttributes_getAttributeAsBox3d) (:by-value "aabbox3df")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_35" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_IAttributes_addPlane3d" IAttributes_addPlane3d) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "plane3df")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_36" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "plane3df")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsPlane3d__SWIG_0" IAttributes_getAttributeAsPlane3d) (:by-value "plane3df")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsPlane3d__SWIG_1" IAttributes_getAttributeAsPlane3d) (:by-value "plane3df")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_37" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "plane3df")))

(cffi:defcfun ("_wrap_IAttributes_addTriangle3d" IAttributes_addTriangle3d) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_38" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsTriangle3d__SWIG_0" IAttributes_getAttributeAsTriangle3d) (:by-value "triangle3df")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsTriangle3d__SWIG_1" IAttributes_getAttributeAsTriangle3d) (:by-value "triangle3df")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_39" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_IAttributes_addLine2d" IAttributes_addLine2d) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "line2df")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_40" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "line2df")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsLine2d__SWIG_0" IAttributes_getAttributeAsLine2d) (:by-value "line2df")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsLine2d__SWIG_1" IAttributes_getAttributeAsLine2d) (:by-value "line2df")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_41" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "line2df")))

(cffi:defcfun ("_wrap_IAttributes_addLine3d" IAttributes_addLine3d) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "line3df")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_42" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (v (:pointer "line3df")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsLine3d__SWIG_0" IAttributes_getAttributeAsLine3d) (:by-value "line3df")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsLine3d__SWIG_1" IAttributes_getAttributeAsLine3d) (:by-value "line3df")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_43" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (v (:pointer "line3df")))

(cffi:defcfun ("_wrap_IAttributes_addTexture__SWIG_0" IAttributes_addTexture) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (texture (:pointer "irr::video::ITexture *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IAttributes_addTexture__SWIG_1" IAttributes_addTexture) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_44" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (texture (:pointer "irr::video::ITexture *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_45" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsTexture__SWIG_0" IAttributes_getAttributeAsTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsTexture__SWIG_1" IAttributes_getAttributeAsTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_46" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (texture (:pointer "irr::video::ITexture *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_47" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IAttributes_addUserPointer" IAttributes_addUserPointer) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (userPointer (:pointer "void *")))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_48" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string)
  (userPointer (:pointer "void *")))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsUserPointer__SWIG_0" IAttributes_getAttributeAsUserPointer) (:pointer "void *")
  (self (:pointer "irr::io::IAttributes *"))
  (attributeName :string))

(cffi:defcfun ("_wrap_IAttributes_getAttributeAsUserPointer__SWIG_1" IAttributes_getAttributeAsUserPointer) (:pointer "void *")
  (self (:pointer "irr::io::IAttributes *"))
  (index :int))

(cffi:defcfun ("_wrap_IAttributes_setAttribute__SWIG_49" IAttributes_setAttribute) :void
  (self (:pointer "irr::io::IAttributes *"))
  (index :int)
  (userPointer (:pointer "void *")))

(cffi:defcfun ("_wrap_delete_IAttributes" delete_IAttributes) :void
  (self (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_delete_ISceneNode" delete_ISceneNode) :void
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_OnRegisterSceneNode" ISceneNode_OnRegisterSceneNode) :void
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_OnAnimate" ISceneNode_OnAnimate) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (timeMs :uint))

(cffi:defcfun ("_wrap_ISceneNode_render" ISceneNode_render) :void
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_getName" ISceneNode_getName) :string
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setName__SWIG_0" ISceneNode_setName) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (name :string))

(cffi:defcfun ("_wrap_ISceneNode_setName__SWIG_1" ISceneNode_setName) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (name (:reference :irrstring)))

(cffi:defcfun ("_wrap_ISceneNode_getBoundingBox" ISceneNode_getBoundingBox) (:reference "aabbox3df")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_getTransformedBoundingBox" ISceneNode_getTransformedBoundingBox) (:by-value "aabbox3df")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_getAbsoluteTransformation" ISceneNode_getAbsoluteTransformation) (:reference "matrix4")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_getRelativeTransformation" ISceneNode_getRelativeTransformation) (:by-value "matrix4")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_isVisible" ISceneNode_isVisible) :bool
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_isTrulyVisible" ISceneNode_isTrulyVisible) :bool
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setVisible" ISceneNode_setVisible) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (isVisible :bool))

(cffi:defcfun ("_wrap_ISceneNode_getID" ISceneNode_getID) :int
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setID" ISceneNode_setID) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneNode_addChild" ISceneNode_addChild) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (child (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_removeChild" ISceneNode_removeChild) :bool
  (self (:pointer "irr::scene::ISceneNode *"))
  (child (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_removeAll" ISceneNode_removeAll) :void
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_remove" ISceneNode_remove) :void
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_addAnimator" ISceneNode_addAnimator) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (animator (:pointer "irr::scene::ISceneNodeAnimator *")))

(cffi:defcfun ("_wrap_ISceneNode_getAnimators" ISceneNode_getAnimators) (:reference "ISceneNodeAnimatorList")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_removeAnimator" ISceneNode_removeAnimator) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (animator (:pointer "irr::scene::ISceneNodeAnimator *")))

(cffi:defcfun ("_wrap_ISceneNode_removeAnimators" ISceneNode_removeAnimators) :void
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_getMaterial" ISceneNode_getMaterial) (:reference "irr::video::SMaterial *")
  (self (:pointer "irr::scene::ISceneNode *"))
  (num :uint))

(cffi:defcfun ("_wrap_ISceneNode_getMaterialCount" ISceneNode_getMaterialCount) :uint
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setMaterialFlag" ISceneNode_setMaterialFlag) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (flag :enum)
  (newvalue :bool))

(cffi:defcfun ("_wrap_ISceneNode_setMaterialTexture" ISceneNode_setMaterialTexture) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (textureLayer :uint)
  (texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ISceneNode_setMaterialType" ISceneNode_setMaterialType) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (newType :enum))

(cffi:defcfun ("_wrap_ISceneNode_getScale" ISceneNode_getScale) (:reference "vector3df")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setScale" ISceneNode_setScale) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (scale (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneNode_getRotation" ISceneNode_getRotation) (:reference "vector3df")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setRotation" ISceneNode_setRotation) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneNode_getPosition" ISceneNode_getPosition) (:reference "vector3df")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setPosition" ISceneNode_setPosition) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (newpos (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneNode_getAbsolutePosition" ISceneNode_getAbsolutePosition) (:by-value "vector3df")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setAutomaticCulling" ISceneNode_setAutomaticCulling) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (state :uint))

(cffi:defcfun ("_wrap_ISceneNode_getAutomaticCulling" ISceneNode_getAutomaticCulling) :uint
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setDebugDataVisible" ISceneNode_setDebugDataVisible) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (state :uint))

(cffi:defcfun ("_wrap_ISceneNode_isDebugDataVisible" ISceneNode_isDebugDataVisible) :uint
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setIsDebugObject" ISceneNode_setIsDebugObject) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (debugObject :bool))

(cffi:defcfun ("_wrap_ISceneNode_isDebugObject" ISceneNode_isDebugObject) :bool
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_getChildren" ISceneNode_getChildren) (:reference "ISceneNodeList")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setParent" ISceneNode_setParent) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (newParent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_getTriangleSelector" ISceneNode_getTriangleSelector) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_setTriangleSelector" ISceneNode_setTriangleSelector) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (selector (:pointer "irr::scene::ITriangleSelector *")))

(cffi:defcfun ("_wrap_ISceneNode_updateAbsolutePosition" ISceneNode_updateAbsolutePosition) :void
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_getParent" ISceneNode_getParent) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_getType" ISceneNode_getType) :enum
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_serializeAttributes__SWIG_0" ISceneNode_serializeAttributes) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (out (:pointer "irr::io::IAttributes *"))
  (options (:pointer "irr::io::SAttributeReadWriteOptions *")))

(cffi:defcfun ("_wrap_ISceneNode_serializeAttributes__SWIG_1" ISceneNode_serializeAttributes) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (out (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_ISceneNode_deserializeAttributes__SWIG_0" ISceneNode_deserializeAttributes) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (in (:pointer "irr::io::IAttributes *"))
  (options (:pointer "irr::io::SAttributeReadWriteOptions *")))

(cffi:defcfun ("_wrap_ISceneNode_deserializeAttributes__SWIG_1" ISceneNode_deserializeAttributes) :void
  (self (:pointer "irr::scene::ISceneNode *"))
  (in (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_ISceneNode_clone__SWIG_0" ISceneNode_clone) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneNode *"))
  (newParent (:pointer "irr::scene::ISceneNode *"))
  (newManager (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneNode_clone__SWIG_1" ISceneNode_clone) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneNode *"))
  (newParent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_clone__SWIG_2" ISceneNode_clone) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNode_getSceneManager" ISceneNode_getSceneManager) (:pointer "irr::scene::ISceneManager *")
  (self (:pointer "irr::scene::ISceneNode *")))

(cffi:defcenum E_BONE_ANIMATION_MODE
	(:EBAM_AUTOMATIC 0)
	:EBAM_ANIMATED
	:EBAM_UNANIMATED
	:EBAM_COUNT)

(cffi:defcenum E_BONE_SKINNING_SPACE
	(:EBSS_LOCAL 0)
	:EBSS_GLOBAL
	:EBSS_COUNT)

(cffi:defcvar ("BoneAnimationModeNames" BoneAnimationModeNames)
 (:pointer "irr::c8 **"))

(cffi:defcfun ("_wrap_IBoneSceneNode_getBoneName" IBoneSceneNode_getBoneName) :string
  (self (:pointer "irr::scene::IBoneSceneNode *")))

(cffi:defcfun ("_wrap_IBoneSceneNode_getBoneIndex" IBoneSceneNode_getBoneIndex) :uint
  (self (:pointer "irr::scene::IBoneSceneNode *")))

(cffi:defcfun ("_wrap_IBoneSceneNode_setAnimationMode" IBoneSceneNode_setAnimationMode) :bool
  (self (:pointer "irr::scene::IBoneSceneNode *"))
  (mode :enum))

(cffi:defcfun ("_wrap_IBoneSceneNode_getAnimationMode" IBoneSceneNode_getAnimationMode) :enum
  (self (:pointer "irr::scene::IBoneSceneNode *")))

(cffi:defcfun ("_wrap_IBoneSceneNode_setSkinningSpace" IBoneSceneNode_setSkinningSpace) :void
  (self (:pointer "irr::scene::IBoneSceneNode *"))
  (space :enum))

(cffi:defcfun ("_wrap_IBoneSceneNode_getSkinningSpace" IBoneSceneNode_getSkinningSpace) :enum
  (self (:pointer "irr::scene::IBoneSceneNode *")))

(cffi:defcfun ("_wrap_IBoneSceneNode_updateAbsolutePositionOfAllChildren" IBoneSceneNode_updateAbsolutePositionOfAllChildren) :void
  (self (:pointer "irr::scene::IBoneSceneNode *")))

(cffi:defcfun ("_wrap_IBoneSceneNode_positionHint_set" IBoneSceneNode_positionHint_set) :void
  (self (:pointer "irr::scene::IBoneSceneNode *"))
  (positionHint :int))

(cffi:defcfun ("_wrap_IBoneSceneNode_positionHint_get" IBoneSceneNode_positionHint_get) :int
  (self (:pointer "irr::scene::IBoneSceneNode *")))

(cffi:defcfun ("_wrap_IBoneSceneNode_scaleHint_set" IBoneSceneNode_scaleHint_set) :void
  (self (:pointer "irr::scene::IBoneSceneNode *"))
  (scaleHint :int))

(cffi:defcfun ("_wrap_IBoneSceneNode_scaleHint_get" IBoneSceneNode_scaleHint_get) :int
  (self (:pointer "irr::scene::IBoneSceneNode *")))

(cffi:defcfun ("_wrap_IBoneSceneNode_rotationHint_set" IBoneSceneNode_rotationHint_set) :void
  (self (:pointer "irr::scene::IBoneSceneNode *"))
  (rotationHint :int))

(cffi:defcfun ("_wrap_IBoneSceneNode_rotationHint_get" IBoneSceneNode_rotationHint_get) :int
  (self (:pointer "irr::scene::IBoneSceneNode *")))

(cffi:defcfun ("_wrap_delete_IBoneSceneNode" delete_IBoneSceneNode) :void
  (self (:pointer "irr::scene::IBoneSceneNode *")))

(cffi:defcenum E_JOINT_UPDATE_ON_RENDER
	(:EJUOR_NONE 0)
	:EJUOR_READ
	:EJUOR_CONTROL)

(cffi:defcfun ("_wrap_IAnimationEndCallBack_OnAnimationEnd" IAnimationEndCallBack_OnAnimationEnd) :void
  (self (:pointer "irr::scene::IAnimationEndCallBack *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_delete_IAnimationEndCallBack" delete_IAnimationEndCallBack) :void
  (self (:pointer "irr::scene::IAnimationEndCallBack *")))

(cffi:defcfun ("_wrap_delete_IAnimatedMeshSceneNode" delete_IAnimatedMeshSceneNode) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setCurrentFrame" IAnimatedMeshSceneNode_setCurrentFrame) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (frame :float))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setFrameLoop" IAnimatedMeshSceneNode_setFrameLoop) :bool
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (begin :int)
  (end :int))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setAnimationSpeed" IAnimatedMeshSceneNode_setAnimationSpeed) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (framesPerSecond :float))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_getAnimationSpeed" IAnimatedMeshSceneNode_getAnimationSpeed) :float
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_addShadowVolumeSceneNode__SWIG_0" IAnimatedMeshSceneNode_addShadowVolumeSceneNode) (:pointer "irr::scene::IShadowVolumeSceneNode *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (shadowMesh (:pointer "irr::scene::IMesh *"))
  (id :int)
  (zfailmethod :bool)
  (infinity :float))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_addShadowVolumeSceneNode__SWIG_1" IAnimatedMeshSceneNode_addShadowVolumeSceneNode) (:pointer "irr::scene::IShadowVolumeSceneNode *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (shadowMesh (:pointer "irr::scene::IMesh *"))
  (id :int)
  (zfailmethod :bool))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_addShadowVolumeSceneNode__SWIG_2" IAnimatedMeshSceneNode_addShadowVolumeSceneNode) (:pointer "irr::scene::IShadowVolumeSceneNode *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (shadowMesh (:pointer "irr::scene::IMesh *"))
  (id :int))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_addShadowVolumeSceneNode__SWIG_3" IAnimatedMeshSceneNode_addShadowVolumeSceneNode) (:pointer "irr::scene::IShadowVolumeSceneNode *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (shadowMesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_addShadowVolumeSceneNode__SWIG_4" IAnimatedMeshSceneNode_addShadowVolumeSceneNode) (:pointer "irr::scene::IShadowVolumeSceneNode *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_getJointNode__SWIG_0" IAnimatedMeshSceneNode_getJointNode) (:pointer "irr::scene::IBoneSceneNode *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (jointName :string))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_getJointNode__SWIG_1" IAnimatedMeshSceneNode_getJointNode) (:pointer "irr::scene::IBoneSceneNode *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (jointID :uint))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_getJointCount" IAnimatedMeshSceneNode_getJointCount) :uint
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setMD2Animation__SWIG_0" IAnimatedMeshSceneNode_setMD2Animation) :bool
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (anim :enum))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setMD2Animation__SWIG_1" IAnimatedMeshSceneNode_setMD2Animation) :bool
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (animationName :string))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_getFrameNr" IAnimatedMeshSceneNode_getFrameNr) :float
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_getStartFrame" IAnimatedMeshSceneNode_getStartFrame) :int
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_getEndFrame" IAnimatedMeshSceneNode_getEndFrame) :int
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setLoopMode" IAnimatedMeshSceneNode_setLoopMode) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (playAnimationLooped :bool))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_getLoopMode" IAnimatedMeshSceneNode_getLoopMode) :bool
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setAnimationEndCallback__SWIG_0" IAnimatedMeshSceneNode_setAnimationEndCallback) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (callback (:pointer "irr::scene::IAnimationEndCallBack *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setAnimationEndCallback__SWIG_1" IAnimatedMeshSceneNode_setAnimationEndCallback) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setReadOnlyMaterials" IAnimatedMeshSceneNode_setReadOnlyMaterials) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (readonly :bool))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_isReadOnlyMaterials" IAnimatedMeshSceneNode_isReadOnlyMaterials) :bool
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setMesh" IAnimatedMeshSceneNode_setMesh) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_getMesh" IAnimatedMeshSceneNode_getMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_getMD3TagTransformation" IAnimatedMeshSceneNode_getMD3TagTransformation) (:pointer "irr::scene::SMD3QuaternionTag *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (tagname (:reference :irrstring)))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setJointMode" IAnimatedMeshSceneNode_setJointMode) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (mode :enum))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setTransitionTime" IAnimatedMeshSceneNode_setTransitionTime) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (Time :float))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_animateJoints__SWIG_0" IAnimatedMeshSceneNode_animateJoints) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (CalculateAbsolutePositions :bool))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_animateJoints__SWIG_1" IAnimatedMeshSceneNode_animateJoints) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_setRenderFromIdentity" IAnimatedMeshSceneNode_setRenderFromIdentity) :void
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (On :bool))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_clone__SWIG_0" IAnimatedMeshSceneNode_clone) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (newParent (:pointer "irr::scene::ISceneNode *"))
  (newManager (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_clone__SWIG_1" IAnimatedMeshSceneNode_clone) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (newParent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_IAnimatedMeshSceneNode_clone__SWIG_2" IAnimatedMeshSceneNode_clone) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IBillboardSceneNode_setSize__SWIG_0" IBillboardSceneNode_setSize) :void
  (self (:pointer "irr::scene::IBillboardSceneNode *"))
  (size (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IBillboardSceneNode_setSize__SWIG_1" IBillboardSceneNode_setSize) :void
  (self (:pointer "irr::scene::IBillboardSceneNode *"))
  (height :float)
  (bottomEdgeWidth :float)
  (topEdgeWidth :float))

(cffi:defcfun ("_wrap_IBillboardSceneNode_getSize__SWIG_0" IBillboardSceneNode_getSize) (:reference "dimension2df")
  (self (:pointer "irr::scene::IBillboardSceneNode *")))

(cffi:defcfun ("_wrap_IBillboardSceneNode_getSize__SWIG_1" IBillboardSceneNode_getSize) :void
  (self (:pointer "irr::scene::IBillboardSceneNode *"))
  (height (:pointer "irr::f32 *"))
  (bottomEdgeWidth (:pointer "irr::f32 *"))
  (topEdgeWidth (:pointer "irr::f32 *")))

(cffi:defcfun ("_wrap_IBillboardSceneNode_setColor__SWIG_0" IBillboardSceneNode_setColor) :void
  (self (:pointer "irr::scene::IBillboardSceneNode *"))
  (overallColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IBillboardSceneNode_setColor__SWIG_1" IBillboardSceneNode_setColor) :void
  (self (:pointer "irr::scene::IBillboardSceneNode *"))
  (topColor (:pointer "irr::video::SColor *"))
  (bottomColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IBillboardSceneNode_getColor" IBillboardSceneNode_getColor) :void
  (self (:pointer "irr::scene::IBillboardSceneNode *"))
  (topColor (:pointer "irr::video::SColor *"))
  (bottomColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_delete_IBillboardSceneNode" delete_IBillboardSceneNode) :void
  (self (:pointer "irr::scene::IBillboardSceneNode *")))

(cffi:defcfun ("_wrap_IBillboardTextSceneNode_setColor__SWIG_0" IBillboardTextSceneNode_setColor) :void
  (self (:pointer "irr::scene::IBillboardTextSceneNode *"))
  (overallColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IBillboardTextSceneNode_setColor__SWIG_1" IBillboardTextSceneNode_setColor) :void
  (self (:pointer "irr::scene::IBillboardTextSceneNode *"))
  (topColor (:pointer "irr::video::SColor *"))
  (bottomColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IBillboardTextSceneNode_setText" IBillboardTextSceneNode_setText) :void
  (self (:pointer "irr::scene::IBillboardTextSceneNode *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IBillboardTextSceneNode_setTextColor" IBillboardTextSceneNode_setTextColor) :void
  (self (:pointer "irr::scene::IBillboardTextSceneNode *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_delete_IBillboardTextSceneNode" delete_IBillboardTextSceneNode) :void
  (self (:pointer "irr::scene::IBillboardTextSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_setProjectionMatrix__SWIG_0" ICameraSceneNode_setProjectionMatrix) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (projection (:pointer "matrix4"))
  (isOrthogonal :bool))

(cffi:defcfun ("_wrap_ICameraSceneNode_setProjectionMatrix__SWIG_1" ICameraSceneNode_setProjectionMatrix) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (projection (:pointer "matrix4")))

(cffi:defcfun ("_wrap_ICameraSceneNode_getProjectionMatrix" ICameraSceneNode_getProjectionMatrix) (:reference "matrix4")
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_getViewMatrix" ICameraSceneNode_getViewMatrix) (:reference "matrix4")
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_setViewMatrixAffector" ICameraSceneNode_setViewMatrixAffector) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (affector (:pointer "matrix4")))

(cffi:defcfun ("_wrap_ICameraSceneNode_getViewMatrixAffector" ICameraSceneNode_getViewMatrixAffector) (:reference "matrix4")
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_setTarget" ICameraSceneNode_setTarget) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (pos (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ICameraSceneNode_getTarget" ICameraSceneNode_getTarget) (:reference "vector3df")
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_setUpVector" ICameraSceneNode_setUpVector) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (pos (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ICameraSceneNode_getUpVector" ICameraSceneNode_getUpVector) (:reference "vector3df")
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_getNearValue" ICameraSceneNode_getNearValue) :float
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_getFarValue" ICameraSceneNode_getFarValue) :float
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_getAspectRatio" ICameraSceneNode_getAspectRatio) :float
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_getFOV" ICameraSceneNode_getFOV) :float
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_setNearValue" ICameraSceneNode_setNearValue) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (zn :float))

(cffi:defcfun ("_wrap_ICameraSceneNode_setFarValue" ICameraSceneNode_setFarValue) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (zf :float))

(cffi:defcfun ("_wrap_ICameraSceneNode_setAspectRatio" ICameraSceneNode_setAspectRatio) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (aspect :float))

(cffi:defcfun ("_wrap_ICameraSceneNode_setFOV" ICameraSceneNode_setFOV) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (fovy :float))

(cffi:defcfun ("_wrap_ICameraSceneNode_getViewFrustum" ICameraSceneNode_getViewFrustum) (:pointer "irr::scene::SViewFrustum *")
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_setInputReceiverEnabled" ICameraSceneNode_setInputReceiverEnabled) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (enabled :bool))

(cffi:defcfun ("_wrap_ICameraSceneNode_isInputReceiverEnabled" ICameraSceneNode_isInputReceiverEnabled) :bool
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_isOrthogonal" ICameraSceneNode_isOrthogonal) :bool
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_bindTargetAndRotation" ICameraSceneNode_bindTargetAndRotation) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (bound :bool))

(cffi:defcfun ("_wrap_ICameraSceneNode_getTargetAndRotationBinding" ICameraSceneNode_getTargetAndRotationBinding) :bool
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_serializeAttributes__SWIG_0" ICameraSceneNode_serializeAttributes) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (out (:pointer "irr::io::IAttributes *"))
  (options (:pointer "irr::io::SAttributeReadWriteOptions *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_serializeAttributes__SWIG_1" ICameraSceneNode_serializeAttributes) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (out (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_deserializeAttributes__SWIG_0" ICameraSceneNode_deserializeAttributes) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (in (:pointer "irr::io::IAttributes *"))
  (options (:pointer "irr::io::SAttributeReadWriteOptions *")))

(cffi:defcfun ("_wrap_ICameraSceneNode_deserializeAttributes__SWIG_1" ICameraSceneNode_deserializeAttributes) :void
  (self (:pointer "irr::scene::ICameraSceneNode *"))
  (in (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_delete_ICameraSceneNode" delete_ICameraSceneNode) :void
  (self (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcenum ECURSOR_ICON
	:ECI_NORMAL
	:ECI_CROSS
	:ECI_HAND
	:ECI_HELP
	:ECI_IBEAM
	:ECI_NO
	:ECI_WAIT
	:ECI_SIZEALL
	:ECI_SIZENESW
	:ECI_SIZENWSE
	:ECI_SIZENS
	:ECI_SIZEWE
	:ECI_UP
	:ECI_COUNT)

(cffi:defcvar ("GUICursorIconNames" GUICursorIconNames)
 (:pointer "irr::c8 **"))

(cffi:defcstruct SCursorSprite
	(SpriteBank (:pointer "irr::gui::IGUISpriteBank *"))
	(SpriteId :int)
	(HotSpot (:pointer "vector2di")))

(cffi:defcenum ECURSOR_PLATFORM_BEHAVIOR
	(:ECPB_NONE 0)
	(:ECPB_X11_CACHE_UPDATES 1))

(cffi:defcfun ("_wrap_ICursorControl_setVisible" ICursorControl_setVisible) :void
  (self (:pointer "irr::gui::ICursorControl *"))
  (visible :bool))

(cffi:defcfun ("_wrap_ICursorControl_isVisible" ICursorControl_isVisible) :bool
  (self (:pointer "irr::gui::ICursorControl *")))

(cffi:defcfun ("_wrap_ICursorControl_setPosition__SWIG_0" ICursorControl_setPosition) :void
  (self (:pointer "irr::gui::ICursorControl *"))
  (pos (:pointer "vector2df")))

(cffi:defcfun ("_wrap_ICursorControl_setPosition__SWIG_1" ICursorControl_setPosition) :void
  (self (:pointer "irr::gui::ICursorControl *"))
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_ICursorControl_setPosition__SWIG_2" ICursorControl_setPosition) :void
  (self (:pointer "irr::gui::ICursorControl *"))
  (pos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_ICursorControl_setPosition__SWIG_3" ICursorControl_setPosition) :void
  (self (:pointer "irr::gui::ICursorControl *"))
  (x :int)
  (y :int))

(cffi:defcfun ("_wrap_ICursorControl_getPosition" ICursorControl_getPosition) (:reference "vector2di")
  (self (:pointer "irr::gui::ICursorControl *")))

(cffi:defcfun ("_wrap_ICursorControl_getRelativePosition" ICursorControl_getRelativePosition) (:by-value "vector2df")
  (self (:pointer "irr::gui::ICursorControl *")))

(cffi:defcfun ("_wrap_ICursorControl_setReferenceRect__SWIG_0" ICursorControl_setReferenceRect) :void
  (self (:pointer "irr::gui::ICursorControl *"))
  (rect (:pointer "recti")))

(cffi:defcfun ("_wrap_ICursorControl_setReferenceRect__SWIG_1" ICursorControl_setReferenceRect) :void
  (self (:pointer "irr::gui::ICursorControl *")))

(cffi:defcfun ("_wrap_ICursorControl_setActiveIcon" ICursorControl_setActiveIcon) :void
  (self (:pointer "irr::gui::ICursorControl *"))
  (iconId :enum))

(cffi:defcfun ("_wrap_ICursorControl_getActiveIcon" ICursorControl_getActiveIcon) :enum
  (self (:pointer "irr::gui::ICursorControl *")))

(cffi:defcfun ("_wrap_ICursorControl_addIcon" ICursorControl_addIcon) :enum
  (self (:pointer "irr::gui::ICursorControl *"))
  (icon (:pointer "irr::gui::SCursorSprite *")))

(cffi:defcfun ("_wrap_ICursorControl_changeIcon" ICursorControl_changeIcon) :void
  (self (:pointer "irr::gui::ICursorControl *"))
  (iconId :enum)
  (sprite (:pointer "irr::gui::SCursorSprite *")))

(cffi:defcfun ("_wrap_ICursorControl_getSupportedIconSize" ICursorControl_getSupportedIconSize) (:by-value "dimension2di")
  (self (:pointer "irr::gui::ICursorControl *")))

(cffi:defcfun ("_wrap_ICursorControl_setPlatformBehavior" ICursorControl_setPlatformBehavior) :void
  (self (:pointer "irr::gui::ICursorControl *"))
  (behavior :enum))

(cffi:defcfun ("_wrap_ICursorControl_getPlatformBehavior" ICursorControl_getPlatformBehavior) :enum
  (self (:pointer "irr::gui::ICursorControl *")))

(cffi:defcfun ("_wrap_delete_ICursorControl" delete_ICursorControl) :void
  (self (:pointer "irr::gui::ICursorControl *")))

(cffi:defcfun ("_wrap_IDummyTransformationSceneNode_getRelativeTransformationMatrix" IDummyTransformationSceneNode_getRelativeTransformationMatrix) (:reference "matrix4")
  (self (:pointer "irr::scene::IDummyTransformationSceneNode *")))

(cffi:defcfun ("_wrap_delete_IDummyTransformationSceneNode" delete_IDummyTransformationSceneNode) :void
  (self (:pointer "irr::scene::IDummyTransformationSceneNode *")))

(cffi:defcfun ("_wrap_IGeometryCreator_createCubeMesh__SWIG_0" IGeometryCreator_createCubeMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (size (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IGeometryCreator_createCubeMesh__SWIG_1" IGeometryCreator_createCubeMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *")))

(cffi:defcfun ("_wrap_IGeometryCreator_createHillPlaneMesh" IGeometryCreator_createHillPlaneMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tileSize (:pointer "dimension2df"))
  (tileCount (:pointer "dimension2du"))
  (material (:pointer "irr::video::SMaterial *"))
  (hillHeight :float)
  (countHills (:pointer "dimension2df"))
  (textureRepeatCount (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IGeometryCreator_createPlaneMesh__SWIG_0" IGeometryCreator_createPlaneMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tileSize (:pointer "dimension2df"))
  (tileCount (:pointer "dimension2du"))
  (material (:pointer "irr::video::SMaterial *"))
  (textureRepeatCount (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IGeometryCreator_createPlaneMesh__SWIG_1" IGeometryCreator_createPlaneMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tileSize (:pointer "dimension2df"))
  (tileCount (:pointer "dimension2du"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_IGeometryCreator_createPlaneMesh__SWIG_2" IGeometryCreator_createPlaneMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tileSize (:pointer "dimension2df"))
  (tileCount (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IGeometryCreator_createPlaneMesh__SWIG_3" IGeometryCreator_createPlaneMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tileSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IGeometryCreator_createTerrainMesh__SWIG_0" IGeometryCreator_createTerrainMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (texture (:pointer "irr::video::IImage *"))
  (heightmap (:pointer "irr::video::IImage *"))
  (stretchSize (:pointer "dimension2df"))
  (maxHeight :float)
  (driver (:pointer "irr::video::IVideoDriver *"))
  (defaultVertexBlockSize (:pointer "dimension2du"))
  (debugBorders :bool))

(cffi:defcfun ("_wrap_IGeometryCreator_createTerrainMesh__SWIG_1" IGeometryCreator_createTerrainMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (texture (:pointer "irr::video::IImage *"))
  (heightmap (:pointer "irr::video::IImage *"))
  (stretchSize (:pointer "dimension2df"))
  (maxHeight :float)
  (driver (:pointer "irr::video::IVideoDriver *"))
  (defaultVertexBlockSize (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IGeometryCreator_createArrowMesh__SWIG_0" IGeometryCreator_createArrowMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tesselationCylinder :uint)
  (tesselationCone :uint)
  (height :float)
  (cylinderHeight :float)
  (widthCylinder :float)
  (widthCone :float)
  (colorCylinder (:pointer "irr::video::SColor"))
  (colorCone (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGeometryCreator_createArrowMesh__SWIG_1" IGeometryCreator_createArrowMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tesselationCylinder :uint)
  (tesselationCone :uint)
  (height :float)
  (cylinderHeight :float)
  (widthCylinder :float)
  (widthCone :float)
  (colorCylinder (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGeometryCreator_createArrowMesh__SWIG_2" IGeometryCreator_createArrowMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tesselationCylinder :uint)
  (tesselationCone :uint)
  (height :float)
  (cylinderHeight :float)
  (widthCylinder :float)
  (widthCone :float))

(cffi:defcfun ("_wrap_IGeometryCreator_createArrowMesh__SWIG_3" IGeometryCreator_createArrowMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tesselationCylinder :uint)
  (tesselationCone :uint)
  (height :float)
  (cylinderHeight :float)
  (widthCylinder :float))

(cffi:defcfun ("_wrap_IGeometryCreator_createArrowMesh__SWIG_4" IGeometryCreator_createArrowMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tesselationCylinder :uint)
  (tesselationCone :uint)
  (height :float)
  (cylinderHeight :float))

(cffi:defcfun ("_wrap_IGeometryCreator_createArrowMesh__SWIG_5" IGeometryCreator_createArrowMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tesselationCylinder :uint)
  (tesselationCone :uint)
  (height :float))

(cffi:defcfun ("_wrap_IGeometryCreator_createArrowMesh__SWIG_6" IGeometryCreator_createArrowMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tesselationCylinder :uint)
  (tesselationCone :uint))

(cffi:defcfun ("_wrap_IGeometryCreator_createArrowMesh__SWIG_7" IGeometryCreator_createArrowMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (tesselationCylinder :uint))

(cffi:defcfun ("_wrap_IGeometryCreator_createArrowMesh__SWIG_8" IGeometryCreator_createArrowMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *")))

(cffi:defcfun ("_wrap_IGeometryCreator_createSphereMesh__SWIG_0" IGeometryCreator_createSphereMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (radius :float)
  (polyCountX :uint)
  (polyCountY :uint))

(cffi:defcfun ("_wrap_IGeometryCreator_createSphereMesh__SWIG_1" IGeometryCreator_createSphereMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (radius :float)
  (polyCountX :uint))

(cffi:defcfun ("_wrap_IGeometryCreator_createSphereMesh__SWIG_2" IGeometryCreator_createSphereMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (radius :float))

(cffi:defcfun ("_wrap_IGeometryCreator_createSphereMesh__SWIG_3" IGeometryCreator_createSphereMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *")))

(cffi:defcfun ("_wrap_IGeometryCreator_createCylinderMesh__SWIG_0" IGeometryCreator_createCylinderMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (radius :float)
  (length :float)
  (tesselation :uint)
  (color (:pointer "irr::video::SColor *"))
  (closeTop :bool)
  (oblique :float))

(cffi:defcfun ("_wrap_IGeometryCreator_createCylinderMesh__SWIG_1" IGeometryCreator_createCylinderMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (radius :float)
  (length :float)
  (tesselation :uint)
  (color (:pointer "irr::video::SColor *"))
  (closeTop :bool))

(cffi:defcfun ("_wrap_IGeometryCreator_createCylinderMesh__SWIG_2" IGeometryCreator_createCylinderMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (radius :float)
  (length :float)
  (tesselation :uint)
  (color (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IGeometryCreator_createCylinderMesh__SWIG_3" IGeometryCreator_createCylinderMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (radius :float)
  (length :float)
  (tesselation :uint))

(cffi:defcfun ("_wrap_IGeometryCreator_createConeMesh__SWIG_0" IGeometryCreator_createConeMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (radius :float)
  (length :float)
  (tesselation :uint)
  (colorTop (:pointer "irr::video::SColor *"))
  (colorBottom (:pointer "irr::video::SColor *"))
  (oblique :float))

(cffi:defcfun ("_wrap_IGeometryCreator_createConeMesh__SWIG_1" IGeometryCreator_createConeMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (radius :float)
  (length :float)
  (tesselation :uint)
  (colorTop (:pointer "irr::video::SColor *"))
  (colorBottom (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IGeometryCreator_createConeMesh__SWIG_2" IGeometryCreator_createConeMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (radius :float)
  (length :float)
  (tesselation :uint)
  (colorTop (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IGeometryCreator_createConeMesh__SWIG_3" IGeometryCreator_createConeMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (radius :float)
  (length :float)
  (tesselation :uint))

(cffi:defcfun ("_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_0" IGeometryCreator_createVolumeLightMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (subdivideU :uint)
  (subdivideV :uint)
  (footColor (:pointer "irr::video::SColor"))
  (tailColor (:pointer "irr::video::SColor"))
  (lpDistance :float)
  (lightDim (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_1" IGeometryCreator_createVolumeLightMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (subdivideU :uint)
  (subdivideV :uint)
  (footColor (:pointer "irr::video::SColor"))
  (tailColor (:pointer "irr::video::SColor"))
  (lpDistance :float))

(cffi:defcfun ("_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_2" IGeometryCreator_createVolumeLightMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (subdivideU :uint)
  (subdivideV :uint)
  (footColor (:pointer "irr::video::SColor"))
  (tailColor (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_3" IGeometryCreator_createVolumeLightMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (subdivideU :uint)
  (subdivideV :uint)
  (footColor (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_4" IGeometryCreator_createVolumeLightMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (subdivideU :uint)
  (subdivideV :uint))

(cffi:defcfun ("_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_5" IGeometryCreator_createVolumeLightMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *"))
  (subdivideU :uint))

(cffi:defcfun ("_wrap_IGeometryCreator_createVolumeLightMesh__SWIG_6" IGeometryCreator_createVolumeLightMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IGeometryCreator *")))

(cffi:defcfun ("_wrap_delete_IGeometryCreator" delete_IGeometryCreator) :void
  (self (:pointer "irr::scene::IGeometryCreator *")))

(cffi:defcenum E_VERTEX_SHADER_TYPE
	(:EVST_VS_1_1 0)
	:EVST_VS_2_0
	:EVST_VS_2_a
	:EVST_VS_3_0
	:EVST_VS_4_0
	:EVST_VS_4_1
	:EVST_VS_5_0
	:EVST_COUNT)

(cffi:defcvar ("VERTEX_SHADER_TYPE_NAMES" VERTEX_SHADER_TYPE_NAMES)
 (:pointer "irr::c8 **"))

(cffi:defcenum E_PIXEL_SHADER_TYPE
	(:EPST_PS_1_1 0)
	:EPST_PS_1_2
	:EPST_PS_1_3
	:EPST_PS_1_4
	:EPST_PS_2_0
	:EPST_PS_2_a
	:EPST_PS_2_b
	:EPST_PS_3_0
	:EPST_PS_4_0
	:EPST_PS_4_1
	:EPST_PS_5_0
	:EPST_COUNT)

(cffi:defcvar ("PIXEL_SHADER_TYPE_NAMES" PIXEL_SHADER_TYPE_NAMES)
 (:pointer "irr::c8 **"))

(cffi:defcenum E_GEOMETRY_SHADER_TYPE
	(:EGST_GS_4_0 0)
	:EGST_COUNT)

(cffi:defcvar ("GEOMETRY_SHADER_TYPE_NAMES" GEOMETRY_SHADER_TYPE_NAMES)
 (:pointer "irr::c8 **"))

(cffi:defcenum E_GPU_SHADING_LANGUAGE
	(:EGSL_DEFAULT 0)
	:EGSL_CG)

(cffi:defcfun ("_wrap_delete_IGPUProgrammingServices" delete_IGPUProgrammingServices) :void
  (self (:pointer "irr::video::IGPUProgrammingServices *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_0" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram :string)
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int)
  (shadingLang :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_1" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram :string)
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_2" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram :string)
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_3" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram :string)
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_4" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram :string)
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_5" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram :string)
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_6" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram :string)
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_7" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram :string)
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_8" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram :string)
  (geometryShaderEntryPointName :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_9" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_10" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int)
  (shadingLang :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_11" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_12" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_13" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_14" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_15" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string)
  (pixelShaderEntryPointName :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_16" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_17" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_18" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_19" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_20" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_21" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (geometryShaderProgram :string)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_22" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (geometryShaderProgram :string)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_23" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (geometryShaderProgram :string)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_24" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (geometryShaderProgram :string)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_25" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (geometryShaderProgram :string)
  (inType :enum)
  (outType :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_26" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (geometryShaderProgram :string)
  (inType :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterial__SWIG_27" IGPUProgrammingServices_addHighLevelShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (geometryShaderProgram :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_0" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgramFileName (:pointer "path"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int)
  (shadingLang :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_1" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgramFileName (:pointer "path"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_2" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgramFileName (:pointer "path"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_3" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgramFileName (:pointer "path"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_4" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgramFileName (:pointer "path"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_5" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgramFileName (:pointer "path"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_6" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgramFileName (:pointer "path"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_7" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgramFileName (:pointer "path"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_8" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgramFileName (:pointer "path"))
  (geometryShaderEntryPointName :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_9" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgramFileName (:pointer "path")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_10" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int)
  (shadingLang :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_11" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_12" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_13" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_14" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_15" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path"))
  (pixelShaderEntryPointName :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_16" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgramFileName (:pointer "path")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_17" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_18" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (vertexShaderEntryPointName :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_19" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_20" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_21" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_22" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (geometryShaderProgramFileName (:pointer "path"))
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_23" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (geometryShaderProgramFileName (:pointer "path"))
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_24" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (geometryShaderProgramFileName (:pointer "path"))
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_25" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (geometryShaderProgramFileName (:pointer "path"))
  (inType :enum)
  (outType :enum)
  (verticesOut :uint))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_26" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (geometryShaderProgramFileName (:pointer "path"))
  (inType :enum)
  (outType :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_27" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (geometryShaderProgramFileName (:pointer "path"))
  (inType :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_28" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (geometryShaderProgramFileName (:pointer "path")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_29" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram (:pointer "irr::io::IReadFile *"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int)
  (shadingLang :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_30" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram (:pointer "irr::io::IReadFile *"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_31" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram (:pointer "irr::io::IReadFile *"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_32" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram (:pointer "irr::io::IReadFile *"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_33" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram (:pointer "irr::io::IReadFile *"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum)
  (verticesOut :uint))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_34" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram (:pointer "irr::io::IReadFile *"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum)
  (outType :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_35" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram (:pointer "irr::io::IReadFile *"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum)
  (inType :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_36" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram (:pointer "irr::io::IReadFile *"))
  (geometryShaderEntryPointName :string)
  (gsCompileTarget :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_37" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram (:pointer "irr::io::IReadFile *"))
  (geometryShaderEntryPointName :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_38" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (geometryShaderProgram (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_39" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int)
  (shadingLang :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_40" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_41" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_42" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_43" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string)
  (psCompileTarget :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_44" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderEntryPointName :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_45" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum)
  (pixelShaderProgram (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_46" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string)
  (vsCompileTarget :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_47" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (vertexShaderEntryPointName :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles__SWIG_48" IGPUProgrammingServices_addHighLevelShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_0" IGPUProgrammingServices_addShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_1" IGPUProgrammingServices_addShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_2" IGPUProgrammingServices_addShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string)
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_3" IGPUProgrammingServices_addShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string)
  (pixelShaderProgram :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_4" IGPUProgrammingServices_addShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram :string))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterial__SWIG_5" IGPUProgrammingServices_addShaderMaterial) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_0" IGPUProgrammingServices_addShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_1" IGPUProgrammingServices_addShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_2" IGPUProgrammingServices_addShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderProgram (:pointer "irr::io::IReadFile *"))
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_3" IGPUProgrammingServices_addShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgram (:pointer "irr::io::IReadFile *"))
  (pixelShaderProgram (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_4" IGPUProgrammingServices_addShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum)
  (userData :int))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_5" IGPUProgrammingServices_addShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (baseMaterial :enum))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_6" IGPUProgrammingServices_addShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path"))
  (callback (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IGPUProgrammingServices_addShaderMaterialFromFiles__SWIG_7" IGPUProgrammingServices_addShaderMaterialFromFiles) :int
  (self (:pointer "irr::video::IGPUProgrammingServices *"))
  (vertexShaderProgramFileName (:pointer "path"))
  (pixelShaderProgramFileName (:pointer "path")))

(cffi:defcfun ("_wrap_new_IGUIElement" new_IGUIElement) (:pointer "irr::gui::IGUIElement *")
  (type :enum)
  (environment (:pointer "irr::gui::IGUIEnvironment *"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_delete_IGUIElement" delete_IGUIElement) :void
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_getParent" IGUIElement_getParent) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_getRelativePosition" IGUIElement_getRelativePosition) (:by-value "recti")
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_setRelativePosition__SWIG_0" IGUIElement_setRelativePosition) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (r (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIElement_setRelativePosition__SWIG_1" IGUIElement_setRelativePosition) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (position (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IGUIElement_setRelativePositionProportional" IGUIElement_setRelativePositionProportional) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (r (:pointer "rectf")))

(cffi:defcfun ("_wrap_IGUIElement_getAbsolutePosition" IGUIElement_getAbsolutePosition) (:by-value "recti")
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_getAbsoluteClippingRect" IGUIElement_getAbsoluteClippingRect) (:by-value "recti")
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_setNotClipped" IGUIElement_setNotClipped) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (noClip :bool))

(cffi:defcfun ("_wrap_IGUIElement_isNotClipped" IGUIElement_isNotClipped) :bool
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_setMaxSize" IGUIElement_setMaxSize) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (size (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IGUIElement_setMinSize" IGUIElement_setMinSize) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (size (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IGUIElement_setAlignment" IGUIElement_setAlignment) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (left :enum)
  (right :enum)
  (top :enum)
  (bottom :enum))

(cffi:defcfun ("_wrap_IGUIElement_updateAbsolutePosition" IGUIElement_updateAbsolutePosition) :void
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_getElementFromPoint" IGUIElement_getElementFromPoint) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIElement *"))
  (point (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IGUIElement_isPointInside" IGUIElement_isPointInside) :bool
  (self (:pointer "irr::gui::IGUIElement *"))
  (point (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IGUIElement_addChild" IGUIElement_addChild) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (child (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_removeChild" IGUIElement_removeChild) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (child (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_remove" IGUIElement_remove) :void
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_draw" IGUIElement_draw) :void
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_OnPostRender" IGUIElement_OnPostRender) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (timeMs :uint))

(cffi:defcfun ("_wrap_IGUIElement_move" IGUIElement_move) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (absoluteMovement (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IGUIElement_isVisible" IGUIElement_isVisible) :bool
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_setVisible" IGUIElement_setVisible) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (visible :bool))

(cffi:defcfun ("_wrap_IGUIElement_isSubElement" IGUIElement_isSubElement) :bool
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_setSubElement" IGUIElement_setSubElement) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (subElement :bool))

(cffi:defcfun ("_wrap_IGUIElement_setTabStop" IGUIElement_setTabStop) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (enable :bool))

(cffi:defcfun ("_wrap_IGUIElement_isTabStop" IGUIElement_isTabStop) :bool
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_setTabOrder" IGUIElement_setTabOrder) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (index :int))

(cffi:defcfun ("_wrap_IGUIElement_getTabOrder" IGUIElement_getTabOrder) :int
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_setTabGroup" IGUIElement_setTabGroup) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (isGroup :bool))

(cffi:defcfun ("_wrap_IGUIElement_isTabGroup" IGUIElement_isTabGroup) :bool
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_getTabGroup" IGUIElement_getTabGroup) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_isEnabled" IGUIElement_isEnabled) :bool
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_setEnabled" IGUIElement_setEnabled) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (enabled :bool))

(cffi:defcfun ("_wrap_IGUIElement_setText" IGUIElement_setText) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIElement_getText" IGUIElement_getText) :w-string
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_setToolTipText" IGUIElement_setToolTipText) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIElement_getToolTipText" IGUIElement_getToolTipText) (:reference :irrstring)
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_getID" IGUIElement_getID) :int
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_setID" IGUIElement_setID) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIElement_bringToFront" IGUIElement_bringToFront) :bool
  (self (:pointer "irr::gui::IGUIElement *"))
  (element (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_sendToBack" IGUIElement_sendToBack) :bool
  (self (:pointer "irr::gui::IGUIElement *"))
  (child (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_getChildren" IGUIElement_getChildren) (:reference "irr::core::list< irr::gui::IGUIElement * > *")
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_getElementFromId__SWIG_0" IGUIElement_getElementFromId) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (searchchildren :bool))

(cffi:defcfun ("_wrap_IGUIElement_getElementFromId__SWIG_1" IGUIElement_getElementFromId) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIElement_isMyChild" IGUIElement_isMyChild) :bool
  (self (:pointer "irr::gui::IGUIElement *"))
  (child (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_getNextElement__SWIG_0" IGUIElement_getNextElement) :bool
  (self (:pointer "irr::gui::IGUIElement *"))
  (startOrder :int)
  (reverse :bool)
  (group :bool)
  (first (:pointer "irr::gui::IGUIElement **"))
  (closest (:pointer "irr::gui::IGUIElement **"))
  (includeInvisible :bool))

(cffi:defcfun ("_wrap_IGUIElement_getNextElement__SWIG_1" IGUIElement_getNextElement) :bool
  (self (:pointer "irr::gui::IGUIElement *"))
  (startOrder :int)
  (reverse :bool)
  (group :bool)
  (first (:pointer "irr::gui::IGUIElement **"))
  (closest (:pointer "irr::gui::IGUIElement **")))

(cffi:defcfun ("_wrap_IGUIElement_getType" IGUIElement_getType) :enum
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_hasType" IGUIElement_hasType) :bool
  (self (:pointer "irr::gui::IGUIElement *"))
  (type :enum))

(cffi:defcfun ("_wrap_IGUIElement_getTypeName" IGUIElement_getTypeName) :string
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_getName" IGUIElement_getName) :string
  (self (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElement_setName__SWIG_0" IGUIElement_setName) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (name :string))

(cffi:defcfun ("_wrap_IGUIElement_setName__SWIG_1" IGUIElement_setName) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (name (:reference :irrstring)))

(cffi:defcfun ("_wrap_IGUIElement_serializeAttributes__SWIG_0" IGUIElement_serializeAttributes) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (out (:pointer "irr::io::IAttributes *"))
  (options (:pointer "irr::io::SAttributeReadWriteOptions *")))

(cffi:defcfun ("_wrap_IGUIElement_serializeAttributes__SWIG_1" IGUIElement_serializeAttributes) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (out (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_IGUIElement_deserializeAttributes__SWIG_0" IGUIElement_deserializeAttributes) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (in (:pointer "irr::io::IAttributes *"))
  (options (:pointer "irr::io::SAttributeReadWriteOptions *")))

(cffi:defcfun ("_wrap_IGUIElement_deserializeAttributes__SWIG_1" IGUIElement_deserializeAttributes) :void
  (self (:pointer "irr::gui::IGUIElement *"))
  (in (:pointer "irr::io::IAttributes *")))

(cffi:defcenum EGUI_BUTTON_STATE
	(:EGBS_BUTTON_UP 0)
	:EGBS_BUTTON_DOWN
	:EGBS_BUTTON_MOUSE_OVER
	:EGBS_BUTTON_MOUSE_OFF
	:EGBS_BUTTON_FOCUSED
	:EGBS_BUTTON_NOT_FOCUSED
	:EGBS_COUNT)

(cffi:defcvar ("GUIButtonStateNames" GUIButtonStateNames)
 (:pointer "irr::c8 **"))

(cffi:defcfun ("_wrap_IGUIButton_setOverrideFont__SWIG_0" IGUIButton_setOverrideFont) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (font (:pointer "irr::gui::IGUIFont *")))

(cffi:defcfun ("_wrap_IGUIButton_setOverrideFont__SWIG_1" IGUIButton_setOverrideFont) :void
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_getOverrideFont" IGUIButton_getOverrideFont) (:pointer "irr::gui::IGUIFont *")
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_getActiveFont" IGUIButton_getActiveFont) (:pointer "irr::gui::IGUIFont *")
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_setImage__SWIG_0" IGUIButton_setImage) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (image (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IGUIButton_setImage__SWIG_1" IGUIButton_setImage) :void
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_setImage__SWIG_2" IGUIButton_setImage) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (image (:pointer "irr::video::ITexture *"))
  (pos (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIButton_setPressedImage__SWIG_0" IGUIButton_setPressedImage) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (image (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IGUIButton_setPressedImage__SWIG_1" IGUIButton_setPressedImage) :void
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_setPressedImage__SWIG_2" IGUIButton_setPressedImage) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (image (:pointer "irr::video::ITexture *"))
  (pos (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIButton_setSpriteBank__SWIG_0" IGUIButton_setSpriteBank) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (bank (:pointer "irr::gui::IGUISpriteBank *")))

(cffi:defcfun ("_wrap_IGUIButton_setSpriteBank__SWIG_1" IGUIButton_setSpriteBank) :void
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_setSprite__SWIG_0" IGUIButton_setSprite) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (state :enum)
  (index :int)
  (color (:pointer "irr::video::SColor"))
  (loop :bool))

(cffi:defcfun ("_wrap_IGUIButton_setSprite__SWIG_1" IGUIButton_setSprite) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (state :enum)
  (index :int)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUIButton_setSprite__SWIG_2" IGUIButton_setSprite) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (state :enum)
  (index :int))

(cffi:defcfun ("_wrap_IGUIButton_setIsPushButton__SWIG_0" IGUIButton_setIsPushButton) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (isPushButton :bool))

(cffi:defcfun ("_wrap_IGUIButton_setIsPushButton__SWIG_1" IGUIButton_setIsPushButton) :void
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_setPressed__SWIG_0" IGUIButton_setPressed) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (pressed :bool))

(cffi:defcfun ("_wrap_IGUIButton_setPressed__SWIG_1" IGUIButton_setPressed) :void
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_isPressed" IGUIButton_isPressed) :bool
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_setUseAlphaChannel__SWIG_0" IGUIButton_setUseAlphaChannel) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (useAlphaChannel :bool))

(cffi:defcfun ("_wrap_IGUIButton_setUseAlphaChannel__SWIG_1" IGUIButton_setUseAlphaChannel) :void
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_isAlphaChannelUsed" IGUIButton_isAlphaChannelUsed) :bool
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_isPushButton" IGUIButton_isPushButton) :bool
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_setDrawBorder__SWIG_0" IGUIButton_setDrawBorder) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (border :bool))

(cffi:defcfun ("_wrap_IGUIButton_setDrawBorder__SWIG_1" IGUIButton_setDrawBorder) :void
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_isDrawingBorder" IGUIButton_isDrawingBorder) :bool
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_setScaleImage__SWIG_0" IGUIButton_setScaleImage) :void
  (self (:pointer "irr::gui::IGUIButton *"))
  (scaleImage :bool))

(cffi:defcfun ("_wrap_IGUIButton_setScaleImage__SWIG_1" IGUIButton_setScaleImage) :void
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUIButton_isScalingImage" IGUIButton_isScalingImage) :bool
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_delete_IGUIButton" delete_IGUIButton) :void
  (self (:pointer "irr::gui::IGUIButton *")))

(cffi:defcfun ("_wrap_IGUICheckBox_setChecked" IGUICheckBox_setChecked) :void
  (self (:pointer "irr::gui::IGUICheckBox *"))
  (checked :bool))

(cffi:defcfun ("_wrap_IGUICheckBox_isChecked" IGUICheckBox_isChecked) :bool
  (self (:pointer "irr::gui::IGUICheckBox *")))

(cffi:defcfun ("_wrap_delete_IGUICheckBox" delete_IGUICheckBox) :void
  (self (:pointer "irr::gui::IGUICheckBox *")))

(cffi:defcfun ("_wrap_new_IGUIColorSelectDialog" new_IGUIColorSelectDialog) (:pointer "irr::gui::IGUIColorSelectDialog *")
  (environment (:pointer "irr::gui::IGUIEnvironment *"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_delete_IGUIColorSelectDialog" delete_IGUIColorSelectDialog) :void
  (self (:pointer "irr::gui::IGUIColorSelectDialog *")))

(cffi:defcfun ("_wrap_IGUIComboBox_getItemCount" IGUIComboBox_getItemCount) :uint
  (self (:pointer "irr::gui::IGUIComboBox *")))

(cffi:defcfun ("_wrap_IGUIComboBox_getItem" IGUIComboBox_getItem) :w-string
  (self (:pointer "irr::gui::IGUIComboBox *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IGUIComboBox_getItemData" IGUIComboBox_getItemData) :uint
  (self (:pointer "irr::gui::IGUIComboBox *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IGUIComboBox_getIndexForItemData" IGUIComboBox_getIndexForItemData) :int
  (self (:pointer "irr::gui::IGUIComboBox *"))
  (data :uint))

(cffi:defcfun ("_wrap_IGUIComboBox_addItem__SWIG_0" IGUIComboBox_addItem) :uint
  (self (:pointer "irr::gui::IGUIComboBox *"))
  (text :w-string)
  (data :uint))

(cffi:defcfun ("_wrap_IGUIComboBox_addItem__SWIG_1" IGUIComboBox_addItem) :uint
  (self (:pointer "irr::gui::IGUIComboBox *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIComboBox_removeItem" IGUIComboBox_removeItem) :void
  (self (:pointer "irr::gui::IGUIComboBox *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IGUIComboBox_clear" IGUIComboBox_clear) :void
  (self (:pointer "irr::gui::IGUIComboBox *")))

(cffi:defcfun ("_wrap_IGUIComboBox_getSelected" IGUIComboBox_getSelected) :int
  (self (:pointer "irr::gui::IGUIComboBox *")))

(cffi:defcfun ("_wrap_IGUIComboBox_setSelected" IGUIComboBox_setSelected) :void
  (self (:pointer "irr::gui::IGUIComboBox *"))
  (idx :int))

(cffi:defcfun ("_wrap_IGUIComboBox_setTextAlignment" IGUIComboBox_setTextAlignment) :void
  (self (:pointer "irr::gui::IGUIComboBox *"))
  (horizontal :enum)
  (vertical :enum))

(cffi:defcfun ("_wrap_IGUIComboBox_setMaxSelectionRows" IGUIComboBox_setMaxSelectionRows) :void
  (self (:pointer "irr::gui::IGUIComboBox *"))
  (max :uint))

(cffi:defcfun ("_wrap_IGUIComboBox_getMaxSelectionRows" IGUIComboBox_getMaxSelectionRows) :uint
  (self (:pointer "irr::gui::IGUIComboBox *")))

(cffi:defcfun ("_wrap_delete_IGUIComboBox" delete_IGUIComboBox) :void
  (self (:pointer "irr::gui::IGUIComboBox *")))

(cffi:defcenum ECONTEXT_MENU_CLOSE
	(:ECMC_IGNORE 0)
	(:ECMC_REMOVE 1)
	(:ECMC_HIDE 2))

(cffi:defcfun ("_wrap_IGUIContextMenu_setCloseHandling" IGUIContextMenu_setCloseHandling) :void
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (onClose :enum))

(cffi:defcfun ("_wrap_IGUIContextMenu_getCloseHandling" IGUIContextMenu_getCloseHandling) :enum
  (self (:pointer "irr::gui::IGUIContextMenu *")))

(cffi:defcfun ("_wrap_IGUIContextMenu_getItemCount" IGUIContextMenu_getItemCount) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *")))

(cffi:defcfun ("_wrap_IGUIContextMenu_addItem__SWIG_0" IGUIContextMenu_addItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (text :w-string)
  (commandId :int)
  (enabled :bool)
  (hasSubMenu :bool)
  (checked :bool)
  (autoChecking :bool))

(cffi:defcfun ("_wrap_IGUIContextMenu_addItem__SWIG_1" IGUIContextMenu_addItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (text :w-string)
  (commandId :int)
  (enabled :bool)
  (hasSubMenu :bool)
  (checked :bool))

(cffi:defcfun ("_wrap_IGUIContextMenu_addItem__SWIG_2" IGUIContextMenu_addItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (text :w-string)
  (commandId :int)
  (enabled :bool)
  (hasSubMenu :bool))

(cffi:defcfun ("_wrap_IGUIContextMenu_addItem__SWIG_3" IGUIContextMenu_addItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (text :w-string)
  (commandId :int)
  (enabled :bool))

(cffi:defcfun ("_wrap_IGUIContextMenu_addItem__SWIG_4" IGUIContextMenu_addItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (text :w-string)
  (commandId :int))

(cffi:defcfun ("_wrap_IGUIContextMenu_addItem__SWIG_5" IGUIContextMenu_addItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIContextMenu_insertItem__SWIG_0" IGUIContextMenu_insertItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint)
  (text :w-string)
  (commandId :int)
  (enabled :bool)
  (hasSubMenu :bool)
  (checked :bool)
  (autoChecking :bool))

(cffi:defcfun ("_wrap_IGUIContextMenu_insertItem__SWIG_1" IGUIContextMenu_insertItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint)
  (text :w-string)
  (commandId :int)
  (enabled :bool)
  (hasSubMenu :bool)
  (checked :bool))

(cffi:defcfun ("_wrap_IGUIContextMenu_insertItem__SWIG_2" IGUIContextMenu_insertItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint)
  (text :w-string)
  (commandId :int)
  (enabled :bool)
  (hasSubMenu :bool))

(cffi:defcfun ("_wrap_IGUIContextMenu_insertItem__SWIG_3" IGUIContextMenu_insertItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint)
  (text :w-string)
  (commandId :int)
  (enabled :bool))

(cffi:defcfun ("_wrap_IGUIContextMenu_insertItem__SWIG_4" IGUIContextMenu_insertItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint)
  (text :w-string)
  (commandId :int))

(cffi:defcfun ("_wrap_IGUIContextMenu_insertItem__SWIG_5" IGUIContextMenu_insertItem) :uint
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint)
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIContextMenu_findItemWithCommandId__SWIG_0" IGUIContextMenu_findItemWithCommandId) :int
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (commandId :int)
  (idxStartSearch :uint))

(cffi:defcfun ("_wrap_IGUIContextMenu_findItemWithCommandId__SWIG_1" IGUIContextMenu_findItemWithCommandId) :int
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (commandId :int))

(cffi:defcfun ("_wrap_IGUIContextMenu_addSeparator" IGUIContextMenu_addSeparator) :void
  (self (:pointer "irr::gui::IGUIContextMenu *")))

(cffi:defcfun ("_wrap_IGUIContextMenu_getItemText" IGUIContextMenu_getItemText) :w-string
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IGUIContextMenu_setItemText" IGUIContextMenu_setItemText) :void
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint)
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIContextMenu_isItemEnabled" IGUIContextMenu_isItemEnabled) :bool
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IGUIContextMenu_setItemEnabled" IGUIContextMenu_setItemEnabled) :void
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint)
  (enabled :bool))

(cffi:defcfun ("_wrap_IGUIContextMenu_setItemChecked" IGUIContextMenu_setItemChecked) :void
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint)
  (enabled :bool))

(cffi:defcfun ("_wrap_IGUIContextMenu_isItemChecked" IGUIContextMenu_isItemChecked) :bool
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IGUIContextMenu_removeItem" IGUIContextMenu_removeItem) :void
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IGUIContextMenu_removeAllItems" IGUIContextMenu_removeAllItems) :void
  (self (:pointer "irr::gui::IGUIContextMenu *")))

(cffi:defcfun ("_wrap_IGUIContextMenu_getSelectedItem" IGUIContextMenu_getSelectedItem) :int
  (self (:pointer "irr::gui::IGUIContextMenu *")))

(cffi:defcfun ("_wrap_IGUIContextMenu_getItemCommandId" IGUIContextMenu_getItemCommandId) :int
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IGUIContextMenu_setItemCommandId" IGUIContextMenu_setItemCommandId) :void
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint)
  (id :int))

(cffi:defcfun ("_wrap_IGUIContextMenu_getSubMenu" IGUIContextMenu_getSubMenu) (:pointer "irr::gui::IGUIContextMenu *")
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IGUIContextMenu_setItemAutoChecking" IGUIContextMenu_setItemAutoChecking) :void
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint)
  (autoChecking :bool))

(cffi:defcfun ("_wrap_IGUIContextMenu_getItemAutoChecking" IGUIContextMenu_getItemAutoChecking) :bool
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (idx :uint))

(cffi:defcfun ("_wrap_IGUIContextMenu_setEventParent" IGUIContextMenu_setEventParent) :void
  (self (:pointer "irr::gui::IGUIContextMenu *"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_delete_IGUIContextMenu" delete_IGUIContextMenu) :void
  (self (:pointer "irr::gui::IGUIContextMenu *")))

(cffi:defcfun ("_wrap_IGUIEditBox_setOverrideFont__SWIG_0" IGUIEditBox_setOverrideFont) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (font (:pointer "irr::gui::IGUIFont *")))

(cffi:defcfun ("_wrap_IGUIEditBox_setOverrideFont__SWIG_1" IGUIEditBox_setOverrideFont) :void
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_IGUIEditBox_getOverrideFont" IGUIEditBox_getOverrideFont) (:pointer "irr::gui::IGUIFont *")
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_IGUIEditBox_getActiveFont" IGUIEditBox_getActiveFont) (:pointer "irr::gui::IGUIFont *")
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_IGUIEditBox_setOverrideColor" IGUIEditBox_setOverrideColor) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUIEditBox_getOverrideColor" IGUIEditBox_getOverrideColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_IGUIEditBox_enableOverrideColor" IGUIEditBox_enableOverrideColor) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (enable :bool))

(cffi:defcfun ("_wrap_IGUIEditBox_isOverrideColorEnabled" IGUIEditBox_isOverrideColorEnabled) :bool
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_IGUIEditBox_setDrawBackground" IGUIEditBox_setDrawBackground) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (draw :bool))

(cffi:defcfun ("_wrap_IGUIEditBox_setDrawBorder" IGUIEditBox_setDrawBorder) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (border :bool))

(cffi:defcfun ("_wrap_IGUIEditBox_setTextAlignment" IGUIEditBox_setTextAlignment) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (horizontal :enum)
  (vertical :enum))

(cffi:defcfun ("_wrap_IGUIEditBox_setWordWrap" IGUIEditBox_setWordWrap) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (enable :bool))

(cffi:defcfun ("_wrap_IGUIEditBox_isWordWrapEnabled" IGUIEditBox_isWordWrapEnabled) :bool
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_IGUIEditBox_setMultiLine" IGUIEditBox_setMultiLine) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (enable :bool))

(cffi:defcfun ("_wrap_IGUIEditBox_isMultiLineEnabled" IGUIEditBox_isMultiLineEnabled) :bool
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_IGUIEditBox_setAutoScroll" IGUIEditBox_setAutoScroll) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (enable :bool))

(cffi:defcfun ("_wrap_IGUIEditBox_isAutoScrollEnabled" IGUIEditBox_isAutoScrollEnabled) :bool
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_IGUIEditBox_setPasswordBox__SWIG_0" IGUIEditBox_setPasswordBox) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (passwordBox :bool)
  (passwordChar (:pointer "wchar_t")))

(cffi:defcfun ("_wrap_IGUIEditBox_setPasswordBox__SWIG_1" IGUIEditBox_setPasswordBox) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (passwordBox :bool))

(cffi:defcfun ("_wrap_IGUIEditBox_isPasswordBox" IGUIEditBox_isPasswordBox) :bool
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_IGUIEditBox_getTextDimension" IGUIEditBox_getTextDimension) (:by-value "dimension2du")
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_IGUIEditBox_setMax" IGUIEditBox_setMax) :void
  (self (:pointer "irr::gui::IGUIEditBox *"))
  (max :uint))

(cffi:defcfun ("_wrap_IGUIEditBox_getMax" IGUIEditBox_getMax) :uint
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_delete_IGUIEditBox" delete_IGUIEditBox) :void
  (self (:pointer "irr::gui::IGUIEditBox *")))

(cffi:defcfun ("_wrap_IGUIElementFactory_addGUIElement__SWIG_0" IGUIElementFactory_addGUIElement) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIElementFactory *"))
  (type :enum)
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElementFactory_addGUIElement__SWIG_1" IGUIElementFactory_addGUIElement) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIElementFactory *"))
  (type :enum))

(cffi:defcfun ("_wrap_IGUIElementFactory_addGUIElement__SWIG_2" IGUIElementFactory_addGUIElement) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIElementFactory *"))
  (typeName :string)
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIElementFactory_addGUIElement__SWIG_3" IGUIElementFactory_addGUIElement) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIElementFactory *"))
  (typeName :string))

(cffi:defcfun ("_wrap_IGUIElementFactory_getCreatableGUIElementTypeCount" IGUIElementFactory_getCreatableGUIElementTypeCount) :int
  (self (:pointer "irr::gui::IGUIElementFactory *")))

(cffi:defcfun ("_wrap_IGUIElementFactory_getCreateableGUIElementType" IGUIElementFactory_getCreateableGUIElementType) :enum
  (self (:pointer "irr::gui::IGUIElementFactory *"))
  (idx :int))

(cffi:defcfun ("_wrap_IGUIElementFactory_getCreateableGUIElementTypeName__SWIG_0" IGUIElementFactory_getCreateableGUIElementTypeName) :string
  (self (:pointer "irr::gui::IGUIElementFactory *"))
  (idx :int))

(cffi:defcfun ("_wrap_IGUIElementFactory_getCreateableGUIElementTypeName__SWIG_1" IGUIElementFactory_getCreateableGUIElementTypeName) :string
  (self (:pointer "irr::gui::IGUIElementFactory *"))
  (type :enum))

(cffi:defcfun ("_wrap_delete_IGUIElementFactory" delete_IGUIElementFactory) :void
  (self (:pointer "irr::gui::IGUIElementFactory *")))

(cffi:defcenum EGUI_SKIN_TYPE
	(:EGST_WINDOWS_CLASSIC 0)
	:EGST_WINDOWS_METALLIC
	:EGST_BURNING_SKIN
	:EGST_UNKNOWN
	:EGST_COUNT)

(cffi:defcvar ("GUISkinTypeNames" GUISkinTypeNames)
 (:pointer "irr::c8 **"))

(cffi:defcenum EGUI_DEFAULT_COLOR
	(:EGDC_3D_DARK_SHADOW 0)
	:EGDC_3D_SHADOW
	:EGDC_3D_FACE
	:EGDC_3D_HIGH_LIGHT
	:EGDC_3D_LIGHT
	:EGDC_ACTIVE_BORDER
	:EGDC_ACTIVE_CAPTION
	:EGDC_APP_WORKSPACE
	:EGDC_BUTTON_TEXT
	:EGDC_GRAY_TEXT
	:EGDC_HIGH_LIGHT
	:EGDC_HIGH_LIGHT_TEXT
	:EGDC_INACTIVE_BORDER
	:EGDC_INACTIVE_CAPTION
	:EGDC_TOOLTIP
	:EGDC_TOOLTIP_BACKGROUND
	:EGDC_SCROLLBAR
	:EGDC_WINDOW
	:EGDC_WINDOW_SYMBOL
	:EGDC_ICON
	:EGDC_ICON_HIGH_LIGHT
	:EGDC_GRAY_WINDOW_SYMBOL
	:EGDC_EDITABLE
	:EGDC_GRAY_EDITABLE
	:EGDC_FOCUSED_EDITABLE
	:EGDC_COUNT)

(cffi:defcvar ("GUISkinColorNames" GUISkinColorNames)
 (:pointer "irr::c8 **"))

(cffi:defcenum EGUI_DEFAULT_SIZE
	(:EGDS_SCROLLBAR_SIZE 0)
	:EGDS_MENU_HEIGHT
	:EGDS_WINDOW_BUTTON_WIDTH
	:EGDS_CHECK_BOX_WIDTH
	:EGDS_MESSAGE_BOX_WIDTH
	:EGDS_MESSAGE_BOX_HEIGHT
	:EGDS_BUTTON_WIDTH
	:EGDS_BUTTON_HEIGHT
	:EGDS_TEXT_DISTANCE_X
	:EGDS_TEXT_DISTANCE_Y
	:EGDS_TITLEBARTEXT_DISTANCE_X
	:EGDS_TITLEBARTEXT_DISTANCE_Y
	:EGDS_MESSAGE_BOX_GAP_SPACE
	:EGDS_MESSAGE_BOX_MIN_TEXT_WIDTH
	:EGDS_MESSAGE_BOX_MAX_TEXT_WIDTH
	:EGDS_MESSAGE_BOX_MIN_TEXT_HEIGHT
	:EGDS_MESSAGE_BOX_MAX_TEXT_HEIGHT
	:EGDS_BUTTON_PRESSED_IMAGE_OFFSET_X
	:EGDS_BUTTON_PRESSED_IMAGE_OFFSET_Y
	:EGDS_BUTTON_PRESSED_TEXT_OFFSET_X
	:EGDS_BUTTON_PRESSED_TEXT_OFFSET_Y
	:EGDS_COUNT)

(cffi:defcvar ("GUISkinSizeNames" GUISkinSizeNames)
 (:pointer "irr::c8 **"))

(cffi:defcenum EGUI_DEFAULT_TEXT
	(:EGDT_MSG_BOX_OK 0)
	:EGDT_MSG_BOX_CANCEL
	:EGDT_MSG_BOX_YES
	:EGDT_MSG_BOX_NO
	:EGDT_WINDOW_CLOSE
	:EGDT_WINDOW_MAXIMIZE
	:EGDT_WINDOW_MINIMIZE
	:EGDT_WINDOW_RESTORE
	:EGDT_COUNT)

(cffi:defcvar ("GUISkinTextNames" GUISkinTextNames)
 (:pointer "irr::c8 **"))

(cffi:defcenum EGUI_DEFAULT_ICON
	(:EGDI_WINDOW_MAXIMIZE 0)
	:EGDI_WINDOW_RESTORE
	:EGDI_WINDOW_CLOSE
	:EGDI_WINDOW_MINIMIZE
	:EGDI_WINDOW_RESIZE
	:EGDI_CURSOR_UP
	:EGDI_CURSOR_DOWN
	:EGDI_CURSOR_LEFT
	:EGDI_CURSOR_RIGHT
	:EGDI_MENU_MORE
	:EGDI_CHECK_BOX_CHECKED
	:EGDI_DROP_DOWN
	:EGDI_SMALL_CURSOR_UP
	:EGDI_SMALL_CURSOR_DOWN
	:EGDI_RADIO_BUTTON_CHECKED
	:EGDI_MORE_LEFT
	:EGDI_MORE_RIGHT
	:EGDI_MORE_UP
	:EGDI_MORE_DOWN
	:EGDI_EXPAND
	:EGDI_COLLAPSE
	:EGDI_FILE
	:EGDI_DIRECTORY
	:EGDI_COUNT)

(cffi:defcvar ("GUISkinIconNames" GUISkinIconNames)
 (:pointer "irr::c8 **"))

(cffi:defcenum EGUI_DEFAULT_FONT
	(:EGDF_DEFAULT 0)
	:EGDF_BUTTON
	:EGDF_WINDOW
	:EGDF_MENU
	:EGDF_TOOLTIP
	:EGDF_COUNT)

(cffi:defcvar ("GUISkinFontNames" GUISkinFontNames)
 (:pointer "irr::c8 **"))

(cffi:defcfun ("_wrap_IGUISkin_getColor" IGUISkin_getColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::gui::IGUISkin *"))
  (color :enum))

(cffi:defcfun ("_wrap_IGUISkin_setColor" IGUISkin_setColor) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (which :enum)
  (newColor (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUISkin_getSize" IGUISkin_getSize) :int
  (self (:pointer "irr::gui::IGUISkin *"))
  (size :enum))

(cffi:defcfun ("_wrap_IGUISkin_getDefaultText" IGUISkin_getDefaultText) :w-string
  (self (:pointer "irr::gui::IGUISkin *"))
  (text :enum))

(cffi:defcfun ("_wrap_IGUISkin_setDefaultText" IGUISkin_setDefaultText) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (which :enum)
  (newText :w-string))

(cffi:defcfun ("_wrap_IGUISkin_setSize" IGUISkin_setSize) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (which :enum)
  (size :int))

(cffi:defcfun ("_wrap_IGUISkin_getFont__SWIG_0" IGUISkin_getFont) (:pointer "irr::gui::IGUIFont *")
  (self (:pointer "irr::gui::IGUISkin *"))
  (which :enum))

(cffi:defcfun ("_wrap_IGUISkin_getFont__SWIG_1" IGUISkin_getFont) (:pointer "irr::gui::IGUIFont *")
  (self (:pointer "irr::gui::IGUISkin *")))

(cffi:defcfun ("_wrap_IGUISkin_setFont__SWIG_0" IGUISkin_setFont) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (which :enum))

(cffi:defcfun ("_wrap_IGUISkin_setFont__SWIG_1" IGUISkin_setFont) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (font (:pointer "irr::gui::IGUIFont *")))

(cffi:defcfun ("_wrap_IGUISkin_getSpriteBank" IGUISkin_getSpriteBank) (:pointer "irr::gui::IGUISpriteBank *")
  (self (:pointer "irr::gui::IGUISkin *")))

(cffi:defcfun ("_wrap_IGUISkin_setSpriteBank" IGUISkin_setSpriteBank) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (bank (:pointer "irr::gui::IGUISpriteBank *")))

(cffi:defcfun ("_wrap_IGUISkin_getIcon" IGUISkin_getIcon) :uint
  (self (:pointer "irr::gui::IGUISkin *"))
  (icon :enum))

(cffi:defcfun ("_wrap_IGUISkin_setIcon" IGUISkin_setIcon) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (icon :enum)
  (index :uint))

(cffi:defcfun ("_wrap_IGUISkin_draw3DButtonPaneStandard__SWIG_0" IGUISkin_draw3DButtonPaneStandard) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (rect (:pointer "recti"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DButtonPaneStandard__SWIG_1" IGUISkin_draw3DButtonPaneStandard) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (rect (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DButtonPanePressed__SWIG_0" IGUISkin_draw3DButtonPanePressed) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (rect (:pointer "recti"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DButtonPanePressed__SWIG_1" IGUISkin_draw3DButtonPanePressed) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (rect (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DSunkenPane__SWIG_0" IGUISkin_draw3DSunkenPane) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (bgcolor (:pointer "irr::video::SColor"))
  (flat :bool)
  (fillBackGround :bool)
  (rect (:pointer "recti"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DSunkenPane__SWIG_1" IGUISkin_draw3DSunkenPane) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (bgcolor (:pointer "irr::video::SColor"))
  (flat :bool)
  (fillBackGround :bool)
  (rect (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DWindowBackground__SWIG_0" IGUISkin_draw3DWindowBackground) (:by-value "recti")
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (drawTitleBar :bool)
  (titleBarColor (:pointer "irr::video::SColor"))
  (rect (:pointer "recti"))
  (clip (:pointer "recti"))
  (checkClientArea (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DWindowBackground__SWIG_1" IGUISkin_draw3DWindowBackground) (:by-value "recti")
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (drawTitleBar :bool)
  (titleBarColor (:pointer "irr::video::SColor"))
  (rect (:pointer "recti"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DWindowBackground__SWIG_2" IGUISkin_draw3DWindowBackground) (:by-value "recti")
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (drawTitleBar :bool)
  (titleBarColor (:pointer "irr::video::SColor"))
  (rect (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DMenuPane__SWIG_0" IGUISkin_draw3DMenuPane) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (rect (:pointer "recti"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DMenuPane__SWIG_1" IGUISkin_draw3DMenuPane) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (rect (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DToolBar__SWIG_0" IGUISkin_draw3DToolBar) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (rect (:pointer "recti"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DToolBar__SWIG_1" IGUISkin_draw3DToolBar) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (rect (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DTabButton__SWIG_0" IGUISkin_draw3DTabButton) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (active :bool)
  (rect (:pointer "recti"))
  (clip (:pointer "recti"))
  (alignment :enum))

(cffi:defcfun ("_wrap_IGUISkin_draw3DTabButton__SWIG_1" IGUISkin_draw3DTabButton) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (active :bool)
  (rect (:pointer "recti"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DTabButton__SWIG_2" IGUISkin_draw3DTabButton) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (active :bool)
  (rect (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DTabBody__SWIG_0" IGUISkin_draw3DTabBody) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (border :bool)
  (background :bool)
  (rect (:pointer "recti"))
  (clip (:pointer "recti"))
  (tabHeight :int)
  (alignment :enum))

(cffi:defcfun ("_wrap_IGUISkin_draw3DTabBody__SWIG_1" IGUISkin_draw3DTabBody) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (border :bool)
  (background :bool)
  (rect (:pointer "recti"))
  (clip (:pointer "recti"))
  (tabHeight :int))

(cffi:defcfun ("_wrap_IGUISkin_draw3DTabBody__SWIG_2" IGUISkin_draw3DTabBody) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (border :bool)
  (background :bool)
  (rect (:pointer "recti"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw3DTabBody__SWIG_3" IGUISkin_draw3DTabBody) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (border :bool)
  (background :bool)
  (rect (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_drawIcon__SWIG_0" IGUISkin_drawIcon) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (icon :enum)
  (position (:pointer "vector2di"))
  (starttime :uint)
  (currenttime :uint)
  (loop :bool)
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_drawIcon__SWIG_1" IGUISkin_drawIcon) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (icon :enum)
  (position (:pointer "vector2di"))
  (starttime :uint)
  (currenttime :uint)
  (loop :bool))

(cffi:defcfun ("_wrap_IGUISkin_drawIcon__SWIG_2" IGUISkin_drawIcon) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (icon :enum)
  (position (:pointer "vector2di"))
  (starttime :uint)
  (currenttime :uint))

(cffi:defcfun ("_wrap_IGUISkin_drawIcon__SWIG_3" IGUISkin_drawIcon) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (icon :enum)
  (position (:pointer "vector2di"))
  (starttime :uint))

(cffi:defcfun ("_wrap_IGUISkin_drawIcon__SWIG_4" IGUISkin_drawIcon) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (icon :enum)
  (position (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IGUISkin_draw2DRectangle__SWIG_0" IGUISkin_draw2DRectangle) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (color (:pointer "irr::video::SColor *"))
  (pos (:pointer "recti"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_draw2DRectangle__SWIG_1" IGUISkin_draw2DRectangle) :void
  (self (:pointer "irr::gui::IGUISkin *"))
  (element (:pointer "irr::gui::IGUIElement *"))
  (color (:pointer "irr::video::SColor *"))
  (pos (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISkin_getType" IGUISkin_getType) :enum
  (self (:pointer "irr::gui::IGUISkin *")))

(cffi:defcfun ("_wrap_delete_IGUISkin" delete_IGUISkin) :void
  (self (:pointer "irr::gui::IGUISkin *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_drawAll" IGUIEnvironment_drawAll) :void
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_setFocus" IGUIEnvironment_setFocus) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (element (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getFocus" IGUIEnvironment_getFocus) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getHovered" IGUIEnvironment_getHovered) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_removeFocus" IGUIEnvironment_removeFocus) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (element (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_hasFocus" IGUIEnvironment_hasFocus) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (element (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getVideoDriver" IGUIEnvironment_getVideoDriver) (:pointer "irr::video::IVideoDriver *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getFileSystem" IGUIEnvironment_getFileSystem) (:pointer "irr::io::IFileSystem *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getOSOperator" IGUIEnvironment_getOSOperator) (:pointer "irr::IOSOperator *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_clear" IGUIEnvironment_clear) :void
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_postEventFromUser" IGUIEnvironment_postEventFromUser) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (event (:pointer "irr::SEvent *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_setUserEventReceiver" IGUIEnvironment_setUserEventReceiver) :void
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (evr (:pointer "irr::IEventReceiver *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getSkin" IGUIEnvironment_getSkin) (:pointer "irr::gui::IGUISkin *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_setSkin" IGUIEnvironment_setSkin) :void
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (skin (:pointer "irr::gui::IGUISkin *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_createSkin" IGUIEnvironment_createSkin) (:pointer "irr::gui::IGUISkin *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (type :enum))

(cffi:defcfun ("_wrap_IGUIEnvironment_createImageList" IGUIEnvironment_createImageList) (:pointer "irr::gui::IGUIImageList *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (texture (:pointer "irr::video::ITexture *"))
  (imageSize (:pointer "dimension2di"))
  (useAlphaChannel :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_getFont" IGUIEnvironment_getFont) (:pointer "irr::gui::IGUIFont *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addFont" IGUIEnvironment_addFont) (:pointer "irr::gui::IGUIFont *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (name (:pointer "path"))
  (font (:pointer "irr::gui::IGUIFont *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_removeFont" IGUIEnvironment_removeFont) :void
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (font (:pointer "irr::gui::IGUIFont *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getBuiltInFont" IGUIEnvironment_getBuiltInFont) (:pointer "irr::gui::IGUIFont *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getSpriteBank" IGUIEnvironment_getSpriteBank) (:pointer "irr::gui::IGUISpriteBank *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addEmptySpriteBank" IGUIEnvironment_addEmptySpriteBank) (:pointer "irr::gui::IGUISpriteBank *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (name (:pointer "path")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getRootGUIElement" IGUIEnvironment_getRootGUIElement) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addButton__SWIG_0" IGUIEnvironment_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (text :w-string)
  (tooltiptext :w-string))

(cffi:defcfun ("_wrap_IGUIEnvironment_addButton__SWIG_1" IGUIEnvironment_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIEnvironment_addButton__SWIG_2" IGUIEnvironment_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addButton__SWIG_3" IGUIEnvironment_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addButton__SWIG_4" IGUIEnvironment_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addWindow__SWIG_0" IGUIEnvironment_addWindow) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (modal :bool)
  (text :w-string)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addWindow__SWIG_1" IGUIEnvironment_addWindow) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (modal :bool)
  (text :w-string)
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addWindow__SWIG_2" IGUIEnvironment_addWindow) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (modal :bool)
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIEnvironment_addWindow__SWIG_3" IGUIEnvironment_addWindow) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (modal :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addWindow__SWIG_4" IGUIEnvironment_addWindow) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addModalScreen" IGUIEnvironment_addModalScreen) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMessageBox__SWIG_0" IGUIEnvironment_addMessageBox) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (caption :w-string)
  (text :w-string)
  (modal :bool)
  (flags :int)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (image (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMessageBox__SWIG_1" IGUIEnvironment_addMessageBox) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (caption :w-string)
  (text :w-string)
  (modal :bool)
  (flags :int)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMessageBox__SWIG_2" IGUIEnvironment_addMessageBox) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (caption :w-string)
  (text :w-string)
  (modal :bool)
  (flags :int)
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMessageBox__SWIG_3" IGUIEnvironment_addMessageBox) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (caption :w-string)
  (text :w-string)
  (modal :bool)
  (flags :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMessageBox__SWIG_4" IGUIEnvironment_addMessageBox) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (caption :w-string)
  (text :w-string)
  (modal :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMessageBox__SWIG_5" IGUIEnvironment_addMessageBox) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (caption :w-string)
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMessageBox__SWIG_6" IGUIEnvironment_addMessageBox) (:pointer "irr::gui::IGUIWindow *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (caption :w-string))

(cffi:defcfun ("_wrap_IGUIEnvironment_addScrollBar__SWIG_0" IGUIEnvironment_addScrollBar) (:pointer "irr::gui::IGUIScrollBar *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (horizontal :bool)
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addScrollBar__SWIG_1" IGUIEnvironment_addScrollBar) (:pointer "irr::gui::IGUIScrollBar *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (horizontal :bool)
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addScrollBar__SWIG_2" IGUIEnvironment_addScrollBar) (:pointer "irr::gui::IGUIScrollBar *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (horizontal :bool)
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addImage__SWIG_0" IGUIEnvironment_addImage) (:pointer "irr::gui::IGUIImage *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (image (:pointer "irr::video::ITexture *"))
  (pos (:pointer "vector2di"))
  (useAlphaChannel :bool)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIEnvironment_addImage__SWIG_1" IGUIEnvironment_addImage) (:pointer "irr::gui::IGUIImage *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (image (:pointer "irr::video::ITexture *"))
  (pos (:pointer "vector2di"))
  (useAlphaChannel :bool)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addImage__SWIG_2" IGUIEnvironment_addImage) (:pointer "irr::gui::IGUIImage *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (image (:pointer "irr::video::ITexture *"))
  (pos (:pointer "vector2di"))
  (useAlphaChannel :bool)
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addImage__SWIG_3" IGUIEnvironment_addImage) (:pointer "irr::gui::IGUIImage *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (image (:pointer "irr::video::ITexture *"))
  (pos (:pointer "vector2di"))
  (useAlphaChannel :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addImage__SWIG_4" IGUIEnvironment_addImage) (:pointer "irr::gui::IGUIImage *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (image (:pointer "irr::video::ITexture *"))
  (pos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addImage__SWIG_5" IGUIEnvironment_addImage) (:pointer "irr::gui::IGUIImage *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (text :w-string)
  (useAlphaChannel :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addImage__SWIG_6" IGUIEnvironment_addImage) (:pointer "irr::gui::IGUIImage *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIEnvironment_addImage__SWIG_7" IGUIEnvironment_addImage) (:pointer "irr::gui::IGUIImage *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addImage__SWIG_8" IGUIEnvironment_addImage) (:pointer "irr::gui::IGUIImage *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addImage__SWIG_9" IGUIEnvironment_addImage) (:pointer "irr::gui::IGUIImage *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addCheckBox__SWIG_0" IGUIEnvironment_addCheckBox) (:pointer "irr::gui::IGUICheckBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (checked :bool)
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIEnvironment_addCheckBox__SWIG_1" IGUIEnvironment_addCheckBox) (:pointer "irr::gui::IGUICheckBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (checked :bool)
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addCheckBox__SWIG_2" IGUIEnvironment_addCheckBox) (:pointer "irr::gui::IGUICheckBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (checked :bool)
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addCheckBox__SWIG_3" IGUIEnvironment_addCheckBox) (:pointer "irr::gui::IGUICheckBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (checked :bool)
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addListBox__SWIG_0" IGUIEnvironment_addListBox) (:pointer "irr::gui::IGUIListBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (drawBackground :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addListBox__SWIG_1" IGUIEnvironment_addListBox) (:pointer "irr::gui::IGUIListBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addListBox__SWIG_2" IGUIEnvironment_addListBox) (:pointer "irr::gui::IGUIListBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addListBox__SWIG_3" IGUIEnvironment_addListBox) (:pointer "irr::gui::IGUIListBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTreeView__SWIG_0" IGUIEnvironment_addTreeView) (:pointer "irr::gui::IGUITreeView *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (drawBackground :bool)
  (scrollBarVertical :bool)
  (scrollBarHorizontal :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTreeView__SWIG_1" IGUIEnvironment_addTreeView) (:pointer "irr::gui::IGUITreeView *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (drawBackground :bool)
  (scrollBarVertical :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTreeView__SWIG_2" IGUIEnvironment_addTreeView) (:pointer "irr::gui::IGUITreeView *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (drawBackground :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTreeView__SWIG_3" IGUIEnvironment_addTreeView) (:pointer "irr::gui::IGUITreeView *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTreeView__SWIG_4" IGUIEnvironment_addTreeView) (:pointer "irr::gui::IGUITreeView *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTreeView__SWIG_5" IGUIEnvironment_addTreeView) (:pointer "irr::gui::IGUITreeView *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMeshViewer__SWIG_0" IGUIEnvironment_addMeshViewer) (:pointer "irr::gui::IGUIMeshViewer *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMeshViewer__SWIG_1" IGUIEnvironment_addMeshViewer) (:pointer "irr::gui::IGUIMeshViewer *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMeshViewer__SWIG_2" IGUIEnvironment_addMeshViewer) (:pointer "irr::gui::IGUIMeshViewer *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMeshViewer__SWIG_3" IGUIEnvironment_addMeshViewer) (:pointer "irr::gui::IGUIMeshViewer *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_0" IGUIEnvironment_addFileOpenDialog) (:pointer "irr::gui::IGUIFileOpenDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (title :w-string)
  (modal :bool)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (restoreCWD :bool)
  (startDir (:pointer "irr::io::path::char_type *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_1" IGUIEnvironment_addFileOpenDialog) (:pointer "irr::gui::IGUIFileOpenDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (title :w-string)
  (modal :bool)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (restoreCWD :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_2" IGUIEnvironment_addFileOpenDialog) (:pointer "irr::gui::IGUIFileOpenDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (title :w-string)
  (modal :bool)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_3" IGUIEnvironment_addFileOpenDialog) (:pointer "irr::gui::IGUIFileOpenDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (title :w-string)
  (modal :bool)
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_4" IGUIEnvironment_addFileOpenDialog) (:pointer "irr::gui::IGUIFileOpenDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (title :w-string)
  (modal :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_5" IGUIEnvironment_addFileOpenDialog) (:pointer "irr::gui::IGUIFileOpenDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (title :w-string))

(cffi:defcfun ("_wrap_IGUIEnvironment_addFileOpenDialog__SWIG_6" IGUIEnvironment_addFileOpenDialog) (:pointer "irr::gui::IGUIFileOpenDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addColorSelectDialog__SWIG_0" IGUIEnvironment_addColorSelectDialog) (:pointer "irr::gui::IGUIColorSelectDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (title :w-string)
  (modal :bool)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addColorSelectDialog__SWIG_1" IGUIEnvironment_addColorSelectDialog) (:pointer "irr::gui::IGUIColorSelectDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (title :w-string)
  (modal :bool)
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addColorSelectDialog__SWIG_2" IGUIEnvironment_addColorSelectDialog) (:pointer "irr::gui::IGUIColorSelectDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (title :w-string)
  (modal :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addColorSelectDialog__SWIG_3" IGUIEnvironment_addColorSelectDialog) (:pointer "irr::gui::IGUIColorSelectDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (title :w-string))

(cffi:defcfun ("_wrap_IGUIEnvironment_addColorSelectDialog__SWIG_4" IGUIEnvironment_addColorSelectDialog) (:pointer "irr::gui::IGUIColorSelectDialog *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addStaticText__SWIG_0" IGUIEnvironment_addStaticText) (:pointer "irr::gui::IGUIStaticText *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti"))
  (border :bool)
  (wordWrap :bool)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (fillBackground :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addStaticText__SWIG_1" IGUIEnvironment_addStaticText) (:pointer "irr::gui::IGUIStaticText *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti"))
  (border :bool)
  (wordWrap :bool)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addStaticText__SWIG_2" IGUIEnvironment_addStaticText) (:pointer "irr::gui::IGUIStaticText *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti"))
  (border :bool)
  (wordWrap :bool)
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addStaticText__SWIG_3" IGUIEnvironment_addStaticText) (:pointer "irr::gui::IGUIStaticText *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti"))
  (border :bool)
  (wordWrap :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addStaticText__SWIG_4" IGUIEnvironment_addStaticText) (:pointer "irr::gui::IGUIStaticText *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti"))
  (border :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addStaticText__SWIG_5" IGUIEnvironment_addStaticText) (:pointer "irr::gui::IGUIStaticText *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addEditBox__SWIG_0" IGUIEnvironment_addEditBox) (:pointer "irr::gui::IGUIEditBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti"))
  (border :bool)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addEditBox__SWIG_1" IGUIEnvironment_addEditBox) (:pointer "irr::gui::IGUIEditBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti"))
  (border :bool)
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addEditBox__SWIG_2" IGUIEnvironment_addEditBox) (:pointer "irr::gui::IGUIEditBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti"))
  (border :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addEditBox__SWIG_3" IGUIEnvironment_addEditBox) (:pointer "irr::gui::IGUIEditBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addSpinBox__SWIG_0" IGUIEnvironment_addSpinBox) (:pointer "irr::gui::IGUISpinBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti"))
  (border :bool)
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addSpinBox__SWIG_1" IGUIEnvironment_addSpinBox) (:pointer "irr::gui::IGUISpinBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti"))
  (border :bool)
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addSpinBox__SWIG_2" IGUIEnvironment_addSpinBox) (:pointer "irr::gui::IGUISpinBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti"))
  (border :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addSpinBox__SWIG_3" IGUIEnvironment_addSpinBox) (:pointer "irr::gui::IGUISpinBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (text :w-string)
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addInOutFader__SWIG_0" IGUIEnvironment_addInOutFader) (:pointer "irr::gui::IGUIInOutFader *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addInOutFader__SWIG_1" IGUIEnvironment_addInOutFader) (:pointer "irr::gui::IGUIInOutFader *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addInOutFader__SWIG_2" IGUIEnvironment_addInOutFader) (:pointer "irr::gui::IGUIInOutFader *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addInOutFader__SWIG_3" IGUIEnvironment_addInOutFader) (:pointer "irr::gui::IGUIInOutFader *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTabControl__SWIG_0" IGUIEnvironment_addTabControl) (:pointer "irr::gui::IGUITabControl *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (fillbackground :bool)
  (border :bool)
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTabControl__SWIG_1" IGUIEnvironment_addTabControl) (:pointer "irr::gui::IGUITabControl *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (fillbackground :bool)
  (border :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTabControl__SWIG_2" IGUIEnvironment_addTabControl) (:pointer "irr::gui::IGUITabControl *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (fillbackground :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTabControl__SWIG_3" IGUIEnvironment_addTabControl) (:pointer "irr::gui::IGUITabControl *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTabControl__SWIG_4" IGUIEnvironment_addTabControl) (:pointer "irr::gui::IGUITabControl *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTab__SWIG_0" IGUIEnvironment_addTab) (:pointer "irr::gui::IGUITab *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTab__SWIG_1" IGUIEnvironment_addTab) (:pointer "irr::gui::IGUITab *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTab__SWIG_2" IGUIEnvironment_addTab) (:pointer "irr::gui::IGUITab *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addContextMenu__SWIG_0" IGUIEnvironment_addContextMenu) (:pointer "irr::gui::IGUIContextMenu *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addContextMenu__SWIG_1" IGUIEnvironment_addContextMenu) (:pointer "irr::gui::IGUIContextMenu *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addContextMenu__SWIG_2" IGUIEnvironment_addContextMenu) (:pointer "irr::gui::IGUIContextMenu *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMenu__SWIG_0" IGUIEnvironment_addMenu) (:pointer "irr::gui::IGUIContextMenu *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMenu__SWIG_1" IGUIEnvironment_addMenu) (:pointer "irr::gui::IGUIContextMenu *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addMenu__SWIG_2" IGUIEnvironment_addMenu) (:pointer "irr::gui::IGUIContextMenu *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addToolBar__SWIG_0" IGUIEnvironment_addToolBar) (:pointer "irr::gui::IGUIToolBar *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addToolBar__SWIG_1" IGUIEnvironment_addToolBar) (:pointer "irr::gui::IGUIToolBar *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addToolBar__SWIG_2" IGUIEnvironment_addToolBar) (:pointer "irr::gui::IGUIToolBar *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addComboBox__SWIG_0" IGUIEnvironment_addComboBox) (:pointer "irr::gui::IGUIComboBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addComboBox__SWIG_1" IGUIEnvironment_addComboBox) (:pointer "irr::gui::IGUIComboBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addComboBox__SWIG_2" IGUIEnvironment_addComboBox) (:pointer "irr::gui::IGUIComboBox *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTable__SWIG_0" IGUIEnvironment_addTable) (:pointer "irr::gui::IGUITable *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int)
  (drawBackground :bool))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTable__SWIG_1" IGUIEnvironment_addTable) (:pointer "irr::gui::IGUITable *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTable__SWIG_2" IGUIEnvironment_addTable) (:pointer "irr::gui::IGUITable *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addTable__SWIG_3" IGUIEnvironment_addTable) (:pointer "irr::gui::IGUITable *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (rectangle (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getDefaultGUIElementFactory" IGUIEnvironment_getDefaultGUIElementFactory) (:pointer "irr::gui::IGUIElementFactory *")
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_registerGUIElementFactory" IGUIEnvironment_registerGUIElementFactory) :void
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (factoryToAdd (:pointer "irr::gui::IGUIElementFactory *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getRegisteredGUIElementFactoryCount" IGUIEnvironment_getRegisteredGUIElementFactoryCount) :uint
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_getGUIElementFactory" IGUIEnvironment_getGUIElementFactory) (:pointer "irr::gui::IGUIElementFactory *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (index :uint))

(cffi:defcfun ("_wrap_IGUIEnvironment_addGUIElement__SWIG_0" IGUIEnvironment_addGUIElement) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (elementName :string)
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_addGUIElement__SWIG_1" IGUIEnvironment_addGUIElement) (:pointer "irr::gui::IGUIElement *")
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (elementName :string))

(cffi:defcfun ("_wrap_IGUIEnvironment_saveGUI__SWIG_0" IGUIEnvironment_saveGUI) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (filename (:pointer "path"))
  (start (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_saveGUI__SWIG_1" IGUIEnvironment_saveGUI) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IGUIEnvironment_saveGUI__SWIG_2" IGUIEnvironment_saveGUI) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (file (:pointer "irr::io::IWriteFile *"))
  (start (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_saveGUI__SWIG_3" IGUIEnvironment_saveGUI) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (file (:pointer "irr::io::IWriteFile *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_loadGUI__SWIG_0" IGUIEnvironment_loadGUI) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (filename (:pointer "path"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_loadGUI__SWIG_1" IGUIEnvironment_loadGUI) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IGUIEnvironment_loadGUI__SWIG_2" IGUIEnvironment_loadGUI) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (file (:pointer "irr::io::IReadFile *"))
  (parent (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_loadGUI__SWIG_3" IGUIEnvironment_loadGUI) :bool
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_serializeAttributes__SWIG_0" IGUIEnvironment_serializeAttributes) :void
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (out (:pointer "irr::io::IAttributes *"))
  (options (:pointer "irr::io::SAttributeReadWriteOptions *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_serializeAttributes__SWIG_1" IGUIEnvironment_serializeAttributes) :void
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (out (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_deserializeAttributes__SWIG_0" IGUIEnvironment_deserializeAttributes) :void
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (in (:pointer "irr::io::IAttributes *"))
  (options (:pointer "irr::io::SAttributeReadWriteOptions *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_deserializeAttributes__SWIG_1" IGUIEnvironment_deserializeAttributes) :void
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (in (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_writeGUIElement" IGUIEnvironment_writeGUIElement) :void
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (writer (:pointer "irr::io::IXMLWriter *"))
  (node (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_IGUIEnvironment_readGUIElement" IGUIEnvironment_readGUIElement) :void
  (self (:pointer "irr::gui::IGUIEnvironment *"))
  (reader (:pointer "irr::io::IXMLReader *"))
  (node (:pointer "irr::gui::IGUIElement *")))

(cffi:defcfun ("_wrap_delete_IGUIEnvironment" delete_IGUIEnvironment) :void
  (self (:pointer "irr::gui::IGUIEnvironment *")))

(cffi:defcfun ("_wrap_IGUIFileOpenDialog_getFileName" IGUIFileOpenDialog_getFileName) :w-string
  (self (:pointer "irr::gui::IGUIFileOpenDialog *")))

(cffi:defcfun ("_wrap_IGUIFileOpenDialog_getDirectoryName" IGUIFileOpenDialog_getDirectoryName) (:reference "path")
  (self (:pointer "irr::gui::IGUIFileOpenDialog *")))

(cffi:defcfun ("_wrap_delete_IGUIFileOpenDialog" delete_IGUIFileOpenDialog) :void
  (self (:pointer "irr::gui::IGUIFileOpenDialog *")))

(cffi:defcenum EGUI_FONT_TYPE
	(:EGFT_BITMAP 0)
	:EGFT_VECTOR
	:EGFT_OS
	:EGFT_CUSTOM)

(cffi:defcfun ("_wrap_IGUIFont_draw__SWIG_0" IGUIFont_draw) :void
  (self (:pointer "irr::gui::IGUIFont *"))
  (text (:reference :irrstring))
  (position (:pointer "recti"))
  (color (:pointer "irr::video::SColor"))
  (hcenter :bool)
  (vcenter :bool)
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIFont_draw__SWIG_1" IGUIFont_draw) :void
  (self (:pointer "irr::gui::IGUIFont *"))
  (text (:reference :irrstring))
  (position (:pointer "recti"))
  (color (:pointer "irr::video::SColor"))
  (hcenter :bool)
  (vcenter :bool))

(cffi:defcfun ("_wrap_IGUIFont_draw__SWIG_2" IGUIFont_draw) :void
  (self (:pointer "irr::gui::IGUIFont *"))
  (text (:reference :irrstring))
  (position (:pointer "recti"))
  (color (:pointer "irr::video::SColor"))
  (hcenter :bool))

(cffi:defcfun ("_wrap_IGUIFont_draw__SWIG_3" IGUIFont_draw) :void
  (self (:pointer "irr::gui::IGUIFont *"))
  (text (:reference :irrstring))
  (position (:pointer "recti"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUIFont_getDimension" IGUIFont_getDimension) (:by-value "dimension2du")
  (self (:pointer "irr::gui::IGUIFont *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIFont_getCharacterFromPos" IGUIFont_getCharacterFromPos) :int
  (self (:pointer "irr::gui::IGUIFont *"))
  (text :w-string)
  (pixel_x :int))

(cffi:defcfun ("_wrap_IGUIFont_getType" IGUIFont_getType) :enum
  (self (:pointer "irr::gui::IGUIFont *")))

(cffi:defcfun ("_wrap_IGUIFont_setKerningWidth" IGUIFont_setKerningWidth) :void
  (self (:pointer "irr::gui::IGUIFont *"))
  (kerning :int))

(cffi:defcfun ("_wrap_IGUIFont_setKerningHeight" IGUIFont_setKerningHeight) :void
  (self (:pointer "irr::gui::IGUIFont *"))
  (kerning :int))

(cffi:defcfun ("_wrap_IGUIFont_getKerningWidth__SWIG_0" IGUIFont_getKerningWidth) :int
  (self (:pointer "irr::gui::IGUIFont *"))
  (thisLetter :w-string)
  (previousLetter :w-string))

(cffi:defcfun ("_wrap_IGUIFont_getKerningWidth__SWIG_1" IGUIFont_getKerningWidth) :int
  (self (:pointer "irr::gui::IGUIFont *"))
  (thisLetter :w-string))

(cffi:defcfun ("_wrap_IGUIFont_getKerningWidth__SWIG_2" IGUIFont_getKerningWidth) :int
  (self (:pointer "irr::gui::IGUIFont *")))

(cffi:defcfun ("_wrap_IGUIFont_getKerningHeight" IGUIFont_getKerningHeight) :int
  (self (:pointer "irr::gui::IGUIFont *")))

(cffi:defcfun ("_wrap_IGUIFont_setInvisibleCharacters" IGUIFont_setInvisibleCharacters) :void
  (self (:pointer "irr::gui::IGUIFont *"))
  (s :w-string))

(cffi:defcfun ("_wrap_delete_IGUIFont" delete_IGUIFont) :void
  (self (:pointer "irr::gui::IGUIFont *")))

(cffi:defcfun ("_wrap_IGUIFontBitmap_getSpriteBank" IGUIFontBitmap_getSpriteBank) (:pointer "irr::gui::IGUISpriteBank *")
  (self (:pointer "irr::gui::IGUIFontBitmap *")))

(cffi:defcfun ("_wrap_IGUIFontBitmap_getSpriteNoFromChar" IGUIFontBitmap_getSpriteNoFromChar) :uint
  (self (:pointer "irr::gui::IGUIFontBitmap *"))
  (c :w-string))

(cffi:defcfun ("_wrap_IGUIFontBitmap_getKerningWidth__SWIG_0" IGUIFontBitmap_getKerningWidth) :int
  (self (:pointer "irr::gui::IGUIFontBitmap *"))
  (thisLetter :w-string)
  (previousLetter :w-string))

(cffi:defcfun ("_wrap_IGUIFontBitmap_getKerningWidth__SWIG_1" IGUIFontBitmap_getKerningWidth) :int
  (self (:pointer "irr::gui::IGUIFontBitmap *"))
  (thisLetter :w-string))

(cffi:defcfun ("_wrap_IGUIFontBitmap_getKerningWidth__SWIG_2" IGUIFontBitmap_getKerningWidth) :int
  (self (:pointer "irr::gui::IGUIFontBitmap *")))

(cffi:defcfun ("_wrap_delete_IGUIFontBitmap" delete_IGUIFontBitmap) :void
  (self (:pointer "irr::gui::IGUIFontBitmap *")))

(cffi:defcfun ("_wrap_IGUIImage_setImage" IGUIImage_setImage) :void
  (self (:pointer "irr::gui::IGUIImage *"))
  (image (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IGUIImage_getImage" IGUIImage_getImage) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::gui::IGUIImage *")))

(cffi:defcfun ("_wrap_IGUIImage_setColor" IGUIImage_setColor) :void
  (self (:pointer "irr::gui::IGUIImage *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUIImage_setScaleImage" IGUIImage_setScaleImage) :void
  (self (:pointer "irr::gui::IGUIImage *"))
  (scale :bool))

(cffi:defcfun ("_wrap_IGUIImage_setUseAlphaChannel" IGUIImage_setUseAlphaChannel) :void
  (self (:pointer "irr::gui::IGUIImage *"))
  (use :bool))

(cffi:defcfun ("_wrap_IGUIImage_getColor" IGUIImage_getColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::gui::IGUIImage *")))

(cffi:defcfun ("_wrap_IGUIImage_isImageScaled" IGUIImage_isImageScaled) :bool
  (self (:pointer "irr::gui::IGUIImage *")))

(cffi:defcfun ("_wrap_IGUIImage_isAlphaChannelUsed" IGUIImage_isAlphaChannelUsed) :bool
  (self (:pointer "irr::gui::IGUIImage *")))

(cffi:defcfun ("_wrap_delete_IGUIImage" delete_IGUIImage) :void
  (self (:pointer "irr::gui::IGUIImage *")))

(cffi:defcfun ("_wrap_IGUIInOutFader_getColor" IGUIInOutFader_getColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::gui::IGUIInOutFader *")))

(cffi:defcfun ("_wrap_IGUIInOutFader_setColor__SWIG_0" IGUIInOutFader_setColor) :void
  (self (:pointer "irr::gui::IGUIInOutFader *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUIInOutFader_setColor__SWIG_1" IGUIInOutFader_setColor) :void
  (self (:pointer "irr::gui::IGUIInOutFader *"))
  (source (:pointer "irr::video::SColor"))
  (dest (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUIInOutFader_fadeIn" IGUIInOutFader_fadeIn) :void
  (self (:pointer "irr::gui::IGUIInOutFader *"))
  (time :uint))

(cffi:defcfun ("_wrap_IGUIInOutFader_fadeOut" IGUIInOutFader_fadeOut) :void
  (self (:pointer "irr::gui::IGUIInOutFader *"))
  (time :uint))

(cffi:defcfun ("_wrap_IGUIInOutFader_isReady" IGUIInOutFader_isReady) :bool
  (self (:pointer "irr::gui::IGUIInOutFader *")))

(cffi:defcfun ("_wrap_delete_IGUIInOutFader" delete_IGUIInOutFader) :void
  (self (:pointer "irr::gui::IGUIInOutFader *")))

(cffi:defcenum EGUI_LISTBOX_COLOR
	(:EGUI_LBC_TEXT 0)
	:EGUI_LBC_TEXT_HIGHLIGHT
	:EGUI_LBC_ICON
	:EGUI_LBC_ICON_HIGHLIGHT
	:EGUI_LBC_COUNT)

(cffi:defcfun ("_wrap_IGUIListBox_getItemCount" IGUIListBox_getItemCount) :uint
  (self (:pointer "irr::gui::IGUIListBox *")))

(cffi:defcfun ("_wrap_IGUIListBox_getListItem" IGUIListBox_getListItem) :w-string
  (self (:pointer "irr::gui::IGUIListBox *"))
  (id :uint))

(cffi:defcfun ("_wrap_IGUIListBox_addItem__SWIG_0" IGUIListBox_addItem) :uint
  (self (:pointer "irr::gui::IGUIListBox *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIListBox_addItem__SWIG_1" IGUIListBox_addItem) :uint
  (self (:pointer "irr::gui::IGUIListBox *"))
  (text :w-string)
  (icon :int))

(cffi:defcfun ("_wrap_IGUIListBox_removeItem" IGUIListBox_removeItem) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index :uint))

(cffi:defcfun ("_wrap_IGUIListBox_getItemAt" IGUIListBox_getItemAt) :int
  (self (:pointer "irr::gui::IGUIListBox *"))
  (xpos :int)
  (ypos :int))

(cffi:defcfun ("_wrap_IGUIListBox_getIcon" IGUIListBox_getIcon) :int
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index :uint))

(cffi:defcfun ("_wrap_IGUIListBox_setSpriteBank" IGUIListBox_setSpriteBank) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (bank (:pointer "irr::gui::IGUISpriteBank *")))

(cffi:defcfun ("_wrap_IGUIListBox_clear" IGUIListBox_clear) :void
  (self (:pointer "irr::gui::IGUIListBox *")))

(cffi:defcfun ("_wrap_IGUIListBox_getSelected" IGUIListBox_getSelected) :int
  (self (:pointer "irr::gui::IGUIListBox *")))

(cffi:defcfun ("_wrap_IGUIListBox_setSelected__SWIG_0" IGUIListBox_setSelected) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index :int))

(cffi:defcfun ("_wrap_IGUIListBox_setSelected__SWIG_1" IGUIListBox_setSelected) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (item :w-string))

(cffi:defcfun ("_wrap_IGUIListBox_setAutoScrollEnabled" IGUIListBox_setAutoScrollEnabled) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (scroll :bool))

(cffi:defcfun ("_wrap_IGUIListBox_isAutoScrollEnabled" IGUIListBox_isAutoScrollEnabled) :bool
  (self (:pointer "irr::gui::IGUIListBox *")))

(cffi:defcfun ("_wrap_IGUIListBox_setItemOverrideColor__SWIG_0" IGUIListBox_setItemOverrideColor) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index :uint)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUIListBox_setItemOverrideColor__SWIG_1" IGUIListBox_setItemOverrideColor) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index :uint)
  (colorType :enum)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUIListBox_clearItemOverrideColor__SWIG_0" IGUIListBox_clearItemOverrideColor) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index :uint))

(cffi:defcfun ("_wrap_IGUIListBox_clearItemOverrideColor__SWIG_1" IGUIListBox_clearItemOverrideColor) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index :uint)
  (colorType :enum))

(cffi:defcfun ("_wrap_IGUIListBox_hasItemOverrideColor" IGUIListBox_hasItemOverrideColor) :bool
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index :uint)
  (colorType :enum))

(cffi:defcfun ("_wrap_IGUIListBox_getItemOverrideColor" IGUIListBox_getItemOverrideColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index :uint)
  (colorType :enum))

(cffi:defcfun ("_wrap_IGUIListBox_getItemDefaultColor" IGUIListBox_getItemDefaultColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::gui::IGUIListBox *"))
  (colorType :enum))

(cffi:defcfun ("_wrap_IGUIListBox_setItem" IGUIListBox_setItem) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index :uint)
  (text :w-string)
  (icon :int))

(cffi:defcfun ("_wrap_IGUIListBox_insertItem" IGUIListBox_insertItem) :int
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index :uint)
  (text :w-string)
  (icon :int))

(cffi:defcfun ("_wrap_IGUIListBox_swapItems" IGUIListBox_swapItems) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (index1 :uint)
  (index2 :uint))

(cffi:defcfun ("_wrap_IGUIListBox_setItemHeight" IGUIListBox_setItemHeight) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (height :int))

(cffi:defcfun ("_wrap_IGUIListBox_setDrawBackground" IGUIListBox_setDrawBackground) :void
  (self (:pointer "irr::gui::IGUIListBox *"))
  (draw :bool))

(cffi:defcfun ("_wrap_delete_IGUIListBox" delete_IGUIListBox) :void
  (self (:pointer "irr::gui::IGUIListBox *")))

(cffi:defcfun ("_wrap_IGUIMeshViewer_setMesh" IGUIMeshViewer_setMesh) :void
  (self (:pointer "irr::gui::IGUIMeshViewer *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *")))

(cffi:defcfun ("_wrap_IGUIMeshViewer_getMesh" IGUIMeshViewer_getMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::gui::IGUIMeshViewer *")))

(cffi:defcfun ("_wrap_IGUIMeshViewer_setMaterial" IGUIMeshViewer_setMaterial) :void
  (self (:pointer "irr::gui::IGUIMeshViewer *"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_IGUIMeshViewer_getMaterial" IGUIMeshViewer_getMaterial) (:reference "irr::video::SMaterial *")
  (self (:pointer "irr::gui::IGUIMeshViewer *")))

(cffi:defcfun ("_wrap_delete_IGUIMeshViewer" delete_IGUIMeshViewer) :void
  (self (:pointer "irr::gui::IGUIMeshViewer *")))

(cffi:defcfun ("_wrap_IGUIScrollBar_setMax" IGUIScrollBar_setMax) :void
  (self (:pointer "irr::gui::IGUIScrollBar *"))
  (max :int))

(cffi:defcfun ("_wrap_IGUIScrollBar_getMax" IGUIScrollBar_getMax) :int
  (self (:pointer "irr::gui::IGUIScrollBar *")))

(cffi:defcfun ("_wrap_IGUIScrollBar_setMin" IGUIScrollBar_setMin) :void
  (self (:pointer "irr::gui::IGUIScrollBar *"))
  (min :int))

(cffi:defcfun ("_wrap_IGUIScrollBar_getMin" IGUIScrollBar_getMin) :int
  (self (:pointer "irr::gui::IGUIScrollBar *")))

(cffi:defcfun ("_wrap_IGUIScrollBar_getSmallStep" IGUIScrollBar_getSmallStep) :int
  (self (:pointer "irr::gui::IGUIScrollBar *")))

(cffi:defcfun ("_wrap_IGUIScrollBar_setSmallStep" IGUIScrollBar_setSmallStep) :void
  (self (:pointer "irr::gui::IGUIScrollBar *"))
  (step :int))

(cffi:defcfun ("_wrap_IGUIScrollBar_getLargeStep" IGUIScrollBar_getLargeStep) :int
  (self (:pointer "irr::gui::IGUIScrollBar *")))

(cffi:defcfun ("_wrap_IGUIScrollBar_setLargeStep" IGUIScrollBar_setLargeStep) :void
  (self (:pointer "irr::gui::IGUIScrollBar *"))
  (step :int))

(cffi:defcfun ("_wrap_IGUIScrollBar_getPos" IGUIScrollBar_getPos) :int
  (self (:pointer "irr::gui::IGUIScrollBar *")))

(cffi:defcfun ("_wrap_IGUIScrollBar_setPos" IGUIScrollBar_setPos) :void
  (self (:pointer "irr::gui::IGUIScrollBar *"))
  (pos :int))

(cffi:defcfun ("_wrap_delete_IGUIScrollBar" delete_IGUIScrollBar) :void
  (self (:pointer "irr::gui::IGUIScrollBar *")))

(cffi:defcfun ("_wrap_IGUISpinBox_getEditBox" IGUISpinBox_getEditBox) (:pointer "irr::gui::IGUIEditBox *")
  (self (:pointer "irr::gui::IGUISpinBox *")))

(cffi:defcfun ("_wrap_IGUISpinBox_setValue" IGUISpinBox_setValue) :void
  (self (:pointer "irr::gui::IGUISpinBox *"))
  (val :float))

(cffi:defcfun ("_wrap_IGUISpinBox_getValue" IGUISpinBox_getValue) :float
  (self (:pointer "irr::gui::IGUISpinBox *")))

(cffi:defcfun ("_wrap_IGUISpinBox_setRange" IGUISpinBox_setRange) :void
  (self (:pointer "irr::gui::IGUISpinBox *"))
  (min :float)
  (max :float))

(cffi:defcfun ("_wrap_IGUISpinBox_getMin" IGUISpinBox_getMin) :float
  (self (:pointer "irr::gui::IGUISpinBox *")))

(cffi:defcfun ("_wrap_IGUISpinBox_getMax" IGUISpinBox_getMax) :float
  (self (:pointer "irr::gui::IGUISpinBox *")))

(cffi:defcfun ("_wrap_IGUISpinBox_setStepSize__SWIG_0" IGUISpinBox_setStepSize) :void
  (self (:pointer "irr::gui::IGUISpinBox *"))
  (step :float))

(cffi:defcfun ("_wrap_IGUISpinBox_setStepSize__SWIG_1" IGUISpinBox_setStepSize) :void
  (self (:pointer "irr::gui::IGUISpinBox *")))

(cffi:defcfun ("_wrap_IGUISpinBox_setDecimalPlaces" IGUISpinBox_setDecimalPlaces) :void
  (self (:pointer "irr::gui::IGUISpinBox *"))
  (places :int))

(cffi:defcfun ("_wrap_IGUISpinBox_getStepSize" IGUISpinBox_getStepSize) :float
  (self (:pointer "irr::gui::IGUISpinBox *")))

(cffi:defcfun ("_wrap_delete_IGUISpinBox" delete_IGUISpinBox) :void
  (self (:pointer "irr::gui::IGUISpinBox *")))

(cffi:defcstruct SGUISpriteFrame
	(textureNumber :uint)
	(rectNumber :uint))

(cffi:defcstruct SGUISprite
	(Frames (:pointer "irr::core::array< irr::gui::SGUISpriteFrame,irr::core::irrAllocator< irr::gui::SGUISpriteFrame > >"))
	(frameTime :uint))

(cffi:defcfun ("_wrap_IGUISpriteBank_getPositions" IGUISpriteBank_getPositions) (:reference "irr::core::array< irr::core::rect< irr::s32 >,irr::core::irrAllocator< irr::core::rect< irr::s32 > > > *")
  (self (:pointer "irr::gui::IGUISpriteBank *")))

(cffi:defcfun ("_wrap_IGUISpriteBank_getSprites" IGUISpriteBank_getSprites) (:reference "irr::core::array< irr::gui::SGUISprite,irr::core::irrAllocator< irr::gui::SGUISprite > > *")
  (self (:pointer "irr::gui::IGUISpriteBank *")))

(cffi:defcfun ("_wrap_IGUISpriteBank_getTextureCount" IGUISpriteBank_getTextureCount) :uint
  (self (:pointer "irr::gui::IGUISpriteBank *")))

(cffi:defcfun ("_wrap_IGUISpriteBank_getTexture" IGUISpriteBank_getTexture) (:pointer "irr::video::ITexture *")
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (index :uint))

(cffi:defcfun ("_wrap_IGUISpriteBank_addTexture" IGUISpriteBank_addTexture) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IGUISpriteBank_setTexture" IGUISpriteBank_setTexture) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (index :uint)
  (texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IGUISpriteBank_addTextureAsSprite" IGUISpriteBank_addTextureAsSprite) :int
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IGUISpriteBank_clear" IGUISpriteBank_clear) :void
  (self (:pointer "irr::gui::IGUISpriteBank *")))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSprite__SWIG_0" IGUISpriteBank_draw2DSprite) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (index :uint)
  (pos (:pointer "vector2di"))
  (clip (:pointer "recti"))
  (color (:pointer "irr::video::SColor *"))
  (starttime :uint)
  (currenttime :uint)
  (loop :bool)
  (center :bool))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSprite__SWIG_1" IGUISpriteBank_draw2DSprite) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (index :uint)
  (pos (:pointer "vector2di"))
  (clip (:pointer "recti"))
  (color (:pointer "irr::video::SColor *"))
  (starttime :uint)
  (currenttime :uint)
  (loop :bool))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSprite__SWIG_2" IGUISpriteBank_draw2DSprite) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (index :uint)
  (pos (:pointer "vector2di"))
  (clip (:pointer "recti"))
  (color (:pointer "irr::video::SColor *"))
  (starttime :uint)
  (currenttime :uint))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSprite__SWIG_3" IGUISpriteBank_draw2DSprite) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (index :uint)
  (pos (:pointer "vector2di"))
  (clip (:pointer "recti"))
  (color (:pointer "irr::video::SColor *"))
  (starttime :uint))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSprite__SWIG_4" IGUISpriteBank_draw2DSprite) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (index :uint)
  (pos (:pointer "vector2di"))
  (clip (:pointer "recti"))
  (color (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSprite__SWIG_5" IGUISpriteBank_draw2DSprite) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (index :uint)
  (pos (:pointer "vector2di"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSprite__SWIG_6" IGUISpriteBank_draw2DSprite) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (index :uint)
  (pos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_0" IGUISpriteBank_draw2DSpriteBatch) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (indices (:pointer "irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *"))
  (pos (:pointer "irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *"))
  (clip (:pointer "recti"))
  (color (:pointer "irr::video::SColor *"))
  (starttime :uint)
  (currenttime :uint)
  (loop :bool)
  (center :bool))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_1" IGUISpriteBank_draw2DSpriteBatch) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (indices (:pointer "irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *"))
  (pos (:pointer "irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *"))
  (clip (:pointer "recti"))
  (color (:pointer "irr::video::SColor *"))
  (starttime :uint)
  (currenttime :uint)
  (loop :bool))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_2" IGUISpriteBank_draw2DSpriteBatch) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (indices (:pointer "irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *"))
  (pos (:pointer "irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *"))
  (clip (:pointer "recti"))
  (color (:pointer "irr::video::SColor *"))
  (starttime :uint)
  (currenttime :uint))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_3" IGUISpriteBank_draw2DSpriteBatch) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (indices (:pointer "irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *"))
  (pos (:pointer "irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *"))
  (clip (:pointer "recti"))
  (color (:pointer "irr::video::SColor *"))
  (starttime :uint))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_4" IGUISpriteBank_draw2DSpriteBatch) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (indices (:pointer "irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *"))
  (pos (:pointer "irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *"))
  (clip (:pointer "recti"))
  (color (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_5" IGUISpriteBank_draw2DSpriteBatch) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (indices (:pointer "irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *"))
  (pos (:pointer "irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUISpriteBank_draw2DSpriteBatch__SWIG_6" IGUISpriteBank_draw2DSpriteBatch) :void
  (self (:pointer "irr::gui::IGUISpriteBank *"))
  (indices (:pointer "irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *"))
  (pos (:pointer "irr::core::array< irr::core::position2di,irr::core::irrAllocator< irr::core::position2di > > *")))

(cffi:defcfun ("_wrap_delete_IGUISpriteBank" delete_IGUISpriteBank) :void
  (self (:pointer "irr::gui::IGUISpriteBank *")))

(cffi:defcfun ("_wrap_IGUIStaticText_setOverrideFont__SWIG_0" IGUIStaticText_setOverrideFont) :void
  (self (:pointer "irr::gui::IGUIStaticText *"))
  (font (:pointer "irr::gui::IGUIFont *")))

(cffi:defcfun ("_wrap_IGUIStaticText_setOverrideFont__SWIG_1" IGUIStaticText_setOverrideFont) :void
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_getOverrideFont" IGUIStaticText_getOverrideFont) (:pointer "irr::gui::IGUIFont *")
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_getActiveFont" IGUIStaticText_getActiveFont) (:pointer "irr::gui::IGUIFont *")
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_setOverrideColor" IGUIStaticText_setOverrideColor) :void
  (self (:pointer "irr::gui::IGUIStaticText *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUIStaticText_getOverrideColor" IGUIStaticText_getOverrideColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_enableOverrideColor" IGUIStaticText_enableOverrideColor) :void
  (self (:pointer "irr::gui::IGUIStaticText *"))
  (enable :bool))

(cffi:defcfun ("_wrap_IGUIStaticText_isOverrideColorEnabled" IGUIStaticText_isOverrideColorEnabled) :bool
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_setBackgroundColor" IGUIStaticText_setBackgroundColor) :void
  (self (:pointer "irr::gui::IGUIStaticText *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUIStaticText_setDrawBackground" IGUIStaticText_setDrawBackground) :void
  (self (:pointer "irr::gui::IGUIStaticText *"))
  (draw :bool))

(cffi:defcfun ("_wrap_IGUIStaticText_getBackgroundColor" IGUIStaticText_getBackgroundColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_isDrawBackgroundEnabled" IGUIStaticText_isDrawBackgroundEnabled) :bool
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_setDrawBorder" IGUIStaticText_setDrawBorder) :void
  (self (:pointer "irr::gui::IGUIStaticText *"))
  (draw :bool))

(cffi:defcfun ("_wrap_IGUIStaticText_isDrawBorderEnabled" IGUIStaticText_isDrawBorderEnabled) :bool
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_setTextAlignment" IGUIStaticText_setTextAlignment) :void
  (self (:pointer "irr::gui::IGUIStaticText *"))
  (horizontal :enum)
  (vertical :enum))

(cffi:defcfun ("_wrap_IGUIStaticText_setWordWrap" IGUIStaticText_setWordWrap) :void
  (self (:pointer "irr::gui::IGUIStaticText *"))
  (enable :bool))

(cffi:defcfun ("_wrap_IGUIStaticText_isWordWrapEnabled" IGUIStaticText_isWordWrapEnabled) :bool
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_getTextHeight" IGUIStaticText_getTextHeight) :int
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_getTextWidth" IGUIStaticText_getTextWidth) :int
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_setTextRestrainedInside" IGUIStaticText_setTextRestrainedInside) :void
  (self (:pointer "irr::gui::IGUIStaticText *"))
  (restrainedInside :bool))

(cffi:defcfun ("_wrap_IGUIStaticText_isTextRestrainedInside" IGUIStaticText_isTextRestrainedInside) :bool
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUIStaticText_setRightToLeft" IGUIStaticText_setRightToLeft) :void
  (self (:pointer "irr::gui::IGUIStaticText *"))
  (rtl :bool))

(cffi:defcfun ("_wrap_IGUIStaticText_isRightToLeft" IGUIStaticText_isRightToLeft) :bool
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_delete_IGUIStaticText" delete_IGUIStaticText) :void
  (self (:pointer "irr::gui::IGUIStaticText *")))

(cffi:defcfun ("_wrap_IGUITab_getNumber" IGUITab_getNumber) :int
  (self (:pointer "irr::gui::IGUITab *")))

(cffi:defcfun ("_wrap_IGUITab_setDrawBackground__SWIG_0" IGUITab_setDrawBackground) :void
  (self (:pointer "irr::gui::IGUITab *"))
  (draw :bool))

(cffi:defcfun ("_wrap_IGUITab_setDrawBackground__SWIG_1" IGUITab_setDrawBackground) :void
  (self (:pointer "irr::gui::IGUITab *")))

(cffi:defcfun ("_wrap_IGUITab_setBackgroundColor" IGUITab_setBackgroundColor) :void
  (self (:pointer "irr::gui::IGUITab *"))
  (c (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUITab_isDrawingBackground" IGUITab_isDrawingBackground) :bool
  (self (:pointer "irr::gui::IGUITab *")))

(cffi:defcfun ("_wrap_IGUITab_getBackgroundColor" IGUITab_getBackgroundColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::gui::IGUITab *")))

(cffi:defcfun ("_wrap_IGUITab_setTextColor" IGUITab_setTextColor) :void
  (self (:pointer "irr::gui::IGUITab *"))
  (c (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUITab_getTextColor" IGUITab_getTextColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::gui::IGUITab *")))

(cffi:defcfun ("_wrap_delete_IGUITab" delete_IGUITab) :void
  (self (:pointer "irr::gui::IGUITab *")))

(cffi:defcfun ("_wrap_IGUITabControl_addTab__SWIG_0" IGUITabControl_addTab) (:pointer "irr::gui::IGUITab *")
  (self (:pointer "irr::gui::IGUITabControl *"))
  (caption :w-string)
  (id :int))

(cffi:defcfun ("_wrap_IGUITabControl_addTab__SWIG_1" IGUITabControl_addTab) (:pointer "irr::gui::IGUITab *")
  (self (:pointer "irr::gui::IGUITabControl *"))
  (caption :w-string))

(cffi:defcfun ("_wrap_IGUITabControl_insertTab__SWIG_0" IGUITabControl_insertTab) (:pointer "irr::gui::IGUITab *")
  (self (:pointer "irr::gui::IGUITabControl *"))
  (idx :int)
  (caption :w-string)
  (id :int))

(cffi:defcfun ("_wrap_IGUITabControl_insertTab__SWIG_1" IGUITabControl_insertTab) (:pointer "irr::gui::IGUITab *")
  (self (:pointer "irr::gui::IGUITabControl *"))
  (idx :int)
  (caption :w-string))

(cffi:defcfun ("_wrap_IGUITabControl_removeTab" IGUITabControl_removeTab) :void
  (self (:pointer "irr::gui::IGUITabControl *"))
  (idx :int))

(cffi:defcfun ("_wrap_IGUITabControl_clear" IGUITabControl_clear) :void
  (self (:pointer "irr::gui::IGUITabControl *")))

(cffi:defcfun ("_wrap_IGUITabControl_getTabCount" IGUITabControl_getTabCount) :int
  (self (:pointer "irr::gui::IGUITabControl *")))

(cffi:defcfun ("_wrap_IGUITabControl_getTab" IGUITabControl_getTab) (:pointer "irr::gui::IGUITab *")
  (self (:pointer "irr::gui::IGUITabControl *"))
  (idx :int))

(cffi:defcfun ("_wrap_IGUITabControl_setActiveTab__SWIG_0" IGUITabControl_setActiveTab) :bool
  (self (:pointer "irr::gui::IGUITabControl *"))
  (idx :int))

(cffi:defcfun ("_wrap_IGUITabControl_setActiveTab__SWIG_1" IGUITabControl_setActiveTab) :bool
  (self (:pointer "irr::gui::IGUITabControl *"))
  (tab (:pointer "irr::gui::IGUITab *")))

(cffi:defcfun ("_wrap_IGUITabControl_getActiveTab" IGUITabControl_getActiveTab) :int
  (self (:pointer "irr::gui::IGUITabControl *")))

(cffi:defcfun ("_wrap_IGUITabControl_getTabAt" IGUITabControl_getTabAt) :int
  (self (:pointer "irr::gui::IGUITabControl *"))
  (xpos :int)
  (ypos :int))

(cffi:defcfun ("_wrap_IGUITabControl_setTabHeight" IGUITabControl_setTabHeight) :void
  (self (:pointer "irr::gui::IGUITabControl *"))
  (height :int))

(cffi:defcfun ("_wrap_IGUITabControl_getTabHeight" IGUITabControl_getTabHeight) :int
  (self (:pointer "irr::gui::IGUITabControl *")))

(cffi:defcfun ("_wrap_IGUITabControl_setTabMaxWidth" IGUITabControl_setTabMaxWidth) :void
  (self (:pointer "irr::gui::IGUITabControl *"))
  (width :int))

(cffi:defcfun ("_wrap_IGUITabControl_getTabMaxWidth" IGUITabControl_getTabMaxWidth) :int
  (self (:pointer "irr::gui::IGUITabControl *")))

(cffi:defcfun ("_wrap_IGUITabControl_setTabVerticalAlignment" IGUITabControl_setTabVerticalAlignment) :void
  (self (:pointer "irr::gui::IGUITabControl *"))
  (alignment :enum))

(cffi:defcfun ("_wrap_IGUITabControl_getTabVerticalAlignment" IGUITabControl_getTabVerticalAlignment) :enum
  (self (:pointer "irr::gui::IGUITabControl *")))

(cffi:defcfun ("_wrap_IGUITabControl_setTabExtraWidth" IGUITabControl_setTabExtraWidth) :void
  (self (:pointer "irr::gui::IGUITabControl *"))
  (extraWidth :int))

(cffi:defcfun ("_wrap_IGUITabControl_getTabExtraWidth" IGUITabControl_getTabExtraWidth) :int
  (self (:pointer "irr::gui::IGUITabControl *")))

(cffi:defcfun ("_wrap_delete_IGUITabControl" delete_IGUITabControl) :void
  (self (:pointer "irr::gui::IGUITabControl *")))

(cffi:defcenum EGUI_COLUMN_ORDERING
	:EGCO_NONE
	:EGCO_CUSTOM
	:EGCO_ASCENDING
	:EGCO_DESCENDING
	:EGCO_FLIP_ASCENDING_DESCENDING
	:EGCO_COUNT)

(cffi:defcvar ("GUIColumnOrderingNames" GUIColumnOrderingNames)
 (:pointer "irr::c8 **"))

(cffi:defcenum EGUI_ORDERING_MODE
	:EGOM_NONE
	:EGOM_ASCENDING
	:EGOM_DESCENDING
	:EGOM_COUNT)

(cffi:defcvar ("GUIOrderingModeNames" GUIOrderingModeNames)
 (:pointer "irr::c8 **"))

(cffi:defcenum EGUI_TABLE_DRAW_FLAGS
	(:EGTDF_ROWS 1)
	(:EGTDF_COLUMNS 2)
	(:EGTDF_ACTIVE_ROW 4)
	:EGTDF_COUNT)

(cffi:defcfun ("_wrap_IGUITable_addColumn__SWIG_0" IGUITable_addColumn) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (caption :w-string)
  (columnIndex :int))

(cffi:defcfun ("_wrap_IGUITable_addColumn__SWIG_1" IGUITable_addColumn) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (caption :w-string))

(cffi:defcfun ("_wrap_IGUITable_removeColumn" IGUITable_removeColumn) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (columnIndex :uint))

(cffi:defcfun ("_wrap_IGUITable_getColumnCount" IGUITable_getColumnCount) :int
  (self (:pointer "irr::gui::IGUITable *")))

(cffi:defcfun ("_wrap_IGUITable_setActiveColumn__SWIG_0" IGUITable_setActiveColumn) :bool
  (self (:pointer "irr::gui::IGUITable *"))
  (idx :int)
  (doOrder :bool))

(cffi:defcfun ("_wrap_IGUITable_setActiveColumn__SWIG_1" IGUITable_setActiveColumn) :bool
  (self (:pointer "irr::gui::IGUITable *"))
  (idx :int))

(cffi:defcfun ("_wrap_IGUITable_getActiveColumn" IGUITable_getActiveColumn) :int
  (self (:pointer "irr::gui::IGUITable *")))

(cffi:defcfun ("_wrap_IGUITable_getActiveColumnOrdering" IGUITable_getActiveColumnOrdering) :enum
  (self (:pointer "irr::gui::IGUITable *")))

(cffi:defcfun ("_wrap_IGUITable_setColumnWidth" IGUITable_setColumnWidth) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (columnIndex :uint)
  (width :uint))

(cffi:defcfun ("_wrap_IGUITable_getColumnWidth" IGUITable_getColumnWidth) :uint
  (self (:pointer "irr::gui::IGUITable *"))
  (columnIndex :uint))

(cffi:defcfun ("_wrap_IGUITable_setResizableColumns" IGUITable_setResizableColumns) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (resizable :bool))

(cffi:defcfun ("_wrap_IGUITable_hasResizableColumns" IGUITable_hasResizableColumns) :bool
  (self (:pointer "irr::gui::IGUITable *")))

(cffi:defcfun ("_wrap_IGUITable_setColumnOrdering" IGUITable_setColumnOrdering) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (columnIndex :uint)
  (mode :enum))

(cffi:defcfun ("_wrap_IGUITable_getSelected" IGUITable_getSelected) :int
  (self (:pointer "irr::gui::IGUITable *")))

(cffi:defcfun ("_wrap_IGUITable_setSelected" IGUITable_setSelected) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (index :int))

(cffi:defcfun ("_wrap_IGUITable_getRowCount" IGUITable_getRowCount) :int
  (self (:pointer "irr::gui::IGUITable *")))

(cffi:defcfun ("_wrap_IGUITable_addRow" IGUITable_addRow) :uint
  (self (:pointer "irr::gui::IGUITable *"))
  (rowIndex :uint))

(cffi:defcfun ("_wrap_IGUITable_removeRow" IGUITable_removeRow) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (rowIndex :uint))

(cffi:defcfun ("_wrap_IGUITable_clearRows" IGUITable_clearRows) :void
  (self (:pointer "irr::gui::IGUITable *")))

(cffi:defcfun ("_wrap_IGUITable_swapRows" IGUITable_swapRows) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (rowIndexA :uint)
  (rowIndexB :uint))

(cffi:defcfun ("_wrap_IGUITable_orderRows__SWIG_0" IGUITable_orderRows) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (columnIndex :int)
  (mode :enum))

(cffi:defcfun ("_wrap_IGUITable_orderRows__SWIG_1" IGUITable_orderRows) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (columnIndex :int))

(cffi:defcfun ("_wrap_IGUITable_orderRows__SWIG_2" IGUITable_orderRows) :void
  (self (:pointer "irr::gui::IGUITable *")))

(cffi:defcfun ("_wrap_IGUITable_setCellText__SWIG_0" IGUITable_setCellText) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (rowIndex :uint)
  (columnIndex :uint)
  (text (:reference :irrstring)))

(cffi:defcfun ("_wrap_IGUITable_setCellText__SWIG_1" IGUITable_setCellText) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (rowIndex :uint)
  (columnIndex :uint)
  (text (:reference :irrstring))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUITable_setCellData" IGUITable_setCellData) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (rowIndex :uint)
  (columnIndex :uint)
  (data (:pointer "void *")))

(cffi:defcfun ("_wrap_IGUITable_setCellColor" IGUITable_setCellColor) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (rowIndex :uint)
  (columnIndex :uint)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IGUITable_getCellText" IGUITable_getCellText) :w-string
  (self (:pointer "irr::gui::IGUITable *"))
  (rowIndex :uint)
  (columnIndex :uint))

(cffi:defcfun ("_wrap_IGUITable_getCellData" IGUITable_getCellData) (:pointer "void *")
  (self (:pointer "irr::gui::IGUITable *"))
  (rowIndex :uint)
  (columnIndex :uint))

(cffi:defcfun ("_wrap_IGUITable_clear" IGUITable_clear) :void
  (self (:pointer "irr::gui::IGUITable *")))

(cffi:defcfun ("_wrap_IGUITable_setDrawFlags" IGUITable_setDrawFlags) :void
  (self (:pointer "irr::gui::IGUITable *"))
  (flags :int))

(cffi:defcfun ("_wrap_IGUITable_getDrawFlags" IGUITable_getDrawFlags) :int
  (self (:pointer "irr::gui::IGUITable *")))

(cffi:defcfun ("_wrap_delete_IGUITable" delete_IGUITable) :void
  (self (:pointer "irr::gui::IGUITable *")))

(cffi:defcfun ("_wrap_IGUIToolBar_addButton__SWIG_0" IGUIToolBar_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIToolBar *"))
  (id :int)
  (text :w-string)
  (tooltiptext :w-string)
  (img (:pointer "irr::video::ITexture *"))
  (pressedimg (:pointer "irr::video::ITexture *"))
  (isPushButton :bool)
  (useAlphaChannel :bool))

(cffi:defcfun ("_wrap_IGUIToolBar_addButton__SWIG_1" IGUIToolBar_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIToolBar *"))
  (id :int)
  (text :w-string)
  (tooltiptext :w-string)
  (img (:pointer "irr::video::ITexture *"))
  (pressedimg (:pointer "irr::video::ITexture *"))
  (isPushButton :bool))

(cffi:defcfun ("_wrap_IGUIToolBar_addButton__SWIG_2" IGUIToolBar_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIToolBar *"))
  (id :int)
  (text :w-string)
  (tooltiptext :w-string)
  (img (:pointer "irr::video::ITexture *"))
  (pressedimg (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IGUIToolBar_addButton__SWIG_3" IGUIToolBar_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIToolBar *"))
  (id :int)
  (text :w-string)
  (tooltiptext :w-string)
  (img (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_IGUIToolBar_addButton__SWIG_4" IGUIToolBar_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIToolBar *"))
  (id :int)
  (text :w-string)
  (tooltiptext :w-string))

(cffi:defcfun ("_wrap_IGUIToolBar_addButton__SWIG_5" IGUIToolBar_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIToolBar *"))
  (id :int)
  (text :w-string))

(cffi:defcfun ("_wrap_IGUIToolBar_addButton__SWIG_6" IGUIToolBar_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIToolBar *"))
  (id :int))

(cffi:defcfun ("_wrap_IGUIToolBar_addButton__SWIG_7" IGUIToolBar_addButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIToolBar *")))

(cffi:defcfun ("_wrap_delete_IGUIToolBar" delete_IGUIToolBar) :void
  (self (:pointer "irr::gui::IGUIToolBar *")))

(cffi:defcfun ("_wrap_IGUIWindow_getCloseButton" IGUIWindow_getCloseButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIWindow *")))

(cffi:defcfun ("_wrap_IGUIWindow_getMinimizeButton" IGUIWindow_getMinimizeButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIWindow *")))

(cffi:defcfun ("_wrap_IGUIWindow_getMaximizeButton" IGUIWindow_getMaximizeButton) (:pointer "irr::gui::IGUIButton *")
  (self (:pointer "irr::gui::IGUIWindow *")))

(cffi:defcfun ("_wrap_IGUIWindow_isDraggable" IGUIWindow_isDraggable) :bool
  (self (:pointer "irr::gui::IGUIWindow *")))

(cffi:defcfun ("_wrap_IGUIWindow_setDraggable" IGUIWindow_setDraggable) :void
  (self (:pointer "irr::gui::IGUIWindow *"))
  (draggable :bool))

(cffi:defcfun ("_wrap_IGUIWindow_setDrawBackground" IGUIWindow_setDrawBackground) :void
  (self (:pointer "irr::gui::IGUIWindow *"))
  (draw :bool))

(cffi:defcfun ("_wrap_IGUIWindow_getDrawBackground" IGUIWindow_getDrawBackground) :bool
  (self (:pointer "irr::gui::IGUIWindow *")))

(cffi:defcfun ("_wrap_IGUIWindow_setDrawTitlebar" IGUIWindow_setDrawTitlebar) :void
  (self (:pointer "irr::gui::IGUIWindow *"))
  (draw :bool))

(cffi:defcfun ("_wrap_IGUIWindow_getDrawTitlebar" IGUIWindow_getDrawTitlebar) :bool
  (self (:pointer "irr::gui::IGUIWindow *")))

(cffi:defcfun ("_wrap_IGUIWindow_getClientRect" IGUIWindow_getClientRect) (:by-value "recti")
  (self (:pointer "irr::gui::IGUIWindow *")))

(cffi:defcfun ("_wrap_delete_IGUIWindow" delete_IGUIWindow) :void
  (self (:pointer "irr::gui::IGUIWindow *")))

(cffi:defcfun ("_wrap_delete_IGUIImageList" delete_IGUIImageList) :void
  (self (:pointer "irr::gui::IGUIImageList *")))

(cffi:defcfun ("_wrap_IGUIImageList_draw__SWIG_0" IGUIImageList_draw) :void
  (self (:pointer "irr::gui::IGUIImageList *"))
  (index :int)
  (destPos (:pointer "vector2di"))
  (clip (:pointer "recti")))

(cffi:defcfun ("_wrap_IGUIImageList_draw__SWIG_1" IGUIImageList_draw) :void
  (self (:pointer "irr::gui::IGUIImageList *"))
  (index :int)
  (destPos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_IGUIImageList_getImageCount" IGUIImageList_getImageCount) :int
  (self (:pointer "irr::gui::IGUIImageList *")))

(cffi:defcfun ("_wrap_IGUIImageList_getImageSize" IGUIImageList_getImageSize) (:by-value "dimension2di")
  (self (:pointer "irr::gui::IGUIImageList *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getOwner" IGUITreeViewNode_getOwner) (:pointer "irr::gui::IGUITreeView *")
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getParent" IGUITreeViewNode_getParent) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getText" IGUITreeViewNode_getText) :w-string
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_setText" IGUITreeViewNode_setText) :void
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getIcon" IGUITreeViewNode_getIcon) :w-string
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_setIcon" IGUITreeViewNode_setIcon) :void
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (icon :w-string))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getImageIndex" IGUITreeViewNode_getImageIndex) :uint
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_setImageIndex" IGUITreeViewNode_setImageIndex) :void
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (imageIndex :uint))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getSelectedImageIndex" IGUITreeViewNode_getSelectedImageIndex) :uint
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_setSelectedImageIndex" IGUITreeViewNode_setSelectedImageIndex) :void
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (imageIndex :uint))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getData" IGUITreeViewNode_getData) (:pointer "void *")
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_setData" IGUITreeViewNode_setData) :void
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (data (:pointer "void *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getData2" IGUITreeViewNode_getData2) (:pointer "irr::IReferenceCounted *")
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_setData2" IGUITreeViewNode_setData2) :void
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (data (:pointer "irr::IReferenceCounted *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getChildCount" IGUITreeViewNode_getChildCount) :uint
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_clearChildren" IGUITreeViewNode_clearChildren) :void
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_clearChilds" IGUITreeViewNode_clearChilds) :void
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_hasChildren" IGUITreeViewNode_hasChildren) :bool
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_hasChilds" IGUITreeViewNode_hasChilds) :bool
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildBack__SWIG_0" IGUITreeViewNode_addChildBack) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int)
  (data (:pointer "void *"))
  (data2 (:pointer "irr::IReferenceCounted *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildBack__SWIG_1" IGUITreeViewNode_addChildBack) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int)
  (data (:pointer "void *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildBack__SWIG_2" IGUITreeViewNode_addChildBack) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildBack__SWIG_3" IGUITreeViewNode_addChildBack) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildBack__SWIG_4" IGUITreeViewNode_addChildBack) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildBack__SWIG_5" IGUITreeViewNode_addChildBack) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildFront__SWIG_0" IGUITreeViewNode_addChildFront) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int)
  (data (:pointer "void *"))
  (data2 (:pointer "irr::IReferenceCounted *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildFront__SWIG_1" IGUITreeViewNode_addChildFront) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int)
  (data (:pointer "void *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildFront__SWIG_2" IGUITreeViewNode_addChildFront) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildFront__SWIG_3" IGUITreeViewNode_addChildFront) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildFront__SWIG_4" IGUITreeViewNode_addChildFront) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string))

(cffi:defcfun ("_wrap_IGUITreeViewNode_addChildFront__SWIG_5" IGUITreeViewNode_addChildFront) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildAfter__SWIG_0" IGUITreeViewNode_insertChildAfter) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int)
  (data (:pointer "void *"))
  (data2 (:pointer "irr::IReferenceCounted *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildAfter__SWIG_1" IGUITreeViewNode_insertChildAfter) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int)
  (data (:pointer "void *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildAfter__SWIG_2" IGUITreeViewNode_insertChildAfter) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildAfter__SWIG_3" IGUITreeViewNode_insertChildAfter) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildAfter__SWIG_4" IGUITreeViewNode_insertChildAfter) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildAfter__SWIG_5" IGUITreeViewNode_insertChildAfter) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildBefore__SWIG_0" IGUITreeViewNode_insertChildBefore) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int)
  (data (:pointer "void *"))
  (data2 (:pointer "irr::IReferenceCounted *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildBefore__SWIG_1" IGUITreeViewNode_insertChildBefore) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int)
  (data (:pointer "void *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildBefore__SWIG_2" IGUITreeViewNode_insertChildBefore) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int)
  (selectedImageIndex :int))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildBefore__SWIG_3" IGUITreeViewNode_insertChildBefore) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string)
  (imageIndex :int))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildBefore__SWIG_4" IGUITreeViewNode_insertChildBefore) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string)
  (icon :w-string))

(cffi:defcfun ("_wrap_IGUITreeViewNode_insertChildBefore__SWIG_5" IGUITreeViewNode_insertChildBefore) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (other (:pointer "irr::gui::IGUITreeViewNode *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getFirstChild" IGUITreeViewNode_getFirstChild) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getLastChild" IGUITreeViewNode_getLastChild) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getPrevSibling" IGUITreeViewNode_getPrevSibling) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getNextSibling" IGUITreeViewNode_getNextSibling) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getNextVisible" IGUITreeViewNode_getNextVisible) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_deleteChild" IGUITreeViewNode_deleteChild) :bool
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (child (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_moveChildUp" IGUITreeViewNode_moveChildUp) :bool
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (child (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_moveChildDown" IGUITreeViewNode_moveChildDown) :bool
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (child (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getExpanded" IGUITreeViewNode_getExpanded) :bool
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_setExpanded" IGUITreeViewNode_setExpanded) :void
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (expanded :bool))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getSelected" IGUITreeViewNode_getSelected) :bool
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_setSelected" IGUITreeViewNode_setSelected) :void
  (self (:pointer "irr::gui::IGUITreeViewNode *"))
  (selected :bool))

(cffi:defcfun ("_wrap_IGUITreeViewNode_isRoot" IGUITreeViewNode_isRoot) :bool
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_getLevel" IGUITreeViewNode_getLevel) :int
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeViewNode_isVisible" IGUITreeViewNode_isVisible) :bool
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_delete_IGUITreeViewNode" delete_IGUITreeViewNode) :void
  (self (:pointer "irr::gui::IGUITreeViewNode *")))

(cffi:defcfun ("_wrap_IGUITreeView_getRoot" IGUITreeView_getRoot) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeView *")))

(cffi:defcfun ("_wrap_IGUITreeView_getSelected" IGUITreeView_getSelected) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeView *")))

(cffi:defcfun ("_wrap_IGUITreeView_getLinesVisible" IGUITreeView_getLinesVisible) :bool
  (self (:pointer "irr::gui::IGUITreeView *")))

(cffi:defcfun ("_wrap_IGUITreeView_setLinesVisible" IGUITreeView_setLinesVisible) :void
  (self (:pointer "irr::gui::IGUITreeView *"))
  (visible :bool))

(cffi:defcfun ("_wrap_IGUITreeView_setIconFont" IGUITreeView_setIconFont) :void
  (self (:pointer "irr::gui::IGUITreeView *"))
  (font (:pointer "irr::gui::IGUIFont *")))

(cffi:defcfun ("_wrap_IGUITreeView_setImageList" IGUITreeView_setImageList) :void
  (self (:pointer "irr::gui::IGUITreeView *"))
  (imageList (:pointer "irr::gui::IGUIImageList *")))

(cffi:defcfun ("_wrap_IGUITreeView_getImageList" IGUITreeView_getImageList) (:pointer "irr::gui::IGUIImageList *")
  (self (:pointer "irr::gui::IGUITreeView *")))

(cffi:defcfun ("_wrap_IGUITreeView_setImageLeftOfIcon" IGUITreeView_setImageLeftOfIcon) :void
  (self (:pointer "irr::gui::IGUITreeView *"))
  (bLeftOf :bool))

(cffi:defcfun ("_wrap_IGUITreeView_getImageLeftOfIcon" IGUITreeView_getImageLeftOfIcon) :bool
  (self (:pointer "irr::gui::IGUITreeView *")))

(cffi:defcfun ("_wrap_IGUITreeView_getLastEventNode" IGUITreeView_getLastEventNode) (:pointer "irr::gui::IGUITreeViewNode *")
  (self (:pointer "irr::gui::IGUITreeView *")))

(cffi:defcfun ("_wrap_delete_IGUITreeView" delete_IGUITreeView) :void
  (self (:pointer "irr::gui::IGUITreeView *")))

(cffi:defcfun ("_wrap_IImageLoader_isALoadableFileExtension" IImageLoader_isALoadableFileExtension) :bool
  (self (:pointer "irr::video::IImageLoader *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IImageLoader_isALoadableFileFormat" IImageLoader_isALoadableFileFormat) :bool
  (self (:pointer "irr::video::IImageLoader *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_IImageLoader_loadImage" IImageLoader_loadImage) (:pointer "irr::video::IImage *")
  (self (:pointer "irr::video::IImageLoader *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_delete_IImageLoader" delete_IImageLoader) :void
  (self (:pointer "irr::video::IImageLoader *")))

(cffi:defcfun ("_wrap_IImageWriter_isAWriteableFileExtension" IImageWriter_isAWriteableFileExtension) :bool
  (self (:pointer "irr::video::IImageWriter *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IImageWriter_writeImage__SWIG_0" IImageWriter_writeImage) :bool
  (self (:pointer "irr::video::IImageWriter *"))
  (file (:pointer "irr::io::IWriteFile *"))
  (image (:pointer "irr::video::IImage *"))
  (param :uint))

(cffi:defcfun ("_wrap_IImageWriter_writeImage__SWIG_1" IImageWriter_writeImage) :bool
  (self (:pointer "irr::video::IImageWriter *"))
  (file (:pointer "irr::io::IWriteFile *"))
  (image (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_delete_IImageWriter" delete_IImageWriter) :void
  (self (:pointer "irr::video::IImageWriter *")))

(cffi:defcenum E_LIGHT_TYPE
	:ELT_POINT
	:ELT_SPOT
	:ELT_DIRECTIONAL
	:ELT_COUNT)

(cffi:defcvar ("LightTypeNames" LightTypeNames)
 (:pointer "irr::c8 **"))

(cffi:defcstruct SLight
	(AmbientColor (:pointer "irr::video::SColorf"))
	(DiffuseColor (:pointer "irr::video::SColorf"))
	(SpecularColor (:pointer "irr::video::SColorf"))
	(Attenuation (:pointer "vector3df"))
	(OuterCone :float)
	(InnerCone :float)
	(Falloff :float)
	(Position (:pointer "vector3df"))
	(Direction (:pointer "vector3df"))
	(Radius :float)
	(Type :enum)
	(CastShadows :bool))

(cffi:defcfun ("_wrap_ILightSceneNode_setLightData" ILightSceneNode_setLightData) :void
  (self (:pointer "irr::scene::ILightSceneNode *"))
  (light (:pointer "irr::video::SLight *")))

(cffi:defcfun ("_wrap_ILightSceneNode_getLightData__SWIG_0" ILightSceneNode_getLightData) (:reference "irr::video::SLight *")
  (self (:pointer "irr::scene::ILightSceneNode *")))

(cffi:defcfun ("_wrap_ILightSceneNode_getLightData__SWIG_1" ILightSceneNode_getLightData) (:reference "irr::video::SLight *")
  (self (:pointer "irr::scene::ILightSceneNode *")))

(cffi:defcfun ("_wrap_ILightSceneNode_setRadius" ILightSceneNode_setRadius) :void
  (self (:pointer "irr::scene::ILightSceneNode *"))
  (radius :float))

(cffi:defcfun ("_wrap_ILightSceneNode_getRadius" ILightSceneNode_getRadius) :float
  (self (:pointer "irr::scene::ILightSceneNode *")))

(cffi:defcfun ("_wrap_ILightSceneNode_setLightType" ILightSceneNode_setLightType) :void
  (self (:pointer "irr::scene::ILightSceneNode *"))
  (type :enum))

(cffi:defcfun ("_wrap_ILightSceneNode_getLightType" ILightSceneNode_getLightType) :enum
  (self (:pointer "irr::scene::ILightSceneNode *")))

(cffi:defcfun ("_wrap_ILightSceneNode_enableCastShadow__SWIG_0" ILightSceneNode_enableCastShadow) :void
  (self (:pointer "irr::scene::ILightSceneNode *"))
  (shadow :bool))

(cffi:defcfun ("_wrap_ILightSceneNode_enableCastShadow__SWIG_1" ILightSceneNode_enableCastShadow) :void
  (self (:pointer "irr::scene::ILightSceneNode *")))

(cffi:defcfun ("_wrap_ILightSceneNode_getCastShadow" ILightSceneNode_getCastShadow) :bool
  (self (:pointer "irr::scene::ILightSceneNode *")))

(cffi:defcfun ("_wrap_delete_ILightSceneNode" delete_ILightSceneNode) :void
  (self (:pointer "irr::scene::ILightSceneNode *")))

(cffi:defcfun ("_wrap_IMaterialRenderer_OnSetMaterial" IMaterialRenderer_OnSetMaterial) :void
  (self (:pointer "irr::video::IMaterialRenderer *"))
  (material (:pointer "irr::video::SMaterial *"))
  (lastMaterial (:pointer "irr::video::SMaterial *"))
  (resetAllRenderstates :bool)
  (services (:pointer "irr::video::IMaterialRendererServices *")))

(cffi:defcfun ("_wrap_IMaterialRenderer_OnRender" IMaterialRenderer_OnRender) :bool
  (self (:pointer "irr::video::IMaterialRenderer *"))
  (service (:pointer "irr::video::IMaterialRendererServices *"))
  (vtxtype :enum))

(cffi:defcfun ("_wrap_IMaterialRenderer_OnUnsetMaterial" IMaterialRenderer_OnUnsetMaterial) :void
  (self (:pointer "irr::video::IMaterialRenderer *")))

(cffi:defcfun ("_wrap_IMaterialRenderer_isTransparent" IMaterialRenderer_isTransparent) :bool
  (self (:pointer "irr::video::IMaterialRenderer *")))

(cffi:defcfun ("_wrap_IMaterialRenderer_getRenderCapability" IMaterialRenderer_getRenderCapability) :int
  (self (:pointer "irr::video::IMaterialRenderer *")))

(cffi:defcfun ("_wrap_new_IMaterialRenderer" new_IMaterialRenderer) (:pointer "irr::video::IMaterialRenderer *"))

(cffi:defcfun ("_wrap_delete_IMaterialRenderer" delete_IMaterialRenderer) :void
  (self (:pointer "irr::video::IMaterialRenderer *")))

(cffi:defcfun ("_wrap_delete_IMaterialRendererServices" delete_IMaterialRendererServices) :void
  (self (:pointer "irr::video::IMaterialRendererServices *")))

(cffi:defcfun ("_wrap_IMaterialRendererServices_setBasicRenderStates" IMaterialRendererServices_setBasicRenderStates) :void
  (self (:pointer "irr::video::IMaterialRendererServices *"))
  (material (:pointer "irr::video::SMaterial *"))
  (lastMaterial (:pointer "irr::video::SMaterial *"))
  (resetAllRenderstates :bool))

(cffi:defcfun ("_wrap_IMaterialRendererServices_setVertexShaderConstant__SWIG_0" IMaterialRendererServices_setVertexShaderConstant) :bool
  (self (:pointer "irr::video::IMaterialRendererServices *"))
  (name :string)
  (floats (:pointer "irr::f32 *"))
  (count :int))

(cffi:defcfun ("_wrap_IMaterialRendererServices_setVertexShaderConstant__SWIG_1" IMaterialRendererServices_setVertexShaderConstant) :bool
  (self (:pointer "irr::video::IMaterialRendererServices *"))
  (name :string)
  (bools (:pointer "bool *"))
  (count :int))

(cffi:defcfun ("_wrap_IMaterialRendererServices_setVertexShaderConstant__SWIG_2" IMaterialRendererServices_setVertexShaderConstant) :bool
  (self (:pointer "irr::video::IMaterialRendererServices *"))
  (name :string)
  (ints (:pointer "irr::s32 *"))
  (count :int))

(cffi:defcfun ("_wrap_IMaterialRendererServices_setVertexShaderConstant__SWIG_3" IMaterialRendererServices_setVertexShaderConstant) :void
  (self (:pointer "irr::video::IMaterialRendererServices *"))
  (data (:pointer "irr::f32 *"))
  (startRegister :int)
  (constantAmount :int))

(cffi:defcfun ("_wrap_IMaterialRendererServices_setVertexShaderConstant__SWIG_4" IMaterialRendererServices_setVertexShaderConstant) :void
  (self (:pointer "irr::video::IMaterialRendererServices *"))
  (data (:pointer "irr::f32 *"))
  (startRegister :int))

(cffi:defcfun ("_wrap_IMaterialRendererServices_setPixelShaderConstant__SWIG_0" IMaterialRendererServices_setPixelShaderConstant) :bool
  (self (:pointer "irr::video::IMaterialRendererServices *"))
  (name :string)
  (floats (:pointer "irr::f32 *"))
  (count :int))

(cffi:defcfun ("_wrap_IMaterialRendererServices_setPixelShaderConstant__SWIG_1" IMaterialRendererServices_setPixelShaderConstant) :bool
  (self (:pointer "irr::video::IMaterialRendererServices *"))
  (name :string)
  (bools (:pointer "bool *"))
  (count :int))

(cffi:defcfun ("_wrap_IMaterialRendererServices_setPixelShaderConstant__SWIG_2" IMaterialRendererServices_setPixelShaderConstant) :bool
  (self (:pointer "irr::video::IMaterialRendererServices *"))
  (name :string)
  (ints (:pointer "irr::s32 *"))
  (count :int))

(cffi:defcfun ("_wrap_IMaterialRendererServices_setPixelShaderConstant__SWIG_3" IMaterialRendererServices_setPixelShaderConstant) :void
  (self (:pointer "irr::video::IMaterialRendererServices *"))
  (data (:pointer "irr::f32 *"))
  (startRegister :int)
  (constantAmount :int))

(cffi:defcfun ("_wrap_IMaterialRendererServices_setPixelShaderConstant__SWIG_4" IMaterialRendererServices_setPixelShaderConstant) :void
  (self (:pointer "irr::video::IMaterialRendererServices *"))
  (data (:pointer "irr::f32 *"))
  (startRegister :int))

(cffi:defcfun ("_wrap_IMaterialRendererServices_getVideoDriver" IMaterialRendererServices_getVideoDriver) (:pointer "irr::video::IVideoDriver *")
  (self (:pointer "irr::video::IMaterialRendererServices *")))

(cffi:defcfun ("_wrap_delete_IMeshCache" delete_IMeshCache) :void
  (self (:pointer "irr::scene::IMeshCache *")))

(cffi:defcfun ("_wrap_IMeshCache_addMesh" IMeshCache_addMesh) :void
  (self (:pointer "irr::scene::IMeshCache *"))
  (name (:pointer "path"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *")))

(cffi:defcfun ("_wrap_IMeshCache_removeMesh" IMeshCache_removeMesh) :void
  (self (:pointer "irr::scene::IMeshCache *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshCache_getMeshCount" IMeshCache_getMeshCount) :uint
  (self (:pointer "irr::scene::IMeshCache *")))

(cffi:defcfun ("_wrap_IMeshCache_getMeshIndex" IMeshCache_getMeshIndex) :int
  (self (:pointer "irr::scene::IMeshCache *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshCache_getMeshByIndex" IMeshCache_getMeshByIndex) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::IMeshCache *"))
  (index :uint))

(cffi:defcfun ("_wrap_IMeshCache_getMeshByFilename" IMeshCache_getMeshByFilename) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::IMeshCache *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IMeshCache_getMeshFilename__SWIG_0" IMeshCache_getMeshFilename) (:reference "path")
  (self (:pointer "irr::scene::IMeshCache *"))
  (index :uint))

(cffi:defcfun ("_wrap_IMeshCache_getMeshFilename__SWIG_1" IMeshCache_getMeshFilename) (:reference "path")
  (self (:pointer "irr::scene::IMeshCache *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshCache_setMeshFilename__SWIG_0" IMeshCache_setMeshFilename) :bool
  (self (:pointer "irr::scene::IMeshCache *"))
  (index :uint)
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IMeshCache_setMeshFilename__SWIG_1" IMeshCache_setMeshFilename) :bool
  (self (:pointer "irr::scene::IMeshCache *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IMeshCache_getMeshByName" IMeshCache_getMeshByName) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::IMeshCache *"))
  (name (:pointer "path")))

(cffi:defcfun ("_wrap_IMeshCache_getMeshName__SWIG_0" IMeshCache_getMeshName) (:reference "irr::io::SNamedPath *")
  (self (:pointer "irr::scene::IMeshCache *"))
  (index :uint))

(cffi:defcfun ("_wrap_IMeshCache_getMeshName__SWIG_1" IMeshCache_getMeshName) (:reference "irr::io::SNamedPath *")
  (self (:pointer "irr::scene::IMeshCache *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshCache_renameMesh__SWIG_0" IMeshCache_renameMesh) :bool
  (self (:pointer "irr::scene::IMeshCache *"))
  (index :uint)
  (name (:pointer "path")))

(cffi:defcfun ("_wrap_IMeshCache_renameMesh__SWIG_1" IMeshCache_renameMesh) :bool
  (self (:pointer "irr::scene::IMeshCache *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (name (:pointer "path")))

(cffi:defcfun ("_wrap_IMeshCache_isMeshLoaded" IMeshCache_isMeshLoaded) :bool
  (self (:pointer "irr::scene::IMeshCache *"))
  (name (:pointer "path")))

(cffi:defcfun ("_wrap_IMeshCache_clear" IMeshCache_clear) :void
  (self (:pointer "irr::scene::IMeshCache *")))

(cffi:defcfun ("_wrap_IMeshCache_clearUnusedMeshes" IMeshCache_clearUnusedMeshes) :void
  (self (:pointer "irr::scene::IMeshCache *")))

(cffi:defcfun ("_wrap_delete_IMeshLoader" delete_IMeshLoader) :void
  (self (:pointer "irr::scene::IMeshLoader *")))

(cffi:defcfun ("_wrap_IMeshLoader_isALoadableFileExtension" IMeshLoader_isALoadableFileExtension) :bool
  (self (:pointer "irr::scene::IMeshLoader *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_IMeshLoader_createMesh" IMeshLoader_createMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::IMeshLoader *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_new_IVertexManipulator" new_IVertexManipulator) (:pointer "irr::scene::IVertexManipulator *"))

(cffi:defcfun ("_wrap_delete_IVertexManipulator" delete_IVertexManipulator) :void
  (self (:pointer "irr::scene::IVertexManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexColorSetManipulator" new_SVertexColorSetManipulator) (:pointer "irr::scene::SVertexColorSetManipulator *")
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_SVertexColorSetManipulator___funcall__" SVertexColorSetManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorSetManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_delete_SVertexColorSetManipulator" delete_SVertexColorSetManipulator) :void
  (self (:pointer "irr::scene::SVertexColorSetManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexColorSetAlphaManipulator" new_SVertexColorSetAlphaManipulator) (:pointer "irr::scene::SVertexColorSetAlphaManipulator *")
  (alpha :uint))

(cffi:defcfun ("_wrap_SVertexColorSetAlphaManipulator___funcall__" SVertexColorSetAlphaManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorSetAlphaManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_delete_SVertexColorSetAlphaManipulator" delete_SVertexColorSetAlphaManipulator) :void
  (self (:pointer "irr::scene::SVertexColorSetAlphaManipulator *")))

(cffi:defcfun ("_wrap_SVertexColorInvertManipulator___funcall__" SVertexColorInvertManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorInvertManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_new_SVertexColorInvertManipulator" new_SVertexColorInvertManipulator) (:pointer "irr::scene::SVertexColorInvertManipulator *"))

(cffi:defcfun ("_wrap_delete_SVertexColorInvertManipulator" delete_SVertexColorInvertManipulator) :void
  (self (:pointer "irr::scene::SVertexColorInvertManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexColorThresholdManipulator" new_SVertexColorThresholdManipulator) (:pointer "irr::scene::SVertexColorThresholdManipulator *")
  (threshold :uchar)
  (low (:pointer "irr::video::SColor"))
  (high (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_SVertexColorThresholdManipulator___funcall__" SVertexColorThresholdManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorThresholdManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_delete_SVertexColorThresholdManipulator" delete_SVertexColorThresholdManipulator) :void
  (self (:pointer "irr::scene::SVertexColorThresholdManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexColorBrightnessManipulator" new_SVertexColorBrightnessManipulator) (:pointer "irr::scene::SVertexColorBrightnessManipulator *")
  (amount :int))

(cffi:defcfun ("_wrap_SVertexColorBrightnessManipulator___funcall__" SVertexColorBrightnessManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorBrightnessManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_delete_SVertexColorBrightnessManipulator" delete_SVertexColorBrightnessManipulator) :void
  (self (:pointer "irr::scene::SVertexColorBrightnessManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexColorContrastManipulator" new_SVertexColorContrastManipulator) (:pointer "irr::scene::SVertexColorContrastManipulator *")
  (factor :float))

(cffi:defcfun ("_wrap_SVertexColorContrastManipulator___funcall__" SVertexColorContrastManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorContrastManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_delete_SVertexColorContrastManipulator" delete_SVertexColorContrastManipulator) :void
  (self (:pointer "irr::scene::SVertexColorContrastManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexColorContrastBrightnessManipulator" new_SVertexColorContrastBrightnessManipulator) (:pointer "irr::scene::SVertexColorContrastBrightnessManipulator *")
  (factor :float)
  (amount :int))

(cffi:defcfun ("_wrap_SVertexColorContrastBrightnessManipulator___funcall__" SVertexColorContrastBrightnessManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorContrastBrightnessManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_delete_SVertexColorContrastBrightnessManipulator" delete_SVertexColorContrastBrightnessManipulator) :void
  (self (:pointer "irr::scene::SVertexColorContrastBrightnessManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexColorGammaManipulator" new_SVertexColorGammaManipulator) (:pointer "irr::scene::SVertexColorGammaManipulator *")
  (gamma :float))

(cffi:defcfun ("_wrap_SVertexColorGammaManipulator___funcall__" SVertexColorGammaManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorGammaManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_delete_SVertexColorGammaManipulator" delete_SVertexColorGammaManipulator) :void
  (self (:pointer "irr::scene::SVertexColorGammaManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexColorScaleManipulator" new_SVertexColorScaleManipulator) (:pointer "irr::scene::SVertexColorScaleManipulator *")
  (factor :float))

(cffi:defcfun ("_wrap_SVertexColorScaleManipulator___funcall__" SVertexColorScaleManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorScaleManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_delete_SVertexColorScaleManipulator" delete_SVertexColorScaleManipulator) :void
  (self (:pointer "irr::scene::SVertexColorScaleManipulator *")))

(cffi:defcfun ("_wrap_SVertexColorDesaturateToLightnessManipulator___funcall__" SVertexColorDesaturateToLightnessManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorDesaturateToLightnessManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_new_SVertexColorDesaturateToLightnessManipulator" new_SVertexColorDesaturateToLightnessManipulator) (:pointer "irr::scene::SVertexColorDesaturateToLightnessManipulator *"))

(cffi:defcfun ("_wrap_delete_SVertexColorDesaturateToLightnessManipulator" delete_SVertexColorDesaturateToLightnessManipulator) :void
  (self (:pointer "irr::scene::SVertexColorDesaturateToLightnessManipulator *")))

(cffi:defcfun ("_wrap_SVertexColorDesaturateToAverageManipulator___funcall__" SVertexColorDesaturateToAverageManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorDesaturateToAverageManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_new_SVertexColorDesaturateToAverageManipulator" new_SVertexColorDesaturateToAverageManipulator) (:pointer "irr::scene::SVertexColorDesaturateToAverageManipulator *"))

(cffi:defcfun ("_wrap_delete_SVertexColorDesaturateToAverageManipulator" delete_SVertexColorDesaturateToAverageManipulator) :void
  (self (:pointer "irr::scene::SVertexColorDesaturateToAverageManipulator *")))

(cffi:defcfun ("_wrap_SVertexColorDesaturateToLuminanceManipulator___funcall__" SVertexColorDesaturateToLuminanceManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorDesaturateToLuminanceManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_new_SVertexColorDesaturateToLuminanceManipulator" new_SVertexColorDesaturateToLuminanceManipulator) (:pointer "irr::scene::SVertexColorDesaturateToLuminanceManipulator *"))

(cffi:defcfun ("_wrap_delete_SVertexColorDesaturateToLuminanceManipulator" delete_SVertexColorDesaturateToLuminanceManipulator) :void
  (self (:pointer "irr::scene::SVertexColorDesaturateToLuminanceManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexColorInterpolateLinearManipulator" new_SVertexColorInterpolateLinearManipulator) (:pointer "irr::scene::SVertexColorInterpolateLinearManipulator *")
  (color (:pointer "irr::video::SColor"))
  (factor :float))

(cffi:defcfun ("_wrap_SVertexColorInterpolateLinearManipulator___funcall__" SVertexColorInterpolateLinearManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorInterpolateLinearManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_delete_SVertexColorInterpolateLinearManipulator" delete_SVertexColorInterpolateLinearManipulator) :void
  (self (:pointer "irr::scene::SVertexColorInterpolateLinearManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexColorInterpolateQuadraticManipulator" new_SVertexColorInterpolateQuadraticManipulator) (:pointer "irr::scene::SVertexColorInterpolateQuadraticManipulator *")
  (color1 (:pointer "irr::video::SColor"))
  (color2 (:pointer "irr::video::SColor"))
  (factor :float))

(cffi:defcfun ("_wrap_SVertexColorInterpolateQuadraticManipulator___funcall__" SVertexColorInterpolateQuadraticManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexColorInterpolateQuadraticManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex *")))

(cffi:defcfun ("_wrap_delete_SVertexColorInterpolateQuadraticManipulator" delete_SVertexColorInterpolateQuadraticManipulator) :void
  (self (:pointer "irr::scene::SVertexColorInterpolateQuadraticManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexPositionScaleManipulator" new_SVertexPositionScaleManipulator) (:pointer "irr::scene::SVertexPositionScaleManipulator *")
  (factor (:pointer "vector3df")))

(cffi:defcfun ("_wrap_delete_SVertexPositionScaleManipulator" delete_SVertexPositionScaleManipulator) :void
  (self (:pointer "irr::scene::SVertexPositionScaleManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexPositionScaleAlongNormalsManipulator" new_SVertexPositionScaleAlongNormalsManipulator) (:pointer "irr::scene::SVertexPositionScaleAlongNormalsManipulator *")
  (factor (:pointer "vector3df")))

(cffi:defcfun ("_wrap_delete_SVertexPositionScaleAlongNormalsManipulator" delete_SVertexPositionScaleAlongNormalsManipulator) :void
  (self (:pointer "irr::scene::SVertexPositionScaleAlongNormalsManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexPositionTransformManipulator" new_SVertexPositionTransformManipulator) (:pointer "irr::scene::SVertexPositionTransformManipulator *")
  (m (:pointer "matrix4")))

(cffi:defcfun ("_wrap_delete_SVertexPositionTransformManipulator" delete_SVertexPositionTransformManipulator) :void
  (self (:pointer "irr::scene::SVertexPositionTransformManipulator *")))

(cffi:defcfun ("_wrap_new_SVertexTCoordsScaleManipulator__SWIG_0" new_SVertexTCoordsScaleManipulator) (:pointer "irr::scene::SVertexTCoordsScaleManipulator *")
  (factor (:pointer "vector2df"))
  (uvSet :uint))

(cffi:defcfun ("_wrap_new_SVertexTCoordsScaleManipulator__SWIG_1" new_SVertexTCoordsScaleManipulator) (:pointer "irr::scene::SVertexTCoordsScaleManipulator *")
  (factor (:pointer "vector2df")))

(cffi:defcfun ("_wrap_SVertexTCoordsScaleManipulator___funcall__" SVertexTCoordsScaleManipulator___funcall__) :void
  (self (:pointer "irr::scene::SVertexTCoordsScaleManipulator *"))
  (vertex (:pointer "irr::video::S3DVertex2TCoords *")))

(cffi:defcfun ("_wrap_delete_SVertexTCoordsScaleManipulator" delete_SVertexTCoordsScaleManipulator) :void
  (self (:pointer "irr::scene::SVertexTCoordsScaleManipulator *")))

(cffi:defcfun ("_wrap_IMeshManipulator_flipSurfaces" IMeshManipulator_flipSurfaces) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_setVertexColorAlpha__SWIG_0" IMeshManipulator_setVertexColorAlpha) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (alpha :int))

(cffi:defcfun ("_wrap_IMeshManipulator_setVertexColorAlpha__SWIG_1" IMeshManipulator_setVertexColorAlpha) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (alpha :int))

(cffi:defcfun ("_wrap_IMeshManipulator_setVertexColors__SWIG_0" IMeshManipulator_setVertexColors) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IMeshManipulator_setVertexColors__SWIG_1" IMeshManipulator_setVertexColors) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateNormals__SWIG_0" IMeshManipulator_recalculateNormals) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (smooth :bool)
  (angleWeighted :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateNormals__SWIG_1" IMeshManipulator_recalculateNormals) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (smooth :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateNormals__SWIG_2" IMeshManipulator_recalculateNormals) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateNormals__SWIG_3" IMeshManipulator_recalculateNormals) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (smooth :bool)
  (angleWeighted :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateNormals__SWIG_4" IMeshManipulator_recalculateNormals) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (smooth :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateNormals__SWIG_5" IMeshManipulator_recalculateNormals) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateTangents__SWIG_0" IMeshManipulator_recalculateTangents) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (recalculateNormals :bool)
  (smooth :bool)
  (angleWeighted :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateTangents__SWIG_1" IMeshManipulator_recalculateTangents) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (recalculateNormals :bool)
  (smooth :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateTangents__SWIG_2" IMeshManipulator_recalculateTangents) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (recalculateNormals :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateTangents__SWIG_3" IMeshManipulator_recalculateTangents) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateTangents__SWIG_4" IMeshManipulator_recalculateTangents) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (recalculateNormals :bool)
  (smooth :bool)
  (angleWeighted :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateTangents__SWIG_5" IMeshManipulator_recalculateTangents) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (recalculateNormals :bool)
  (smooth :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateTangents__SWIG_6" IMeshManipulator_recalculateTangents) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (recalculateNormals :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_recalculateTangents__SWIG_7" IMeshManipulator_recalculateTangents) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshManipulator_scale__SWIG_0" IMeshManipulator_scale) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (factor (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IMeshManipulator_scale__SWIG_1" IMeshManipulator_scale) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (factor (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IMeshManipulator_scaleMesh" IMeshManipulator_scaleMesh) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (factor (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IMeshManipulator_scaleTCoords__SWIG_0" IMeshManipulator_scaleTCoords) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (factor (:pointer "vector2df"))
  (level :uint))

(cffi:defcfun ("_wrap_IMeshManipulator_scaleTCoords__SWIG_1" IMeshManipulator_scaleTCoords) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (factor (:pointer "vector2df")))

(cffi:defcfun ("_wrap_IMeshManipulator_scaleTCoords__SWIG_2" IMeshManipulator_scaleTCoords) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (factor (:pointer "vector2df"))
  (level :uint))

(cffi:defcfun ("_wrap_IMeshManipulator_scaleTCoords__SWIG_3" IMeshManipulator_scaleTCoords) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (factor (:pointer "vector2df")))

(cffi:defcfun ("_wrap_IMeshManipulator_transform__SWIG_0" IMeshManipulator_transform) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (m (:pointer "matrix4")))

(cffi:defcfun ("_wrap_IMeshManipulator_transform__SWIG_1" IMeshManipulator_transform) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (m (:pointer "matrix4")))

(cffi:defcfun ("_wrap_IMeshManipulator_transformMesh" IMeshManipulator_transformMesh) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (m (:pointer "matrix4")))

(cffi:defcfun ("_wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_0" IMeshManipulator_makePlanarTextureMapping) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (resolution :float))

(cffi:defcfun ("_wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_1" IMeshManipulator_makePlanarTextureMapping) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_2" IMeshManipulator_makePlanarTextureMapping) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (meshbuffer (:pointer "irr::scene::IMeshBuffer *"))
  (resolution :float))

(cffi:defcfun ("_wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_3" IMeshManipulator_makePlanarTextureMapping) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (meshbuffer (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_4" IMeshManipulator_makePlanarTextureMapping) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (resolutionS :float)
  (resolutionT :float)
  (axis :uchar)
  (offset (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IMeshManipulator_makePlanarTextureMapping__SWIG_5" IMeshManipulator_makePlanarTextureMapping) :void
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (buffer (:pointer "irr::scene::IMeshBuffer *"))
  (resolutionS :float)
  (resolutionT :float)
  (axis :uchar)
  (offset (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IMeshManipulator_createMeshCopy" IMeshManipulator_createMeshCopy) (:pointer "irr::scene::SMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_createMeshWithTangents__SWIG_0" IMeshManipulator_createMeshWithTangents) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (recalculateNormals :bool)
  (smooth :bool)
  (angleWeighted :bool)
  (recalculateTangents :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_createMeshWithTangents__SWIG_1" IMeshManipulator_createMeshWithTangents) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (recalculateNormals :bool)
  (smooth :bool)
  (angleWeighted :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_createMeshWithTangents__SWIG_2" IMeshManipulator_createMeshWithTangents) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (recalculateNormals :bool)
  (smooth :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_createMeshWithTangents__SWIG_3" IMeshManipulator_createMeshWithTangents) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (recalculateNormals :bool))

(cffi:defcfun ("_wrap_IMeshManipulator_createMeshWithTangents__SWIG_4" IMeshManipulator_createMeshWithTangents) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_createMeshWith2TCoords" IMeshManipulator_createMeshWith2TCoords) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_createMeshWith1TCoords" IMeshManipulator_createMeshWith1TCoords) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_createMeshUniquePrimitives" IMeshManipulator_createMeshUniquePrimitives) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_createMeshWelded__SWIG_0" IMeshManipulator_createMeshWelded) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (tolerance :float))

(cffi:defcfun ("_wrap_IMeshManipulator_createMeshWelded__SWIG_1" IMeshManipulator_createMeshWelded) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_getPolyCount__SWIG_0" IMeshManipulator_getPolyCount) :int
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_getPolyCount__SWIG_1" IMeshManipulator_getPolyCount) :int
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_createAnimatedMesh__SWIG_0" IMeshManipulator_createAnimatedMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (type :enum))

(cffi:defcfun ("_wrap_IMeshManipulator_createAnimatedMesh__SWIG_1" IMeshManipulator_createAnimatedMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshManipulator_createForsythOptimizedMesh" IMeshManipulator_createForsythOptimizedMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshManipulator *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_delete_IMeshManipulator" delete_IMeshManipulator) :void
  (self (:pointer "irr::scene::IMeshManipulator *")))

(cffi:defcfun ("_wrap_IMeshSceneNode_setMesh" IMeshSceneNode_setMesh) :void
  (self (:pointer "irr::scene::IMeshSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshSceneNode_getMesh" IMeshSceneNode_getMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IMeshSceneNode *")))

(cffi:defcfun ("_wrap_IMeshSceneNode_addShadowVolumeSceneNode__SWIG_0" IMeshSceneNode_addShadowVolumeSceneNode) (:pointer "irr::scene::IShadowVolumeSceneNode *")
  (self (:pointer "irr::scene::IMeshSceneNode *"))
  (shadowMesh (:pointer "irr::scene::IMesh *"))
  (id :int)
  (zfailmethod :bool)
  (infinity :float))

(cffi:defcfun ("_wrap_IMeshSceneNode_addShadowVolumeSceneNode__SWIG_1" IMeshSceneNode_addShadowVolumeSceneNode) (:pointer "irr::scene::IShadowVolumeSceneNode *")
  (self (:pointer "irr::scene::IMeshSceneNode *"))
  (shadowMesh (:pointer "irr::scene::IMesh *"))
  (id :int)
  (zfailmethod :bool))

(cffi:defcfun ("_wrap_IMeshSceneNode_addShadowVolumeSceneNode__SWIG_2" IMeshSceneNode_addShadowVolumeSceneNode) (:pointer "irr::scene::IShadowVolumeSceneNode *")
  (self (:pointer "irr::scene::IMeshSceneNode *"))
  (shadowMesh (:pointer "irr::scene::IMesh *"))
  (id :int))

(cffi:defcfun ("_wrap_IMeshSceneNode_addShadowVolumeSceneNode__SWIG_3" IMeshSceneNode_addShadowVolumeSceneNode) (:pointer "irr::scene::IShadowVolumeSceneNode *")
  (self (:pointer "irr::scene::IMeshSceneNode *"))
  (shadowMesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IMeshSceneNode_addShadowVolumeSceneNode__SWIG_4" IMeshSceneNode_addShadowVolumeSceneNode) (:pointer "irr::scene::IShadowVolumeSceneNode *")
  (self (:pointer "irr::scene::IMeshSceneNode *")))

(cffi:defcfun ("_wrap_IMeshSceneNode_setReadOnlyMaterials" IMeshSceneNode_setReadOnlyMaterials) :void
  (self (:pointer "irr::scene::IMeshSceneNode *"))
  (readonly :bool))

(cffi:defcfun ("_wrap_IMeshSceneNode_isReadOnlyMaterials" IMeshSceneNode_isReadOnlyMaterials) :bool
  (self (:pointer "irr::scene::IMeshSceneNode *")))

(cffi:defcfun ("_wrap_delete_IMeshSceneNode" delete_IMeshSceneNode) :void
  (self (:pointer "irr::scene::IMeshSceneNode *")))

(cffi:defcfun ("_wrap_delete_IMeshWriter" delete_IMeshWriter) :void
  (self (:pointer "irr::scene::IMeshWriter *")))

(cffi:defcfun ("_wrap_IMeshWriter_getType" IMeshWriter_getType) :enum
  (self (:pointer "irr::scene::IMeshWriter *")))

(cffi:defcfun ("_wrap_IMeshWriter_writeMesh__SWIG_0" IMeshWriter_writeMesh) :bool
  (self (:pointer "irr::scene::IMeshWriter *"))
  (file (:pointer "irr::io::IWriteFile *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (flags :int))

(cffi:defcfun ("_wrap_IMeshWriter_writeMesh__SWIG_1" IMeshWriter_writeMesh) :bool
  (self (:pointer "irr::scene::IMeshWriter *"))
  (file (:pointer "irr::io::IWriteFile *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcenum E_COLLADA_TECHNIQUE_FX
	:ECTF_BLINN
	:ECTF_PHONG
	:ECTF_LAMBERT
	:ECTF_CONSTANT)

(cffi:defcenum E_COLLADA_TRANSPARENT_FX
	(:ECOF_A_ONE 0)
	(:ECOF_RGB_ZERO 1))

(cffi:defcenum E_COLLADA_COLOR_SAMPLER
	:ECCS_DIFFUSE
	:ECCS_AMBIENT
	:ECCS_EMISSIVE
	:ECCS_SPECULAR
	:ECCS_TRANSPARENT
	:ECCS_REFLECTIVE)

(cffi:defcenum E_COLLADA_IRR_COLOR
	:ECIC_NONE
	:ECIC_CUSTOM
	:ECIC_DIFFUSE
	:ECIC_AMBIENT
	:ECIC_EMISSIVE
	:ECIC_SPECULAR)

(cffi:defcenum E_COLLADA_GEOMETRY_WRITING
	:ECGI_PER_MESH
	:ECGI_PER_MESH_AND_MATERIAL)

(cffi:defcfun ("_wrap_delete_IColladaMeshWriterProperties" delete_IColladaMeshWriterProperties) :void
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *")))

(cffi:defcfun ("_wrap_IColladaMeshWriterProperties_getTechniqueFx" IColladaMeshWriterProperties_getTechniqueFx) :enum
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_IColladaMeshWriterProperties_getTextureIdx" IColladaMeshWriterProperties_getTextureIdx) :int
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *"))
  (material (:pointer "irr::video::SMaterial *"))
  (cs :enum))

(cffi:defcfun ("_wrap_IColladaMeshWriterProperties_getColorMapping" IColladaMeshWriterProperties_getColorMapping) :enum
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *"))
  (material (:pointer "irr::video::SMaterial *"))
  (cs :enum))

(cffi:defcfun ("_wrap_IColladaMeshWriterProperties_getCustomColor" IColladaMeshWriterProperties_getCustomColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *"))
  (material (:pointer "irr::video::SMaterial *"))
  (cs :enum))

(cffi:defcfun ("_wrap_IColladaMeshWriterProperties_getTransparentFx" IColladaMeshWriterProperties_getTransparentFx) :enum
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_IColladaMeshWriterProperties_getTransparency" IColladaMeshWriterProperties_getTransparency) :float
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_IColladaMeshWriterProperties_getReflectivity" IColladaMeshWriterProperties_getReflectivity) :float
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_IColladaMeshWriterProperties_getIndexOfRefraction" IColladaMeshWriterProperties_getIndexOfRefraction) :float
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_IColladaMeshWriterProperties_isExportable" IColladaMeshWriterProperties_isExportable) :bool
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_IColladaMeshWriterProperties_getMesh" IColladaMeshWriterProperties_getMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_IColladaMeshWriterProperties_useNodeMaterial" IColladaMeshWriterProperties_useNodeMaterial) :bool
  (self (:pointer "irr::scene::IColladaMeshWriterProperties *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_delete_IColladaMeshWriterNames" delete_IColladaMeshWriterNames) :void
  (self (:pointer "irr::scene::IColladaMeshWriterNames *")))

(cffi:defcfun ("_wrap_IColladaMeshWriterNames_nameForMesh" IColladaMeshWriterNames_nameForMesh) (:by-value :irrstring)
  (self (:pointer "irr::scene::IColladaMeshWriterNames *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (instance :int))

(cffi:defcfun ("_wrap_IColladaMeshWriterNames_nameForNode" IColladaMeshWriterNames_nameForNode) (:by-value :irrstring)
  (self (:pointer "irr::scene::IColladaMeshWriterNames *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_IColladaMeshWriterNames_nameForMaterial" IColladaMeshWriterNames_nameForMaterial) (:by-value :irrstring)
  (self (:pointer "irr::scene::IColladaMeshWriterNames *"))
  (material (:pointer "irr::video::SMaterial *"))
  (materialId :int)
  (mesh (:pointer "irr::scene::IMesh *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_delete_IColladaMeshWriter" delete_IColladaMeshWriter) :void
  (self (:pointer "irr::scene::IColladaMeshWriter *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_writeScene" IColladaMeshWriter_writeScene) :bool
  (self (:pointer "irr::scene::IColladaMeshWriter *"))
  (file (:pointer "irr::io::IWriteFile *"))
  (root (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_setWriteTextures" IColladaMeshWriter_setWriteTextures) :void
  (self (:pointer "irr::scene::IColladaMeshWriter *"))
  (write :bool))

(cffi:defcfun ("_wrap_IColladaMeshWriter_getWriteTextures" IColladaMeshWriter_getWriteTextures) :bool
  (self (:pointer "irr::scene::IColladaMeshWriter *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_setWriteDefaultScene" IColladaMeshWriter_setWriteDefaultScene) :void
  (self (:pointer "irr::scene::IColladaMeshWriter *"))
  (write :bool))

(cffi:defcfun ("_wrap_IColladaMeshWriter_getWriteDefaultScene" IColladaMeshWriter_getWriteDefaultScene) :bool
  (self (:pointer "irr::scene::IColladaMeshWriter *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_setAmbientLight" IColladaMeshWriter_setAmbientLight) :void
  (self (:pointer "irr::scene::IColladaMeshWriter *"))
  (ambientColor (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_getAmbientLight" IColladaMeshWriter_getAmbientLight) (:by-value "irr::video::SColorf")
  (self (:pointer "irr::scene::IColladaMeshWriter *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_setGeometryWriting" IColladaMeshWriter_setGeometryWriting) :void
  (self (:pointer "irr::scene::IColladaMeshWriter *"))
  (writeStyle :enum))

(cffi:defcfun ("_wrap_IColladaMeshWriter_getGeometryWriting" IColladaMeshWriter_getGeometryWriting) :enum
  (self (:pointer "irr::scene::IColladaMeshWriter *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_setExportSMaterialsOnlyOnce" IColladaMeshWriter_setExportSMaterialsOnlyOnce) :void
  (self (:pointer "irr::scene::IColladaMeshWriter *"))
  (exportOnce :bool))

(cffi:defcfun ("_wrap_IColladaMeshWriter_getExportSMaterialsOnlyOnce" IColladaMeshWriter_getExportSMaterialsOnlyOnce) :bool
  (self (:pointer "irr::scene::IColladaMeshWriter *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_setProperties" IColladaMeshWriter_setProperties) :void
  (self (:pointer "irr::scene::IColladaMeshWriter *"))
  (p (:pointer "irr::scene::IColladaMeshWriterProperties *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_getProperties" IColladaMeshWriter_getProperties) (:pointer "irr::scene::IColladaMeshWriterProperties *")
  (self (:pointer "irr::scene::IColladaMeshWriter *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_getDefaultProperties" IColladaMeshWriter_getDefaultProperties) (:pointer "irr::scene::IColladaMeshWriterProperties *")
  (self (:pointer "irr::scene::IColladaMeshWriter *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_setNameGenerator" IColladaMeshWriter_setNameGenerator) :void
  (self (:pointer "irr::scene::IColladaMeshWriter *"))
  (nameGenerator (:pointer "irr::scene::IColladaMeshWriterNames *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_getNameGenerator" IColladaMeshWriter_getNameGenerator) (:pointer "irr::scene::IColladaMeshWriterNames *")
  (self (:pointer "irr::scene::IColladaMeshWriter *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_getDefaultNameGenerator" IColladaMeshWriter_getDefaultNameGenerator) (:pointer "irr::scene::IColladaMeshWriterNames *")
  (self (:pointer "irr::scene::IColladaMeshWriter *")))

(cffi:defcfun ("_wrap_IColladaMeshWriter_toNCName__SWIG_0" IColladaMeshWriter_toNCName) (:by-value :irrstring)
  (self (:pointer "irr::scene::IColladaMeshWriter *"))
  (oldString (:reference :irrstring))
  (prefix (:reference :irrstring)))

(cffi:defcfun ("_wrap_IColladaMeshWriter_toNCName__SWIG_1" IColladaMeshWriter_toNCName) (:by-value :irrstring)
  (self (:pointer "irr::scene::IColladaMeshWriter *"))
  (oldString (:reference :irrstring)))

(cffi:defcfun ("_wrap_IMetaTriangleSelector_addTriangleSelector" IMetaTriangleSelector_addTriangleSelector) :void
  (self (:pointer "irr::scene::IMetaTriangleSelector *"))
  (toAdd (:pointer "irr::scene::ITriangleSelector *")))

(cffi:defcfun ("_wrap_IMetaTriangleSelector_removeTriangleSelector" IMetaTriangleSelector_removeTriangleSelector) :bool
  (self (:pointer "irr::scene::IMetaTriangleSelector *"))
  (toRemove (:pointer "irr::scene::ITriangleSelector *")))

(cffi:defcfun ("_wrap_IMetaTriangleSelector_removeAllTriangleSelectors" IMetaTriangleSelector_removeAllTriangleSelectors) :void
  (self (:pointer "irr::scene::IMetaTriangleSelector *")))

(cffi:defcfun ("_wrap_delete_IMetaTriangleSelector" delete_IMetaTriangleSelector) :void
  (self (:pointer "irr::scene::IMetaTriangleSelector *")))

(cffi:defcfun ("_wrap_IOSOperator_getOperatingSystemVersion" IOSOperator_getOperatingSystemVersion) (:reference :irrstring)
  (self (:pointer "irr::IOSOperator *")))

(cffi:defcfun ("_wrap_IOSOperator_getOperationSystemVersion" IOSOperator_getOperationSystemVersion) :w-string
  (self (:pointer "irr::IOSOperator *")))

(cffi:defcfun ("_wrap_IOSOperator_copyToClipboard" IOSOperator_copyToClipboard) :void
  (self (:pointer "irr::IOSOperator *"))
  (text :string))

(cffi:defcfun ("_wrap_IOSOperator_getTextFromClipboard" IOSOperator_getTextFromClipboard) :string
  (self (:pointer "irr::IOSOperator *")))

(cffi:defcfun ("_wrap_IOSOperator_getProcessorSpeedMHz" IOSOperator_getProcessorSpeedMHz) :bool
  (self (:pointer "irr::IOSOperator *"))
  (MHz (:pointer "irr::u32 *")))

(cffi:defcfun ("_wrap_IOSOperator_getSystemMemory" IOSOperator_getSystemMemory) :bool
  (self (:pointer "irr::IOSOperator *"))
  (Total (:pointer "irr::u32 *"))
  (Avail (:pointer "irr::u32 *")))

(cffi:defcfun ("_wrap_delete_IOSOperator" delete_IOSOperator) :void
  (self (:pointer "irr::IOSOperator *")))

(cffi:defcstruct SParticle
	(pos (:pointer "vector3df"))
	(vector (:pointer "vector3df"))
	(startTime :uint)
	(endTime :uint)
	(color (:pointer "irr::video::SColor"))
	(startColor (:pointer "irr::video::SColor"))
	(startVector (:pointer "vector3df"))
	(size (:pointer "dimension2df"))
	(startSize (:pointer "dimension2df")))

(cffi:defcenum E_PARTICLE_EMITTER_TYPE
	(:EPET_POINT 0)
	:EPET_ANIMATED_MESH
	:EPET_BOX
	:EPET_CYLINDER
	:EPET_MESH
	:EPET_RING
	:EPET_SPHERE
	:EPET_COUNT)

(cffi:defcvar ("ParticleEmitterTypeNames" ParticleEmitterTypeNames)
 (:pointer "irr::c8 **"))

(cffi:defcfun ("_wrap_IParticleEmitter_emitt" IParticleEmitter_emitt) :int
  (self (:pointer "irr::scene::IParticleEmitter *"))
  (now :uint)
  (timeSinceLastCall :uint)
  (outArray (:pointer "irr::scene::SParticle **")))

(cffi:defcfun ("_wrap_IParticleEmitter_setDirection" IParticleEmitter_setDirection) :void
  (self (:pointer "irr::scene::IParticleEmitter *"))
  (newDirection (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleEmitter_setMinParticlesPerSecond" IParticleEmitter_setMinParticlesPerSecond) :void
  (self (:pointer "irr::scene::IParticleEmitter *"))
  (minPPS :uint))

(cffi:defcfun ("_wrap_IParticleEmitter_setMaxParticlesPerSecond" IParticleEmitter_setMaxParticlesPerSecond) :void
  (self (:pointer "irr::scene::IParticleEmitter *"))
  (maxPPS :uint))

(cffi:defcfun ("_wrap_IParticleEmitter_setMinStartColor" IParticleEmitter_setMinStartColor) :void
  (self (:pointer "irr::scene::IParticleEmitter *"))
  (color (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleEmitter_setMaxStartColor" IParticleEmitter_setMaxStartColor) :void
  (self (:pointer "irr::scene::IParticleEmitter *"))
  (color (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleEmitter_setMaxStartSize" IParticleEmitter_setMaxStartSize) :void
  (self (:pointer "irr::scene::IParticleEmitter *"))
  (size (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleEmitter_setMinStartSize" IParticleEmitter_setMinStartSize) :void
  (self (:pointer "irr::scene::IParticleEmitter *"))
  (size (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleEmitter_setMinLifeTime" IParticleEmitter_setMinLifeTime) :void
  (self (:pointer "irr::scene::IParticleEmitter *"))
  (lifeTimeMin :uint))

(cffi:defcfun ("_wrap_IParticleEmitter_setMaxLifeTime" IParticleEmitter_setMaxLifeTime) :void
  (self (:pointer "irr::scene::IParticleEmitter *"))
  (lifeTimeMax :uint))

(cffi:defcfun ("_wrap_IParticleEmitter_setMaxAngleDegrees" IParticleEmitter_setMaxAngleDegrees) :void
  (self (:pointer "irr::scene::IParticleEmitter *"))
  (maxAngleDegrees :int))

(cffi:defcfun ("_wrap_IParticleEmitter_getDirection" IParticleEmitter_getDirection) (:reference "vector3df")
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleEmitter_getMinParticlesPerSecond" IParticleEmitter_getMinParticlesPerSecond) :uint
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleEmitter_getMaxParticlesPerSecond" IParticleEmitter_getMaxParticlesPerSecond) :uint
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleEmitter_getMinStartColor" IParticleEmitter_getMinStartColor) (:reference "irr::video::SColor *")
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleEmitter_getMaxStartColor" IParticleEmitter_getMaxStartColor) (:reference "irr::video::SColor *")
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleEmitter_getMaxStartSize" IParticleEmitter_getMaxStartSize) (:reference "dimension2df")
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleEmitter_getMinStartSize" IParticleEmitter_getMinStartSize) (:reference "dimension2df")
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleEmitter_getMinLifeTime" IParticleEmitter_getMinLifeTime) :uint
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleEmitter_getMaxLifeTime" IParticleEmitter_getMaxLifeTime) :uint
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleEmitter_getMaxAngleDegrees" IParticleEmitter_getMaxAngleDegrees) :int
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleEmitter_getType" IParticleEmitter_getType) :enum
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_delete_IParticleEmitter" delete_IParticleEmitter) :void
  (self (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleAnimatedMeshSceneNodeEmitter_setAnimatedMeshSceneNode" IParticleAnimatedMeshSceneNodeEmitter_setAnimatedMeshSceneNode) :void
  (self (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IParticleAnimatedMeshSceneNodeEmitter_setUseNormalDirection__SWIG_0" IParticleAnimatedMeshSceneNodeEmitter_setUseNormalDirection) :void
  (self (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *"))
  (useNormalDirection :bool))

(cffi:defcfun ("_wrap_IParticleAnimatedMeshSceneNodeEmitter_setUseNormalDirection__SWIG_1" IParticleAnimatedMeshSceneNodeEmitter_setUseNormalDirection) :void
  (self (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")))

(cffi:defcfun ("_wrap_IParticleAnimatedMeshSceneNodeEmitter_setNormalDirectionModifier" IParticleAnimatedMeshSceneNodeEmitter_setNormalDirectionModifier) :void
  (self (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *"))
  (normalDirectionModifier :float))

(cffi:defcfun ("_wrap_IParticleAnimatedMeshSceneNodeEmitter_setEveryMeshVertex__SWIG_0" IParticleAnimatedMeshSceneNodeEmitter_setEveryMeshVertex) :void
  (self (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *"))
  (everyMeshVertex :bool))

(cffi:defcfun ("_wrap_IParticleAnimatedMeshSceneNodeEmitter_setEveryMeshVertex__SWIG_1" IParticleAnimatedMeshSceneNodeEmitter_setEveryMeshVertex) :void
  (self (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")))

(cffi:defcfun ("_wrap_IParticleAnimatedMeshSceneNodeEmitter_getAnimatedMeshSceneNode" IParticleAnimatedMeshSceneNodeEmitter_getAnimatedMeshSceneNode) (:pointer "irr::scene::IAnimatedMeshSceneNode *")
  (self (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")))

(cffi:defcfun ("_wrap_IParticleAnimatedMeshSceneNodeEmitter_isUsingNormalDirection" IParticleAnimatedMeshSceneNodeEmitter_isUsingNormalDirection) :bool
  (self (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")))

(cffi:defcfun ("_wrap_IParticleAnimatedMeshSceneNodeEmitter_getNormalDirectionModifier" IParticleAnimatedMeshSceneNodeEmitter_getNormalDirectionModifier) :float
  (self (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")))

(cffi:defcfun ("_wrap_IParticleAnimatedMeshSceneNodeEmitter_getEveryMeshVertex" IParticleAnimatedMeshSceneNodeEmitter_getEveryMeshVertex) :bool
  (self (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")))

(cffi:defcfun ("_wrap_delete_IParticleAnimatedMeshSceneNodeEmitter" delete_IParticleAnimatedMeshSceneNodeEmitter) :void
  (self (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")))

(cffi:defcfun ("_wrap_IParticleBoxEmitter_setBox" IParticleBoxEmitter_setBox) :void
  (self (:pointer "irr::scene::IParticleBoxEmitter *"))
  (box (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_IParticleBoxEmitter_getBox" IParticleBoxEmitter_getBox) (:reference "aabbox3df")
  (self (:pointer "irr::scene::IParticleBoxEmitter *")))

(cffi:defcfun ("_wrap_delete_IParticleBoxEmitter" delete_IParticleBoxEmitter) :void
  (self (:pointer "irr::scene::IParticleBoxEmitter *")))

(cffi:defcfun ("_wrap_IParticleCylinderEmitter_setCenter" IParticleCylinderEmitter_setCenter) :void
  (self (:pointer "irr::scene::IParticleCylinderEmitter *"))
  (center (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleCylinderEmitter_setNormal" IParticleCylinderEmitter_setNormal) :void
  (self (:pointer "irr::scene::IParticleCylinderEmitter *"))
  (normal (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleCylinderEmitter_setRadius" IParticleCylinderEmitter_setRadius) :void
  (self (:pointer "irr::scene::IParticleCylinderEmitter *"))
  (radius :float))

(cffi:defcfun ("_wrap_IParticleCylinderEmitter_setLength" IParticleCylinderEmitter_setLength) :void
  (self (:pointer "irr::scene::IParticleCylinderEmitter *"))
  (length :float))

(cffi:defcfun ("_wrap_IParticleCylinderEmitter_setOutlineOnly__SWIG_0" IParticleCylinderEmitter_setOutlineOnly) :void
  (self (:pointer "irr::scene::IParticleCylinderEmitter *"))
  (outlineOnly :bool))

(cffi:defcfun ("_wrap_IParticleCylinderEmitter_setOutlineOnly__SWIG_1" IParticleCylinderEmitter_setOutlineOnly) :void
  (self (:pointer "irr::scene::IParticleCylinderEmitter *")))

(cffi:defcfun ("_wrap_IParticleCylinderEmitter_getCenter" IParticleCylinderEmitter_getCenter) (:reference "vector3df")
  (self (:pointer "irr::scene::IParticleCylinderEmitter *")))

(cffi:defcfun ("_wrap_IParticleCylinderEmitter_getNormal" IParticleCylinderEmitter_getNormal) (:reference "vector3df")
  (self (:pointer "irr::scene::IParticleCylinderEmitter *")))

(cffi:defcfun ("_wrap_IParticleCylinderEmitter_getRadius" IParticleCylinderEmitter_getRadius) :float
  (self (:pointer "irr::scene::IParticleCylinderEmitter *")))

(cffi:defcfun ("_wrap_IParticleCylinderEmitter_getLength" IParticleCylinderEmitter_getLength) :float
  (self (:pointer "irr::scene::IParticleCylinderEmitter *")))

(cffi:defcfun ("_wrap_IParticleCylinderEmitter_getOutlineOnly" IParticleCylinderEmitter_getOutlineOnly) :bool
  (self (:pointer "irr::scene::IParticleCylinderEmitter *")))

(cffi:defcfun ("_wrap_delete_IParticleCylinderEmitter" delete_IParticleCylinderEmitter) :void
  (self (:pointer "irr::scene::IParticleCylinderEmitter *")))

(cffi:defcfun ("_wrap_IParticleMeshEmitter_setMesh" IParticleMeshEmitter_setMesh) :void
  (self (:pointer "irr::scene::IParticleMeshEmitter *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IParticleMeshEmitter_setUseNormalDirection__SWIG_0" IParticleMeshEmitter_setUseNormalDirection) :void
  (self (:pointer "irr::scene::IParticleMeshEmitter *"))
  (useNormalDirection :bool))

(cffi:defcfun ("_wrap_IParticleMeshEmitter_setUseNormalDirection__SWIG_1" IParticleMeshEmitter_setUseNormalDirection) :void
  (self (:pointer "irr::scene::IParticleMeshEmitter *")))

(cffi:defcfun ("_wrap_IParticleMeshEmitter_setNormalDirectionModifier" IParticleMeshEmitter_setNormalDirectionModifier) :void
  (self (:pointer "irr::scene::IParticleMeshEmitter *"))
  (normalDirectionModifier :float))

(cffi:defcfun ("_wrap_IParticleMeshEmitter_setEveryMeshVertex__SWIG_0" IParticleMeshEmitter_setEveryMeshVertex) :void
  (self (:pointer "irr::scene::IParticleMeshEmitter *"))
  (everyMeshVertex :bool))

(cffi:defcfun ("_wrap_IParticleMeshEmitter_setEveryMeshVertex__SWIG_1" IParticleMeshEmitter_setEveryMeshVertex) :void
  (self (:pointer "irr::scene::IParticleMeshEmitter *")))

(cffi:defcfun ("_wrap_IParticleMeshEmitter_getMesh" IParticleMeshEmitter_getMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IParticleMeshEmitter *")))

(cffi:defcfun ("_wrap_IParticleMeshEmitter_isUsingNormalDirection" IParticleMeshEmitter_isUsingNormalDirection) :bool
  (self (:pointer "irr::scene::IParticleMeshEmitter *")))

(cffi:defcfun ("_wrap_IParticleMeshEmitter_getNormalDirectionModifier" IParticleMeshEmitter_getNormalDirectionModifier) :float
  (self (:pointer "irr::scene::IParticleMeshEmitter *")))

(cffi:defcfun ("_wrap_IParticleMeshEmitter_getEveryMeshVertex" IParticleMeshEmitter_getEveryMeshVertex) :bool
  (self (:pointer "irr::scene::IParticleMeshEmitter *")))

(cffi:defcfun ("_wrap_delete_IParticleMeshEmitter" delete_IParticleMeshEmitter) :void
  (self (:pointer "irr::scene::IParticleMeshEmitter *")))

(cffi:defcfun ("_wrap_IParticleRingEmitter_setCenter" IParticleRingEmitter_setCenter) :void
  (self (:pointer "irr::scene::IParticleRingEmitter *"))
  (center (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleRingEmitter_setRadius" IParticleRingEmitter_setRadius) :void
  (self (:pointer "irr::scene::IParticleRingEmitter *"))
  (radius :float))

(cffi:defcfun ("_wrap_IParticleRingEmitter_setRingThickness" IParticleRingEmitter_setRingThickness) :void
  (self (:pointer "irr::scene::IParticleRingEmitter *"))
  (ringThickness :float))

(cffi:defcfun ("_wrap_IParticleRingEmitter_getCenter" IParticleRingEmitter_getCenter) (:reference "vector3df")
  (self (:pointer "irr::scene::IParticleRingEmitter *")))

(cffi:defcfun ("_wrap_IParticleRingEmitter_getRadius" IParticleRingEmitter_getRadius) :float
  (self (:pointer "irr::scene::IParticleRingEmitter *")))

(cffi:defcfun ("_wrap_IParticleRingEmitter_getRingThickness" IParticleRingEmitter_getRingThickness) :float
  (self (:pointer "irr::scene::IParticleRingEmitter *")))

(cffi:defcfun ("_wrap_delete_IParticleRingEmitter" delete_IParticleRingEmitter) :void
  (self (:pointer "irr::scene::IParticleRingEmitter *")))

(cffi:defcfun ("_wrap_IParticleSphereEmitter_setCenter" IParticleSphereEmitter_setCenter) :void
  (self (:pointer "irr::scene::IParticleSphereEmitter *"))
  (center (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSphereEmitter_setRadius" IParticleSphereEmitter_setRadius) :void
  (self (:pointer "irr::scene::IParticleSphereEmitter *"))
  (radius :float))

(cffi:defcfun ("_wrap_IParticleSphereEmitter_getCenter" IParticleSphereEmitter_getCenter) (:reference "vector3df")
  (self (:pointer "irr::scene::IParticleSphereEmitter *")))

(cffi:defcfun ("_wrap_IParticleSphereEmitter_getRadius" IParticleSphereEmitter_getRadius) :float
  (self (:pointer "irr::scene::IParticleSphereEmitter *")))

(cffi:defcfun ("_wrap_delete_IParticleSphereEmitter" delete_IParticleSphereEmitter) :void
  (self (:pointer "irr::scene::IParticleSphereEmitter *")))

(cffi:defcenum E_PARTICLE_AFFECTOR_TYPE
	(:EPAT_NONE 0)
	:EPAT_ATTRACT
	:EPAT_FADE_OUT
	:EPAT_GRAVITY
	:EPAT_ROTATE
	:EPAT_SCALE
	:EPAT_COUNT)

(cffi:defcvar ("ParticleAffectorTypeNames" ParticleAffectorTypeNames)
 (:pointer "irr::c8 **"))

(cffi:defcfun ("_wrap_IParticleAffector_affect" IParticleAffector_affect) :void
  (self (:pointer "irr::scene::IParticleAffector *"))
  (now :uint)
  (particlearray (:pointer "irr::scene::SParticle *"))
  (count :uint))

(cffi:defcfun ("_wrap_IParticleAffector_setEnabled" IParticleAffector_setEnabled) :void
  (self (:pointer "irr::scene::IParticleAffector *"))
  (enabled :bool))

(cffi:defcfun ("_wrap_IParticleAffector_getEnabled" IParticleAffector_getEnabled) :bool
  (self (:pointer "irr::scene::IParticleAffector *")))

(cffi:defcfun ("_wrap_IParticleAffector_getType" IParticleAffector_getType) :enum
  (self (:pointer "irr::scene::IParticleAffector *")))

(cffi:defcfun ("_wrap_delete_IParticleAffector" delete_IParticleAffector) :void
  (self (:pointer "irr::scene::IParticleAffector *")))

(cffi:defcfun ("_wrap_IParticleAttractionAffector_setPoint" IParticleAttractionAffector_setPoint) :void
  (self (:pointer "irr::scene::IParticleAttractionAffector *"))
  (point (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleAttractionAffector_setAttract" IParticleAttractionAffector_setAttract) :void
  (self (:pointer "irr::scene::IParticleAttractionAffector *"))
  (attract :bool))

(cffi:defcfun ("_wrap_IParticleAttractionAffector_setAffectX" IParticleAttractionAffector_setAffectX) :void
  (self (:pointer "irr::scene::IParticleAttractionAffector *"))
  (affect :bool))

(cffi:defcfun ("_wrap_IParticleAttractionAffector_setAffectY" IParticleAttractionAffector_setAffectY) :void
  (self (:pointer "irr::scene::IParticleAttractionAffector *"))
  (affect :bool))

(cffi:defcfun ("_wrap_IParticleAttractionAffector_setAffectZ" IParticleAttractionAffector_setAffectZ) :void
  (self (:pointer "irr::scene::IParticleAttractionAffector *"))
  (affect :bool))

(cffi:defcfun ("_wrap_IParticleAttractionAffector_getPoint" IParticleAttractionAffector_getPoint) (:reference "vector3df")
  (self (:pointer "irr::scene::IParticleAttractionAffector *")))

(cffi:defcfun ("_wrap_IParticleAttractionAffector_getAttract" IParticleAttractionAffector_getAttract) :bool
  (self (:pointer "irr::scene::IParticleAttractionAffector *")))

(cffi:defcfun ("_wrap_IParticleAttractionAffector_getAffectX" IParticleAttractionAffector_getAffectX) :bool
  (self (:pointer "irr::scene::IParticleAttractionAffector *")))

(cffi:defcfun ("_wrap_IParticleAttractionAffector_getAffectY" IParticleAttractionAffector_getAffectY) :bool
  (self (:pointer "irr::scene::IParticleAttractionAffector *")))

(cffi:defcfun ("_wrap_IParticleAttractionAffector_getAffectZ" IParticleAttractionAffector_getAffectZ) :bool
  (self (:pointer "irr::scene::IParticleAttractionAffector *")))

(cffi:defcfun ("_wrap_delete_IParticleAttractionAffector" delete_IParticleAttractionAffector) :void
  (self (:pointer "irr::scene::IParticleAttractionAffector *")))

(cffi:defcfun ("_wrap_IParticleFadeOutAffector_setTargetColor" IParticleFadeOutAffector_setTargetColor) :void
  (self (:pointer "irr::scene::IParticleFadeOutAffector *"))
  (targetColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleFadeOutAffector_setFadeOutTime" IParticleFadeOutAffector_setFadeOutTime) :void
  (self (:pointer "irr::scene::IParticleFadeOutAffector *"))
  (fadeOutTime :uint))

(cffi:defcfun ("_wrap_IParticleFadeOutAffector_getTargetColor" IParticleFadeOutAffector_getTargetColor) (:reference "irr::video::SColor *")
  (self (:pointer "irr::scene::IParticleFadeOutAffector *")))

(cffi:defcfun ("_wrap_IParticleFadeOutAffector_getFadeOutTime" IParticleFadeOutAffector_getFadeOutTime) :uint
  (self (:pointer "irr::scene::IParticleFadeOutAffector *")))

(cffi:defcfun ("_wrap_delete_IParticleFadeOutAffector" delete_IParticleFadeOutAffector) :void
  (self (:pointer "irr::scene::IParticleFadeOutAffector *")))

(cffi:defcfun ("_wrap_IParticleGravityAffector_setTimeForceLost" IParticleGravityAffector_setTimeForceLost) :void
  (self (:pointer "irr::scene::IParticleGravityAffector *"))
  (timeForceLost :float))

(cffi:defcfun ("_wrap_IParticleGravityAffector_setGravity" IParticleGravityAffector_setGravity) :void
  (self (:pointer "irr::scene::IParticleGravityAffector *"))
  (gravity (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleGravityAffector_getTimeForceLost" IParticleGravityAffector_getTimeForceLost) :float
  (self (:pointer "irr::scene::IParticleGravityAffector *")))

(cffi:defcfun ("_wrap_IParticleGravityAffector_getGravity" IParticleGravityAffector_getGravity) (:reference "vector3df")
  (self (:pointer "irr::scene::IParticleGravityAffector *")))

(cffi:defcfun ("_wrap_delete_IParticleGravityAffector" delete_IParticleGravityAffector) :void
  (self (:pointer "irr::scene::IParticleGravityAffector *")))

(cffi:defcfun ("_wrap_IParticleRotationAffector_setPivotPoint" IParticleRotationAffector_setPivotPoint) :void
  (self (:pointer "irr::scene::IParticleRotationAffector *"))
  (point (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleRotationAffector_setSpeed" IParticleRotationAffector_setSpeed) :void
  (self (:pointer "irr::scene::IParticleRotationAffector *"))
  (speed (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleRotationAffector_getPivotPoint" IParticleRotationAffector_getPivotPoint) (:reference "vector3df")
  (self (:pointer "irr::scene::IParticleRotationAffector *")))

(cffi:defcfun ("_wrap_IParticleRotationAffector_getSpeed" IParticleRotationAffector_getSpeed) (:reference "vector3df")
  (self (:pointer "irr::scene::IParticleRotationAffector *")))

(cffi:defcfun ("_wrap_delete_IParticleRotationAffector" delete_IParticleRotationAffector) :void
  (self (:pointer "irr::scene::IParticleRotationAffector *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_setParticleSize__SWIG_0" IParticleSystemSceneNode_setParticleSize) :void
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (size (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_setParticleSize__SWIG_1" IParticleSystemSceneNode_setParticleSize) :void
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_setParticlesAreGlobal__SWIG_0" IParticleSystemSceneNode_setParticlesAreGlobal) :void
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (global :bool))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_setParticlesAreGlobal__SWIG_1" IParticleSystemSceneNode_setParticlesAreGlobal) :void
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_clearParticles" IParticleSystemSceneNode_clearParticles) :void
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_doParticleSystem" IParticleSystemSceneNode_doParticleSystem) :void
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (time :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_getEmitter" IParticleSystemSceneNode_getEmitter) (:pointer "irr::scene::IParticleEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_setEmitter" IParticleSystemSceneNode_setEmitter) :void
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (emitter (:pointer "irr::scene::IParticleEmitter *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_addAffector" IParticleSystemSceneNode_addAffector) :void
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (affector (:pointer "irr::scene::IParticleAffector *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_getAffectors" IParticleSystemSceneNode_getAffectors) (:reference "irr::core::list< irr::scene::IParticleAffector * > *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_removeAllAffectors" IParticleSystemSceneNode_removeAllAffectors) :void
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_0" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df"))
  (maxStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_1" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_2" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_3" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_4" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_5" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_6" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_7" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_8" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_9" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_10" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_11" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_12" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_13" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *"))
  (useNormalDirection :bool))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter__SWIG_14" IParticleSystemSceneNode_createAnimatedMeshSceneNodeEmitter) (:pointer "irr::scene::IParticleAnimatedMeshSceneNodeEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_0" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (box (:pointer "aabbox3df"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df"))
  (maxStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_1" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (box (:pointer "aabbox3df"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_2" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (box (:pointer "aabbox3df"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_3" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (box (:pointer "aabbox3df"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_4" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (box (:pointer "aabbox3df"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_5" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (box (:pointer "aabbox3df"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_6" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (box (:pointer "aabbox3df"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_7" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (box (:pointer "aabbox3df"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_8" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (box (:pointer "aabbox3df"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_9" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (box (:pointer "aabbox3df"))
  (direction (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_10" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (box (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createBoxEmitter__SWIG_11" IParticleSystemSceneNode_createBoxEmitter) (:pointer "irr::scene::IParticleBoxEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_0" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float)
  (outlineOnly :bool)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df"))
  (maxStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_1" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float)
  (outlineOnly :bool)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_2" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float)
  (outlineOnly :bool)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_3" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float)
  (outlineOnly :bool)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_4" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float)
  (outlineOnly :bool)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_5" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float)
  (outlineOnly :bool)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_6" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float)
  (outlineOnly :bool)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_7" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float)
  (outlineOnly :bool)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_8" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float)
  (outlineOnly :bool)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_9" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float)
  (outlineOnly :bool)
  (direction (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_10" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float)
  (outlineOnly :bool))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createCylinderEmitter__SWIG_11" IParticleSystemSceneNode_createCylinderEmitter) (:pointer "irr::scene::IParticleCylinderEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (normal (:pointer "vector3df"))
  (length :float))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_0" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df"))
  (maxStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_1" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_2" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_3" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_4" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_5" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_6" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_7" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_8" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool)
  (minParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_9" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int)
  (everyMeshVertex :bool))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_10" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float)
  (mbNumber :int))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_11" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df"))
  (normalDirectionModifier :float))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_12" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool)
  (direction (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_13" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (useNormalDirection :bool))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createMeshEmitter__SWIG_14" IParticleSystemSceneNode_createMeshEmitter) (:pointer "irr::scene::IParticleMeshEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_0" IParticleSystemSceneNode_createPointEmitter) (:pointer "irr::scene::IParticlePointEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df"))
  (maxStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_1" IParticleSystemSceneNode_createPointEmitter) (:pointer "irr::scene::IParticlePointEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_2" IParticleSystemSceneNode_createPointEmitter) (:pointer "irr::scene::IParticlePointEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_3" IParticleSystemSceneNode_createPointEmitter) (:pointer "irr::scene::IParticlePointEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_4" IParticleSystemSceneNode_createPointEmitter) (:pointer "irr::scene::IParticlePointEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_5" IParticleSystemSceneNode_createPointEmitter) (:pointer "irr::scene::IParticlePointEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_6" IParticleSystemSceneNode_createPointEmitter) (:pointer "irr::scene::IParticlePointEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_7" IParticleSystemSceneNode_createPointEmitter) (:pointer "irr::scene::IParticlePointEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_8" IParticleSystemSceneNode_createPointEmitter) (:pointer "irr::scene::IParticlePointEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_9" IParticleSystemSceneNode_createPointEmitter) (:pointer "irr::scene::IParticlePointEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (direction (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createPointEmitter__SWIG_10" IParticleSystemSceneNode_createPointEmitter) (:pointer "irr::scene::IParticlePointEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_0" IParticleSystemSceneNode_createRingEmitter) (:pointer "irr::scene::IParticleRingEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (ringThickness :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df"))
  (maxStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_1" IParticleSystemSceneNode_createRingEmitter) (:pointer "irr::scene::IParticleRingEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (ringThickness :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_2" IParticleSystemSceneNode_createRingEmitter) (:pointer "irr::scene::IParticleRingEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (ringThickness :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_3" IParticleSystemSceneNode_createRingEmitter) (:pointer "irr::scene::IParticleRingEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (ringThickness :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_4" IParticleSystemSceneNode_createRingEmitter) (:pointer "irr::scene::IParticleRingEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (ringThickness :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_5" IParticleSystemSceneNode_createRingEmitter) (:pointer "irr::scene::IParticleRingEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (ringThickness :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_6" IParticleSystemSceneNode_createRingEmitter) (:pointer "irr::scene::IParticleRingEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (ringThickness :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_7" IParticleSystemSceneNode_createRingEmitter) (:pointer "irr::scene::IParticleRingEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (ringThickness :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_8" IParticleSystemSceneNode_createRingEmitter) (:pointer "irr::scene::IParticleRingEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (ringThickness :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_9" IParticleSystemSceneNode_createRingEmitter) (:pointer "irr::scene::IParticleRingEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (ringThickness :float)
  (direction (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRingEmitter__SWIG_10" IParticleSystemSceneNode_createRingEmitter) (:pointer "irr::scene::IParticleRingEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (ringThickness :float))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_0" IParticleSystemSceneNode_createSphereEmitter) (:pointer "irr::scene::IParticleSphereEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df"))
  (maxStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_1" IParticleSystemSceneNode_createSphereEmitter) (:pointer "irr::scene::IParticleSphereEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int)
  (minStartSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_2" IParticleSystemSceneNode_createSphereEmitter) (:pointer "irr::scene::IParticleSphereEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint)
  (maxAngleDegrees :int))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_3" IParticleSystemSceneNode_createSphereEmitter) (:pointer "irr::scene::IParticleSphereEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint)
  (lifeTimeMax :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_4" IParticleSystemSceneNode_createSphereEmitter) (:pointer "irr::scene::IParticleSphereEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *"))
  (lifeTimeMin :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_5" IParticleSystemSceneNode_createSphereEmitter) (:pointer "irr::scene::IParticleSphereEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *"))
  (maxStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_6" IParticleSystemSceneNode_createSphereEmitter) (:pointer "irr::scene::IParticleSphereEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint)
  (minStartColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_7" IParticleSystemSceneNode_createSphereEmitter) (:pointer "irr::scene::IParticleSphereEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint)
  (maxParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_8" IParticleSystemSceneNode_createSphereEmitter) (:pointer "irr::scene::IParticleSphereEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (direction (:pointer "vector3df"))
  (minParticlesPerSecond :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_9" IParticleSystemSceneNode_createSphereEmitter) (:pointer "irr::scene::IParticleSphereEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (direction (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createSphereEmitter__SWIG_10" IParticleSystemSceneNode_createSphereEmitter) (:pointer "irr::scene::IParticleSphereEmitter *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (center (:pointer "vector3df"))
  (radius :float))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_0" IParticleSystemSceneNode_createAttractionAffector) (:pointer "irr::scene::IParticleAttractionAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (point (:pointer "vector3df"))
  (speed :float)
  (attract :bool)
  (affectX :bool)
  (affectY :bool)
  (affectZ :bool))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_1" IParticleSystemSceneNode_createAttractionAffector) (:pointer "irr::scene::IParticleAttractionAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (point (:pointer "vector3df"))
  (speed :float)
  (attract :bool)
  (affectX :bool)
  (affectY :bool))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_2" IParticleSystemSceneNode_createAttractionAffector) (:pointer "irr::scene::IParticleAttractionAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (point (:pointer "vector3df"))
  (speed :float)
  (attract :bool)
  (affectX :bool))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_3" IParticleSystemSceneNode_createAttractionAffector) (:pointer "irr::scene::IParticleAttractionAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (point (:pointer "vector3df"))
  (speed :float)
  (attract :bool))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_4" IParticleSystemSceneNode_createAttractionAffector) (:pointer "irr::scene::IParticleAttractionAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (point (:pointer "vector3df"))
  (speed :float))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createAttractionAffector__SWIG_5" IParticleSystemSceneNode_createAttractionAffector) (:pointer "irr::scene::IParticleAttractionAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (point (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createScaleParticleAffector__SWIG_0" IParticleSystemSceneNode_createScaleParticleAffector) (:pointer "irr::scene::IParticleAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (scaleTo (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createScaleParticleAffector__SWIG_1" IParticleSystemSceneNode_createScaleParticleAffector) (:pointer "irr::scene::IParticleAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createFadeOutParticleAffector__SWIG_0" IParticleSystemSceneNode_createFadeOutParticleAffector) (:pointer "irr::scene::IParticleFadeOutAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (targetColor (:pointer "irr::video::SColor *"))
  (timeNeededToFadeOut :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createFadeOutParticleAffector__SWIG_1" IParticleSystemSceneNode_createFadeOutParticleAffector) (:pointer "irr::scene::IParticleFadeOutAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (targetColor (:pointer "irr::video::SColor *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createFadeOutParticleAffector__SWIG_2" IParticleSystemSceneNode_createFadeOutParticleAffector) (:pointer "irr::scene::IParticleFadeOutAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createGravityAffector__SWIG_0" IParticleSystemSceneNode_createGravityAffector) (:pointer "irr::scene::IParticleGravityAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (gravity (:pointer "vector3df"))
  (timeForceLost :uint))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createGravityAffector__SWIG_1" IParticleSystemSceneNode_createGravityAffector) (:pointer "irr::scene::IParticleGravityAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (gravity (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createGravityAffector__SWIG_2" IParticleSystemSceneNode_createGravityAffector) (:pointer "irr::scene::IParticleGravityAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRotationAffector__SWIG_0" IParticleSystemSceneNode_createRotationAffector) (:pointer "irr::scene::IParticleRotationAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (speed (:pointer "vector3df"))
  (pivotPoint (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRotationAffector__SWIG_1" IParticleSystemSceneNode_createRotationAffector) (:pointer "irr::scene::IParticleRotationAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *"))
  (speed (:pointer "vector3df")))

(cffi:defcfun ("_wrap_IParticleSystemSceneNode_createRotationAffector__SWIG_2" IParticleSystemSceneNode_createRotationAffector) (:pointer "irr::scene::IParticleRotationAffector *")
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_delete_IParticleSystemSceneNode" delete_IParticleSystemSceneNode) :void
  (self (:pointer "irr::scene::IParticleSystemSceneNode *")))

(cffi:defcfun ("_wrap_IQ3LevelMesh_getShader__SWIG_0" IQ3LevelMesh_getShader) (:pointer "irr::scene::quake3::IShader *")
  (self (:pointer "irr::scene::IQ3LevelMesh *"))
  (filename :string)
  (fileNameIsValid :bool))

(cffi:defcfun ("_wrap_IQ3LevelMesh_getShader__SWIG_1" IQ3LevelMesh_getShader) (:pointer "irr::scene::quake3::IShader *")
  (self (:pointer "irr::scene::IQ3LevelMesh *"))
  (filename :string))

(cffi:defcfun ("_wrap_IQ3LevelMesh_getShader__SWIG_2" IQ3LevelMesh_getShader) (:pointer "irr::scene::quake3::IShader *")
  (self (:pointer "irr::scene::IQ3LevelMesh *"))
  (index :uint))

(cffi:defcfun ("_wrap_IQ3LevelMesh_getEntityList" IQ3LevelMesh_getEntityList) (:reference "irr::scene::quake3::tQ3EntityList *")
  (self (:pointer "irr::scene::IQ3LevelMesh *")))

(cffi:defcfun ("_wrap_IQ3LevelMesh_getBrushEntityMesh__SWIG_0" IQ3LevelMesh_getBrushEntityMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IQ3LevelMesh *"))
  (num :int))

(cffi:defcfun ("_wrap_IQ3LevelMesh_getBrushEntityMesh__SWIG_1" IQ3LevelMesh_getBrushEntityMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::IQ3LevelMesh *"))
  (ent (:pointer "irr::scene::quake3::IEntity *")))

(cffi:defcfun ("_wrap_delete_IQ3LevelMesh" delete_IQ3LevelMesh) :void
  (self (:pointer "irr::scene::IQ3LevelMesh *")))

(cffi:defcfun ("_wrap_IRandomizer_reset__SWIG_0" IRandomizer_reset) :void
  (self (:pointer "irr::IRandomizer *"))
  (value :int))

(cffi:defcfun ("_wrap_IRandomizer_reset__SWIG_1" IRandomizer_reset) :void
  (self (:pointer "irr::IRandomizer *")))

(cffi:defcfun ("_wrap_IRandomizer_rand" IRandomizer_rand) :int
  (self (:pointer "irr::IRandomizer *")))

(cffi:defcfun ("_wrap_IRandomizer_frand" IRandomizer_frand) :float
  (self (:pointer "irr::IRandomizer *")))

(cffi:defcfun ("_wrap_IRandomizer_randMax" IRandomizer_randMax) :int
  (self (:pointer "irr::IRandomizer *")))

(cffi:defcfun ("_wrap_delete_IRandomizer" delete_IRandomizer) :void
  (self (:pointer "irr::IRandomizer *")))

(cffi:defcenum E_DEVICE_TYPE
	:EIDT_WIN32
	:EIDT_WINCE
	:EIDT_X11
	:EIDT_OSX
	:EIDT_SDL
	:EIDT_FRAMEBUFFER
	:EIDT_CONSOLE
	:EIDT_BEST)

(cffi:defcfun ("_wrap_IVideoModeList_getVideoModeCount" IVideoModeList_getVideoModeCount) :int
  (self (:pointer "irr::video::IVideoModeList *")))

(cffi:defcfun ("_wrap_IVideoModeList_getVideoModeResolution__SWIG_0" IVideoModeList_getVideoModeResolution) (:by-value "dimension2du")
  (self (:pointer "irr::video::IVideoModeList *"))
  (modeNumber :int))

(cffi:defcfun ("_wrap_IVideoModeList_getVideoModeResolution__SWIG_1" IVideoModeList_getVideoModeResolution) (:by-value "dimension2du")
  (self (:pointer "irr::video::IVideoModeList *"))
  (minSize (:pointer "dimension2du"))
  (maxSize (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_IVideoModeList_getVideoModeDepth" IVideoModeList_getVideoModeDepth) :int
  (self (:pointer "irr::video::IVideoModeList *"))
  (modeNumber :int))

(cffi:defcfun ("_wrap_IVideoModeList_getDesktopResolution" IVideoModeList_getDesktopResolution) (:reference "dimension2du")
  (self (:pointer "irr::video::IVideoModeList *")))

(cffi:defcfun ("_wrap_IVideoModeList_getDesktopDepth" IVideoModeList_getDesktopDepth) :int
  (self (:pointer "irr::video::IVideoModeList *")))

(cffi:defcfun ("_wrap_delete_IVideoModeList" delete_IVideoModeList) :void
  (self (:pointer "irr::video::IVideoModeList *")))

(cffi:defcfun ("_wrap_ITimer_getRealTime" ITimer_getRealTime) :uint
  (self (:pointer "irr::ITimer *")))

(cffi:defcenum EWeekday
	(:EWD_SUNDAY 0)
	:EWD_MONDAY
	:EWD_TUESDAY
	:EWD_WEDNESDAY
	:EWD_THURSDAY
	:EWD_FRIDAY
	:EWD_SATURDAY)

(cffi:defcfun ("_wrap_ITimer_getRealTimeAndDate" ITimer_getRealTimeAndDate) (:by-value "irr::ITimer::RealTimeDate")
  (self (:pointer "irr::ITimer *")))

(cffi:defcfun ("_wrap_ITimer_getTime" ITimer_getTime) :uint
  (self (:pointer "irr::ITimer *")))

(cffi:defcfun ("_wrap_ITimer_setTime" ITimer_setTime) :void
  (self (:pointer "irr::ITimer *"))
  (time :uint))

(cffi:defcfun ("_wrap_ITimer_stop" ITimer_stop) :void
  (self (:pointer "irr::ITimer *")))

(cffi:defcfun ("_wrap_ITimer_start" ITimer_start) :void
  (self (:pointer "irr::ITimer *")))

(cffi:defcfun ("_wrap_ITimer_setSpeed__SWIG_0" ITimer_setSpeed) :void
  (self (:pointer "irr::ITimer *"))
  (speed :float))

(cffi:defcfun ("_wrap_ITimer_setSpeed__SWIG_1" ITimer_setSpeed) :void
  (self (:pointer "irr::ITimer *")))

(cffi:defcfun ("_wrap_ITimer_getSpeed" ITimer_getSpeed) :float
  (self (:pointer "irr::ITimer *")))

(cffi:defcfun ("_wrap_ITimer_isStopped" ITimer_isStopped) :bool
  (self (:pointer "irr::ITimer *")))

(cffi:defcfun ("_wrap_ITimer_tick" ITimer_tick) :void
  (self (:pointer "irr::ITimer *")))

(cffi:defcfun ("_wrap_delete_ITimer" delete_ITimer) :void
  (self (:pointer "irr::ITimer *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_run" IrrlichtDevice_run) :bool
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_yield" IrrlichtDevice_yield) :void
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_sleep__SWIG_0" IrrlichtDevice_sleep) :void
  (self (:pointer "irr::IrrlichtDevice *"))
  (timeMs :uint)
  (pauseTimer :bool))

(cffi:defcfun ("_wrap_IrrlichtDevice_sleep__SWIG_1" IrrlichtDevice_sleep) :void
  (self (:pointer "irr::IrrlichtDevice *"))
  (timeMs :uint))

(cffi:defcfun ("_wrap_IrrlichtDevice_getVideoDriver" IrrlichtDevice_getVideoDriver) (:pointer "irr::video::IVideoDriver *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getFileSystem" IrrlichtDevice_getFileSystem) (:pointer "irr::io::IFileSystem *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getGUIEnvironment" IrrlichtDevice_getGUIEnvironment) (:pointer "irr::gui::IGUIEnvironment *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getSceneManager" IrrlichtDevice_getSceneManager) (:pointer "irr::scene::ISceneManager *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getCursorControl" IrrlichtDevice_getCursorControl) (:pointer "irr::gui::ICursorControl *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getLogger" IrrlichtDevice_getLogger) (:pointer "irr::ILogger *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getVideoModeList" IrrlichtDevice_getVideoModeList) (:pointer "irr::video::IVideoModeList *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getOSOperator" IrrlichtDevice_getOSOperator) (:pointer "irr::IOSOperator *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getTimer" IrrlichtDevice_getTimer) (:pointer "irr::ITimer *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getRandomizer" IrrlichtDevice_getRandomizer) (:pointer "irr::IRandomizer *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_setRandomizer" IrrlichtDevice_setRandomizer) :void
  (self (:pointer "irr::IrrlichtDevice *"))
  (r (:pointer "irr::IRandomizer *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_createDefaultRandomizer" IrrlichtDevice_createDefaultRandomizer) (:pointer "irr::IRandomizer *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_setWindowCaption" IrrlichtDevice_setWindowCaption) :void
  (self (:pointer "irr::IrrlichtDevice *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IrrlichtDevice_isWindowActive" IrrlichtDevice_isWindowActive) :bool
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_isWindowFocused" IrrlichtDevice_isWindowFocused) :bool
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_isWindowMinimized" IrrlichtDevice_isWindowMinimized) :bool
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_isFullscreen" IrrlichtDevice_isFullscreen) :bool
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getColorFormat" IrrlichtDevice_getColorFormat) :enum
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_closeDevice" IrrlichtDevice_closeDevice) :void
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getVersion" IrrlichtDevice_getVersion) :string
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_setEventReceiver" IrrlichtDevice_setEventReceiver) :void
  (self (:pointer "irr::IrrlichtDevice *"))
  (receiver (:pointer "irr::IEventReceiver *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getEventReceiver" IrrlichtDevice_getEventReceiver) (:pointer "irr::IEventReceiver *")
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_postEventFromUser" IrrlichtDevice_postEventFromUser) :bool
  (self (:pointer "irr::IrrlichtDevice *"))
  (event (:pointer "irr::SEvent *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_setInputReceivingSceneManager" IrrlichtDevice_setInputReceivingSceneManager) :void
  (self (:pointer "irr::IrrlichtDevice *"))
  (sceneManager (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_setResizable__SWIG_0" IrrlichtDevice_setResizable) :void
  (self (:pointer "irr::IrrlichtDevice *"))
  (resize :bool))

(cffi:defcfun ("_wrap_IrrlichtDevice_setResizable__SWIG_1" IrrlichtDevice_setResizable) :void
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_minimizeWindow" IrrlichtDevice_minimizeWindow) :void
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_maximizeWindow" IrrlichtDevice_maximizeWindow) :void
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_restoreWindow" IrrlichtDevice_restoreWindow) :void
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_activateJoysticks" IrrlichtDevice_activateJoysticks) :bool
  (self (:pointer "irr::IrrlichtDevice *"))
  (joystickInfo (:pointer "irr::core::array< irr::SJoystickInfo,irr::core::irrAllocator< irr::SJoystickInfo > > *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_setGammaRamp" IrrlichtDevice_setGammaRamp) :bool
  (self (:pointer "irr::IrrlichtDevice *"))
  (red :float)
  (green :float)
  (blue :float)
  (relativebrightness :float)
  (relativecontrast :float))

(cffi:defcfun ("_wrap_IrrlichtDevice_getGammaRamp" IrrlichtDevice_getGammaRamp) :bool
  (self (:pointer "irr::IrrlichtDevice *"))
  (red (:pointer "irr::f32 *"))
  (green (:pointer "irr::f32 *"))
  (blue (:pointer "irr::f32 *"))
  (brightness (:pointer "irr::f32 *"))
  (contrast (:pointer "irr::f32 *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_clearSystemMessages" IrrlichtDevice_clearSystemMessages) :void
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_getType" IrrlichtDevice_getType) :enum
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_IrrlichtDevice_isDriverSupported" IrrlichtDevice_isDriverSupported) :bool
  (driver :enum))

(cffi:defcfun ("_wrap_delete_IrrlichtDevice" delete_IrrlichtDevice) :void
  (self (:pointer "irr::IrrlichtDevice *")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getCollisionPoint" ISceneCollisionManager_getCollisionPoint) :bool
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (ray (:pointer "line3df"))
  (selector (:pointer "irr::scene::ITriangleSelector *"))
  (outCollisionPoint (:pointer "vector3df"))
  (outTriangle (:pointer "triangle3df"))
  (outNode (:pointer "irr::scene::ISceneNode **")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getCollisionResultPosition__SWIG_0" ISceneCollisionManager_getCollisionResultPosition) (:by-value "vector3df")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (selector (:pointer "irr::scene::ITriangleSelector *"))
  (ellipsoidPosition (:pointer "vector3df"))
  (ellipsoidRadius (:pointer "vector3df"))
  (ellipsoidDirectionAndSpeed (:pointer "vector3df"))
  (triout (:pointer "triangle3df"))
  (hitPosition (:pointer "vector3df"))
  (outFalling (:pointer "bool *"))
  (outNode (:pointer "irr::scene::ISceneNode **"))
  (slidingSpeed :float)
  (gravityDirectionAndSpeed (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getCollisionResultPosition__SWIG_1" ISceneCollisionManager_getCollisionResultPosition) (:by-value "vector3df")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (selector (:pointer "irr::scene::ITriangleSelector *"))
  (ellipsoidPosition (:pointer "vector3df"))
  (ellipsoidRadius (:pointer "vector3df"))
  (ellipsoidDirectionAndSpeed (:pointer "vector3df"))
  (triout (:pointer "triangle3df"))
  (hitPosition (:pointer "vector3df"))
  (outFalling (:pointer "bool *"))
  (outNode (:pointer "irr::scene::ISceneNode **"))
  (slidingSpeed :float))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getCollisionResultPosition__SWIG_2" ISceneCollisionManager_getCollisionResultPosition) (:by-value "vector3df")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (selector (:pointer "irr::scene::ITriangleSelector *"))
  (ellipsoidPosition (:pointer "vector3df"))
  (ellipsoidRadius (:pointer "vector3df"))
  (ellipsoidDirectionAndSpeed (:pointer "vector3df"))
  (triout (:pointer "triangle3df"))
  (hitPosition (:pointer "vector3df"))
  (outFalling (:pointer "bool *"))
  (outNode (:pointer "irr::scene::ISceneNode **")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getRayFromScreenCoordinates__SWIG_0" ISceneCollisionManager_getRayFromScreenCoordinates) (:by-value "line3df")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (pos (:pointer "vector2di"))
  (camera (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getRayFromScreenCoordinates__SWIG_1" ISceneCollisionManager_getRayFromScreenCoordinates) (:by-value "line3df")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (pos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getScreenCoordinatesFrom3DPosition__SWIG_0" ISceneCollisionManager_getScreenCoordinatesFrom3DPosition) (:by-value "vector2di")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (pos (:pointer "vector3df"))
  (camera (:pointer "irr::scene::ICameraSceneNode *"))
  (useViewPort :bool))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getScreenCoordinatesFrom3DPosition__SWIG_1" ISceneCollisionManager_getScreenCoordinatesFrom3DPosition) (:by-value "vector2di")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (pos (:pointer "vector3df"))
  (camera (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getScreenCoordinatesFrom3DPosition__SWIG_2" ISceneCollisionManager_getScreenCoordinatesFrom3DPosition) (:by-value "vector2di")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (pos (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB__SWIG_0" ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (pos (:pointer "vector2di"))
  (idBitMask :int)
  (bNoDebugObjects :bool)
  (root (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB__SWIG_1" ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (pos (:pointer "vector2di"))
  (idBitMask :int)
  (bNoDebugObjects :bool))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB__SWIG_2" ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (pos (:pointer "vector2di"))
  (idBitMask :int))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB__SWIG_3" ISceneCollisionManager_getSceneNodeFromScreenCoordinatesBB) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (pos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeFromRayBB__SWIG_0" ISceneCollisionManager_getSceneNodeFromRayBB) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (ray (:pointer "line3df"))
  (idBitMask :int)
  (bNoDebugObjects :bool)
  (root (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeFromRayBB__SWIG_1" ISceneCollisionManager_getSceneNodeFromRayBB) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (ray (:pointer "line3df"))
  (idBitMask :int)
  (bNoDebugObjects :bool))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeFromRayBB__SWIG_2" ISceneCollisionManager_getSceneNodeFromRayBB) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (ray (:pointer "line3df"))
  (idBitMask :int))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeFromRayBB__SWIG_3" ISceneCollisionManager_getSceneNodeFromRayBB) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (ray (:pointer "line3df")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeFromCameraBB__SWIG_0" ISceneCollisionManager_getSceneNodeFromCameraBB) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (camera (:pointer "irr::scene::ICameraSceneNode *"))
  (idBitMask :int)
  (bNoDebugObjects :bool))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeFromCameraBB__SWIG_1" ISceneCollisionManager_getSceneNodeFromCameraBB) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (camera (:pointer "irr::scene::ICameraSceneNode *"))
  (idBitMask :int))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeFromCameraBB__SWIG_2" ISceneCollisionManager_getSceneNodeFromCameraBB) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (camera (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay__SWIG_0" ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (ray (:pointer "line3df"))
  (outCollisionPoint (:pointer "vector3df"))
  (outTriangle (:pointer "triangle3df"))
  (idBitMask :int)
  (collisionRootNode (:pointer "irr::scene::ISceneNode *"))
  (noDebugObjects :bool))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay__SWIG_1" ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (ray (:pointer "line3df"))
  (outCollisionPoint (:pointer "vector3df"))
  (outTriangle (:pointer "triangle3df"))
  (idBitMask :int)
  (collisionRootNode (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay__SWIG_2" ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (ray (:pointer "line3df"))
  (outCollisionPoint (:pointer "vector3df"))
  (outTriangle (:pointer "triangle3df"))
  (idBitMask :int))

(cffi:defcfun ("_wrap_ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay__SWIG_3" ISceneCollisionManager_getSceneNodeAndCollisionPointFromRay) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneCollisionManager *"))
  (ray (:pointer "line3df"))
  (outCollisionPoint (:pointer "vector3df"))
  (outTriangle (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_delete_ISceneCollisionManager" delete_ISceneCollisionManager) :void
  (self (:pointer "irr::scene::ISceneCollisionManager *")))

(cffi:defcfun ("_wrap_ISceneLoader_isALoadableFileExtension" ISceneLoader_isALoadableFileExtension) :bool
  (self (:pointer "irr::scene::ISceneLoader *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_ISceneLoader_isALoadableFileFormat" ISceneLoader_isALoadableFileFormat) :bool
  (self (:pointer "irr::scene::ISceneLoader *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_ISceneLoader_loadScene__SWIG_0" ISceneLoader_loadScene) :bool
  (self (:pointer "irr::scene::ISceneLoader *"))
  (file (:pointer "irr::io::IReadFile *"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *"))
  (rootNode (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneLoader_loadScene__SWIG_1" ISceneLoader_loadScene) :bool
  (self (:pointer "irr::scene::ISceneLoader *"))
  (file (:pointer "irr::io::IReadFile *"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *")))

(cffi:defcfun ("_wrap_ISceneLoader_loadScene__SWIG_2" ISceneLoader_loadScene) :bool
  (self (:pointer "irr::scene::ISceneLoader *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_delete_ISceneLoader" delete_ISceneLoader) :void
  (self (:pointer "irr::scene::ISceneLoader *")))

(cffi:defcvar ("ALLOW_ZWRITE_ON_TRANSPARENT" ALLOW_ZWRITE_ON_TRANSPARENT)
 :string)

(cffi:defcvar ("CSM_TEXTURE_PATH" CSM_TEXTURE_PATH)
 :string)

(cffi:defcvar ("LMTS_TEXTURE_PATH" LMTS_TEXTURE_PATH)
 :string)

(cffi:defcvar ("MY3D_TEXTURE_PATH" MY3D_TEXTURE_PATH)
 :string)

(cffi:defcvar ("COLLADA_CREATE_SCENE_INSTANCES" COLLADA_CREATE_SCENE_INSTANCES)
 :string)

(cffi:defcvar ("DMF_TEXTURE_PATH" DMF_TEXTURE_PATH)
 :string)

(cffi:defcvar ("DMF_IGNORE_MATERIALS_DIRS" DMF_IGNORE_MATERIALS_DIRS)
 :string)

(cffi:defcvar ("DMF_ALPHA_CHANNEL_REF" DMF_ALPHA_CHANNEL_REF)
 :string)

(cffi:defcvar ("DMF_FLIP_ALPHA_TEXTURES" DMF_FLIP_ALPHA_TEXTURES)
 :string)

(cffi:defcvar ("OBJ_TEXTURE_PATH" OBJ_TEXTURE_PATH)
 :string)

(cffi:defcvar ("OBJ_LOADER_IGNORE_GROUPS" OBJ_LOADER_IGNORE_GROUPS)
 :string)

(cffi:defcvar ("OBJ_LOADER_IGNORE_MATERIAL_FILES" OBJ_LOADER_IGNORE_MATERIAL_FILES)
 :string)

(cffi:defcvar ("B3D_LOADER_IGNORE_MIPMAP_FLAG" B3D_LOADER_IGNORE_MIPMAP_FLAG)
 :string)

(cffi:defcvar ("B3D_TEXTURE_PATH" B3D_TEXTURE_PATH)
 :string)

(cffi:defcvar ("IRR_SCENE_MANAGER_IS_EDITOR" IRR_SCENE_MANAGER_IS_EDITOR)
 :string)

(cffi:defcvar ("DEBUG_NORMAL_LENGTH" DEBUG_NORMAL_LENGTH)
 :string)

(cffi:defcvar ("DEBUG_NORMAL_COLOR" DEBUG_NORMAL_COLOR)
 :string)

(cffi:defcstruct SSkinMeshBuffer
	(getMaterial (:pointer "irr::video::SMaterial &()"))
	(getMaterial (:pointer "irr::video::SMaterial &()"))
	(getVertex (:pointer "irr::video::S3DVertex *(irr::u32)"))
	(getVertices (:pointer "void *()"))
	(getVertices (:pointer "void *()"))
	(getVertexCount (:pointer "irr::u32 ()"))
	(getIndexType (:pointer "irr::video::E_INDEX_TYPE ()"))
	(getIndices (:pointer "irr::u16 *()"))
	(getIndices (:pointer "irr::u16 *()"))
	(getIndexCount (:pointer "irr::u32 ()"))
	(getBoundingBox (:pointer "irr::core::aabbox3d< irr::f32 > &()"))
	(setBoundingBox (:pointer "void (irr::core::aabbox3df const &)"))
	(recalculateBoundingBox (:pointer "void ()"))
	(getVertexType (:pointer "irr::video::E_VERTEX_TYPE ()"))
	(convertTo2TCoords (:pointer "void ()"))
	(convertToTangents (:pointer "void ()"))
	(getPosition (:pointer "irr::core::vector3df &(irr::u32)"))
	(getPosition (:pointer "irr::core::vector3df &(irr::u32)"))
	(getNormal (:pointer "irr::core::vector3df &(irr::u32)"))
	(getNormal (:pointer "irr::core::vector3df &(irr::u32)"))
	(getTCoords (:pointer "irr::core::vector2df &(irr::u32)"))
	(getTCoords (:pointer "irr::core::vector2df &(irr::u32)"))
	(append (:pointer "void (void const *const,irr::u32,irr::u16 const *const,irr::u32)"))
	(append (:pointer "void (irr::scene::IMeshBuffer const *const)"))
	(getHardwareMappingHint_Vertex (:pointer "irr::scene::E_HARDWARE_MAPPING ()"))
	(getHardwareMappingHint_Index (:pointer "irr::scene::E_HARDWARE_MAPPING ()"))
	(setHardwareMappingHint (:pointer "void (irr::scene::E_HARDWARE_MAPPING,irr::scene::E_BUFFER_TYPE)"))
	(setHardwareMappingHint (:pointer "void (irr::scene::E_HARDWARE_MAPPING)"))
	(setDirty (:pointer "void (irr::scene::E_BUFFER_TYPE)"))
	(setDirty (:pointer "void ()"))
	(getChangedID_Vertex (:pointer "irr::u32 ()"))
	(getChangedID_Index (:pointer "irr::u32 ()"))
	(boundingBoxNeedsRecalculated (:pointer "void ()"))
	(Vertices_Tangents (:pointer "irr::core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > >"))
	(Vertices_2TCoords (:pointer "irr::core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > >"))
	(Vertices_Standard (:pointer "irr::core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > >"))
	(Indices (:pointer "irr::core::array< irr::u16,irr::core::irrAllocator< irr::u16 > >"))
	(ChangedID_Vertex :uint)
	(ChangedID_Index :uint)
	(Transformation (:pointer "matrix4"))
	(Material (:pointer "irr::video::SMaterial"))
	(VertexType :enum)
	(BoundingBox (:pointer "aabbox3df"))
	(MappingHint_Vertex :enum)
	(MappingHint_Index :enum)
	(BoundingBoxNeedsRecalculated :bool))

(cffi:defcenum E_INTERPOLATION_MODE
	(:EIM_CONSTANT 0)
	:EIM_LINEAR
	:EIM_COUNT)

(cffi:defcfun ("_wrap_ISkinnedMesh_getJointCount" ISkinnedMesh_getJointCount) :uint
  (self (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_getJointName" ISkinnedMesh_getJointName) :string
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (number :uint))

(cffi:defcfun ("_wrap_ISkinnedMesh_getJointNumber" ISkinnedMesh_getJointNumber) :int
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (name :string))

(cffi:defcfun ("_wrap_ISkinnedMesh_useAnimationFrom" ISkinnedMesh_useAnimationFrom) :bool
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (mesh (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_updateNormalsWhenAnimating" ISkinnedMesh_updateNormalsWhenAnimating) :void
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (on :bool))

(cffi:defcfun ("_wrap_ISkinnedMesh_setInterpolationMode" ISkinnedMesh_setInterpolationMode) :void
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (mode :enum))

(cffi:defcfun ("_wrap_ISkinnedMesh_animateMesh" ISkinnedMesh_animateMesh) :void
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (frame :float)
  (blend :float))

(cffi:defcfun ("_wrap_ISkinnedMesh_skinMesh" ISkinnedMesh_skinMesh) :void
  (self (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_convertMeshToTangents" ISkinnedMesh_convertMeshToTangents) :void
  (self (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_setHardwareSkinning" ISkinnedMesh_setHardwareSkinning) :bool
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (on :bool))

(cffi:defcfun ("_wrap_ISkinnedMesh_getMeshBuffers" ISkinnedMesh_getMeshBuffers) (:reference "irr::core::array< irr::scene::SSkinMeshBuffer *,irr::core::irrAllocator< irr::scene::SSkinMeshBuffer * > > *")
  (self (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_getAllJoints__SWIG_0" ISkinnedMesh_getAllJoints) (:reference "irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *")
  (self (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_getAllJoints__SWIG_1" ISkinnedMesh_getAllJoints) (:reference "irr::core::array< irr::scene::ISkinnedMesh::SJoint *,irr::core::irrAllocator< irr::scene::ISkinnedMesh::SJoint * > > *")
  (self (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_finalize" ISkinnedMesh_finalize) :void
  (self (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_addMeshBuffer" ISkinnedMesh_addMeshBuffer) (:pointer "irr::scene::SSkinMeshBuffer *")
  (self (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_addJoint__SWIG_0" ISkinnedMesh_addJoint) (:pointer "irr::scene::ISkinnedMesh::SJoint *")
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (parent (:pointer "irr::scene::ISkinnedMesh::SJoint *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_addJoint__SWIG_1" ISkinnedMesh_addJoint) (:pointer "irr::scene::ISkinnedMesh::SJoint *")
  (self (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_addWeight" ISkinnedMesh_addWeight) (:pointer "irr::scene::ISkinnedMesh::SWeight *")
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (joint (:pointer "irr::scene::ISkinnedMesh::SJoint *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_addPositionKey" ISkinnedMesh_addPositionKey) (:pointer "irr::scene::ISkinnedMesh::SPositionKey *")
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (joint (:pointer "irr::scene::ISkinnedMesh::SJoint *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_addScaleKey" ISkinnedMesh_addScaleKey) (:pointer "irr::scene::ISkinnedMesh::SScaleKey *")
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (joint (:pointer "irr::scene::ISkinnedMesh::SJoint *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_addRotationKey" ISkinnedMesh_addRotationKey) (:pointer "irr::scene::ISkinnedMesh::SRotationKey *")
  (self (:pointer "irr::scene::ISkinnedMesh *"))
  (joint (:pointer "irr::scene::ISkinnedMesh::SJoint *")))

(cffi:defcfun ("_wrap_ISkinnedMesh_isStatic" ISkinnedMesh_isStatic) :bool
  (self (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcfun ("_wrap_delete_ISkinnedMesh" delete_ISkinnedMesh) :void
  (self (:pointer "irr::scene::ISkinnedMesh *")))

(cffi:defcenum E_SCENE_NODE_RENDER_PASS
	(:ESNRP_NONE 0)
	(:ESNRP_CAMERA 1)
	(:ESNRP_LIGHT 2)
	(:ESNRP_SKY_BOX 4)
	(:ESNRP_AUTOMATIC 24)
	(:ESNRP_SOLID 8)
	(:ESNRP_TRANSPARENT 16)
	(:ESNRP_TRANSPARENT_EFFECT 32)
	(:ESNRP_SHADOW 64))

(cffi:defcfun ("_wrap_ISceneManager_getMesh__SWIG_0" ISceneManager_getMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_ISceneManager_getMesh__SWIG_1" ISceneManager_getMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_ISceneManager_getMeshCache" ISceneManager_getMeshCache) (:pointer "irr::scene::IMeshCache *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getVideoDriver" ISceneManager_getVideoDriver) (:pointer "irr::video::IVideoDriver *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getGUIEnvironment" ISceneManager_getGUIEnvironment) (:pointer "irr::gui::IGUIEnvironment *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getFileSystem" ISceneManager_getFileSystem) (:pointer "irr::io::IFileSystem *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_0" ISceneManager_addVolumeLightSceneNode) (:pointer "irr::scene::IVolumeLightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (subdivU :uint)
  (subdivV :uint)
  (foot (:pointer "irr::video::SColor"))
  (tail (:pointer "irr::video::SColor"))
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_1" ISceneManager_addVolumeLightSceneNode) (:pointer "irr::scene::IVolumeLightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (subdivU :uint)
  (subdivV :uint)
  (foot (:pointer "irr::video::SColor"))
  (tail (:pointer "irr::video::SColor"))
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_2" ISceneManager_addVolumeLightSceneNode) (:pointer "irr::scene::IVolumeLightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (subdivU :uint)
  (subdivV :uint)
  (foot (:pointer "irr::video::SColor"))
  (tail (:pointer "irr::video::SColor"))
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_3" ISceneManager_addVolumeLightSceneNode) (:pointer "irr::scene::IVolumeLightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (subdivU :uint)
  (subdivV :uint)
  (foot (:pointer "irr::video::SColor"))
  (tail (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_4" ISceneManager_addVolumeLightSceneNode) (:pointer "irr::scene::IVolumeLightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (subdivU :uint)
  (subdivV :uint)
  (foot (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_5" ISceneManager_addVolumeLightSceneNode) (:pointer "irr::scene::IVolumeLightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (subdivU :uint)
  (subdivV :uint))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_6" ISceneManager_addVolumeLightSceneNode) (:pointer "irr::scene::IVolumeLightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (subdivU :uint))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_7" ISceneManager_addVolumeLightSceneNode) (:pointer "irr::scene::IVolumeLightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_8" ISceneManager_addVolumeLightSceneNode) (:pointer "irr::scene::IVolumeLightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightSceneNode__SWIG_9" ISceneManager_addVolumeLightSceneNode) (:pointer "irr::scene::IVolumeLightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addCubeSceneNode__SWIG_0" ISceneManager_addCubeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (size :float)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addCubeSceneNode__SWIG_1" ISceneManager_addCubeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (size :float)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addCubeSceneNode__SWIG_2" ISceneManager_addCubeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (size :float)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addCubeSceneNode__SWIG_3" ISceneManager_addCubeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (size :float)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addCubeSceneNode__SWIG_4" ISceneManager_addCubeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (size :float)
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addCubeSceneNode__SWIG_5" ISceneManager_addCubeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (size :float))

(cffi:defcfun ("_wrap_ISceneManager_addCubeSceneNode__SWIG_6" ISceneManager_addCubeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addSphereSceneNode__SWIG_0" ISceneManager_addSphereSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (radius :float)
  (polyCount :int)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addSphereSceneNode__SWIG_1" ISceneManager_addSphereSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (radius :float)
  (polyCount :int)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addSphereSceneNode__SWIG_2" ISceneManager_addSphereSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (radius :float)
  (polyCount :int)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addSphereSceneNode__SWIG_3" ISceneManager_addSphereSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (radius :float)
  (polyCount :int)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addSphereSceneNode__SWIG_4" ISceneManager_addSphereSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (radius :float)
  (polyCount :int)
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addSphereSceneNode__SWIG_5" ISceneManager_addSphereSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (radius :float)
  (polyCount :int))

(cffi:defcfun ("_wrap_ISceneManager_addSphereSceneNode__SWIG_6" ISceneManager_addSphereSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (radius :float))

(cffi:defcfun ("_wrap_ISceneManager_addSphereSceneNode__SWIG_7" ISceneManager_addSphereSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_0" ISceneManager_addAnimatedMeshSceneNode) (:pointer "irr::scene::IAnimatedMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (alsoAddIfMeshPointerZero :bool))

(cffi:defcfun ("_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_1" ISceneManager_addAnimatedMeshSceneNode) (:pointer "irr::scene::IAnimatedMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_2" ISceneManager_addAnimatedMeshSceneNode) (:pointer "irr::scene::IAnimatedMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_3" ISceneManager_addAnimatedMeshSceneNode) (:pointer "irr::scene::IAnimatedMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_4" ISceneManager_addAnimatedMeshSceneNode) (:pointer "irr::scene::IAnimatedMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_5" ISceneManager_addAnimatedMeshSceneNode) (:pointer "irr::scene::IAnimatedMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addAnimatedMeshSceneNode__SWIG_6" ISceneManager_addAnimatedMeshSceneNode) (:pointer "irr::scene::IAnimatedMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *")))

(cffi:defcfun ("_wrap_ISceneManager_addMeshSceneNode__SWIG_0" ISceneManager_addMeshSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (alsoAddIfMeshPointerZero :bool))

(cffi:defcfun ("_wrap_ISceneManager_addMeshSceneNode__SWIG_1" ISceneManager_addMeshSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addMeshSceneNode__SWIG_2" ISceneManager_addMeshSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addMeshSceneNode__SWIG_3" ISceneManager_addMeshSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addMeshSceneNode__SWIG_4" ISceneManager_addMeshSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addMeshSceneNode__SWIG_5" ISceneManager_addMeshSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addMeshSceneNode__SWIG_6" ISceneManager_addMeshSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_0" ISceneManager_addWaterSurfaceSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (waveHeight :float)
  (waveSpeed :float)
  (waveLength :float)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_1" ISceneManager_addWaterSurfaceSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (waveHeight :float)
  (waveSpeed :float)
  (waveLength :float)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_2" ISceneManager_addWaterSurfaceSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (waveHeight :float)
  (waveSpeed :float)
  (waveLength :float)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_3" ISceneManager_addWaterSurfaceSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (waveHeight :float)
  (waveSpeed :float)
  (waveLength :float)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_4" ISceneManager_addWaterSurfaceSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (waveHeight :float)
  (waveSpeed :float)
  (waveLength :float)
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_5" ISceneManager_addWaterSurfaceSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (waveHeight :float)
  (waveSpeed :float)
  (waveLength :float))

(cffi:defcfun ("_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_6" ISceneManager_addWaterSurfaceSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (waveHeight :float)
  (waveSpeed :float))

(cffi:defcfun ("_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_7" ISceneManager_addWaterSurfaceSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (waveHeight :float))

(cffi:defcfun ("_wrap_ISceneManager_addWaterSurfaceSceneNode__SWIG_8" ISceneManager_addWaterSurfaceSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_ISceneManager_addOctreeSceneNode__SWIG_0" ISceneManager_addOctreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (minimalPolysPerNode :int)
  (alsoAddIfMeshPointerZero :bool))

(cffi:defcfun ("_wrap_ISceneManager_addOctreeSceneNode__SWIG_1" ISceneManager_addOctreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (minimalPolysPerNode :int))

(cffi:defcfun ("_wrap_ISceneManager_addOctreeSceneNode__SWIG_2" ISceneManager_addOctreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addOctreeSceneNode__SWIG_3" ISceneManager_addOctreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addOctreeSceneNode__SWIG_4" ISceneManager_addOctreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *")))

(cffi:defcfun ("_wrap_ISceneManager_addOctTreeSceneNode__SWIG_0" ISceneManager_addOctTreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (minimalPolysPerNode :int)
  (alsoAddIfMeshPointerZero :bool))

(cffi:defcfun ("_wrap_ISceneManager_addOctTreeSceneNode__SWIG_1" ISceneManager_addOctTreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (minimalPolysPerNode :int))

(cffi:defcfun ("_wrap_ISceneManager_addOctTreeSceneNode__SWIG_2" ISceneManager_addOctTreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addOctTreeSceneNode__SWIG_3" ISceneManager_addOctTreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addOctTreeSceneNode__SWIG_4" ISceneManager_addOctTreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IAnimatedMesh *")))

(cffi:defcfun ("_wrap_ISceneManager_addOctreeSceneNode__SWIG_5" ISceneManager_addOctreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (minimalPolysPerNode :int)
  (alsoAddIfMeshPointerZero :bool))

(cffi:defcfun ("_wrap_ISceneManager_addOctreeSceneNode__SWIG_6" ISceneManager_addOctreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (minimalPolysPerNode :int))

(cffi:defcfun ("_wrap_ISceneManager_addOctreeSceneNode__SWIG_7" ISceneManager_addOctreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addOctreeSceneNode__SWIG_8" ISceneManager_addOctreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addOctreeSceneNode__SWIG_9" ISceneManager_addOctreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_ISceneManager_addOctTreeSceneNode__SWIG_5" ISceneManager_addOctTreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (minimalPolysPerNode :int)
  (alsoAddIfMeshPointerZero :bool))

(cffi:defcfun ("_wrap_ISceneManager_addOctTreeSceneNode__SWIG_6" ISceneManager_addOctTreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (minimalPolysPerNode :int))

(cffi:defcfun ("_wrap_ISceneManager_addOctTreeSceneNode__SWIG_7" ISceneManager_addOctTreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addOctTreeSceneNode__SWIG_8" ISceneManager_addOctTreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addOctTreeSceneNode__SWIG_9" ISceneManager_addOctTreeSceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNode__SWIG_0" ISceneManager_addCameraSceneNode) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (position (:pointer "vector3df"))
  (lookat (:pointer "vector3df"))
  (id :int)
  (makeActive :bool))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNode__SWIG_1" ISceneManager_addCameraSceneNode) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (position (:pointer "vector3df"))
  (lookat (:pointer "vector3df"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNode__SWIG_2" ISceneManager_addCameraSceneNode) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (position (:pointer "vector3df"))
  (lookat (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNode__SWIG_3" ISceneManager_addCameraSceneNode) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNode__SWIG_4" ISceneManager_addCameraSceneNode) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNode__SWIG_5" ISceneManager_addCameraSceneNode) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_0" ISceneManager_addCameraSceneNodeMaya) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (zoomSpeed :float)
  (translationSpeed :float)
  (id :int)
  (distance :float)
  (makeActive :bool))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_1" ISceneManager_addCameraSceneNodeMaya) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (zoomSpeed :float)
  (translationSpeed :float)
  (id :int)
  (distance :float))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_2" ISceneManager_addCameraSceneNodeMaya) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (zoomSpeed :float)
  (translationSpeed :float)
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_3" ISceneManager_addCameraSceneNodeMaya) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (zoomSpeed :float)
  (translationSpeed :float))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_4" ISceneManager_addCameraSceneNodeMaya) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (zoomSpeed :float))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_5" ISceneManager_addCameraSceneNodeMaya) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_6" ISceneManager_addCameraSceneNodeMaya) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeMaya__SWIG_7" ISceneManager_addCameraSceneNodeMaya) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_0" ISceneManager_addCameraSceneNodeFPS) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (moveSpeed :float)
  (id :int)
  (keyMapArray (:pointer "irr::SKeyMap *"))
  (keyMapSize :int)
  (noVerticalMovement :bool)
  (jumpSpeed :float)
  (invertMouse :bool)
  (makeActive :bool))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_1" ISceneManager_addCameraSceneNodeFPS) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (moveSpeed :float)
  (id :int)
  (keyMapArray (:pointer "irr::SKeyMap *"))
  (keyMapSize :int)
  (noVerticalMovement :bool)
  (jumpSpeed :float)
  (invertMouse :bool))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_2" ISceneManager_addCameraSceneNodeFPS) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (moveSpeed :float)
  (id :int)
  (keyMapArray (:pointer "irr::SKeyMap *"))
  (keyMapSize :int)
  (noVerticalMovement :bool)
  (jumpSpeed :float))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_3" ISceneManager_addCameraSceneNodeFPS) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (moveSpeed :float)
  (id :int)
  (keyMapArray (:pointer "irr::SKeyMap *"))
  (keyMapSize :int)
  (noVerticalMovement :bool))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_4" ISceneManager_addCameraSceneNodeFPS) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (moveSpeed :float)
  (id :int)
  (keyMapArray (:pointer "irr::SKeyMap *"))
  (keyMapSize :int))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_5" ISceneManager_addCameraSceneNodeFPS) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (moveSpeed :float)
  (id :int)
  (keyMapArray (:pointer "irr::SKeyMap *")))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_6" ISceneManager_addCameraSceneNodeFPS) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (moveSpeed :float)
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_7" ISceneManager_addCameraSceneNodeFPS) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float)
  (moveSpeed :float))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_8" ISceneManager_addCameraSceneNodeFPS) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (rotateSpeed :float))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_9" ISceneManager_addCameraSceneNodeFPS) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addCameraSceneNodeFPS__SWIG_10" ISceneManager_addCameraSceneNodeFPS) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addLightSceneNode__SWIG_0" ISceneManager_addLightSceneNode) (:pointer "irr::scene::ILightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (position (:pointer "vector3df"))
  (color (:pointer "irr::video::SColorf"))
  (radius :float)
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addLightSceneNode__SWIG_1" ISceneManager_addLightSceneNode) (:pointer "irr::scene::ILightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (position (:pointer "vector3df"))
  (color (:pointer "irr::video::SColorf"))
  (radius :float))

(cffi:defcfun ("_wrap_ISceneManager_addLightSceneNode__SWIG_2" ISceneManager_addLightSceneNode) (:pointer "irr::scene::ILightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (position (:pointer "vector3df"))
  (color (:pointer "irr::video::SColorf")))

(cffi:defcfun ("_wrap_ISceneManager_addLightSceneNode__SWIG_3" ISceneManager_addLightSceneNode) (:pointer "irr::scene::ILightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addLightSceneNode__SWIG_4" ISceneManager_addLightSceneNode) (:pointer "irr::scene::ILightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addLightSceneNode__SWIG_5" ISceneManager_addLightSceneNode) (:pointer "irr::scene::ILightSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardSceneNode__SWIG_0" ISceneManager_addBillboardSceneNode) (:pointer "irr::scene::IBillboardSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (size (:pointer "dimension2df"))
  (position (:pointer "vector3df"))
  (id :int)
  (colorTop (:pointer "irr::video::SColor"))
  (colorBottom (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardSceneNode__SWIG_1" ISceneManager_addBillboardSceneNode) (:pointer "irr::scene::IBillboardSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (size (:pointer "dimension2df"))
  (position (:pointer "vector3df"))
  (id :int)
  (colorTop (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardSceneNode__SWIG_2" ISceneManager_addBillboardSceneNode) (:pointer "irr::scene::IBillboardSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (size (:pointer "dimension2df"))
  (position (:pointer "vector3df"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardSceneNode__SWIG_3" ISceneManager_addBillboardSceneNode) (:pointer "irr::scene::IBillboardSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (size (:pointer "dimension2df"))
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardSceneNode__SWIG_4" ISceneManager_addBillboardSceneNode) (:pointer "irr::scene::IBillboardSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (size (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardSceneNode__SWIG_5" ISceneManager_addBillboardSceneNode) (:pointer "irr::scene::IBillboardSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardSceneNode__SWIG_6" ISceneManager_addBillboardSceneNode) (:pointer "irr::scene::IBillboardSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addSkyBoxSceneNode__SWIG_0" ISceneManager_addSkyBoxSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (top (:pointer "irr::video::ITexture *"))
  (bottom (:pointer "irr::video::ITexture *"))
  (left (:pointer "irr::video::ITexture *"))
  (right (:pointer "irr::video::ITexture *"))
  (front (:pointer "irr::video::ITexture *"))
  (back (:pointer "irr::video::ITexture *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addSkyBoxSceneNode__SWIG_1" ISceneManager_addSkyBoxSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (top (:pointer "irr::video::ITexture *"))
  (bottom (:pointer "irr::video::ITexture *"))
  (left (:pointer "irr::video::ITexture *"))
  (right (:pointer "irr::video::ITexture *"))
  (front (:pointer "irr::video::ITexture *"))
  (back (:pointer "irr::video::ITexture *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addSkyBoxSceneNode__SWIG_2" ISceneManager_addSkyBoxSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (top (:pointer "irr::video::ITexture *"))
  (bottom (:pointer "irr::video::ITexture *"))
  (left (:pointer "irr::video::ITexture *"))
  (right (:pointer "irr::video::ITexture *"))
  (front (:pointer "irr::video::ITexture *"))
  (back (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_0" ISceneManager_addSkyDomeSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (texture (:pointer "irr::video::ITexture *"))
  (horiRes :uint)
  (vertRes :uint)
  (texturePercentage :float)
  (spherePercentage :float)
  (radius :float)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_1" ISceneManager_addSkyDomeSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (texture (:pointer "irr::video::ITexture *"))
  (horiRes :uint)
  (vertRes :uint)
  (texturePercentage :float)
  (spherePercentage :float)
  (radius :float)
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_2" ISceneManager_addSkyDomeSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (texture (:pointer "irr::video::ITexture *"))
  (horiRes :uint)
  (vertRes :uint)
  (texturePercentage :float)
  (spherePercentage :float)
  (radius :float))

(cffi:defcfun ("_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_3" ISceneManager_addSkyDomeSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (texture (:pointer "irr::video::ITexture *"))
  (horiRes :uint)
  (vertRes :uint)
  (texturePercentage :float)
  (spherePercentage :float))

(cffi:defcfun ("_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_4" ISceneManager_addSkyDomeSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (texture (:pointer "irr::video::ITexture *"))
  (horiRes :uint)
  (vertRes :uint)
  (texturePercentage :float))

(cffi:defcfun ("_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_5" ISceneManager_addSkyDomeSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (texture (:pointer "irr::video::ITexture *"))
  (horiRes :uint)
  (vertRes :uint))

(cffi:defcfun ("_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_6" ISceneManager_addSkyDomeSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (texture (:pointer "irr::video::ITexture *"))
  (horiRes :uint))

(cffi:defcfun ("_wrap_ISceneManager_addSkyDomeSceneNode__SWIG_7" ISceneManager_addSkyDomeSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (texture (:pointer "irr::video::ITexture *")))

(cffi:defcfun ("_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_0" ISceneManager_addParticleSystemSceneNode) (:pointer "irr::scene::IParticleSystemSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (withDefaultEmitter :bool)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_1" ISceneManager_addParticleSystemSceneNode) (:pointer "irr::scene::IParticleSystemSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (withDefaultEmitter :bool)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_2" ISceneManager_addParticleSystemSceneNode) (:pointer "irr::scene::IParticleSystemSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (withDefaultEmitter :bool)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_3" ISceneManager_addParticleSystemSceneNode) (:pointer "irr::scene::IParticleSystemSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (withDefaultEmitter :bool)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_4" ISceneManager_addParticleSystemSceneNode) (:pointer "irr::scene::IParticleSystemSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (withDefaultEmitter :bool)
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_5" ISceneManager_addParticleSystemSceneNode) (:pointer "irr::scene::IParticleSystemSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (withDefaultEmitter :bool))

(cffi:defcfun ("_wrap_ISceneManager_addParticleSystemSceneNode__SWIG_6" ISceneManager_addParticleSystemSceneNode) (:pointer "irr::scene::IParticleSystemSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_0" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFileName (:pointer "path"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (vertexColor (:pointer "irr::video::SColor"))
  (maxLOD :int)
  (patchSize :enum)
  (smoothFactor :int)
  (addAlsoIfHeightmapEmpty :bool))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_1" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFileName (:pointer "path"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (vertexColor (:pointer "irr::video::SColor"))
  (maxLOD :int)
  (patchSize :enum)
  (smoothFactor :int))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_2" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFileName (:pointer "path"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (vertexColor (:pointer "irr::video::SColor"))
  (maxLOD :int)
  (patchSize :enum))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_3" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFileName (:pointer "path"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (vertexColor (:pointer "irr::video::SColor"))
  (maxLOD :int))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_4" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFileName (:pointer "path"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (vertexColor (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_5" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFileName (:pointer "path"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_6" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFileName (:pointer "path"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_7" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFileName (:pointer "path"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_8" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFileName (:pointer "path"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_9" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFileName (:pointer "path"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_10" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFileName (:pointer "path")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_11" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFile (:pointer "irr::io::IReadFile *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (vertexColor (:pointer "irr::video::SColor"))
  (maxLOD :int)
  (patchSize :enum)
  (smoothFactor :int)
  (addAlsoIfHeightmapEmpty :bool))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_12" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFile (:pointer "irr::io::IReadFile *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (vertexColor (:pointer "irr::video::SColor"))
  (maxLOD :int)
  (patchSize :enum)
  (smoothFactor :int))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_13" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFile (:pointer "irr::io::IReadFile *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (vertexColor (:pointer "irr::video::SColor"))
  (maxLOD :int)
  (patchSize :enum))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_14" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFile (:pointer "irr::io::IReadFile *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (vertexColor (:pointer "irr::video::SColor"))
  (maxLOD :int))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_15" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFile (:pointer "irr::io::IReadFile *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df"))
  (vertexColor (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_16" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFile (:pointer "irr::io::IReadFile *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df"))
  (scale (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_17" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFile (:pointer "irr::io::IReadFile *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_18" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFile (:pointer "irr::io::IReadFile *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int)
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_19" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFile (:pointer "irr::io::IReadFile *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_20" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFile (:pointer "irr::io::IReadFile *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainSceneNode__SWIG_21" ISceneManager_addTerrainSceneNode) (:pointer "irr::scene::ITerrainSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (heightMapFile (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_ISceneManager_addQuake3SceneNode__SWIG_0" ISceneManager_addQuake3SceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (meshBuffer (:pointer "irr::scene::IMeshBuffer *"))
  (shader (:pointer "irr::scene::quake3::IShader *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addQuake3SceneNode__SWIG_1" ISceneManager_addQuake3SceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (meshBuffer (:pointer "irr::scene::IMeshBuffer *"))
  (shader (:pointer "irr::scene::quake3::IShader *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addQuake3SceneNode__SWIG_2" ISceneManager_addQuake3SceneNode) (:pointer "irr::scene::IMeshSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (meshBuffer (:pointer "irr::scene::IMeshBuffer *"))
  (shader (:pointer "irr::scene::quake3::IShader *")))

(cffi:defcfun ("_wrap_ISceneManager_addEmptySceneNode__SWIG_0" ISceneManager_addEmptySceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addEmptySceneNode__SWIG_1" ISceneManager_addEmptySceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addEmptySceneNode__SWIG_2" ISceneManager_addEmptySceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addDummyTransformationSceneNode__SWIG_0" ISceneManager_addDummyTransformationSceneNode) (:pointer "irr::scene::IDummyTransformationSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addDummyTransformationSceneNode__SWIG_1" ISceneManager_addDummyTransformationSceneNode) (:pointer "irr::scene::IDummyTransformationSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addDummyTransformationSceneNode__SWIG_2" ISceneManager_addDummyTransformationSceneNode) (:pointer "irr::scene::IDummyTransformationSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addTextSceneNode__SWIG_0" ISceneManager_addTextSceneNode) (:pointer "irr::scene::ITextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string)
  (color (:pointer "irr::video::SColor"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (position (:pointer "vector3df"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addTextSceneNode__SWIG_1" ISceneManager_addTextSceneNode) (:pointer "irr::scene::ITextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string)
  (color (:pointer "irr::video::SColor"))
  (parent (:pointer "irr::scene::ISceneNode *"))
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addTextSceneNode__SWIG_2" ISceneManager_addTextSceneNode) (:pointer "irr::scene::ITextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string)
  (color (:pointer "irr::video::SColor"))
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addTextSceneNode__SWIG_3" ISceneManager_addTextSceneNode) (:pointer "irr::scene::ITextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string)
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addTextSceneNode__SWIG_4" ISceneManager_addTextSceneNode) (:pointer "irr::scene::ITextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_0" ISceneManager_addBillboardTextSceneNode) (:pointer "irr::scene::IBillboardTextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (size (:pointer "dimension2df"))
  (position (:pointer "vector3df"))
  (id :int)
  (colorTop (:pointer "irr::video::SColor"))
  (colorBottom (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_1" ISceneManager_addBillboardTextSceneNode) (:pointer "irr::scene::IBillboardTextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (size (:pointer "dimension2df"))
  (position (:pointer "vector3df"))
  (id :int)
  (colorTop (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_2" ISceneManager_addBillboardTextSceneNode) (:pointer "irr::scene::IBillboardTextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (size (:pointer "dimension2df"))
  (position (:pointer "vector3df"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_3" ISceneManager_addBillboardTextSceneNode) (:pointer "irr::scene::IBillboardTextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (size (:pointer "dimension2df"))
  (position (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_4" ISceneManager_addBillboardTextSceneNode) (:pointer "irr::scene::IBillboardTextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string)
  (parent (:pointer "irr::scene::ISceneNode *"))
  (size (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_5" ISceneManager_addBillboardTextSceneNode) (:pointer "irr::scene::IBillboardTextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string)
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addBillboardTextSceneNode__SWIG_6" ISceneManager_addBillboardTextSceneNode) (:pointer "irr::scene::IBillboardTextSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (font (:pointer "irr::gui::IGUIFont *"))
  (text :w-string))

(cffi:defcfun ("_wrap_ISceneManager_addHillPlaneMesh__SWIG_0" ISceneManager_addHillPlaneMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (tileSize (:pointer "dimension2df"))
  (tileCount (:pointer "dimension2du"))
  (material (:pointer "irr::video::SMaterial *"))
  (hillHeight :float)
  (countHills (:pointer "dimension2df"))
  (textureRepeatCount (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_ISceneManager_addHillPlaneMesh__SWIG_1" ISceneManager_addHillPlaneMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (tileSize (:pointer "dimension2df"))
  (tileCount (:pointer "dimension2du"))
  (material (:pointer "irr::video::SMaterial *"))
  (hillHeight :float)
  (countHills (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_ISceneManager_addHillPlaneMesh__SWIG_2" ISceneManager_addHillPlaneMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (tileSize (:pointer "dimension2df"))
  (tileCount (:pointer "dimension2du"))
  (material (:pointer "irr::video::SMaterial *"))
  (hillHeight :float))

(cffi:defcfun ("_wrap_ISceneManager_addHillPlaneMesh__SWIG_3" ISceneManager_addHillPlaneMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (tileSize (:pointer "dimension2df"))
  (tileCount (:pointer "dimension2du"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_ISceneManager_addHillPlaneMesh__SWIG_4" ISceneManager_addHillPlaneMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (tileSize (:pointer "dimension2df"))
  (tileCount (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainMesh__SWIG_0" ISceneManager_addTerrainMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (meshname (:pointer "path"))
  (texture (:pointer "irr::video::IImage *"))
  (heightmap (:pointer "irr::video::IImage *"))
  (stretchSize (:pointer "dimension2df"))
  (maxHeight :float)
  (defaultVertexBlockSize (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainMesh__SWIG_1" ISceneManager_addTerrainMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (meshname (:pointer "path"))
  (texture (:pointer "irr::video::IImage *"))
  (heightmap (:pointer "irr::video::IImage *"))
  (stretchSize (:pointer "dimension2df"))
  (maxHeight :float))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainMesh__SWIG_2" ISceneManager_addTerrainMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (meshname (:pointer "path"))
  (texture (:pointer "irr::video::IImage *"))
  (heightmap (:pointer "irr::video::IImage *"))
  (stretchSize (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_ISceneManager_addTerrainMesh__SWIG_3" ISceneManager_addTerrainMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (meshname (:pointer "path"))
  (texture (:pointer "irr::video::IImage *"))
  (heightmap (:pointer "irr::video::IImage *")))

(cffi:defcfun ("_wrap_ISceneManager_addArrowMesh__SWIG_0" ISceneManager_addArrowMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (vtxColorCylinder (:pointer "irr::video::SColor"))
  (vtxColorCone (:pointer "irr::video::SColor"))
  (tesselationCylinder :uint)
  (tesselationCone :uint)
  (height :float)
  (cylinderHeight :float)
  (widthCylinder :float)
  (widthCone :float))

(cffi:defcfun ("_wrap_ISceneManager_addArrowMesh__SWIG_1" ISceneManager_addArrowMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (vtxColorCylinder (:pointer "irr::video::SColor"))
  (vtxColorCone (:pointer "irr::video::SColor"))
  (tesselationCylinder :uint)
  (tesselationCone :uint)
  (height :float)
  (cylinderHeight :float)
  (widthCylinder :float))

(cffi:defcfun ("_wrap_ISceneManager_addArrowMesh__SWIG_2" ISceneManager_addArrowMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (vtxColorCylinder (:pointer "irr::video::SColor"))
  (vtxColorCone (:pointer "irr::video::SColor"))
  (tesselationCylinder :uint)
  (tesselationCone :uint)
  (height :float)
  (cylinderHeight :float))

(cffi:defcfun ("_wrap_ISceneManager_addArrowMesh__SWIG_3" ISceneManager_addArrowMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (vtxColorCylinder (:pointer "irr::video::SColor"))
  (vtxColorCone (:pointer "irr::video::SColor"))
  (tesselationCylinder :uint)
  (tesselationCone :uint)
  (height :float))

(cffi:defcfun ("_wrap_ISceneManager_addArrowMesh__SWIG_4" ISceneManager_addArrowMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (vtxColorCylinder (:pointer "irr::video::SColor"))
  (vtxColorCone (:pointer "irr::video::SColor"))
  (tesselationCylinder :uint)
  (tesselationCone :uint))

(cffi:defcfun ("_wrap_ISceneManager_addArrowMesh__SWIG_5" ISceneManager_addArrowMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (vtxColorCylinder (:pointer "irr::video::SColor"))
  (vtxColorCone (:pointer "irr::video::SColor"))
  (tesselationCylinder :uint))

(cffi:defcfun ("_wrap_ISceneManager_addArrowMesh__SWIG_6" ISceneManager_addArrowMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (vtxColorCylinder (:pointer "irr::video::SColor"))
  (vtxColorCone (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addArrowMesh__SWIG_7" ISceneManager_addArrowMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (vtxColorCylinder (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addArrowMesh__SWIG_8" ISceneManager_addArrowMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path")))

(cffi:defcfun ("_wrap_ISceneManager_addSphereMesh__SWIG_0" ISceneManager_addSphereMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (radius :float)
  (polyCountX :uint)
  (polyCountY :uint))

(cffi:defcfun ("_wrap_ISceneManager_addSphereMesh__SWIG_1" ISceneManager_addSphereMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (radius :float)
  (polyCountX :uint))

(cffi:defcfun ("_wrap_ISceneManager_addSphereMesh__SWIG_2" ISceneManager_addSphereMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (radius :float))

(cffi:defcfun ("_wrap_ISceneManager_addSphereMesh__SWIG_3" ISceneManager_addSphereMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path")))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightMesh__SWIG_0" ISceneManager_addVolumeLightMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (SubdivideU :uint)
  (SubdivideV :uint)
  (FootColor (:pointer "irr::video::SColor"))
  (TailColor (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightMesh__SWIG_1" ISceneManager_addVolumeLightMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (SubdivideU :uint)
  (SubdivideV :uint)
  (FootColor (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightMesh__SWIG_2" ISceneManager_addVolumeLightMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (SubdivideU :uint)
  (SubdivideV :uint))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightMesh__SWIG_3" ISceneManager_addVolumeLightMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path"))
  (SubdivideU :uint))

(cffi:defcfun ("_wrap_ISceneManager_addVolumeLightMesh__SWIG_4" ISceneManager_addVolumeLightMesh) (:pointer "irr::scene::IAnimatedMesh *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name (:pointer "path")))

(cffi:defcfun ("_wrap_ISceneManager_getRootSceneNode" ISceneManager_getRootSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodeFromId__SWIG_0" ISceneManager_getSceneNodeFromId) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (id :int)
  (start (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodeFromId__SWIG_1" ISceneManager_getSceneNodeFromId) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (id :int))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodeFromName__SWIG_0" ISceneManager_getSceneNodeFromName) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name :string)
  (start (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodeFromName__SWIG_1" ISceneManager_getSceneNodeFromName) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (name :string))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodeFromType__SWIG_0" ISceneManager_getSceneNodeFromType) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (type :enum)
  (start (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodeFromType__SWIG_1" ISceneManager_getSceneNodeFromType) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (type :enum))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodesFromType__SWIG_0" ISceneManager_getSceneNodesFromType) :void
  (self (:pointer "irr::scene::ISceneManager *"))
  (type :enum)
  (outNodes (:pointer "irr::core::array< irr::scene::ISceneNode *,irr::core::irrAllocator< irr::scene::ISceneNode * > > *"))
  (start (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodesFromType__SWIG_1" ISceneManager_getSceneNodesFromType) :void
  (self (:pointer "irr::scene::ISceneManager *"))
  (type :enum)
  (outNodes (:pointer "irr::core::array< irr::scene::ISceneNode *,irr::core::irrAllocator< irr::scene::ISceneNode * > > *")))

(cffi:defcfun ("_wrap_ISceneManager_getActiveCamera" ISceneManager_getActiveCamera) (:pointer "irr::scene::ICameraSceneNode *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_setActiveCamera" ISceneManager_setActiveCamera) :void
  (self (:pointer "irr::scene::ISceneManager *"))
  (camera (:pointer "irr::scene::ICameraSceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_setShadowColor__SWIG_0" ISceneManager_setShadowColor) :void
  (self (:pointer "irr::scene::ISceneManager *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ISceneManager_setShadowColor__SWIG_1" ISceneManager_setShadowColor) :void
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getShadowColor" ISceneManager_getShadowColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_registerNodeForRendering__SWIG_0" ISceneManager_registerNodeForRendering) :uint
  (self (:pointer "irr::scene::ISceneManager *"))
  (node (:pointer "irr::scene::ISceneNode *"))
  (pass :enum))

(cffi:defcfun ("_wrap_ISceneManager_registerNodeForRendering__SWIG_1" ISceneManager_registerNodeForRendering) :uint
  (self (:pointer "irr::scene::ISceneManager *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_drawAll" ISceneManager_drawAll) :void
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_createRotationAnimator" ISceneManager_createRotationAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (rotationSpeed (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_createFlyCircleAnimator__SWIG_0" ISceneManager_createFlyCircleAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (speed :float)
  (direction (:pointer "vector3df"))
  (startPosition :float)
  (radiusEllipsoid :float))

(cffi:defcfun ("_wrap_ISceneManager_createFlyCircleAnimator__SWIG_1" ISceneManager_createFlyCircleAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (speed :float)
  (direction (:pointer "vector3df"))
  (startPosition :float))

(cffi:defcfun ("_wrap_ISceneManager_createFlyCircleAnimator__SWIG_2" ISceneManager_createFlyCircleAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (speed :float)
  (direction (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_createFlyCircleAnimator__SWIG_3" ISceneManager_createFlyCircleAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (center (:pointer "vector3df"))
  (radius :float)
  (speed :float))

(cffi:defcfun ("_wrap_ISceneManager_createFlyCircleAnimator__SWIG_4" ISceneManager_createFlyCircleAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (center (:pointer "vector3df"))
  (radius :float))

(cffi:defcfun ("_wrap_ISceneManager_createFlyCircleAnimator__SWIG_5" ISceneManager_createFlyCircleAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (center (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_createFlyCircleAnimator__SWIG_6" ISceneManager_createFlyCircleAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_createFlyStraightAnimator__SWIG_0" ISceneManager_createFlyStraightAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (startPoint (:pointer "vector3df"))
  (endPoint (:pointer "vector3df"))
  (timeForWay :uint)
  (loop :bool)
  (pingpong :bool))

(cffi:defcfun ("_wrap_ISceneManager_createFlyStraightAnimator__SWIG_1" ISceneManager_createFlyStraightAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (startPoint (:pointer "vector3df"))
  (endPoint (:pointer "vector3df"))
  (timeForWay :uint)
  (loop :bool))

(cffi:defcfun ("_wrap_ISceneManager_createFlyStraightAnimator__SWIG_2" ISceneManager_createFlyStraightAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (startPoint (:pointer "vector3df"))
  (endPoint (:pointer "vector3df"))
  (timeForWay :uint))

(cffi:defcfun ("_wrap_ISceneManager_createTextureAnimator__SWIG_0" ISceneManager_createTextureAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (textures (:pointer "tTexArray"))
  (timePerFrame :int)
  (loop :bool))

(cffi:defcfun ("_wrap_ISceneManager_createTextureAnimator__SWIG_1" ISceneManager_createTextureAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (textures (:pointer "tTexArray"))
  (timePerFrame :int))

(cffi:defcfun ("_wrap_ISceneManager_createDeleteAnimator" ISceneManager_createDeleteAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (timeMs :uint))

(cffi:defcfun ("_wrap_ISceneManager_createCollisionResponseAnimator__SWIG_0" ISceneManager_createCollisionResponseAnimator) (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (world (:pointer "irr::scene::ITriangleSelector *"))
  (sceneNode (:pointer "irr::scene::ISceneNode *"))
  (ellipsoidRadius (:pointer "vector3df"))
  (gravityPerSecond (:pointer "vector3df"))
  (ellipsoidTranslation (:pointer "vector3df"))
  (slidingValue :float))

(cffi:defcfun ("_wrap_ISceneManager_createCollisionResponseAnimator__SWIG_1" ISceneManager_createCollisionResponseAnimator) (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (world (:pointer "irr::scene::ITriangleSelector *"))
  (sceneNode (:pointer "irr::scene::ISceneNode *"))
  (ellipsoidRadius (:pointer "vector3df"))
  (gravityPerSecond (:pointer "vector3df"))
  (ellipsoidTranslation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_createCollisionResponseAnimator__SWIG_2" ISceneManager_createCollisionResponseAnimator) (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (world (:pointer "irr::scene::ITriangleSelector *"))
  (sceneNode (:pointer "irr::scene::ISceneNode *"))
  (ellipsoidRadius (:pointer "vector3df"))
  (gravityPerSecond (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_createCollisionResponseAnimator__SWIG_3" ISceneManager_createCollisionResponseAnimator) (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (world (:pointer "irr::scene::ITriangleSelector *"))
  (sceneNode (:pointer "irr::scene::ISceneNode *"))
  (ellipsoidRadius (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneManager_createCollisionResponseAnimator__SWIG_4" ISceneManager_createCollisionResponseAnimator) (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (world (:pointer "irr::scene::ITriangleSelector *"))
  (sceneNode (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_createFollowSplineAnimator__SWIG_0" ISceneManager_createFollowSplineAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (startTime :int)
  (points (:pointer "irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *"))
  (speed :float)
  (tightness :float)
  (loop :bool)
  (pingpong :bool))

(cffi:defcfun ("_wrap_ISceneManager_createFollowSplineAnimator__SWIG_1" ISceneManager_createFollowSplineAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (startTime :int)
  (points (:pointer "irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *"))
  (speed :float)
  (tightness :float)
  (loop :bool))

(cffi:defcfun ("_wrap_ISceneManager_createFollowSplineAnimator__SWIG_2" ISceneManager_createFollowSplineAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (startTime :int)
  (points (:pointer "irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *"))
  (speed :float)
  (tightness :float))

(cffi:defcfun ("_wrap_ISceneManager_createFollowSplineAnimator__SWIG_3" ISceneManager_createFollowSplineAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (startTime :int)
  (points (:pointer "irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *"))
  (speed :float))

(cffi:defcfun ("_wrap_ISceneManager_createFollowSplineAnimator__SWIG_4" ISceneManager_createFollowSplineAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (startTime :int)
  (points (:pointer "irr::core::array< irr::core::vector3df,irr::core::irrAllocator< irr::core::vector3df > > *")))

(cffi:defcfun ("_wrap_ISceneManager_createTriangleSelector__SWIG_0" ISceneManager_createTriangleSelector) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_createTriangleSelector__SWIG_1" ISceneManager_createTriangleSelector) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (node (:pointer "irr::scene::IAnimatedMeshSceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_createTriangleSelectorFromBoundingBox" ISceneManager_createTriangleSelectorFromBoundingBox) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_createOctreeTriangleSelector__SWIG_0" ISceneManager_createOctreeTriangleSelector) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (node (:pointer "irr::scene::ISceneNode *"))
  (minimalPolysPerNode :int))

(cffi:defcfun ("_wrap_ISceneManager_createOctreeTriangleSelector__SWIG_1" ISceneManager_createOctreeTriangleSelector) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_createOctTreeTriangleSelector__SWIG_0" ISceneManager_createOctTreeTriangleSelector) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (node (:pointer "irr::scene::ISceneNode *"))
  (minimalPolysPerNode :int))

(cffi:defcfun ("_wrap_ISceneManager_createOctTreeTriangleSelector__SWIG_1" ISceneManager_createOctTreeTriangleSelector) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (mesh (:pointer "irr::scene::IMesh *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_createMetaTriangleSelector" ISceneManager_createMetaTriangleSelector) (:pointer "irr::scene::IMetaTriangleSelector *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_createTerrainTriangleSelector__SWIG_0" ISceneManager_createTerrainTriangleSelector) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (node (:pointer "irr::scene::ITerrainSceneNode *"))
  (LOD :int))

(cffi:defcfun ("_wrap_ISceneManager_createTerrainTriangleSelector__SWIG_1" ISceneManager_createTerrainTriangleSelector) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (node (:pointer "irr::scene::ITerrainSceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addExternalMeshLoader" ISceneManager_addExternalMeshLoader) :void
  (self (:pointer "irr::scene::ISceneManager *"))
  (externalLoader (:pointer "irr::scene::IMeshLoader *")))

(cffi:defcfun ("_wrap_ISceneManager_getMeshLoaderCount" ISceneManager_getMeshLoaderCount) :uint
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getMeshLoader" ISceneManager_getMeshLoader) (:pointer "irr::scene::IMeshLoader *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (index :uint))

(cffi:defcfun ("_wrap_ISceneManager_addExternalSceneLoader" ISceneManager_addExternalSceneLoader) :void
  (self (:pointer "irr::scene::ISceneManager *"))
  (externalLoader (:pointer "irr::scene::ISceneLoader *")))

(cffi:defcfun ("_wrap_ISceneManager_getSceneLoaderCount" ISceneManager_getSceneLoaderCount) :uint
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getSceneLoader" ISceneManager_getSceneLoader) (:pointer "irr::scene::ISceneLoader *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (index :uint))

(cffi:defcfun ("_wrap_ISceneManager_getSceneCollisionManager" ISceneManager_getSceneCollisionManager) (:pointer "irr::scene::ISceneCollisionManager *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getMeshManipulator" ISceneManager_getMeshManipulator) (:pointer "irr::scene::IMeshManipulator *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_addToDeletionQueue" ISceneManager_addToDeletionQueue) :void
  (self (:pointer "irr::scene::ISceneManager *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_postEventFromUser" ISceneManager_postEventFromUser) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (event (:pointer "irr::SEvent *")))

(cffi:defcfun ("_wrap_ISceneManager_clear" ISceneManager_clear) :void
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getParameters" ISceneManager_getParameters) (:pointer "irr::io::IAttributes *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodeRenderPass" ISceneManager_getSceneNodeRenderPass) :enum
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getDefaultSceneNodeFactory" ISceneManager_getDefaultSceneNodeFactory) (:pointer "irr::scene::ISceneNodeFactory *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_registerSceneNodeFactory" ISceneManager_registerSceneNodeFactory) :void
  (self (:pointer "irr::scene::ISceneManager *"))
  (factoryToAdd (:pointer "irr::scene::ISceneNodeFactory *")))

(cffi:defcfun ("_wrap_ISceneManager_getRegisteredSceneNodeFactoryCount" ISceneManager_getRegisteredSceneNodeFactoryCount) :uint
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodeFactory" ISceneManager_getSceneNodeFactory) (:pointer "irr::scene::ISceneNodeFactory *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (index :uint))

(cffi:defcfun ("_wrap_ISceneManager_getDefaultSceneNodeAnimatorFactory" ISceneManager_getDefaultSceneNodeAnimatorFactory) (:pointer "irr::scene::ISceneNodeAnimatorFactory *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_registerSceneNodeAnimatorFactory" ISceneManager_registerSceneNodeAnimatorFactory) :void
  (self (:pointer "irr::scene::ISceneManager *"))
  (factoryToAdd (:pointer "irr::scene::ISceneNodeAnimatorFactory *")))

(cffi:defcfun ("_wrap_ISceneManager_getRegisteredSceneNodeAnimatorFactoryCount" ISceneManager_getRegisteredSceneNodeAnimatorFactoryCount) :uint
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodeAnimatorFactory" ISceneManager_getSceneNodeAnimatorFactory) (:pointer "irr::scene::ISceneNodeAnimatorFactory *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (index :uint))

(cffi:defcfun ("_wrap_ISceneManager_getSceneNodeTypeName" ISceneManager_getSceneNodeTypeName) :string
  (self (:pointer "irr::scene::ISceneManager *"))
  (type :enum))

(cffi:defcfun ("_wrap_ISceneManager_getAnimatorTypeName" ISceneManager_getAnimatorTypeName) :string
  (self (:pointer "irr::scene::ISceneManager *"))
  (type :enum))

(cffi:defcfun ("_wrap_ISceneManager_addSceneNode__SWIG_0" ISceneManager_addSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (sceneNodeTypeName :string)
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_addSceneNode__SWIG_1" ISceneManager_addSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (sceneNodeTypeName :string))

(cffi:defcfun ("_wrap_ISceneManager_createSceneNodeAnimator__SWIG_0" ISceneManager_createSceneNodeAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (typeName :string)
  (target (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_createSceneNodeAnimator__SWIG_1" ISceneManager_createSceneNodeAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (typeName :string))

(cffi:defcfun ("_wrap_ISceneManager_createNewSceneManager__SWIG_0" ISceneManager_createNewSceneManager) (:pointer "irr::scene::ISceneManager *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (cloneContent :bool))

(cffi:defcfun ("_wrap_ISceneManager_createNewSceneManager__SWIG_1" ISceneManager_createNewSceneManager) (:pointer "irr::scene::ISceneManager *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_saveScene__SWIG_0" ISceneManager_saveScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (filename (:pointer "path"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_saveScene__SWIG_1" ISceneManager_saveScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (filename (:pointer "path"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *")))

(cffi:defcfun ("_wrap_ISceneManager_saveScene__SWIG_2" ISceneManager_saveScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_ISceneManager_saveScene__SWIG_3" ISceneManager_saveScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (file (:pointer "irr::io::IWriteFile *"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_saveScene__SWIG_4" ISceneManager_saveScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (file (:pointer "irr::io::IWriteFile *"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *")))

(cffi:defcfun ("_wrap_ISceneManager_saveScene__SWIG_5" ISceneManager_saveScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (file (:pointer "irr::io::IWriteFile *")))

(cffi:defcfun ("_wrap_ISceneManager_saveScene__SWIG_6" ISceneManager_saveScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (writer (:pointer "irr::io::IXMLWriter *"))
  (currentPath (:pointer "path"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_saveScene__SWIG_7" ISceneManager_saveScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (writer (:pointer "irr::io::IXMLWriter *"))
  (currentPath (:pointer "path"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *")))

(cffi:defcfun ("_wrap_ISceneManager_saveScene__SWIG_8" ISceneManager_saveScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (writer (:pointer "irr::io::IXMLWriter *"))
  (currentPath (:pointer "path")))

(cffi:defcfun ("_wrap_ISceneManager_loadScene__SWIG_0" ISceneManager_loadScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (filename (:pointer "path"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *"))
  (rootNode (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_loadScene__SWIG_1" ISceneManager_loadScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (filename (:pointer "path"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *")))

(cffi:defcfun ("_wrap_ISceneManager_loadScene__SWIG_2" ISceneManager_loadScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (filename (:pointer "path")))

(cffi:defcfun ("_wrap_ISceneManager_loadScene__SWIG_3" ISceneManager_loadScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (file (:pointer "irr::io::IReadFile *"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *"))
  (rootNode (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneManager_loadScene__SWIG_4" ISceneManager_loadScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (file (:pointer "irr::io::IReadFile *"))
  (userDataSerializer (:pointer "irr::scene::ISceneUserDataSerializer *")))

(cffi:defcfun ("_wrap_ISceneManager_loadScene__SWIG_5" ISceneManager_loadScene) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_ISceneManager_createMeshWriter" ISceneManager_createMeshWriter) (:pointer "irr::scene::IMeshWriter *")
  (self (:pointer "irr::scene::ISceneManager *"))
  (type :enum))

(cffi:defcfun ("_wrap_ISceneManager_createSkinnedMesh" ISceneManager_createSkinnedMesh) (:pointer "irr::scene::ISkinnedMesh *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_setAmbientLight" ISceneManager_setAmbientLight) :void
  (self (:pointer "irr::scene::ISceneManager *"))
  (ambientColor (:pointer "irr::video::SColorf *")))

(cffi:defcfun ("_wrap_ISceneManager_getAmbientLight" ISceneManager_getAmbientLight) (:reference "irr::video::SColorf *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_setLightManager" ISceneManager_setLightManager) :void
  (self (:pointer "irr::scene::ISceneManager *"))
  (lightManager (:pointer "irr::scene::ILightManager *")))

(cffi:defcfun ("_wrap_ISceneManager_getGeometryCreator" ISceneManager_getGeometryCreator) (:pointer "irr::scene::IGeometryCreator *")
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneManager_isCulled" ISceneManager_isCulled) :bool
  (self (:pointer "irr::scene::ISceneManager *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_delete_ISceneManager" delete_ISceneManager) :void
  (self (:pointer "irr::scene::ISceneManager *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraFPS_getMoveSpeed" ISceneNodeAnimatorCameraFPS_getMoveSpeed) :float
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraFPS *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraFPS_setMoveSpeed" ISceneNodeAnimatorCameraFPS_setMoveSpeed) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraFPS *"))
  (moveSpeed :float))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraFPS_getRotateSpeed" ISceneNodeAnimatorCameraFPS_getRotateSpeed) :float
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraFPS *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraFPS_setRotateSpeed" ISceneNodeAnimatorCameraFPS_setRotateSpeed) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraFPS *"))
  (rotateSpeed :float))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraFPS_setKeyMap__SWIG_0" ISceneNodeAnimatorCameraFPS_setKeyMap) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraFPS *"))
  (map (:pointer "irr::SKeyMap *"))
  (count :uint))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraFPS_setKeyMap__SWIG_1" ISceneNodeAnimatorCameraFPS_setKeyMap) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraFPS *"))
  (keymap (:pointer "irr::core::array< irr::SKeyMap,irr::core::irrAllocator< irr::SKeyMap > > *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraFPS_getKeyMap" ISceneNodeAnimatorCameraFPS_getKeyMap) (:reference "irr::core::array< irr::SKeyMap,irr::core::irrAllocator< irr::SKeyMap > > *")
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraFPS *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraFPS_setVerticalMovement" ISceneNodeAnimatorCameraFPS_setVerticalMovement) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraFPS *"))
  (allow :bool))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraFPS_setInvertMouse" ISceneNodeAnimatorCameraFPS_setInvertMouse) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraFPS *"))
  (invert :bool))

(cffi:defcfun ("_wrap_delete_ISceneNodeAnimatorCameraFPS" delete_ISceneNodeAnimatorCameraFPS) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraFPS *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraMaya_getMoveSpeed" ISceneNodeAnimatorCameraMaya_getMoveSpeed) :float
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraMaya *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraMaya_setMoveSpeed" ISceneNodeAnimatorCameraMaya_setMoveSpeed) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraMaya *"))
  (moveSpeed :float))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraMaya_getRotateSpeed" ISceneNodeAnimatorCameraMaya_getRotateSpeed) :float
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraMaya *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraMaya_setRotateSpeed" ISceneNodeAnimatorCameraMaya_setRotateSpeed) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraMaya *"))
  (rotateSpeed :float))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraMaya_getZoomSpeed" ISceneNodeAnimatorCameraMaya_getZoomSpeed) :float
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraMaya *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraMaya_setZoomSpeed" ISceneNodeAnimatorCameraMaya_setZoomSpeed) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraMaya *"))
  (zoomSpeed :float))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraMaya_getDistance" ISceneNodeAnimatorCameraMaya_getDistance) :float
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraMaya *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCameraMaya_setDistance" ISceneNodeAnimatorCameraMaya_setDistance) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraMaya *"))
  (distance :float))

(cffi:defcfun ("_wrap_delete_ISceneNodeAnimatorCameraMaya" delete_ISceneNodeAnimatorCameraMaya) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCameraMaya *")))

(cffi:defcfun ("_wrap_ICollisionCallback_onCollision" ICollisionCallback_onCollision) :bool
  (self (:pointer "irr::scene::ICollisionCallback *"))
  (animator (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_delete_ICollisionCallback" delete_ICollisionCallback) :void
  (self (:pointer "irr::scene::ICollisionCallback *")))

(cffi:defcfun ("_wrap_delete_ISceneNodeAnimatorCollisionResponse" delete_ISceneNodeAnimatorCollisionResponse) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_isFalling" ISceneNodeAnimatorCollisionResponse_isFalling) :bool
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_setEllipsoidRadius" ISceneNodeAnimatorCollisionResponse_setEllipsoidRadius) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *"))
  (radius (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_getEllipsoidRadius" ISceneNodeAnimatorCollisionResponse_getEllipsoidRadius) (:by-value "vector3df")
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_setGravity" ISceneNodeAnimatorCollisionResponse_setGravity) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *"))
  (gravity (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_getGravity" ISceneNodeAnimatorCollisionResponse_getGravity) (:by-value "vector3df")
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_jump" ISceneNodeAnimatorCollisionResponse_jump) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *"))
  (jumpSpeed :float))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_setAnimateTarget" ISceneNodeAnimatorCollisionResponse_setAnimateTarget) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *"))
  (enable :bool))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_getAnimateTarget" ISceneNodeAnimatorCollisionResponse_getAnimateTarget) :bool
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_setEllipsoidTranslation" ISceneNodeAnimatorCollisionResponse_setEllipsoidTranslation) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *"))
  (translation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_getEllipsoidTranslation" ISceneNodeAnimatorCollisionResponse_getEllipsoidTranslation) (:by-value "vector3df")
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_setWorld" ISceneNodeAnimatorCollisionResponse_setWorld) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *"))
  (newWorld (:pointer "irr::scene::ITriangleSelector *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_getWorld" ISceneNodeAnimatorCollisionResponse_getWorld) (:pointer "irr::scene::ITriangleSelector *")
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_setTargetNode" ISceneNodeAnimatorCollisionResponse_setTargetNode) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_getTargetNode" ISceneNodeAnimatorCollisionResponse_getTargetNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_collisionOccurred" ISceneNodeAnimatorCollisionResponse_collisionOccurred) :bool
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_getCollisionPoint" ISceneNodeAnimatorCollisionResponse_getCollisionPoint) (:reference "vector3df")
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_getCollisionTriangle" ISceneNodeAnimatorCollisionResponse_getCollisionTriangle) (:reference "triangle3df")
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_getCollisionResultPosition" ISceneNodeAnimatorCollisionResponse_getCollisionResultPosition) (:reference "vector3df")
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_getCollisionNode" ISceneNodeAnimatorCollisionResponse_getCollisionNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorCollisionResponse_setCollisionCallback" ISceneNodeAnimatorCollisionResponse_setCollisionCallback) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorCollisionResponse *"))
  (callback (:pointer "irr::scene::ICollisionCallback *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorFactory_createSceneNodeAnimator__SWIG_0" ISceneNodeAnimatorFactory_createSceneNodeAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneNodeAnimatorFactory *"))
  (type :enum)
  (target (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorFactory_createSceneNodeAnimator__SWIG_1" ISceneNodeAnimatorFactory_createSceneNodeAnimator) (:pointer "irr::scene::ISceneNodeAnimator *")
  (self (:pointer "irr::scene::ISceneNodeAnimatorFactory *"))
  (typeName :string)
  (target (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorFactory_getCreatableSceneNodeAnimatorTypeCount" ISceneNodeAnimatorFactory_getCreatableSceneNodeAnimatorTypeCount) :uint
  (self (:pointer "irr::scene::ISceneNodeAnimatorFactory *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorFactory_getCreateableSceneNodeAnimatorType" ISceneNodeAnimatorFactory_getCreateableSceneNodeAnimatorType) :enum
  (self (:pointer "irr::scene::ISceneNodeAnimatorFactory *"))
  (idx :uint))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorFactory_getCreateableSceneNodeAnimatorTypeName__SWIG_0" ISceneNodeAnimatorFactory_getCreateableSceneNodeAnimatorTypeName) :string
  (self (:pointer "irr::scene::ISceneNodeAnimatorFactory *"))
  (idx :uint))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorFactory_getCreateableSceneNodeAnimatorTypeName__SWIG_1" ISceneNodeAnimatorFactory_getCreateableSceneNodeAnimatorTypeName) :string
  (self (:pointer "irr::scene::ISceneNodeAnimatorFactory *"))
  (type :enum))

(cffi:defcfun ("_wrap_delete_ISceneNodeAnimatorFactory" delete_ISceneNodeAnimatorFactory) :void
  (self (:pointer "irr::scene::ISceneNodeAnimatorFactory *")))

(cffi:defcfun ("_wrap_ISceneNodeFactory_addSceneNode__SWIG_0" ISceneNodeFactory_addSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneNodeFactory *"))
  (type :enum)
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNodeFactory_addSceneNode__SWIG_1" ISceneNodeFactory_addSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneNodeFactory *"))
  (type :enum))

(cffi:defcfun ("_wrap_ISceneNodeFactory_addSceneNode__SWIG_2" ISceneNodeFactory_addSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneNodeFactory *"))
  (typeName :string)
  (parent (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneNodeFactory_addSceneNode__SWIG_3" ISceneNodeFactory_addSceneNode) (:pointer "irr::scene::ISceneNode *")
  (self (:pointer "irr::scene::ISceneNodeFactory *"))
  (typeName :string))

(cffi:defcfun ("_wrap_ISceneNodeFactory_getCreatableSceneNodeTypeCount" ISceneNodeFactory_getCreatableSceneNodeTypeCount) :uint
  (self (:pointer "irr::scene::ISceneNodeFactory *")))

(cffi:defcfun ("_wrap_ISceneNodeFactory_getCreateableSceneNodeType" ISceneNodeFactory_getCreateableSceneNodeType) :enum
  (self (:pointer "irr::scene::ISceneNodeFactory *"))
  (idx :uint))

(cffi:defcfun ("_wrap_ISceneNodeFactory_getCreateableSceneNodeTypeName__SWIG_0" ISceneNodeFactory_getCreateableSceneNodeTypeName) :string
  (self (:pointer "irr::scene::ISceneNodeFactory *"))
  (idx :uint))

(cffi:defcfun ("_wrap_ISceneNodeFactory_getCreateableSceneNodeTypeName__SWIG_1" ISceneNodeFactory_getCreateableSceneNodeTypeName) :string
  (self (:pointer "irr::scene::ISceneNodeFactory *"))
  (type :enum))

(cffi:defcfun ("_wrap_delete_ISceneNodeFactory" delete_ISceneNodeFactory) :void
  (self (:pointer "irr::scene::ISceneNodeFactory *")))

(cffi:defcfun ("_wrap_delete_ISceneUserDataSerializer" delete_ISceneUserDataSerializer) :void
  (self (:pointer "irr::scene::ISceneUserDataSerializer *")))

(cffi:defcfun ("_wrap_ISceneUserDataSerializer_OnCreateNode" ISceneUserDataSerializer_OnCreateNode) :void
  (self (:pointer "irr::scene::ISceneUserDataSerializer *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ISceneUserDataSerializer_OnReadUserData" ISceneUserDataSerializer_OnReadUserData) :void
  (self (:pointer "irr::scene::ISceneUserDataSerializer *"))
  (forSceneNode (:pointer "irr::scene::ISceneNode *"))
  (userData (:pointer "irr::io::IAttributes *")))

(cffi:defcfun ("_wrap_ISceneUserDataSerializer_createUserData" ISceneUserDataSerializer_createUserData) (:pointer "irr::io::IAttributes *")
  (self (:pointer "irr::scene::ISceneUserDataSerializer *"))
  (forSceneNode (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_IShaderConstantSetCallBack_OnSetMaterial" IShaderConstantSetCallBack_OnSetMaterial) :void
  (self (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (material (:pointer "irr::video::SMaterial *")))

(cffi:defcfun ("_wrap_IShaderConstantSetCallBack_OnSetConstants" IShaderConstantSetCallBack_OnSetConstants) :void
  (self (:pointer "irr::video::IShaderConstantSetCallBack *"))
  (services (:pointer "irr::video::IMaterialRendererServices *"))
  (userData :int))

(cffi:defcfun ("_wrap_delete_IShaderConstantSetCallBack" delete_IShaderConstantSetCallBack) :void
  (self (:pointer "irr::video::IShaderConstantSetCallBack *")))

(cffi:defcfun ("_wrap_IShadowVolumeSceneNode_setShadowMesh" IShadowVolumeSceneNode_setShadowMesh) :void
  (self (:pointer "irr::scene::IShadowVolumeSceneNode *"))
  (mesh (:pointer "irr::scene::IMesh *")))

(cffi:defcfun ("_wrap_IShadowVolumeSceneNode_updateShadowVolumes" IShadowVolumeSceneNode_updateShadowVolumes) :void
  (self (:pointer "irr::scene::IShadowVolumeSceneNode *")))

(cffi:defcfun ("_wrap_delete_IShadowVolumeSceneNode" delete_IShadowVolumeSceneNode) :void
  (self (:pointer "irr::scene::IShadowVolumeSceneNode *")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getBoundingBox__SWIG_0" ITerrainSceneNode_getBoundingBox) (:reference "aabbox3df")
  (self (:pointer "irr::scene::ITerrainSceneNode *")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getBoundingBox__SWIG_1" ITerrainSceneNode_getBoundingBox) (:reference "aabbox3df")
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (patchX :int)
  (patchZ :int))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getIndexCount" ITerrainSceneNode_getIndexCount) :uint
  (self (:pointer "irr::scene::ITerrainSceneNode *")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getMesh" ITerrainSceneNode_getMesh) (:pointer "irr::scene::IMesh *")
  (self (:pointer "irr::scene::ITerrainSceneNode *")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getRenderBuffer" ITerrainSceneNode_getRenderBuffer) (:pointer "irr::scene::IMeshBuffer *")
  (self (:pointer "irr::scene::ITerrainSceneNode *")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getMeshBufferForLOD__SWIG_0" ITerrainSceneNode_getMeshBufferForLOD) :void
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (mb (:pointer "irr::scene::IDynamicMeshBuffer *"))
  (LOD :int))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getMeshBufferForLOD__SWIG_1" ITerrainSceneNode_getMeshBufferForLOD) :void
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (mb (:pointer "irr::scene::IDynamicMeshBuffer *")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getIndicesForPatch__SWIG_0" ITerrainSceneNode_getIndicesForPatch) :int
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (indices (:pointer "irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *"))
  (patchX :int)
  (patchZ :int)
  (LOD :int))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getIndicesForPatch__SWIG_1" ITerrainSceneNode_getIndicesForPatch) :int
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (indices (:pointer "irr::core::array< irr::u32,irr::core::irrAllocator< irr::u32 > > *"))
  (patchX :int)
  (patchZ :int))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getCurrentLODOfPatches" ITerrainSceneNode_getCurrentLODOfPatches) :int
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (LODs (:pointer "irr::core::array< irr::s32,irr::core::irrAllocator< irr::s32 > > *")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_setLODOfPatch__SWIG_0" ITerrainSceneNode_setLODOfPatch) :void
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (patchX :int)
  (patchZ :int)
  (LOD :int))

(cffi:defcfun ("_wrap_ITerrainSceneNode_setLODOfPatch__SWIG_1" ITerrainSceneNode_setLODOfPatch) :void
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (patchX :int)
  (patchZ :int))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getTerrainCenter" ITerrainSceneNode_getTerrainCenter) (:reference "vector3df")
  (self (:pointer "irr::scene::ITerrainSceneNode *")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_getHeight" ITerrainSceneNode_getHeight) :float
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_ITerrainSceneNode_setCameraMovementDelta" ITerrainSceneNode_setCameraMovementDelta) :void
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (delta :float))

(cffi:defcfun ("_wrap_ITerrainSceneNode_setCameraRotationDelta" ITerrainSceneNode_setCameraRotationDelta) :void
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (delta :float))

(cffi:defcfun ("_wrap_ITerrainSceneNode_setDynamicSelectorUpdate" ITerrainSceneNode_setDynamicSelectorUpdate) :void
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (bVal :bool))

(cffi:defcfun ("_wrap_ITerrainSceneNode_overrideLODDistance" ITerrainSceneNode_overrideLODDistance) :bool
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (LOD :int)
  (newDistance :double))

(cffi:defcfun ("_wrap_ITerrainSceneNode_scaleTexture__SWIG_0" ITerrainSceneNode_scaleTexture) :void
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (scale :float)
  (scale2 :float))

(cffi:defcfun ("_wrap_ITerrainSceneNode_scaleTexture__SWIG_1" ITerrainSceneNode_scaleTexture) :void
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (scale :float))

(cffi:defcfun ("_wrap_ITerrainSceneNode_scaleTexture__SWIG_2" ITerrainSceneNode_scaleTexture) :void
  (self (:pointer "irr::scene::ITerrainSceneNode *")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_loadHeightMap__SWIG_0" ITerrainSceneNode_loadHeightMap) :bool
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (file (:pointer "irr::io::IReadFile *"))
  (vertexColor (:pointer "irr::video::SColor"))
  (smoothFactor :int))

(cffi:defcfun ("_wrap_ITerrainSceneNode_loadHeightMap__SWIG_1" ITerrainSceneNode_loadHeightMap) :bool
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (file (:pointer "irr::io::IReadFile *"))
  (vertexColor (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_loadHeightMap__SWIG_2" ITerrainSceneNode_loadHeightMap) :bool
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_0" ITerrainSceneNode_loadHeightMapRAW) :bool
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (file (:pointer "irr::io::IReadFile *"))
  (bitsPerPixel :int)
  (signedData :bool)
  (floatVals :bool)
  (width :int)
  (vertexColor (:pointer "irr::video::SColor"))
  (smoothFactor :int))

(cffi:defcfun ("_wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_1" ITerrainSceneNode_loadHeightMapRAW) :bool
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (file (:pointer "irr::io::IReadFile *"))
  (bitsPerPixel :int)
  (signedData :bool)
  (floatVals :bool)
  (width :int)
  (vertexColor (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_2" ITerrainSceneNode_loadHeightMapRAW) :bool
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (file (:pointer "irr::io::IReadFile *"))
  (bitsPerPixel :int)
  (signedData :bool)
  (floatVals :bool)
  (width :int))

(cffi:defcfun ("_wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_3" ITerrainSceneNode_loadHeightMapRAW) :bool
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (file (:pointer "irr::io::IReadFile *"))
  (bitsPerPixel :int)
  (signedData :bool)
  (floatVals :bool))

(cffi:defcfun ("_wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_4" ITerrainSceneNode_loadHeightMapRAW) :bool
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (file (:pointer "irr::io::IReadFile *"))
  (bitsPerPixel :int)
  (signedData :bool))

(cffi:defcfun ("_wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_5" ITerrainSceneNode_loadHeightMapRAW) :bool
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (file (:pointer "irr::io::IReadFile *"))
  (bitsPerPixel :int))

(cffi:defcfun ("_wrap_ITerrainSceneNode_loadHeightMapRAW__SWIG_6" ITerrainSceneNode_loadHeightMapRAW) :bool
  (self (:pointer "irr::scene::ITerrainSceneNode *"))
  (file (:pointer "irr::io::IReadFile *")))

(cffi:defcfun ("_wrap_delete_ITerrainSceneNode" delete_ITerrainSceneNode) :void
  (self (:pointer "irr::scene::ITerrainSceneNode *")))

(cffi:defcfun ("_wrap_ITextSceneNode_setText" ITextSceneNode_setText) :void
  (self (:pointer "irr::scene::ITextSceneNode *"))
  (text :w-string))

(cffi:defcfun ("_wrap_ITextSceneNode_setTextColor" ITextSceneNode_setTextColor) :void
  (self (:pointer "irr::scene::ITextSceneNode *"))
  (color (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_delete_ITextSceneNode" delete_ITextSceneNode) :void
  (self (:pointer "irr::scene::ITextSceneNode *")))

(cffi:defcfun ("_wrap_IVolumeLightSceneNode_setSubDivideU" IVolumeLightSceneNode_setSubDivideU) :void
  (self (:pointer "irr::scene::IVolumeLightSceneNode *"))
  (inU :uint))

(cffi:defcfun ("_wrap_IVolumeLightSceneNode_setSubDivideV" IVolumeLightSceneNode_setSubDivideV) :void
  (self (:pointer "irr::scene::IVolumeLightSceneNode *"))
  (inV :uint))

(cffi:defcfun ("_wrap_IVolumeLightSceneNode_getSubDivideU" IVolumeLightSceneNode_getSubDivideU) :uint
  (self (:pointer "irr::scene::IVolumeLightSceneNode *")))

(cffi:defcfun ("_wrap_IVolumeLightSceneNode_getSubDivideV" IVolumeLightSceneNode_getSubDivideV) :uint
  (self (:pointer "irr::scene::IVolumeLightSceneNode *")))

(cffi:defcfun ("_wrap_IVolumeLightSceneNode_setFootColor" IVolumeLightSceneNode_setFootColor) :void
  (self (:pointer "irr::scene::IVolumeLightSceneNode *"))
  (inColor (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVolumeLightSceneNode_setTailColor" IVolumeLightSceneNode_setTailColor) :void
  (self (:pointer "irr::scene::IVolumeLightSceneNode *"))
  (inColor (:pointer "irr::video::SColor")))

(cffi:defcfun ("_wrap_IVolumeLightSceneNode_getFootColor" IVolumeLightSceneNode_getFootColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::scene::IVolumeLightSceneNode *")))

(cffi:defcfun ("_wrap_IVolumeLightSceneNode_getTailColor" IVolumeLightSceneNode_getTailColor) (:by-value "irr::video::SColor")
  (self (:pointer "irr::scene::IVolumeLightSceneNode *")))

(cffi:defcfun ("_wrap_delete_IVolumeLightSceneNode" delete_IVolumeLightSceneNode) :void
  (self (:pointer "irr::scene::IVolumeLightSceneNode *")))

(cffi:defcfun ("_wrap_IWriteFile_write" IWriteFile_write) :int
  (self (:pointer "irr::io::IWriteFile *"))
  (buffer (:pointer "void *"))
  (sizeToWrite :uint))

(cffi:defcfun ("_wrap_IWriteFile_seek__SWIG_0" IWriteFile_seek) :bool
  (self (:pointer "irr::io::IWriteFile *"))
  (finalPos :long)
  (relativeMovement :bool))

(cffi:defcfun ("_wrap_IWriteFile_seek__SWIG_1" IWriteFile_seek) :bool
  (self (:pointer "irr::io::IWriteFile *"))
  (finalPos :long))

(cffi:defcfun ("_wrap_IWriteFile_getPos" IWriteFile_getPos) :long
  (self (:pointer "irr::io::IWriteFile *")))

(cffi:defcfun ("_wrap_IWriteFile_getFileName" IWriteFile_getFileName) (:reference "path")
  (self (:pointer "irr::io::IWriteFile *")))

(cffi:defcfun ("_wrap_delete_IWriteFile" delete_IWriteFile) :void
  (self (:pointer "irr::io::IWriteFile *")))

(cffi:defcfun ("_wrap_IXMLWriter_writeXMLHeader" IXMLWriter_writeXMLHeader) :void
  (self (:pointer "irr::io::IXMLWriter *")))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_0" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool)
  (attr1Name :w-string)
  (attr1Value :w-string)
  (attr2Name :w-string)
  (attr2Value :w-string)
  (attr3Name :w-string)
  (attr3Value :w-string)
  (attr4Name :w-string)
  (attr4Value :w-string)
  (attr5Name :w-string)
  (attr5Value :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_1" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool)
  (attr1Name :w-string)
  (attr1Value :w-string)
  (attr2Name :w-string)
  (attr2Value :w-string)
  (attr3Name :w-string)
  (attr3Value :w-string)
  (attr4Name :w-string)
  (attr4Value :w-string)
  (attr5Name :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_2" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool)
  (attr1Name :w-string)
  (attr1Value :w-string)
  (attr2Name :w-string)
  (attr2Value :w-string)
  (attr3Name :w-string)
  (attr3Value :w-string)
  (attr4Name :w-string)
  (attr4Value :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_3" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool)
  (attr1Name :w-string)
  (attr1Value :w-string)
  (attr2Name :w-string)
  (attr2Value :w-string)
  (attr3Name :w-string)
  (attr3Value :w-string)
  (attr4Name :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_4" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool)
  (attr1Name :w-string)
  (attr1Value :w-string)
  (attr2Name :w-string)
  (attr2Value :w-string)
  (attr3Name :w-string)
  (attr3Value :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_5" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool)
  (attr1Name :w-string)
  (attr1Value :w-string)
  (attr2Name :w-string)
  (attr2Value :w-string)
  (attr3Name :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_6" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool)
  (attr1Name :w-string)
  (attr1Value :w-string)
  (attr2Name :w-string)
  (attr2Value :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_7" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool)
  (attr1Name :w-string)
  (attr1Value :w-string)
  (attr2Name :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_8" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool)
  (attr1Name :w-string)
  (attr1Value :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_9" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool)
  (attr1Name :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_10" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_11" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeElement__SWIG_12" IXMLWriter_writeElement) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string)
  (empty :bool)
  (names (:pointer "irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *"))
  (values (:pointer "irr::core::array< irr::core::stringw,irr::core::irrAllocator< irr::core::stringw > > *")))

(cffi:defcfun ("_wrap_IXMLWriter_writeComment" IXMLWriter_writeComment) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (comment :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeClosingTag" IXMLWriter_writeClosingTag) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (name :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeText" IXMLWriter_writeText) :void
  (self (:pointer "irr::io::IXMLWriter *"))
  (text :w-string))

(cffi:defcfun ("_wrap_IXMLWriter_writeLineBreak" IXMLWriter_writeLineBreak) :void
  (self (:pointer "irr::io::IXMLWriter *")))

(cffi:defcfun ("_wrap_delete_IXMLWriter" delete_IXMLWriter) :void
  (self (:pointer "irr::io::IXMLWriter *")))

(cffi:defcfun ("_wrap_ILightManager_OnPreRender" ILightManager_OnPreRender) :void
  (self (:pointer "irr::scene::ILightManager *"))
  (lightList (:pointer "irr::core::array< irr::scene::ISceneNode *,irr::core::irrAllocator< irr::scene::ISceneNode * > > *")))

(cffi:defcfun ("_wrap_ILightManager_OnPostRender" ILightManager_OnPostRender) :void
  (self (:pointer "irr::scene::ILightManager *")))

(cffi:defcfun ("_wrap_ILightManager_OnRenderPassPreRender" ILightManager_OnRenderPassPreRender) :void
  (self (:pointer "irr::scene::ILightManager *"))
  (renderPass :enum))

(cffi:defcfun ("_wrap_ILightManager_OnRenderPassPostRender" ILightManager_OnRenderPassPostRender) :void
  (self (:pointer "irr::scene::ILightManager *"))
  (renderPass :enum))

(cffi:defcfun ("_wrap_ILightManager_OnNodePreRender" ILightManager_OnNodePreRender) :void
  (self (:pointer "irr::scene::ILightManager *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_ILightManager_OnNodePostRender" ILightManager_OnNodePostRender) :void
  (self (:pointer "irr::scene::ILightManager *"))
  (node (:pointer "irr::scene::ISceneNode *")))

(cffi:defcfun ("_wrap_delete_ILightManager" delete_ILightManager) :void
  (self (:pointer "irr::scene::ILightManager *")))

(cffi:defcstruct SAnimatedMesh
	(getFrameCount (:pointer "irr::u32 ()"))
	(getAnimationSpeed (:pointer "irr::f32 ()"))
	(setAnimationSpeed (:pointer "void (irr::f32)"))
	(getMesh (:pointer "irr::scene::IMesh *(irr::s32,irr::s32,irr::s32,irr::s32)"))
	(getMesh (:pointer "irr::scene::IMesh *(irr::s32,irr::s32,irr::s32)"))
	(getMesh (:pointer "irr::scene::IMesh *(irr::s32,irr::s32)"))
	(getMesh (:pointer "irr::scene::IMesh *(irr::s32)"))
	(addMesh (:pointer "void (irr::scene::IMesh *)"))
	(getBoundingBox (:pointer "irr::core::aabbox3d< irr::f32 > &()"))
	(setBoundingBox (:pointer "void (irr::core::aabbox3df const &)"))
	(recalculateBoundingBox (:pointer "void ()"))
	(getMeshType (:pointer "irr::scene::E_ANIMATED_MESH_TYPE ()"))
	(getMeshBufferCount (:pointer "irr::u32 ()"))
	(getMeshBuffer (:pointer "irr::scene::IMeshBuffer *(irr::u32)"))
	(getMeshBuffer (:pointer "irr::scene::IMeshBuffer *(irr::video::SMaterial const &)"))
	(setMaterialFlag (:pointer "void (irr::video::E_MATERIAL_FLAG,bool)"))
	(setHardwareMappingHint (:pointer "void (irr::scene::E_HARDWARE_MAPPING,irr::scene::E_BUFFER_TYPE)"))
	(setHardwareMappingHint (:pointer "void (irr::scene::E_HARDWARE_MAPPING)"))
	(setDirty (:pointer "void (irr::scene::E_BUFFER_TYPE)"))
	(setDirty (:pointer "void ()"))
	(Meshes (:pointer "irr::core::array< irr::scene::IMesh *,irr::core::irrAllocator< irr::scene::IMesh * > >"))
	(Box (:pointer "aabbox3df"))
	(FramesPerSecond :float)
	(Type :enum))

(cffi:defcstruct SIrrlichtCreationParameters
	(__assign__ (:pointer "irr::SIrrlichtCreationParameters &(irr::SIrrlichtCreationParameters const &)"))
	(DeviceType :enum)
	(DriverType :enum)
	(WindowSize (:pointer "dimension2du"))
	(Bits :uchar)
	(ZBufferBits :uchar)
	(Fullscreen :bool)
	(Stencilbuffer :bool)
	(Vsync :bool)
	(AntiAlias :uchar)
	(HandleSRGB :bool)
	(WithAlphaChannel :bool)
	(Doublebuffer :bool)
	(IgnoreInput :bool)
	(Stereobuffer :bool)
	(HighPrecisionFPU :bool)
	(EventReceiver (:pointer "irr::IEventReceiver *"))
	(WindowId (:pointer "void *"))
	(LoggingLevel :enum)
	(DisplayAdapter :uint)
	(DriverMultithreaded :bool)
	(UsePerformanceTimer :bool)
	(SDK_version_do_not_use :string))

(cffi:defcenum EKEY_ACTION
	(:EKA_MOVE_FORWARD 0)
	:EKA_MOVE_BACKWARD
	:EKA_STRAFE_LEFT
	:EKA_STRAFE_RIGHT
	:EKA_JUMP_UP
	:EKA_CROUCH
	:EKA_COUNT
	(:EKA_FORCE_32BIT #x7fffffff))

(cffi:defcstruct SKeyMap
	(Action :enum)
	(KeyCode :enum))

(cffi:defcstruct SMesh
	(clear (:pointer "void ()"))
	(getMeshBufferCount (:pointer "irr::u32 ()"))
	(getMeshBuffer (:pointer "irr::scene::IMeshBuffer *(irr::u32)"))
	(getMeshBuffer (:pointer "irr::scene::IMeshBuffer *(irr::video::SMaterial const &)"))
	(getBoundingBox (:pointer "irr::core::aabbox3d< irr::f32 > &()"))
	(setBoundingBox (:pointer "void (irr::core::aabbox3df const &)"))
	(recalculateBoundingBox (:pointer "void ()"))
	(addMeshBuffer (:pointer "void (irr::scene::IMeshBuffer *)"))
	(setMaterialFlag (:pointer "void (irr::video::E_MATERIAL_FLAG,bool)"))
	(setHardwareMappingHint (:pointer "void (irr::scene::E_HARDWARE_MAPPING,irr::scene::E_BUFFER_TYPE)"))
	(setHardwareMappingHint (:pointer "void (irr::scene::E_HARDWARE_MAPPING)"))
	(setDirty (:pointer "void (irr::scene::E_BUFFER_TYPE)"))
	(setDirty (:pointer "void ()"))
	(MeshBuffers (:pointer "irr::core::array< irr::scene::IMeshBuffer *,irr::core::irrAllocator< irr::scene::IMeshBuffer * > >"))
	(BoundingBox (:pointer "aabbox3df")))

(cffi:defcstruct SSharedMeshBuffer
	(getMaterial (:pointer "irr::video::SMaterial &()"))
	(getMaterial (:pointer "irr::video::SMaterial &()"))
	(getVertices (:pointer "void *()"))
	(getVertices (:pointer "void *()"))
	(getVertexCount (:pointer "irr::u32 ()"))
	(getIndices (:pointer "irr::u16 *()"))
	(getIndices (:pointer "irr::u16 *()"))
	(getIndexCount (:pointer "irr::u32 ()"))
	(getIndexType (:pointer "irr::video::E_INDEX_TYPE ()"))
	(getBoundingBox (:pointer "irr::core::aabbox3d< irr::f32 > &()"))
	(setBoundingBox (:pointer "void (irr::core::aabbox3df const &)"))
	(getVertexType (:pointer "irr::video::E_VERTEX_TYPE ()"))
	(recalculateBoundingBox (:pointer "void ()"))
	(getPosition (:pointer "irr::core::vector3df &(irr::u32)"))
	(getPosition (:pointer "irr::core::vector3df &(irr::u32)"))
	(getNormal (:pointer "irr::core::vector3df &(irr::u32)"))
	(getNormal (:pointer "irr::core::vector3df &(irr::u32)"))
	(getTCoords (:pointer "irr::core::vector2df &(irr::u32)"))
	(getTCoords (:pointer "irr::core::vector2df &(irr::u32)"))
	(append (:pointer "void (void const *const,irr::u32,irr::u16 const *const,irr::u32)"))
	(append (:pointer "void (irr::scene::IMeshBuffer const *const)"))
	(getHardwareMappingHint_Vertex (:pointer "irr::scene::E_HARDWARE_MAPPING ()"))
	(getHardwareMappingHint_Index (:pointer "irr::scene::E_HARDWARE_MAPPING ()"))
	(setHardwareMappingHint (:pointer "void (irr::scene::E_HARDWARE_MAPPING,irr::scene::E_BUFFER_TYPE)"))
	(setHardwareMappingHint (:pointer "void (irr::scene::E_HARDWARE_MAPPING)"))
	(setDirty (:pointer "void (irr::scene::E_BUFFER_TYPE)"))
	(setDirty (:pointer "void ()"))
	(getChangedID_Vertex (:pointer "irr::u32 ()"))
	(getChangedID_Index (:pointer "irr::u32 ()"))
	(Material (:pointer "irr::video::SMaterial"))
	(Vertices (:pointer "irr::core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > *"))
	(Indices (:pointer "irr::core::array< irr::u16,irr::core::irrAllocator< irr::u16 > >"))
	(ChangedID_Vertex :uint)
	(ChangedID_Index :uint)
	(BoundingBox (:pointer "aabbox3df"))
	(MappingHintVertex :enum)
	(MappingHintIndex :enum))

(cffi:defcstruct SViewFrustum
	(setFrom (:pointer "void (irr::core::matrix4 const &)"))
	(transform (:pointer "void (irr::core::matrix4 const &)"))
	(getFarLeftUp (:pointer "irr::core::vector3df ()"))
	(getFarLeftDown (:pointer "irr::core::vector3df ()"))
	(getFarRightUp (:pointer "irr::core::vector3df ()"))
	(getFarRightDown (:pointer "irr::core::vector3df ()"))
	(getNearLeftUp (:pointer "irr::core::vector3df ()"))
	(getNearLeftDown (:pointer "irr::core::vector3df ()"))
	(getNearRightUp (:pointer "irr::core::vector3df ()"))
	(getNearRightDown (:pointer "irr::core::vector3df ()"))
	(getBoundingBox (:pointer "irr::core::aabbox3d< irr::f32 > &()"))
	(recalculateBoundingBox (:pointer "void ()"))
	(getTransform (:pointer "irr::core::matrix4 &(irr::video::E_TRANSFORMATION_STATE)"))
	(getTransform (:pointer "irr::core::matrix4 &(irr::video::E_TRANSFORMATION_STATE)"))
	(clipLine (:pointer "bool (irr::core::line3d< irr::f32 > &)"))
	(cameraPosition (:pointer "vector3df"))
	(planes (:pointer "irr::core::plane3d< irr::f32 > *"))
	(boundingBox (:pointer "aabbox3df"))
	( (:pointer "irr::core::matrix4 *")))

(cffi:defcfun ("_wrap_createDevice" createDevice) (:pointer "irr::IrrlichtDevice *")
  (deviceType :enum)
  (windowSize (:pointer "dimension2du"))
  (bits :uint)
  (fullscreen :bool)
  (stencilbuffer :bool)
  (vsync :bool)
  (receiver (:pointer "irr::IEventReceiver *")))

(cffi:defcfun ("_wrap_createDeviceEx" createDeviceEx) (:pointer "irr::IrrlichtDevice *")
  (parameters (:pointer "irr::SIrrlichtCreationParameters *")))

(cffi:defcfun ("_wrap_new_SMeshBuffer" new_SMeshBuffer) (:pointer "SMeshBuffer"))

(cffi:defcfun ("_wrap_SMeshBuffer_getMaterial__SWIG_0" SMeshBuffer_getMaterial) (:reference "video::SMaterial *")
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_getMaterial__SWIG_1" SMeshBuffer_getMaterial) (:reference "video::SMaterial *")
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_getVertices__SWIG_0" SMeshBuffer_getVertices) (:pointer "void *")
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_getVertices__SWIG_1" SMeshBuffer_getVertices) (:pointer "void *")
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_getIndices__SWIG_0" SMeshBuffer_getIndices) (:pointer "irr::u16 *")
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_getIndices__SWIG_1" SMeshBuffer_getIndices) (:pointer "irr::u16 *")
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_getPosition__SWIG_0" SMeshBuffer_getPosition) (:reference "vector3df")
  (self (:pointer "SMeshBuffer"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBuffer_getPosition__SWIG_1" SMeshBuffer_getPosition) (:reference "vector3df")
  (self (:pointer "SMeshBuffer"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBuffer_getNormal__SWIG_0" SMeshBuffer_getNormal) (:reference "vector3df")
  (self (:pointer "SMeshBuffer"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBuffer_getNormal__SWIG_1" SMeshBuffer_getNormal) (:reference "vector3df")
  (self (:pointer "SMeshBuffer"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBuffer_getTCoords__SWIG_0" SMeshBuffer_getTCoords) (:reference "vector2df")
  (self (:pointer "SMeshBuffer"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBuffer_getTCoords__SWIG_1" SMeshBuffer_getTCoords) (:reference "vector2df")
  (self (:pointer "SMeshBuffer"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBuffer_append__SWIG_0" SMeshBuffer_append) :void
  (self (:pointer "SMeshBuffer"))
  (vertices (:pointer "void *"))
  (numVertices :uint)
  (indices (:pointer "irr::u16 *"))
  (numIndices :uint))

(cffi:defcfun ("_wrap_SMeshBuffer_append__SWIG_1" SMeshBuffer_append) :void
  (self (:pointer "SMeshBuffer"))
  (other (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_SMeshBuffer_setHardwareMappingHint__SWIG_0" SMeshBuffer_setHardwareMappingHint) :void
  (self (:pointer "SMeshBuffer"))
  (NewMappingHint :enum)
  (Buffer :enum))

(cffi:defcfun ("_wrap_SMeshBuffer_setHardwareMappingHint__SWIG_1" SMeshBuffer_setHardwareMappingHint) :void
  (self (:pointer "SMeshBuffer"))
  (NewMappingHint :enum))

(cffi:defcfun ("_wrap_SMeshBuffer_setDirty__SWIG_0" SMeshBuffer_setDirty) :void
  (self (:pointer "SMeshBuffer"))
  (Buffer :enum))

(cffi:defcfun ("_wrap_SMeshBuffer_setDirty__SWIG_1" SMeshBuffer_setDirty) :void
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_ChangedID_Vertex_set" SMeshBuffer_ChangedID_Vertex_set) :void
  (self (:pointer "SMeshBuffer"))
  (ChangedID_Vertex :uint))

(cffi:defcfun ("_wrap_SMeshBuffer_ChangedID_Vertex_get" SMeshBuffer_ChangedID_Vertex_get) :uint
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_ChangedID_Index_set" SMeshBuffer_ChangedID_Index_set) :void
  (self (:pointer "SMeshBuffer"))
  (ChangedID_Index :uint))

(cffi:defcfun ("_wrap_SMeshBuffer_ChangedID_Index_get" SMeshBuffer_ChangedID_Index_get) :uint
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_MappingHint_Vertex_set" SMeshBuffer_MappingHint_Vertex_set) :void
  (self (:pointer "SMeshBuffer"))
  (MappingHint_Vertex :enum))

(cffi:defcfun ("_wrap_SMeshBuffer_MappingHint_Vertex_get" SMeshBuffer_MappingHint_Vertex_get) :enum
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_MappingHint_Index_set" SMeshBuffer_MappingHint_Index_set) :void
  (self (:pointer "SMeshBuffer"))
  (MappingHint_Index :enum))

(cffi:defcfun ("_wrap_SMeshBuffer_MappingHint_Index_get" SMeshBuffer_MappingHint_Index_get) :enum
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_Material_set" SMeshBuffer_Material_set) :void
  (self (:pointer "SMeshBuffer"))
  (Material (:pointer "video::SMaterial *")))

(cffi:defcfun ("_wrap_SMeshBuffer_Material_get" SMeshBuffer_Material_get) (:pointer "video::SMaterial *")
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_Vertices_set" SMeshBuffer_Vertices_set) :void
  (self (:pointer "SMeshBuffer"))
  (Vertices (:pointer "core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > *")))

(cffi:defcfun ("_wrap_SMeshBuffer_Vertices_get" SMeshBuffer_Vertices_get) (:pointer "core::array< irr::video::S3DVertex,irr::core::irrAllocator< irr::video::S3DVertex > > *")
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_Indices_set" SMeshBuffer_Indices_set) :void
  (self (:pointer "SMeshBuffer"))
  (Indices (:pointer "core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *")))

(cffi:defcfun ("_wrap_SMeshBuffer_Indices_get" SMeshBuffer_Indices_get) (:pointer "core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *")
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_SMeshBuffer_BoundingBox_set" SMeshBuffer_BoundingBox_set) :void
  (self (:pointer "SMeshBuffer"))
  (BoundingBox (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_SMeshBuffer_BoundingBox_get" SMeshBuffer_BoundingBox_get) (:pointer "aabbox3df")
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_delete_SMeshBuffer" delete_SMeshBuffer) :void
  (self (:pointer "SMeshBuffer")))

(cffi:defcfun ("_wrap_new_SMeshBufferLightMap" new_SMeshBufferLightMap) (:pointer "SMeshBufferLightMap"))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getMaterial__SWIG_0" SMeshBufferLightMap_getMaterial) (:reference "video::SMaterial *")
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getMaterial__SWIG_1" SMeshBufferLightMap_getMaterial) (:reference "video::SMaterial *")
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getVertices__SWIG_0" SMeshBufferLightMap_getVertices) (:pointer "void *")
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getVertices__SWIG_1" SMeshBufferLightMap_getVertices) (:pointer "void *")
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getIndices__SWIG_0" SMeshBufferLightMap_getIndices) (:pointer "irr::u16 *")
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getIndices__SWIG_1" SMeshBufferLightMap_getIndices) (:pointer "irr::u16 *")
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getPosition__SWIG_0" SMeshBufferLightMap_getPosition) (:reference "vector3df")
  (self (:pointer "SMeshBufferLightMap"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getPosition__SWIG_1" SMeshBufferLightMap_getPosition) (:reference "vector3df")
  (self (:pointer "SMeshBufferLightMap"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getNormal__SWIG_0" SMeshBufferLightMap_getNormal) (:reference "vector3df")
  (self (:pointer "SMeshBufferLightMap"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getNormal__SWIG_1" SMeshBufferLightMap_getNormal) (:reference "vector3df")
  (self (:pointer "SMeshBufferLightMap"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getTCoords__SWIG_0" SMeshBufferLightMap_getTCoords) (:reference "vector2df")
  (self (:pointer "SMeshBufferLightMap"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_getTCoords__SWIG_1" SMeshBufferLightMap_getTCoords) (:reference "vector2df")
  (self (:pointer "SMeshBufferLightMap"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_append__SWIG_0" SMeshBufferLightMap_append) :void
  (self (:pointer "SMeshBufferLightMap"))
  (vertices (:pointer "void *"))
  (numVertices :uint)
  (indices (:pointer "irr::u16 *"))
  (numIndices :uint))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_append__SWIG_1" SMeshBufferLightMap_append) :void
  (self (:pointer "SMeshBufferLightMap"))
  (other (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_setHardwareMappingHint__SWIG_0" SMeshBufferLightMap_setHardwareMappingHint) :void
  (self (:pointer "SMeshBufferLightMap"))
  (NewMappingHint :enum)
  (Buffer :enum))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_setHardwareMappingHint__SWIG_1" SMeshBufferLightMap_setHardwareMappingHint) :void
  (self (:pointer "SMeshBufferLightMap"))
  (NewMappingHint :enum))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_setDirty__SWIG_0" SMeshBufferLightMap_setDirty) :void
  (self (:pointer "SMeshBufferLightMap"))
  (Buffer :enum))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_setDirty__SWIG_1" SMeshBufferLightMap_setDirty) :void
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_ChangedID_Vertex_set" SMeshBufferLightMap_ChangedID_Vertex_set) :void
  (self (:pointer "SMeshBufferLightMap"))
  (ChangedID_Vertex :uint))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_ChangedID_Vertex_get" SMeshBufferLightMap_ChangedID_Vertex_get) :uint
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_ChangedID_Index_set" SMeshBufferLightMap_ChangedID_Index_set) :void
  (self (:pointer "SMeshBufferLightMap"))
  (ChangedID_Index :uint))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_ChangedID_Index_get" SMeshBufferLightMap_ChangedID_Index_get) :uint
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_MappingHint_Vertex_set" SMeshBufferLightMap_MappingHint_Vertex_set) :void
  (self (:pointer "SMeshBufferLightMap"))
  (MappingHint_Vertex :enum))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_MappingHint_Vertex_get" SMeshBufferLightMap_MappingHint_Vertex_get) :enum
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_MappingHint_Index_set" SMeshBufferLightMap_MappingHint_Index_set) :void
  (self (:pointer "SMeshBufferLightMap"))
  (MappingHint_Index :enum))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_MappingHint_Index_get" SMeshBufferLightMap_MappingHint_Index_get) :enum
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_Material_set" SMeshBufferLightMap_Material_set) :void
  (self (:pointer "SMeshBufferLightMap"))
  (Material (:pointer "video::SMaterial *")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_Material_get" SMeshBufferLightMap_Material_get) (:pointer "video::SMaterial *")
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_Vertices_set" SMeshBufferLightMap_Vertices_set) :void
  (self (:pointer "SMeshBufferLightMap"))
  (Vertices (:pointer "core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > *")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_Vertices_get" SMeshBufferLightMap_Vertices_get) (:pointer "core::array< irr::video::S3DVertex2TCoords,irr::core::irrAllocator< irr::video::S3DVertex2TCoords > > *")
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_Indices_set" SMeshBufferLightMap_Indices_set) :void
  (self (:pointer "SMeshBufferLightMap"))
  (Indices (:pointer "core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_Indices_get" SMeshBufferLightMap_Indices_get) (:pointer "core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *")
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_BoundingBox_set" SMeshBufferLightMap_BoundingBox_set) :void
  (self (:pointer "SMeshBufferLightMap"))
  (BoundingBox (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_SMeshBufferLightMap_BoundingBox_get" SMeshBufferLightMap_BoundingBox_get) (:pointer "aabbox3df")
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_delete_SMeshBufferLightMap" delete_SMeshBufferLightMap) :void
  (self (:pointer "SMeshBufferLightMap")))

(cffi:defcfun ("_wrap_new_SMeshBufferTangents" new_SMeshBufferTangents) (:pointer "SMeshBufferTangents"))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getMaterial__SWIG_0" SMeshBufferTangents_getMaterial) (:reference "video::SMaterial *")
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getMaterial__SWIG_1" SMeshBufferTangents_getMaterial) (:reference "video::SMaterial *")
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getVertices__SWIG_0" SMeshBufferTangents_getVertices) (:pointer "void *")
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getVertices__SWIG_1" SMeshBufferTangents_getVertices) (:pointer "void *")
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getIndices__SWIG_0" SMeshBufferTangents_getIndices) (:pointer "irr::u16 *")
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getIndices__SWIG_1" SMeshBufferTangents_getIndices) (:pointer "irr::u16 *")
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getPosition__SWIG_0" SMeshBufferTangents_getPosition) (:reference "vector3df")
  (self (:pointer "SMeshBufferTangents"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getPosition__SWIG_1" SMeshBufferTangents_getPosition) (:reference "vector3df")
  (self (:pointer "SMeshBufferTangents"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getNormal__SWIG_0" SMeshBufferTangents_getNormal) (:reference "vector3df")
  (self (:pointer "SMeshBufferTangents"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getNormal__SWIG_1" SMeshBufferTangents_getNormal) (:reference "vector3df")
  (self (:pointer "SMeshBufferTangents"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getTCoords__SWIG_0" SMeshBufferTangents_getTCoords) (:reference "vector2df")
  (self (:pointer "SMeshBufferTangents"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferTangents_getTCoords__SWIG_1" SMeshBufferTangents_getTCoords) (:reference "vector2df")
  (self (:pointer "SMeshBufferTangents"))
  (i :uint))

(cffi:defcfun ("_wrap_SMeshBufferTangents_append__SWIG_0" SMeshBufferTangents_append) :void
  (self (:pointer "SMeshBufferTangents"))
  (vertices (:pointer "void *"))
  (numVertices :uint)
  (indices (:pointer "irr::u16 *"))
  (numIndices :uint))

(cffi:defcfun ("_wrap_SMeshBufferTangents_append__SWIG_1" SMeshBufferTangents_append) :void
  (self (:pointer "SMeshBufferTangents"))
  (other (:pointer "irr::scene::IMeshBuffer *")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_setHardwareMappingHint__SWIG_0" SMeshBufferTangents_setHardwareMappingHint) :void
  (self (:pointer "SMeshBufferTangents"))
  (NewMappingHint :enum)
  (Buffer :enum))

(cffi:defcfun ("_wrap_SMeshBufferTangents_setHardwareMappingHint__SWIG_1" SMeshBufferTangents_setHardwareMappingHint) :void
  (self (:pointer "SMeshBufferTangents"))
  (NewMappingHint :enum))

(cffi:defcfun ("_wrap_SMeshBufferTangents_setDirty__SWIG_0" SMeshBufferTangents_setDirty) :void
  (self (:pointer "SMeshBufferTangents"))
  (Buffer :enum))

(cffi:defcfun ("_wrap_SMeshBufferTangents_setDirty__SWIG_1" SMeshBufferTangents_setDirty) :void
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_ChangedID_Vertex_set" SMeshBufferTangents_ChangedID_Vertex_set) :void
  (self (:pointer "SMeshBufferTangents"))
  (ChangedID_Vertex :uint))

(cffi:defcfun ("_wrap_SMeshBufferTangents_ChangedID_Vertex_get" SMeshBufferTangents_ChangedID_Vertex_get) :uint
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_ChangedID_Index_set" SMeshBufferTangents_ChangedID_Index_set) :void
  (self (:pointer "SMeshBufferTangents"))
  (ChangedID_Index :uint))

(cffi:defcfun ("_wrap_SMeshBufferTangents_ChangedID_Index_get" SMeshBufferTangents_ChangedID_Index_get) :uint
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_MappingHint_Vertex_set" SMeshBufferTangents_MappingHint_Vertex_set) :void
  (self (:pointer "SMeshBufferTangents"))
  (MappingHint_Vertex :enum))

(cffi:defcfun ("_wrap_SMeshBufferTangents_MappingHint_Vertex_get" SMeshBufferTangents_MappingHint_Vertex_get) :enum
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_MappingHint_Index_set" SMeshBufferTangents_MappingHint_Index_set) :void
  (self (:pointer "SMeshBufferTangents"))
  (MappingHint_Index :enum))

(cffi:defcfun ("_wrap_SMeshBufferTangents_MappingHint_Index_get" SMeshBufferTangents_MappingHint_Index_get) :enum
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_Material_set" SMeshBufferTangents_Material_set) :void
  (self (:pointer "SMeshBufferTangents"))
  (Material (:pointer "video::SMaterial *")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_Material_get" SMeshBufferTangents_Material_get) (:pointer "video::SMaterial *")
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_Vertices_set" SMeshBufferTangents_Vertices_set) :void
  (self (:pointer "SMeshBufferTangents"))
  (Vertices (:pointer "core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > > *")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_Vertices_get" SMeshBufferTangents_Vertices_get) (:pointer "core::array< irr::video::S3DVertexTangents,irr::core::irrAllocator< irr::video::S3DVertexTangents > > *")
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_Indices_set" SMeshBufferTangents_Indices_set) :void
  (self (:pointer "SMeshBufferTangents"))
  (Indices (:pointer "core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_Indices_get" SMeshBufferTangents_Indices_get) (:pointer "core::array< irr::u16,irr::core::irrAllocator< irr::u16 > > *")
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_BoundingBox_set" SMeshBufferTangents_BoundingBox_set) :void
  (self (:pointer "SMeshBufferTangents"))
  (BoundingBox (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_SMeshBufferTangents_BoundingBox_get" SMeshBufferTangents_BoundingBox_get) (:pointer "aabbox3df")
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_delete_SMeshBufferTangents" delete_SMeshBufferTangents) :void
  (self (:pointer "SMeshBufferTangents")))

(cffi:defcfun ("_wrap_new_tStringList__SWIG_0" new_tStringList) (:pointer "tStringList"))

(cffi:defcfun ("_wrap_new_tStringList__SWIG_1" new_tStringList) (:pointer "tStringList")
  (start_count :uint))

(cffi:defcfun ("_wrap_new_tStringList__SWIG_2" new_tStringList) (:pointer "tStringList")
  (other (:pointer "tStringList")))

(cffi:defcfun ("_wrap_delete_tStringList" delete_tStringList) :void
  (self (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList_reallocate__SWIG_0" tStringList_reallocate) :void
  (self (:pointer "tStringList"))
  (new_size :uint)
  (canShrink :bool))

(cffi:defcfun ("_wrap_tStringList_reallocate__SWIG_1" tStringList_reallocate) :void
  (self (:pointer "tStringList"))
  (new_size :uint))

(cffi:defcfun ("_wrap_tStringList_setAllocStrategy__SWIG_0" tStringList_setAllocStrategy) :void
  (self (:pointer "tStringList"))
  (newStrategy :enum))

(cffi:defcfun ("_wrap_tStringList_setAllocStrategy__SWIG_1" tStringList_setAllocStrategy) :void
  (self (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList_push_back" tStringList_push_back) :void
  (self (:pointer "tStringList"))
  (element (:pointer "path")))

(cffi:defcfun ("_wrap_tStringList_push_front" tStringList_push_front) :void
  (self (:pointer "tStringList"))
  (element (:pointer "path")))

(cffi:defcfun ("_wrap_tStringList_insert__SWIG_0" tStringList_insert) :void
  (self (:pointer "tStringList"))
  (element (:pointer "path"))
  (index :uint))

(cffi:defcfun ("_wrap_tStringList_insert__SWIG_1" tStringList_insert) :void
  (self (:pointer "tStringList"))
  (element (:pointer "path")))

(cffi:defcfun ("_wrap_tStringList_clear" tStringList_clear) :void
  (self (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList_set_pointer__SWIG_0" tStringList_set_pointer) :void
  (self (:pointer "tStringList"))
  (newPointer (:pointer "path"))
  (size :uint)
  (_is_sorted :bool)
  (_free_when_destroyed :bool))

(cffi:defcfun ("_wrap_tStringList_set_pointer__SWIG_1" tStringList_set_pointer) :void
  (self (:pointer "tStringList"))
  (newPointer (:pointer "path"))
  (size :uint)
  (_is_sorted :bool))

(cffi:defcfun ("_wrap_tStringList_set_pointer__SWIG_2" tStringList_set_pointer) :void
  (self (:pointer "tStringList"))
  (newPointer (:pointer "path"))
  (size :uint))

(cffi:defcfun ("_wrap_tStringList_set_free_when_destroyed" tStringList_set_free_when_destroyed) :void
  (self (:pointer "tStringList"))
  (f :bool))

(cffi:defcfun ("_wrap_tStringList_set_used" tStringList_set_used) :void
  (self (:pointer "tStringList"))
  (usedNow :uint))

(cffi:defcfun ("_wrap_tStringList___assign__" tStringList___assign__) (:reference "tStringList")
  (self (:pointer "tStringList"))
  (other (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList___eq__" tStringList___eq__) :bool
  (self (:pointer "tStringList"))
  (other (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList___ne__" tStringList___ne__) :bool
  (self (:pointer "tStringList"))
  (other (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList___aref____SWIG_0" tStringList___aref__) (:reference "path")
  (self (:pointer "tStringList"))
  (index :uint))

(cffi:defcfun ("_wrap_tStringList___aref____SWIG_1" tStringList___aref__) (:reference "path")
  (self (:pointer "tStringList"))
  (index :uint))

(cffi:defcfun ("_wrap_tStringList_getLast__SWIG_0" tStringList_getLast) (:reference "path")
  (self (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList_getLast__SWIG_1" tStringList_getLast) (:reference "path")
  (self (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList_pointer" tStringList_pointer) (:pointer "path")
  (self (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList_const_pointer" tStringList_const_pointer) (:pointer "path")
  (self (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList_size" tStringList_size) :uint
  (self (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList_allocated_size" tStringList_allocated_size) :uint
  (self (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList_empty" tStringList_empty) :bool
  (self (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList_sort" tStringList_sort) :void
  (self (:pointer "tStringList")))

(cffi:defcfun ("_wrap_tStringList_binary_search__SWIG_0" tStringList_binary_search) :int
  (self (:pointer "tStringList"))
  (element (:pointer "path")))

(cffi:defcfun ("_wrap_tStringList_binary_search__SWIG_1" tStringList_binary_search) :int
  (self (:pointer "tStringList"))
  (element (:pointer "path")))

(cffi:defcfun ("_wrap_tStringList_binary_search__SWIG_2" tStringList_binary_search) :int
  (self (:pointer "tStringList"))
  (element (:pointer "path"))
  (left :int)
  (right :int))

(cffi:defcfun ("_wrap_tStringList_binary_search_multi" tStringList_binary_search_multi) :int
  (self (:pointer "tStringList"))
  (element (:pointer "path"))
  (last (:pointer "irr::s32 *")))

(cffi:defcfun ("_wrap_tStringList_linear_search" tStringList_linear_search) :int
  (self (:pointer "tStringList"))
  (element (:pointer "path")))

(cffi:defcfun ("_wrap_tStringList_linear_reverse_search" tStringList_linear_reverse_search) :int
  (self (:pointer "tStringList"))
  (element (:pointer "path")))

(cffi:defcfun ("_wrap_tStringList_erase__SWIG_0" tStringList_erase) :void
  (self (:pointer "tStringList"))
  (index :uint))

(cffi:defcfun ("_wrap_tStringList_erase__SWIG_1" tStringList_erase) :void
  (self (:pointer "tStringList"))
  (index :uint)
  (count :int))

(cffi:defcfun ("_wrap_tStringList_set_sorted" tStringList_set_sorted) :void
  (self (:pointer "tStringList"))
  (_is_sorted :bool))

(cffi:defcfun ("_wrap_tStringList_swap" tStringList_swap) :void
  (self (:pointer "tStringList"))
  (other (:pointer "tStringList")))

(cffi:defcfun ("_wrap_new_tTexArray__SWIG_0" new_tTexArray) (:pointer "tTexArray"))

(cffi:defcfun ("_wrap_new_tTexArray__SWIG_1" new_tTexArray) (:pointer "tTexArray")
  (start_count :uint))

(cffi:defcfun ("_wrap_new_tTexArray__SWIG_2" new_tTexArray) (:pointer "tTexArray")
  (other (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_delete_tTexArray" delete_tTexArray) :void
  (self (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray_reallocate__SWIG_0" tTexArray_reallocate) :void
  (self (:pointer "tTexArray"))
  (new_size :uint)
  (canShrink :bool))

(cffi:defcfun ("_wrap_tTexArray_reallocate__SWIG_1" tTexArray_reallocate) :void
  (self (:pointer "tTexArray"))
  (new_size :uint))

(cffi:defcfun ("_wrap_tTexArray_setAllocStrategy__SWIG_0" tTexArray_setAllocStrategy) :void
  (self (:pointer "tTexArray"))
  (newStrategy :enum))

(cffi:defcfun ("_wrap_tTexArray_setAllocStrategy__SWIG_1" tTexArray_setAllocStrategy) :void
  (self (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray_push_back" tTexArray_push_back) :void
  (self (:pointer "tTexArray"))
  (element (:pointer "irr::video::ITexture **")))

(cffi:defcfun ("_wrap_tTexArray_push_front" tTexArray_push_front) :void
  (self (:pointer "tTexArray"))
  (element (:pointer "irr::video::ITexture **")))

(cffi:defcfun ("_wrap_tTexArray_insert__SWIG_0" tTexArray_insert) :void
  (self (:pointer "tTexArray"))
  (element (:pointer "irr::video::ITexture **"))
  (index :uint))

(cffi:defcfun ("_wrap_tTexArray_insert__SWIG_1" tTexArray_insert) :void
  (self (:pointer "tTexArray"))
  (element (:pointer "irr::video::ITexture **")))

(cffi:defcfun ("_wrap_tTexArray_clear" tTexArray_clear) :void
  (self (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray_set_pointer__SWIG_0" tTexArray_set_pointer) :void
  (self (:pointer "tTexArray"))
  (newPointer (:pointer "irr::video::ITexture **"))
  (size :uint)
  (_is_sorted :bool)
  (_free_when_destroyed :bool))

(cffi:defcfun ("_wrap_tTexArray_set_pointer__SWIG_1" tTexArray_set_pointer) :void
  (self (:pointer "tTexArray"))
  (newPointer (:pointer "irr::video::ITexture **"))
  (size :uint)
  (_is_sorted :bool))

(cffi:defcfun ("_wrap_tTexArray_set_pointer__SWIG_2" tTexArray_set_pointer) :void
  (self (:pointer "tTexArray"))
  (newPointer (:pointer "irr::video::ITexture **"))
  (size :uint))

(cffi:defcfun ("_wrap_tTexArray_set_free_when_destroyed" tTexArray_set_free_when_destroyed) :void
  (self (:pointer "tTexArray"))
  (f :bool))

(cffi:defcfun ("_wrap_tTexArray_set_used" tTexArray_set_used) :void
  (self (:pointer "tTexArray"))
  (usedNow :uint))

(cffi:defcfun ("_wrap_tTexArray___assign__" tTexArray___assign__) (:reference "tTexArray")
  (self (:pointer "tTexArray"))
  (other (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray___eq__" tTexArray___eq__) :bool
  (self (:pointer "tTexArray"))
  (other (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray___ne__" tTexArray___ne__) :bool
  (self (:pointer "tTexArray"))
  (other (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray___aref____SWIG_0" tTexArray___aref__) (:reference "irr::video::ITexture **")
  (self (:pointer "tTexArray"))
  (index :uint))

(cffi:defcfun ("_wrap_tTexArray___aref____SWIG_1" tTexArray___aref__) (:reference "irr::video::ITexture **")
  (self (:pointer "tTexArray"))
  (index :uint))

(cffi:defcfun ("_wrap_tTexArray_getLast__SWIG_0" tTexArray_getLast) (:reference "irr::video::ITexture **")
  (self (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray_getLast__SWIG_1" tTexArray_getLast) (:reference "irr::video::ITexture **")
  (self (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray_pointer" tTexArray_pointer) (:pointer "irr::video::ITexture **")
  (self (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray_const_pointer" tTexArray_const_pointer) (:pointer "irr::video::ITexture **")
  (self (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray_size" tTexArray_size) :uint
  (self (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray_allocated_size" tTexArray_allocated_size) :uint
  (self (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray_empty" tTexArray_empty) :bool
  (self (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray_sort" tTexArray_sort) :void
  (self (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_tTexArray_binary_search__SWIG_0" tTexArray_binary_search) :int
  (self (:pointer "tTexArray"))
  (element (:pointer "irr::video::ITexture **")))

(cffi:defcfun ("_wrap_tTexArray_binary_search__SWIG_1" tTexArray_binary_search) :int
  (self (:pointer "tTexArray"))
  (element (:pointer "irr::video::ITexture **")))

(cffi:defcfun ("_wrap_tTexArray_binary_search__SWIG_2" tTexArray_binary_search) :int
  (self (:pointer "tTexArray"))
  (element (:pointer "irr::video::ITexture **"))
  (left :int)
  (right :int))

(cffi:defcfun ("_wrap_tTexArray_binary_search_multi" tTexArray_binary_search_multi) :int
  (self (:pointer "tTexArray"))
  (element (:pointer "irr::video::ITexture **"))
  (last (:pointer "irr::s32 *")))

(cffi:defcfun ("_wrap_tTexArray_linear_search" tTexArray_linear_search) :int
  (self (:pointer "tTexArray"))
  (element (:pointer "irr::video::ITexture **")))

(cffi:defcfun ("_wrap_tTexArray_linear_reverse_search" tTexArray_linear_reverse_search) :int
  (self (:pointer "tTexArray"))
  (element (:pointer "irr::video::ITexture **")))

(cffi:defcfun ("_wrap_tTexArray_erase__SWIG_0" tTexArray_erase) :void
  (self (:pointer "tTexArray"))
  (index :uint))

(cffi:defcfun ("_wrap_tTexArray_erase__SWIG_1" tTexArray_erase) :void
  (self (:pointer "tTexArray"))
  (index :uint)
  (count :int))

(cffi:defcfun ("_wrap_tTexArray_set_sorted" tTexArray_set_sorted) :void
  (self (:pointer "tTexArray"))
  (_is_sorted :bool))

(cffi:defcfun ("_wrap_tTexArray_swap" tTexArray_swap) :void
  (self (:pointer "tTexArray"))
  (other (:pointer "tTexArray")))

(cffi:defcfun ("_wrap_new_ISceneNodeList__SWIG_0" new_ISceneNodeList) (:pointer "ISceneNodeList"))

(cffi:defcfun ("_wrap_new_ISceneNodeList__SWIG_1" new_ISceneNodeList) (:pointer "ISceneNodeList")
  (other (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_delete_ISceneNodeList" delete_ISceneNodeList) :void
  (self (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList___assign__" ISceneNodeList___assign__) :void
  (self (:pointer "ISceneNodeList"))
  (other (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList_size" ISceneNodeList_size) :uint
  (self (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList_getSize" ISceneNodeList_getSize) :uint
  (self (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList_clear" ISceneNodeList_clear) :void
  (self (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList_empty" ISceneNodeList_empty) :bool
  (self (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList_push_back" ISceneNodeList_push_back) :void
  (self (:pointer "ISceneNodeList"))
  (element (:pointer "irr::scene::ISceneNode **")))

(cffi:defcfun ("_wrap_ISceneNodeList_push_front" ISceneNodeList_push_front) :void
  (self (:pointer "ISceneNodeList"))
  (element (:pointer "irr::scene::ISceneNode **")))

(cffi:defcfun ("_wrap_ISceneNodeList_begin__SWIG_0" ISceneNodeList_begin) (:by-value "core::list< irr::scene::ISceneNode * >::Iterator")
  (self (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList_begin__SWIG_1" ISceneNodeList_begin) (:by-value "core::list< irr::scene::ISceneNode * >::ConstIterator")
  (self (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList_end__SWIG_0" ISceneNodeList_end) (:by-value "core::list< irr::scene::ISceneNode * >::Iterator")
  (self (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList_end__SWIG_1" ISceneNodeList_end) (:by-value "core::list< irr::scene::ISceneNode * >::ConstIterator")
  (self (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList_getLast__SWIG_0" ISceneNodeList_getLast) (:by-value "core::list< irr::scene::ISceneNode * >::Iterator")
  (self (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList_getLast__SWIG_1" ISceneNodeList_getLast) (:by-value "core::list< irr::scene::ISceneNode * >::ConstIterator")
  (self (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_ISceneNodeList_insert_after" ISceneNodeList_insert_after) :void
  (self (:pointer "ISceneNodeList"))
  (it (:pointer "core::list< irr::scene::ISceneNode * >::Iterator *"))
  (element (:pointer "irr::scene::ISceneNode **")))

(cffi:defcfun ("_wrap_ISceneNodeList_insert_before" ISceneNodeList_insert_before) :void
  (self (:pointer "ISceneNodeList"))
  (it (:pointer "core::list< irr::scene::ISceneNode * >::Iterator *"))
  (element (:pointer "irr::scene::ISceneNode **")))

(cffi:defcfun ("_wrap_ISceneNodeList_erase" ISceneNodeList_erase) (:by-value "core::list< irr::scene::ISceneNode * >::Iterator")
  (self (:pointer "ISceneNodeList"))
  (it (:pointer "core::list< irr::scene::ISceneNode * >::Iterator *")))

(cffi:defcfun ("_wrap_ISceneNodeList_swap" ISceneNodeList_swap) :void
  (self (:pointer "ISceneNodeList"))
  (other (:pointer "ISceneNodeList")))

(cffi:defcfun ("_wrap_new_ISceneNodeAnimatorList__SWIG_0" new_ISceneNodeAnimatorList) (:pointer "ISceneNodeAnimatorList"))

(cffi:defcfun ("_wrap_new_ISceneNodeAnimatorList__SWIG_1" new_ISceneNodeAnimatorList) (:pointer "ISceneNodeAnimatorList")
  (other (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_delete_ISceneNodeAnimatorList" delete_ISceneNodeAnimatorList) :void
  (self (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList___assign__" ISceneNodeAnimatorList___assign__) :void
  (self (:pointer "ISceneNodeAnimatorList"))
  (other (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_size" ISceneNodeAnimatorList_size) :uint
  (self (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_getSize" ISceneNodeAnimatorList_getSize) :uint
  (self (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_clear" ISceneNodeAnimatorList_clear) :void
  (self (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_empty" ISceneNodeAnimatorList_empty) :bool
  (self (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_push_back" ISceneNodeAnimatorList_push_back) :void
  (self (:pointer "ISceneNodeAnimatorList"))
  (element (:pointer "irr::scene::ISceneNodeAnimator **")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_push_front" ISceneNodeAnimatorList_push_front) :void
  (self (:pointer "ISceneNodeAnimatorList"))
  (element (:pointer "irr::scene::ISceneNodeAnimator **")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_begin__SWIG_0" ISceneNodeAnimatorList_begin) (:by-value "core::list< irr::scene::ISceneNodeAnimator * >::Iterator")
  (self (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_begin__SWIG_1" ISceneNodeAnimatorList_begin) (:by-value "core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator")
  (self (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_end__SWIG_0" ISceneNodeAnimatorList_end) (:by-value "core::list< irr::scene::ISceneNodeAnimator * >::Iterator")
  (self (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_end__SWIG_1" ISceneNodeAnimatorList_end) (:by-value "core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator")
  (self (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_getLast__SWIG_0" ISceneNodeAnimatorList_getLast) (:by-value "core::list< irr::scene::ISceneNodeAnimator * >::Iterator")
  (self (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_getLast__SWIG_1" ISceneNodeAnimatorList_getLast) (:by-value "core::list< irr::scene::ISceneNodeAnimator * >::ConstIterator")
  (self (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_insert_after" ISceneNodeAnimatorList_insert_after) :void
  (self (:pointer "ISceneNodeAnimatorList"))
  (it (:pointer "core::list< irr::scene::ISceneNodeAnimator * >::Iterator *"))
  (element (:pointer "irr::scene::ISceneNodeAnimator **")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_insert_before" ISceneNodeAnimatorList_insert_before) :void
  (self (:pointer "ISceneNodeAnimatorList"))
  (it (:pointer "core::list< irr::scene::ISceneNodeAnimator * >::Iterator *"))
  (element (:pointer "irr::scene::ISceneNodeAnimator **")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_erase" ISceneNodeAnimatorList_erase) (:by-value "core::list< irr::scene::ISceneNodeAnimator * >::Iterator")
  (self (:pointer "ISceneNodeAnimatorList"))
  (it (:pointer "core::list< irr::scene::ISceneNodeAnimator * >::Iterator *")))

(cffi:defcfun ("_wrap_ISceneNodeAnimatorList_swap" ISceneNodeAnimatorList_swap) :void
  (self (:pointer "ISceneNodeAnimatorList"))
  (other (:pointer "ISceneNodeAnimatorList")))

(cffi:defcfun ("_wrap_new_aabbox3df__SWIG_0" new_aabbox3df) (:pointer "aabbox3df"))

(cffi:defcfun ("_wrap_new_aabbox3df__SWIG_1" new_aabbox3df) (:pointer "aabbox3df")
  (min (:pointer "vector3df"))
  (max (:pointer "vector3df")))

(cffi:defcfun ("_wrap_new_aabbox3df__SWIG_2" new_aabbox3df) (:pointer "aabbox3df")
  (init (:pointer "vector3df")))

(cffi:defcfun ("_wrap_new_aabbox3df__SWIG_3" new_aabbox3df) (:pointer "aabbox3df")
  (minx :float)
  (miny :float)
  (minz :float)
  (maxx :float)
  (maxy :float)
  (maxz :float))

(cffi:defcfun ("_wrap_aabbox3df___eq__" aabbox3df___eq__) :bool
  (self (:pointer "aabbox3df"))
  (other (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df___ne__" aabbox3df___ne__) :bool
  (self (:pointer "aabbox3df"))
  (other (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_reset__SWIG_0" aabbox3df_reset) :void
  (self (:pointer "aabbox3df"))
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("_wrap_aabbox3df_reset__SWIG_1" aabbox3df_reset) :void
  (self (:pointer "aabbox3df"))
  (initValue (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_reset__SWIG_2" aabbox3df_reset) :void
  (self (:pointer "aabbox3df"))
  (initValue (:pointer "vector3df")))

(cffi:defcfun ("_wrap_aabbox3df_addInternalPoint__SWIG_0" aabbox3df_addInternalPoint) :void
  (self (:pointer "aabbox3df"))
  (p (:pointer "vector3df")))

(cffi:defcfun ("_wrap_aabbox3df_addInternalBox" aabbox3df_addInternalBox) :void
  (self (:pointer "aabbox3df"))
  (b (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_addInternalPoint__SWIG_1" aabbox3df_addInternalPoint) :void
  (self (:pointer "aabbox3df"))
  (x :float)
  (y :float)
  (z :float))

(cffi:defcfun ("_wrap_aabbox3df_getCenter" aabbox3df_getCenter) (:by-value "vector3df")
  (self (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_getExtent" aabbox3df_getExtent) (:by-value "vector3df")
  (self (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_isEmpty" aabbox3df_isEmpty) :bool
  (self (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_getVolume" aabbox3df_getVolume) :float
  (self (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_getArea" aabbox3df_getArea) :float
  (self (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_getEdges" aabbox3df_getEdges) :void
  (self (:pointer "aabbox3df"))
  (edges (:pointer "vector3df")))

(cffi:defcfun ("_wrap_aabbox3df_repair" aabbox3df_repair) :void
  (self (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_getInterpolated" aabbox3df_getInterpolated) (:by-value "aabbox3df")
  (self (:pointer "aabbox3df"))
  (other (:pointer "aabbox3df"))
  (d :float))

(cffi:defcfun ("_wrap_aabbox3df_isPointInside" aabbox3df_isPointInside) :bool
  (self (:pointer "aabbox3df"))
  (p (:pointer "vector3df")))

(cffi:defcfun ("_wrap_aabbox3df_isPointTotalInside" aabbox3df_isPointTotalInside) :bool
  (self (:pointer "aabbox3df"))
  (p (:pointer "vector3df")))

(cffi:defcfun ("_wrap_aabbox3df_isFullInside" aabbox3df_isFullInside) :bool
  (self (:pointer "aabbox3df"))
  (other (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_intersectsWithBox" aabbox3df_intersectsWithBox) :bool
  (self (:pointer "aabbox3df"))
  (other (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_intersectsWithLine__SWIG_0" aabbox3df_intersectsWithLine) :bool
  (self (:pointer "aabbox3df"))
  (line (:pointer "line3df")))

(cffi:defcfun ("_wrap_aabbox3df_intersectsWithLine__SWIG_1" aabbox3df_intersectsWithLine) :bool
  (self (:pointer "aabbox3df"))
  (linemiddle (:pointer "vector3df"))
  (linevect (:pointer "vector3df"))
  (halflength :float))

(cffi:defcfun ("_wrap_aabbox3df_classifyPlaneRelation" aabbox3df_classifyPlaneRelation) :enum
  (self (:pointer "aabbox3df"))
  (plane (:pointer "plane3df")))

(cffi:defcfun ("_wrap_aabbox3df_MinEdge_set" aabbox3df_MinEdge_set) :void
  (self (:pointer "aabbox3df"))
  (MinEdge (:pointer "vector3df")))

(cffi:defcfun ("_wrap_aabbox3df_MinEdge_get" aabbox3df_MinEdge_get) (:pointer "vector3df")
  (self (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_aabbox3df_MaxEdge_set" aabbox3df_MaxEdge_set) :void
  (self (:pointer "aabbox3df"))
  (MaxEdge (:pointer "vector3df")))

(cffi:defcfun ("_wrap_aabbox3df_MaxEdge_get" aabbox3df_MaxEdge_get) (:pointer "vector3df")
  (self (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_delete_aabbox3df" delete_aabbox3df) :void
  (self (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_new_aabbox3di__SWIG_0" new_aabbox3di) (:pointer "aabbox3di"))

(cffi:defcfun ("_wrap_new_aabbox3di__SWIG_1" new_aabbox3di) (:pointer "aabbox3di")
  (min (:pointer "vector3di"))
  (max (:pointer "vector3di")))

(cffi:defcfun ("_wrap_new_aabbox3di__SWIG_2" new_aabbox3di) (:pointer "aabbox3di")
  (init (:pointer "vector3di")))

(cffi:defcfun ("_wrap_new_aabbox3di__SWIG_3" new_aabbox3di) (:pointer "aabbox3di")
  (minx :int)
  (miny :int)
  (minz :int)
  (maxx :int)
  (maxy :int)
  (maxz :int))

(cffi:defcfun ("_wrap_aabbox3di___eq__" aabbox3di___eq__) :bool
  (self (:pointer "aabbox3di"))
  (other (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di___ne__" aabbox3di___ne__) :bool
  (self (:pointer "aabbox3di"))
  (other (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_reset__SWIG_0" aabbox3di_reset) :void
  (self (:pointer "aabbox3di"))
  (x :int)
  (y :int)
  (z :int))

(cffi:defcfun ("_wrap_aabbox3di_reset__SWIG_1" aabbox3di_reset) :void
  (self (:pointer "aabbox3di"))
  (initValue (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_reset__SWIG_2" aabbox3di_reset) :void
  (self (:pointer "aabbox3di"))
  (initValue (:pointer "vector3di")))

(cffi:defcfun ("_wrap_aabbox3di_addInternalPoint__SWIG_0" aabbox3di_addInternalPoint) :void
  (self (:pointer "aabbox3di"))
  (p (:pointer "vector3di")))

(cffi:defcfun ("_wrap_aabbox3di_addInternalBox" aabbox3di_addInternalBox) :void
  (self (:pointer "aabbox3di"))
  (b (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_addInternalPoint__SWIG_1" aabbox3di_addInternalPoint) :void
  (self (:pointer "aabbox3di"))
  (x :int)
  (y :int)
  (z :int))

(cffi:defcfun ("_wrap_aabbox3di_getCenter" aabbox3di_getCenter) (:by-value "vector3di")
  (self (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_getExtent" aabbox3di_getExtent) (:by-value "vector3di")
  (self (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_isEmpty" aabbox3di_isEmpty) :bool
  (self (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_getVolume" aabbox3di_getVolume) :int
  (self (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_getArea" aabbox3di_getArea) :int
  (self (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_getEdges" aabbox3di_getEdges) :void
  (self (:pointer "aabbox3di"))
  (edges (:pointer "vector3di")))

(cffi:defcfun ("_wrap_aabbox3di_repair" aabbox3di_repair) :void
  (self (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_getInterpolated" aabbox3di_getInterpolated) (:by-value "aabbox3di")
  (self (:pointer "aabbox3di"))
  (other (:pointer "aabbox3di"))
  (d :float))

(cffi:defcfun ("_wrap_aabbox3di_isPointInside" aabbox3di_isPointInside) :bool
  (self (:pointer "aabbox3di"))
  (p (:pointer "vector3di")))

(cffi:defcfun ("_wrap_aabbox3di_isPointTotalInside" aabbox3di_isPointTotalInside) :bool
  (self (:pointer "aabbox3di"))
  (p (:pointer "vector3di")))

(cffi:defcfun ("_wrap_aabbox3di_isFullInside" aabbox3di_isFullInside) :bool
  (self (:pointer "aabbox3di"))
  (other (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_intersectsWithBox" aabbox3di_intersectsWithBox) :bool
  (self (:pointer "aabbox3di"))
  (other (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_intersectsWithLine__SWIG_0" aabbox3di_intersectsWithLine) :bool
  (self (:pointer "aabbox3di"))
  (line (:pointer "line3di")))

(cffi:defcfun ("_wrap_aabbox3di_intersectsWithLine__SWIG_1" aabbox3di_intersectsWithLine) :bool
  (self (:pointer "aabbox3di"))
  (linemiddle (:pointer "vector3di"))
  (linevect (:pointer "vector3di"))
  (halflength :int))

(cffi:defcfun ("_wrap_aabbox3di_classifyPlaneRelation" aabbox3di_classifyPlaneRelation) :enum
  (self (:pointer "aabbox3di"))
  (plane (:pointer "plane3di")))

(cffi:defcfun ("_wrap_aabbox3di_MinEdge_set" aabbox3di_MinEdge_set) :void
  (self (:pointer "aabbox3di"))
  (MinEdge (:pointer "vector3di")))

(cffi:defcfun ("_wrap_aabbox3di_MinEdge_get" aabbox3di_MinEdge_get) (:pointer "vector3di")
  (self (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_aabbox3di_MaxEdge_set" aabbox3di_MaxEdge_set) :void
  (self (:pointer "aabbox3di"))
  (MaxEdge (:pointer "vector3di")))

(cffi:defcfun ("_wrap_aabbox3di_MaxEdge_get" aabbox3di_MaxEdge_get) (:pointer "vector3di")
  (self (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_delete_aabbox3di" delete_aabbox3di) :void
  (self (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_new_dimension2df__SWIG_0" new_dimension2df) (:pointer "dimension2df"))

(cffi:defcfun ("_wrap_new_dimension2df__SWIG_1" new_dimension2df) (:pointer "dimension2df")
  (width :float-ref)
  (height :float-ref))

(cffi:defcfun ("_wrap_new_dimension2df__SWIG_2" new_dimension2df) (:pointer "dimension2df")
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_dimension2df___eq____SWIG_0" dimension2df___eq__) :bool
  (self (:pointer "dimension2df"))
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_dimension2df___ne____SWIG_0" dimension2df___ne__) :bool
  (self (:pointer "dimension2df"))
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_dimension2df___eq____SWIG_1" dimension2df___eq__) :bool
  (self (:pointer "dimension2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_dimension2df___ne____SWIG_1" dimension2df___ne__) :bool
  (self (:pointer "dimension2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_dimension2df_set" dimension2df_set) (:reference "dimension2df")
  (self (:pointer "dimension2df"))
  (width :float-ref)
  (height :float-ref))

(cffi:defcfun ("_wrap_dimension2df___div_assign__" dimension2df___div_assign__) (:reference "dimension2df")
  (self (:pointer "dimension2df"))
  (scale :float-ref))

(cffi:defcfun ("_wrap_dimension2df___div__" dimension2df___div__) (:by-value "dimension2df")
  (self (:pointer "dimension2df"))
  (scale :float-ref))

(cffi:defcfun ("_wrap_dimension2df___mul_assign__" dimension2df___mul_assign__) (:reference "dimension2df")
  (self (:pointer "dimension2df"))
  (scale :float-ref))

(cffi:defcfun ("_wrap_dimension2df___mul__" dimension2df___mul__) (:by-value "dimension2df")
  (self (:pointer "dimension2df"))
  (scale :float-ref))

(cffi:defcfun ("_wrap_dimension2df___add_assign__" dimension2df___add_assign__) (:reference "dimension2df")
  (self (:pointer "dimension2df"))
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_dimension2df___add__" dimension2df___add__) (:by-value "dimension2df")
  (self (:pointer "dimension2df"))
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_dimension2df___sub_assign__" dimension2df___sub_assign__) (:reference "dimension2df")
  (self (:pointer "dimension2df"))
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_dimension2df___sub__" dimension2df___sub__) (:by-value "dimension2df")
  (self (:pointer "dimension2df"))
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_dimension2df_getArea" dimension2df_getArea) :float
  (self (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_dimension2df_getOptimalSize__SWIG_0" dimension2df_getOptimalSize) (:by-value "dimension2df")
  (self (:pointer "dimension2df"))
  (requirePowerOfTwo :bool)
  (requireSquare :bool)
  (larger :bool)
  (maxValue :uint))

(cffi:defcfun ("_wrap_dimension2df_getOptimalSize__SWIG_1" dimension2df_getOptimalSize) (:by-value "dimension2df")
  (self (:pointer "dimension2df"))
  (requirePowerOfTwo :bool)
  (requireSquare :bool)
  (larger :bool))

(cffi:defcfun ("_wrap_dimension2df_getOptimalSize__SWIG_2" dimension2df_getOptimalSize) (:by-value "dimension2df")
  (self (:pointer "dimension2df"))
  (requirePowerOfTwo :bool)
  (requireSquare :bool))

(cffi:defcfun ("_wrap_dimension2df_getOptimalSize__SWIG_3" dimension2df_getOptimalSize) (:by-value "dimension2df")
  (self (:pointer "dimension2df"))
  (requirePowerOfTwo :bool))

(cffi:defcfun ("_wrap_dimension2df_getOptimalSize__SWIG_4" dimension2df_getOptimalSize) (:by-value "dimension2df")
  (self (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_dimension2df_getInterpolated" dimension2df_getInterpolated) (:by-value "dimension2df")
  (self (:pointer "dimension2df"))
  (other (:pointer "dimension2df"))
  (d :float))

(cffi:defcfun ("_wrap_dimension2df_Width_set" dimension2df_Width_set) :void
  (self (:pointer "dimension2df"))
  (Width :float))

(cffi:defcfun ("_wrap_dimension2df_Width_get" dimension2df_Width_get) :float
  (self (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_dimension2df_Height_set" dimension2df_Height_set) :void
  (self (:pointer "dimension2df"))
  (Height :float))

(cffi:defcfun ("_wrap_dimension2df_Height_get" dimension2df_Height_get) :float
  (self (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_delete_dimension2df" delete_dimension2df) :void
  (self (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_new_dimension2du__SWIG_0" new_dimension2du) (:pointer "dimension2du"))

(cffi:defcfun ("_wrap_new_dimension2du__SWIG_1" new_dimension2du) (:pointer "dimension2du")
  (width :uint-ref)
  (height :uint-ref))

(cffi:defcfun ("_wrap_new_dimension2du__SWIG_2" new_dimension2du) (:pointer "dimension2du")
  (other (:pointer "irr::core::vector2d< unsigned int > *")))

(cffi:defcfun ("_wrap_dimension2du___eq____SWIG_0" dimension2du___eq__) :bool
  (self (:pointer "dimension2du"))
  (other (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_dimension2du___ne____SWIG_0" dimension2du___ne__) :bool
  (self (:pointer "dimension2du"))
  (other (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_dimension2du___eq____SWIG_1" dimension2du___eq__) :bool
  (self (:pointer "dimension2du"))
  (other (:pointer "irr::core::vector2d< unsigned int > *")))

(cffi:defcfun ("_wrap_dimension2du___ne____SWIG_1" dimension2du___ne__) :bool
  (self (:pointer "dimension2du"))
  (other (:pointer "irr::core::vector2d< unsigned int > *")))

(cffi:defcfun ("_wrap_dimension2du_set" dimension2du_set) (:reference "dimension2du")
  (self (:pointer "dimension2du"))
  (width :uint-ref)
  (height :uint-ref))

(cffi:defcfun ("_wrap_dimension2du___div_assign__" dimension2du___div_assign__) (:reference "dimension2du")
  (self (:pointer "dimension2du"))
  (scale :uint-ref))

(cffi:defcfun ("_wrap_dimension2du___div__" dimension2du___div__) (:by-value "dimension2du")
  (self (:pointer "dimension2du"))
  (scale :uint-ref))

(cffi:defcfun ("_wrap_dimension2du___mul_assign__" dimension2du___mul_assign__) (:reference "dimension2du")
  (self (:pointer "dimension2du"))
  (scale :uint-ref))

(cffi:defcfun ("_wrap_dimension2du___mul__" dimension2du___mul__) (:by-value "dimension2du")
  (self (:pointer "dimension2du"))
  (scale :uint-ref))

(cffi:defcfun ("_wrap_dimension2du___add_assign__" dimension2du___add_assign__) (:reference "dimension2du")
  (self (:pointer "dimension2du"))
  (other (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_dimension2du___add__" dimension2du___add__) (:by-value "dimension2du")
  (self (:pointer "dimension2du"))
  (other (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_dimension2du___sub_assign__" dimension2du___sub_assign__) (:reference "dimension2du")
  (self (:pointer "dimension2du"))
  (other (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_dimension2du___sub__" dimension2du___sub__) (:by-value "dimension2du")
  (self (:pointer "dimension2du"))
  (other (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_dimension2du_getArea" dimension2du_getArea) :uint
  (self (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_dimension2du_getOptimalSize__SWIG_0" dimension2du_getOptimalSize) (:by-value "dimension2du")
  (self (:pointer "dimension2du"))
  (requirePowerOfTwo :bool)
  (requireSquare :bool)
  (larger :bool)
  (maxValue :uint))

(cffi:defcfun ("_wrap_dimension2du_getOptimalSize__SWIG_1" dimension2du_getOptimalSize) (:by-value "dimension2du")
  (self (:pointer "dimension2du"))
  (requirePowerOfTwo :bool)
  (requireSquare :bool)
  (larger :bool))

(cffi:defcfun ("_wrap_dimension2du_getOptimalSize__SWIG_2" dimension2du_getOptimalSize) (:by-value "dimension2du")
  (self (:pointer "dimension2du"))
  (requirePowerOfTwo :bool)
  (requireSquare :bool))

(cffi:defcfun ("_wrap_dimension2du_getOptimalSize__SWIG_3" dimension2du_getOptimalSize) (:by-value "dimension2du")
  (self (:pointer "dimension2du"))
  (requirePowerOfTwo :bool))

(cffi:defcfun ("_wrap_dimension2du_getOptimalSize__SWIG_4" dimension2du_getOptimalSize) (:by-value "dimension2du")
  (self (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_dimension2du_getInterpolated" dimension2du_getInterpolated) (:by-value "dimension2du")
  (self (:pointer "dimension2du"))
  (other (:pointer "dimension2du"))
  (d :float))

(cffi:defcfun ("_wrap_dimension2du_Width_set" dimension2du_Width_set) :void
  (self (:pointer "dimension2du"))
  (Width :uint))

(cffi:defcfun ("_wrap_dimension2du_Width_get" dimension2du_Width_get) :uint
  (self (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_dimension2du_Height_set" dimension2du_Height_set) :void
  (self (:pointer "dimension2du"))
  (Height :uint))

(cffi:defcfun ("_wrap_dimension2du_Height_get" dimension2du_Height_get) :uint
  (self (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_delete_dimension2du" delete_dimension2du) :void
  (self (:pointer "dimension2du")))

(cffi:defcfun ("_wrap_new_dimension2di__SWIG_0" new_dimension2di) (:pointer "dimension2di"))

(cffi:defcfun ("_wrap_new_dimension2di__SWIG_1" new_dimension2di) (:pointer "dimension2di")
  (width :int-ref)
  (height :int-ref))

(cffi:defcfun ("_wrap_new_dimension2di__SWIG_2" new_dimension2di) (:pointer "dimension2di")
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_dimension2di___eq____SWIG_0" dimension2di___eq__) :bool
  (self (:pointer "dimension2di"))
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_dimension2di___ne____SWIG_0" dimension2di___ne__) :bool
  (self (:pointer "dimension2di"))
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_dimension2di___eq____SWIG_1" dimension2di___eq__) :bool
  (self (:pointer "dimension2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_dimension2di___ne____SWIG_1" dimension2di___ne__) :bool
  (self (:pointer "dimension2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_dimension2di_set" dimension2di_set) (:reference "dimension2di")
  (self (:pointer "dimension2di"))
  (width :int-ref)
  (height :int-ref))

(cffi:defcfun ("_wrap_dimension2di___div_assign__" dimension2di___div_assign__) (:reference "dimension2di")
  (self (:pointer "dimension2di"))
  (scale :int-ref))

(cffi:defcfun ("_wrap_dimension2di___div__" dimension2di___div__) (:by-value "dimension2di")
  (self (:pointer "dimension2di"))
  (scale :int-ref))

(cffi:defcfun ("_wrap_dimension2di___mul_assign__" dimension2di___mul_assign__) (:reference "dimension2di")
  (self (:pointer "dimension2di"))
  (scale :int-ref))

(cffi:defcfun ("_wrap_dimension2di___mul__" dimension2di___mul__) (:by-value "dimension2di")
  (self (:pointer "dimension2di"))
  (scale :int-ref))

(cffi:defcfun ("_wrap_dimension2di___add_assign__" dimension2di___add_assign__) (:reference "dimension2di")
  (self (:pointer "dimension2di"))
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_dimension2di___add__" dimension2di___add__) (:by-value "dimension2di")
  (self (:pointer "dimension2di"))
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_dimension2di___sub_assign__" dimension2di___sub_assign__) (:reference "dimension2di")
  (self (:pointer "dimension2di"))
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_dimension2di___sub__" dimension2di___sub__) (:by-value "dimension2di")
  (self (:pointer "dimension2di"))
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_dimension2di_getArea" dimension2di_getArea) :int
  (self (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_dimension2di_getOptimalSize__SWIG_0" dimension2di_getOptimalSize) (:by-value "dimension2di")
  (self (:pointer "dimension2di"))
  (requirePowerOfTwo :bool)
  (requireSquare :bool)
  (larger :bool)
  (maxValue :uint))

(cffi:defcfun ("_wrap_dimension2di_getOptimalSize__SWIG_1" dimension2di_getOptimalSize) (:by-value "dimension2di")
  (self (:pointer "dimension2di"))
  (requirePowerOfTwo :bool)
  (requireSquare :bool)
  (larger :bool))

(cffi:defcfun ("_wrap_dimension2di_getOptimalSize__SWIG_2" dimension2di_getOptimalSize) (:by-value "dimension2di")
  (self (:pointer "dimension2di"))
  (requirePowerOfTwo :bool)
  (requireSquare :bool))

(cffi:defcfun ("_wrap_dimension2di_getOptimalSize__SWIG_3" dimension2di_getOptimalSize) (:by-value "dimension2di")
  (self (:pointer "dimension2di"))
  (requirePowerOfTwo :bool))

(cffi:defcfun ("_wrap_dimension2di_getOptimalSize__SWIG_4" dimension2di_getOptimalSize) (:by-value "dimension2di")
  (self (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_dimension2di_getInterpolated" dimension2di_getInterpolated) (:by-value "dimension2di")
  (self (:pointer "dimension2di"))
  (other (:pointer "dimension2di"))
  (d :float))

(cffi:defcfun ("_wrap_dimension2di_Width_set" dimension2di_Width_set) :void
  (self (:pointer "dimension2di"))
  (Width :int))

(cffi:defcfun ("_wrap_dimension2di_Width_get" dimension2di_Width_get) :int
  (self (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_dimension2di_Height_set" dimension2di_Height_set) :void
  (self (:pointer "dimension2di"))
  (Height :int))

(cffi:defcfun ("_wrap_dimension2di_Height_get" dimension2di_Height_get) :int
  (self (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_delete_dimension2di" delete_dimension2di) :void
  (self (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_new_line2df__SWIG_0" new_line2df) (:pointer "line2df"))

(cffi:defcfun ("_wrap_new_line2df__SWIG_1" new_line2df) (:pointer "line2df")
  (xa :float)
  (ya :float)
  (xb :float)
  (yb :float))

(cffi:defcfun ("_wrap_new_line2df__SWIG_2" new_line2df) (:pointer "line2df")
  (start (:pointer "vector2df"))
  (end (:pointer "vector2df")))

(cffi:defcfun ("_wrap_new_line2df__SWIG_3" new_line2df) (:pointer "line2df")
  (other (:pointer "line2df")))

(cffi:defcfun ("_wrap_line2df___add__" line2df___add__) (:by-value "line2df")
  (self (:pointer "line2df"))
  (point (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df___add_assign__" line2df___add_assign__) (:reference "line2df")
  (self (:pointer "line2df"))
  (point (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df___sub__" line2df___sub__) (:by-value "line2df")
  (self (:pointer "line2df"))
  (point (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df___sub_assign__" line2df___sub_assign__) (:reference "line2df")
  (self (:pointer "line2df"))
  (point (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df___eq__" line2df___eq__) :bool
  (self (:pointer "line2df"))
  (other (:pointer "line2df")))

(cffi:defcfun ("_wrap_line2df___ne__" line2df___ne__) :bool
  (self (:pointer "line2df"))
  (other (:pointer "line2df")))

(cffi:defcfun ("_wrap_line2df_setLine__SWIG_0" line2df_setLine) :void
  (self (:pointer "line2df"))
  (xa :float-ref)
  (ya :float-ref)
  (xb :float-ref)
  (yb :float-ref))

(cffi:defcfun ("_wrap_line2df_setLine__SWIG_1" line2df_setLine) :void
  (self (:pointer "line2df"))
  (nstart (:pointer "vector2df"))
  (nend (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df_setLine__SWIG_2" line2df_setLine) :void
  (self (:pointer "line2df"))
  (line (:pointer "line2df")))

(cffi:defcfun ("_wrap_line2df_getLength" line2df_getLength) :float
  (self (:pointer "line2df")))

(cffi:defcfun ("_wrap_line2df_getLengthSQ" line2df_getLengthSQ) :float
  (self (:pointer "line2df")))

(cffi:defcfun ("_wrap_line2df_getMiddle" line2df_getMiddle) (:by-value "vector2df")
  (self (:pointer "line2df")))

(cffi:defcfun ("_wrap_line2df_getVector" line2df_getVector) (:by-value "vector2df")
  (self (:pointer "line2df")))

(cffi:defcfun ("_wrap_line2df_intersectWith__SWIG_0" line2df_intersectWith) :bool
  (self (:pointer "line2df"))
  (l (:pointer "line2df"))
  (out (:pointer "vector2df"))
  (checkOnlySegments :bool))

(cffi:defcfun ("_wrap_line2df_intersectWith__SWIG_1" line2df_intersectWith) :bool
  (self (:pointer "line2df"))
  (l (:pointer "line2df"))
  (out (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df_getUnitVector" line2df_getUnitVector) (:by-value "vector2df")
  (self (:pointer "line2df")))

(cffi:defcfun ("_wrap_line2df_getAngleWith" line2df_getAngleWith) :double
  (self (:pointer "line2df"))
  (l (:pointer "line2df")))

(cffi:defcfun ("_wrap_line2df_getPointOrientation" line2df_getPointOrientation) :float
  (self (:pointer "line2df"))
  (point (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df_isPointOnLine" line2df_isPointOnLine) :bool
  (self (:pointer "line2df"))
  (point (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df_isPointBetweenStartAndEnd" line2df_isPointBetweenStartAndEnd) :bool
  (self (:pointer "line2df"))
  (point (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df_getClosestPoint__SWIG_0" line2df_getClosestPoint) (:by-value "vector2df")
  (self (:pointer "line2df"))
  (point (:pointer "vector2df"))
  (checkOnlySegments :bool))

(cffi:defcfun ("_wrap_line2df_getClosestPoint__SWIG_1" line2df_getClosestPoint) (:by-value "vector2df")
  (self (:pointer "line2df"))
  (point (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df_start_set" line2df_start_set) :void
  (self (:pointer "line2df"))
  (start (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df_start_get" line2df_start_get) (:pointer "vector2df")
  (self (:pointer "line2df")))

(cffi:defcfun ("_wrap_line2df_end_set" line2df_end_set) :void
  (self (:pointer "line2df"))
  (end (:pointer "vector2df")))

(cffi:defcfun ("_wrap_line2df_end_get" line2df_end_get) (:pointer "vector2df")
  (self (:pointer "line2df")))

(cffi:defcfun ("_wrap_delete_line2df" delete_line2df) :void
  (self (:pointer "line2df")))

(cffi:defcfun ("_wrap_new_line2di__SWIG_0" new_line2di) (:pointer "line2di"))

(cffi:defcfun ("_wrap_new_line2di__SWIG_1" new_line2di) (:pointer "line2di")
  (xa :int)
  (ya :int)
  (xb :int)
  (yb :int))

(cffi:defcfun ("_wrap_new_line2di__SWIG_2" new_line2di) (:pointer "line2di")
  (start (:pointer "vector2di"))
  (end (:pointer "vector2di")))

(cffi:defcfun ("_wrap_new_line2di__SWIG_3" new_line2di) (:pointer "line2di")
  (other (:pointer "line2di")))

(cffi:defcfun ("_wrap_line2di___add__" line2di___add__) (:by-value "line2di")
  (self (:pointer "line2di"))
  (point (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di___add_assign__" line2di___add_assign__) (:reference "line2di")
  (self (:pointer "line2di"))
  (point (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di___sub__" line2di___sub__) (:by-value "line2di")
  (self (:pointer "line2di"))
  (point (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di___sub_assign__" line2di___sub_assign__) (:reference "line2di")
  (self (:pointer "line2di"))
  (point (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di___eq__" line2di___eq__) :bool
  (self (:pointer "line2di"))
  (other (:pointer "line2di")))

(cffi:defcfun ("_wrap_line2di___ne__" line2di___ne__) :bool
  (self (:pointer "line2di"))
  (other (:pointer "line2di")))

(cffi:defcfun ("_wrap_line2di_setLine__SWIG_0" line2di_setLine) :void
  (self (:pointer "line2di"))
  (xa :int-ref)
  (ya :int-ref)
  (xb :int-ref)
  (yb :int-ref))

(cffi:defcfun ("_wrap_line2di_setLine__SWIG_1" line2di_setLine) :void
  (self (:pointer "line2di"))
  (nstart (:pointer "vector2di"))
  (nend (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di_setLine__SWIG_2" line2di_setLine) :void
  (self (:pointer "line2di"))
  (line (:pointer "line2di")))

(cffi:defcfun ("_wrap_line2di_getLength" line2di_getLength) :int
  (self (:pointer "line2di")))

(cffi:defcfun ("_wrap_line2di_getLengthSQ" line2di_getLengthSQ) :int
  (self (:pointer "line2di")))

(cffi:defcfun ("_wrap_line2di_getMiddle" line2di_getMiddle) (:by-value "vector2di")
  (self (:pointer "line2di")))

(cffi:defcfun ("_wrap_line2di_getVector" line2di_getVector) (:by-value "vector2di")
  (self (:pointer "line2di")))

(cffi:defcfun ("_wrap_line2di_intersectWith__SWIG_0" line2di_intersectWith) :bool
  (self (:pointer "line2di"))
  (l (:pointer "line2di"))
  (out (:pointer "vector2di"))
  (checkOnlySegments :bool))

(cffi:defcfun ("_wrap_line2di_intersectWith__SWIG_1" line2di_intersectWith) :bool
  (self (:pointer "line2di"))
  (l (:pointer "line2di"))
  (out (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di_getUnitVector" line2di_getUnitVector) (:by-value "vector2di")
  (self (:pointer "line2di")))

(cffi:defcfun ("_wrap_line2di_getAngleWith" line2di_getAngleWith) :double
  (self (:pointer "line2di"))
  (l (:pointer "line2di")))

(cffi:defcfun ("_wrap_line2di_getPointOrientation" line2di_getPointOrientation) :int
  (self (:pointer "line2di"))
  (point (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di_isPointOnLine" line2di_isPointOnLine) :bool
  (self (:pointer "line2di"))
  (point (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di_isPointBetweenStartAndEnd" line2di_isPointBetweenStartAndEnd) :bool
  (self (:pointer "line2di"))
  (point (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di_getClosestPoint__SWIG_0" line2di_getClosestPoint) (:by-value "vector2di")
  (self (:pointer "line2di"))
  (point (:pointer "vector2di"))
  (checkOnlySegments :bool))

(cffi:defcfun ("_wrap_line2di_getClosestPoint__SWIG_1" line2di_getClosestPoint) (:by-value "vector2di")
  (self (:pointer "line2di"))
  (point (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di_start_set" line2di_start_set) :void
  (self (:pointer "line2di"))
  (start (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di_start_get" line2di_start_get) (:pointer "vector2di")
  (self (:pointer "line2di")))

(cffi:defcfun ("_wrap_line2di_end_set" line2di_end_set) :void
  (self (:pointer "line2di"))
  (end (:pointer "vector2di")))

(cffi:defcfun ("_wrap_line2di_end_get" line2di_end_get) (:pointer "vector2di")
  (self (:pointer "line2di")))

(cffi:defcfun ("_wrap_delete_line2di" delete_line2di) :void
  (self (:pointer "line2di")))

(cffi:defcfun ("_wrap_new_line3df__SWIG_0" new_line3df) (:pointer "line3df"))

(cffi:defcfun ("_wrap_new_line3df__SWIG_1" new_line3df) (:pointer "line3df")
  (xa :float)
  (ya :float)
  (za :float)
  (xb :float)
  (yb :float)
  (zb :float))

(cffi:defcfun ("_wrap_new_line3df__SWIG_2" new_line3df) (:pointer "line3df")
  (start (:pointer "vector3df"))
  (end (:pointer "vector3df")))

(cffi:defcfun ("_wrap_line3df___add__" line3df___add__) (:by-value "line3df")
  (self (:pointer "line3df"))
  (point (:pointer "vector3df")))

(cffi:defcfun ("_wrap_line3df___add_assign__" line3df___add_assign__) (:reference "line3df")
  (self (:pointer "line3df"))
  (point (:pointer "vector3df")))

(cffi:defcfun ("_wrap_line3df___sub__" line3df___sub__) (:by-value "line3df")
  (self (:pointer "line3df"))
  (point (:pointer "vector3df")))

(cffi:defcfun ("_wrap_line3df___sub_assign__" line3df___sub_assign__) (:reference "line3df")
  (self (:pointer "line3df"))
  (point (:pointer "vector3df")))

(cffi:defcfun ("_wrap_line3df___eq__" line3df___eq__) :bool
  (self (:pointer "line3df"))
  (other (:pointer "line3df")))

(cffi:defcfun ("_wrap_line3df___ne__" line3df___ne__) :bool
  (self (:pointer "line3df"))
  (other (:pointer "line3df")))

(cffi:defcfun ("_wrap_line3df_setLine__SWIG_0" line3df_setLine) :void
  (self (:pointer "line3df"))
  (xa :float-ref)
  (ya :float-ref)
  (za :float-ref)
  (xb :float-ref)
  (yb :float-ref)
  (zb :float-ref))

(cffi:defcfun ("_wrap_line3df_setLine__SWIG_1" line3df_setLine) :void
  (self (:pointer "line3df"))
  (nstart (:pointer "vector3df"))
  (nend (:pointer "vector3df")))

(cffi:defcfun ("_wrap_line3df_setLine__SWIG_2" line3df_setLine) :void
  (self (:pointer "line3df"))
  (line (:pointer "line3df")))

(cffi:defcfun ("_wrap_line3df_getLength" line3df_getLength) :float
  (self (:pointer "line3df")))

(cffi:defcfun ("_wrap_line3df_getLengthSQ" line3df_getLengthSQ) :float
  (self (:pointer "line3df")))

(cffi:defcfun ("_wrap_line3df_getMiddle" line3df_getMiddle) (:by-value "vector3df")
  (self (:pointer "line3df")))

(cffi:defcfun ("_wrap_line3df_getVector" line3df_getVector) (:by-value "vector3df")
  (self (:pointer "line3df")))

(cffi:defcfun ("_wrap_line3df_isPointBetweenStartAndEnd" line3df_isPointBetweenStartAndEnd) :bool
  (self (:pointer "line3df"))
  (point (:pointer "vector3df")))

(cffi:defcfun ("_wrap_line3df_getClosestPoint" line3df_getClosestPoint) (:by-value "vector3df")
  (self (:pointer "line3df"))
  (point (:pointer "vector3df")))

(cffi:defcfun ("_wrap_line3df_getIntersectionWithSphere" line3df_getIntersectionWithSphere) :bool
  (self (:pointer "line3df"))
  (sorigin (:pointer "vector3df"))
  (sradius :float)
  (outdistance (:pointer "irr::f64 *")))

(cffi:defcfun ("_wrap_line3df_start_set" line3df_start_set) :void
  (self (:pointer "line3df"))
  (start (:pointer "vector3df")))

(cffi:defcfun ("_wrap_line3df_start_get" line3df_start_get) (:pointer "vector3df")
  (self (:pointer "line3df")))

(cffi:defcfun ("_wrap_line3df_end_set" line3df_end_set) :void
  (self (:pointer "line3df"))
  (end (:pointer "vector3df")))

(cffi:defcfun ("_wrap_line3df_end_get" line3df_end_get) (:pointer "vector3df")
  (self (:pointer "line3df")))

(cffi:defcfun ("_wrap_delete_line3df" delete_line3df) :void
  (self (:pointer "line3df")))

(cffi:defcfun ("_wrap_new_line3di__SWIG_0" new_line3di) (:pointer "line3di"))

(cffi:defcfun ("_wrap_new_line3di__SWIG_1" new_line3di) (:pointer "line3di")
  (xa :int)
  (ya :int)
  (za :int)
  (xb :int)
  (yb :int)
  (zb :int))

(cffi:defcfun ("_wrap_new_line3di__SWIG_2" new_line3di) (:pointer "line3di")
  (start (:pointer "vector3di"))
  (end (:pointer "vector3di")))

(cffi:defcfun ("_wrap_line3di___add__" line3di___add__) (:by-value "line3di")
  (self (:pointer "line3di"))
  (point (:pointer "vector3di")))

(cffi:defcfun ("_wrap_line3di___add_assign__" line3di___add_assign__) (:reference "line3di")
  (self (:pointer "line3di"))
  (point (:pointer "vector3di")))

(cffi:defcfun ("_wrap_line3di___sub__" line3di___sub__) (:by-value "line3di")
  (self (:pointer "line3di"))
  (point (:pointer "vector3di")))

(cffi:defcfun ("_wrap_line3di___sub_assign__" line3di___sub_assign__) (:reference "line3di")
  (self (:pointer "line3di"))
  (point (:pointer "vector3di")))

(cffi:defcfun ("_wrap_line3di___eq__" line3di___eq__) :bool
  (self (:pointer "line3di"))
  (other (:pointer "line3di")))

(cffi:defcfun ("_wrap_line3di___ne__" line3di___ne__) :bool
  (self (:pointer "line3di"))
  (other (:pointer "line3di")))

(cffi:defcfun ("_wrap_line3di_setLine__SWIG_0" line3di_setLine) :void
  (self (:pointer "line3di"))
  (xa :int-ref)
  (ya :int-ref)
  (za :int-ref)
  (xb :int-ref)
  (yb :int-ref)
  (zb :int-ref))

(cffi:defcfun ("_wrap_line3di_setLine__SWIG_1" line3di_setLine) :void
  (self (:pointer "line3di"))
  (nstart (:pointer "vector3di"))
  (nend (:pointer "vector3di")))

(cffi:defcfun ("_wrap_line3di_setLine__SWIG_2" line3di_setLine) :void
  (self (:pointer "line3di"))
  (line (:pointer "line3di")))

(cffi:defcfun ("_wrap_line3di_getLength" line3di_getLength) :int
  (self (:pointer "line3di")))

(cffi:defcfun ("_wrap_line3di_getLengthSQ" line3di_getLengthSQ) :int
  (self (:pointer "line3di")))

(cffi:defcfun ("_wrap_line3di_getMiddle" line3di_getMiddle) (:by-value "vector3di")
  (self (:pointer "line3di")))

(cffi:defcfun ("_wrap_line3di_getVector" line3di_getVector) (:by-value "vector3di")
  (self (:pointer "line3di")))

(cffi:defcfun ("_wrap_line3di_isPointBetweenStartAndEnd" line3di_isPointBetweenStartAndEnd) :bool
  (self (:pointer "line3di"))
  (point (:pointer "vector3di")))

(cffi:defcfun ("_wrap_line3di_getClosestPoint" line3di_getClosestPoint) (:by-value "vector3di")
  (self (:pointer "line3di"))
  (point (:pointer "vector3di")))

(cffi:defcfun ("_wrap_line3di_getIntersectionWithSphere" line3di_getIntersectionWithSphere) :bool
  (self (:pointer "line3di"))
  (sorigin (:pointer "vector3di"))
  (sradius :int)
  (outdistance (:pointer "irr::f64 *")))

(cffi:defcfun ("_wrap_line3di_start_set" line3di_start_set) :void
  (self (:pointer "line3di"))
  (start (:pointer "vector3di")))

(cffi:defcfun ("_wrap_line3di_start_get" line3di_start_get) (:pointer "vector3di")
  (self (:pointer "line3di")))

(cffi:defcfun ("_wrap_line3di_end_set" line3di_end_set) :void
  (self (:pointer "line3di"))
  (end (:pointer "vector3di")))

(cffi:defcfun ("_wrap_line3di_end_get" line3di_end_get) (:pointer "vector3di")
  (self (:pointer "line3di")))

(cffi:defcfun ("_wrap_delete_line3di" delete_line3di) :void
  (self (:pointer "line3di")))

(cffi:defcenum eConstructor
	(:EM4CONST_NOTHING 0)
	:EM4CONST_COPY
	:EM4CONST_IDENTITY
	:EM4CONST_TRANSPOSED
	:EM4CONST_INVERSE
	:EM4CONST_INVERSE_TRANSPOSED)

(cffi:defcfun ("_wrap_new_matrix4__SWIG_0" new_matrix4) (:pointer "matrix4")
  (constructor :enum))

(cffi:defcfun ("_wrap_new_matrix4__SWIG_1" new_matrix4) (:pointer "matrix4"))

(cffi:defcfun ("_wrap_new_matrix4__SWIG_2" new_matrix4) (:pointer "matrix4")
  (other (:pointer "matrix4"))
  (constructor :enum))

(cffi:defcfun ("_wrap_new_matrix4__SWIG_3" new_matrix4) (:pointer "matrix4")
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4___funcall____SWIG_0" matrix4___funcall__) (:reference "float *")
  (self (:pointer "matrix4"))
  (row :int)
  (col :int))

(cffi:defcfun ("_wrap_matrix4___funcall____SWIG_1" matrix4___funcall__) :float-ref
  (self (:pointer "matrix4"))
  (row :int)
  (col :int))

(cffi:defcfun ("_wrap_matrix4___aref____SWIG_0" matrix4___aref__) (:reference "float *")
  (self (:pointer "matrix4"))
  (index :uint))

(cffi:defcfun ("_wrap_matrix4___aref____SWIG_1" matrix4___aref__) :float-ref
  (self (:pointer "matrix4"))
  (index :uint))

(cffi:defcfun ("_wrap_matrix4___assign____SWIG_0" matrix4___assign__) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4___assign____SWIG_1" matrix4___assign__) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (scalar :float-ref))

(cffi:defcfun ("_wrap_matrix4_pointer__SWIG_0" matrix4_pointer) (:pointer "float *")
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_pointer__SWIG_1" matrix4_pointer) (:pointer "float *")
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4___eq__" matrix4___eq__) :bool
  (self (:pointer "matrix4"))
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4___ne__" matrix4___ne__) :bool
  (self (:pointer "matrix4"))
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4___add__" matrix4___add__) (:by-value "matrix4")
  (self (:pointer "matrix4"))
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4___add_assign__" matrix4___add_assign__) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4___sub__" matrix4___sub__) (:by-value "matrix4")
  (self (:pointer "matrix4"))
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4___sub_assign__" matrix4___sub_assign__) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_setbyproduct" matrix4_setbyproduct) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (other_a (:pointer "matrix4"))
  (other_b (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_setbyproduct_nocheck" matrix4_setbyproduct_nocheck) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (other_a (:pointer "matrix4"))
  (other_b (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4___mul____SWIG_0" matrix4___mul__) (:by-value "matrix4")
  (self (:pointer "matrix4"))
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4___mul_assign____SWIG_0" matrix4___mul_assign__) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4___mul____SWIG_1" matrix4___mul__) (:by-value "matrix4")
  (self (:pointer "matrix4"))
  (scalar :float-ref))

(cffi:defcfun ("_wrap_matrix4___mul_assign____SWIG_1" matrix4___mul_assign__) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (scalar :float-ref))

(cffi:defcfun ("_wrap_matrix4_makeIdentity" matrix4_makeIdentity) (:reference "matrix4")
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_isIdentity" matrix4_isIdentity) :bool
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_isOrthogonal" matrix4_isOrthogonal) :bool
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_isIdentity_integer_base" matrix4_isIdentity_integer_base) :bool
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_setTranslation" matrix4_setTranslation) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (translation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_getTranslation" matrix4_getTranslation) (:by-value "vector3df")
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_setInverseTranslation" matrix4_setInverseTranslation) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (translation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_setRotationRadians" matrix4_setRotationRadians) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_setRotationDegrees" matrix4_setRotationDegrees) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_getRotationDegrees" matrix4_getRotationDegrees) (:by-value "vector3df")
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_setInverseRotationRadians" matrix4_setInverseRotationRadians) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_setInverseRotationDegrees" matrix4_setInverseRotationDegrees) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (rotation (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_setRotationAxisRadians" matrix4_setRotationAxisRadians) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (angle :float-ref)
  (axis (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_setScale__SWIG_0" matrix4_setScale) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (scale (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_setScale__SWIG_1" matrix4_setScale) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (scale :float))

(cffi:defcfun ("_wrap_matrix4_getScale" matrix4_getScale) (:by-value "vector3df")
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_inverseTranslateVect" matrix4_inverseTranslateVect) :void
  (self (:pointer "matrix4"))
  (vect (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_inverseRotateVect" matrix4_inverseRotateVect) :void
  (self (:pointer "matrix4"))
  (vect (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_rotateVect__SWIG_0" matrix4_rotateVect) :void
  (self (:pointer "matrix4"))
  (vect (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_rotateVect__SWIG_1" matrix4_rotateVect) :void
  (self (:pointer "matrix4"))
  (out (:pointer "vector3df"))
  (in (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_rotateVect__SWIG_2" matrix4_rotateVect) :void
  (self (:pointer "matrix4"))
  (out (:pointer "float *"))
  (in (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_transformVect__SWIG_0" matrix4_transformVect) :void
  (self (:pointer "matrix4"))
  (vect (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_transformVect__SWIG_1" matrix4_transformVect) :void
  (self (:pointer "matrix4"))
  (out (:pointer "vector3df"))
  (in (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_transformVect__SWIG_2" matrix4_transformVect) :void
  (self (:pointer "matrix4"))
  (out (:pointer "float *"))
  (in (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_transformVec3" matrix4_transformVec3) :void
  (self (:pointer "matrix4"))
  (out (:pointer "float *"))
  (in (:pointer "float *")))

(cffi:defcfun ("_wrap_matrix4_translateVect" matrix4_translateVect) :void
  (self (:pointer "matrix4"))
  (vect (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_transformPlane__SWIG_0" matrix4_transformPlane) :void
  (self (:pointer "matrix4"))
  (plane (:pointer "plane3df")))

(cffi:defcfun ("_wrap_matrix4_transformPlane__SWIG_1" matrix4_transformPlane) :void
  (self (:pointer "matrix4"))
  (in (:pointer "plane3df"))
  (out (:pointer "plane3df")))

(cffi:defcfun ("_wrap_matrix4_transformBox" matrix4_transformBox) :void
  (self (:pointer "matrix4"))
  (box (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_matrix4_transformBoxEx" matrix4_transformBoxEx) :void
  (self (:pointer "matrix4"))
  (box (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_matrix4_multiplyWith1x4Matrix" matrix4_multiplyWith1x4Matrix) :void
  (self (:pointer "matrix4"))
  (matrix (:pointer "float *")))

(cffi:defcfun ("_wrap_matrix4_makeInverse" matrix4_makeInverse) :bool
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_getInversePrimitive" matrix4_getInversePrimitive) :bool
  (self (:pointer "matrix4"))
  (out (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_getInverse" matrix4_getInverse) :bool
  (self (:pointer "matrix4"))
  (out (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_buildProjectionMatrixPerspectiveFovRH" matrix4_buildProjectionMatrixPerspectiveFovRH) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (fieldOfViewRadians :float)
  (aspectRatio :float)
  (zNear :float)
  (zFar :float))

(cffi:defcfun ("_wrap_matrix4_buildProjectionMatrixPerspectiveFovLH" matrix4_buildProjectionMatrixPerspectiveFovLH) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (fieldOfViewRadians :float)
  (aspectRatio :float)
  (zNear :float)
  (zFar :float))

(cffi:defcfun ("_wrap_matrix4_buildProjectionMatrixPerspectiveFovInfinityLH__SWIG_0" matrix4_buildProjectionMatrixPerspectiveFovInfinityLH) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (fieldOfViewRadians :float)
  (aspectRatio :float)
  (zNear :float)
  (epsilon :float))

(cffi:defcfun ("_wrap_matrix4_buildProjectionMatrixPerspectiveFovInfinityLH__SWIG_1" matrix4_buildProjectionMatrixPerspectiveFovInfinityLH) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (fieldOfViewRadians :float)
  (aspectRatio :float)
  (zNear :float))

(cffi:defcfun ("_wrap_matrix4_buildProjectionMatrixPerspectiveRH" matrix4_buildProjectionMatrixPerspectiveRH) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (widthOfViewVolume :float)
  (heightOfViewVolume :float)
  (zNear :float)
  (zFar :float))

(cffi:defcfun ("_wrap_matrix4_buildProjectionMatrixPerspectiveLH" matrix4_buildProjectionMatrixPerspectiveLH) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (widthOfViewVolume :float)
  (heightOfViewVolume :float)
  (zNear :float)
  (zFar :float))

(cffi:defcfun ("_wrap_matrix4_buildProjectionMatrixOrthoLH" matrix4_buildProjectionMatrixOrthoLH) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (widthOfViewVolume :float)
  (heightOfViewVolume :float)
  (zNear :float)
  (zFar :float))

(cffi:defcfun ("_wrap_matrix4_buildProjectionMatrixOrthoRH" matrix4_buildProjectionMatrixOrthoRH) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (widthOfViewVolume :float)
  (heightOfViewVolume :float)
  (zNear :float)
  (zFar :float))

(cffi:defcfun ("_wrap_matrix4_buildCameraLookAtMatrixLH" matrix4_buildCameraLookAtMatrixLH) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (position (:pointer "vector3df"))
  (target (:pointer "vector3df"))
  (upVector (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_buildCameraLookAtMatrixRH" matrix4_buildCameraLookAtMatrixRH) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (position (:pointer "vector3df"))
  (target (:pointer "vector3df"))
  (upVector (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_buildShadowMatrix__SWIG_0" matrix4_buildShadowMatrix) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (light (:pointer "vector3df"))
  (plane (:pointer "plane3df"))
  (point :float))

(cffi:defcfun ("_wrap_matrix4_buildShadowMatrix__SWIG_1" matrix4_buildShadowMatrix) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (light (:pointer "vector3df"))
  (plane (:pointer "plane3df")))

(cffi:defcfun ("_wrap_matrix4_buildNDCToDCMatrix" matrix4_buildNDCToDCMatrix) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (area (:pointer "recti"))
  (zScale :float))

(cffi:defcfun ("_wrap_matrix4_interpolate" matrix4_interpolate) (:by-value "matrix4")
  (self (:pointer "matrix4"))
  (b (:pointer "matrix4"))
  (time :float))

(cffi:defcfun ("_wrap_matrix4_getTransposed__SWIG_0" matrix4_getTransposed) (:by-value "matrix4")
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_getTransposed__SWIG_1" matrix4_getTransposed) :void
  (self (:pointer "matrix4"))
  (dest (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_buildRotateFromTo" matrix4_buildRotateFromTo) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (from (:pointer "vector3df"))
  (to (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_setRotationCenter" matrix4_setRotationCenter) :void
  (self (:pointer "matrix4"))
  (center (:pointer "vector3df"))
  (translate (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_buildAxisAlignedBillboard" matrix4_buildAxisAlignedBillboard) :void
  (self (:pointer "matrix4"))
  (camPos (:pointer "vector3df"))
  (center (:pointer "vector3df"))
  (translation (:pointer "vector3df"))
  (axis (:pointer "vector3df"))
  (from (:pointer "vector3df")))

(cffi:defcfun ("_wrap_matrix4_buildTextureTransform" matrix4_buildTextureTransform) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (rotateRad :float)
  (rotatecenter (:pointer "vector2df"))
  (translate (:pointer "vector2df"))
  (scale (:pointer "vector2df")))

(cffi:defcfun ("_wrap_matrix4_setTextureRotationCenter" matrix4_setTextureRotationCenter) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (radAngle :float))

(cffi:defcfun ("_wrap_matrix4_setTextureTranslate" matrix4_setTextureTranslate) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_matrix4_setTextureTranslateTransposed" matrix4_setTextureTranslateTransposed) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_matrix4_setTextureScale" matrix4_setTextureScale) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (sx :float)
  (sy :float))

(cffi:defcfun ("_wrap_matrix4_setTextureScaleCenter" matrix4_setTextureScaleCenter) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (sx :float)
  (sy :float))

(cffi:defcfun ("_wrap_matrix4_setM" matrix4_setM) (:reference "matrix4")
  (self (:pointer "matrix4"))
  (data (:pointer "float *")))

(cffi:defcfun ("_wrap_matrix4_setDefinitelyIdentityMatrix" matrix4_setDefinitelyIdentityMatrix) :void
  (self (:pointer "matrix4"))
  (isDefinitelyIdentityMatrix :bool))

(cffi:defcfun ("_wrap_matrix4_getDefinitelyIdentityMatrix" matrix4_getDefinitelyIdentityMatrix) :bool
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_matrix4_equals__SWIG_0" matrix4_equals) :bool
  (self (:pointer "matrix4"))
  (other (:pointer "matrix4"))
  (tolerance :float))

(cffi:defcfun ("_wrap_matrix4_equals__SWIG_1" matrix4_equals) :bool
  (self (:pointer "matrix4"))
  (other (:pointer "matrix4")))

(cffi:defcfun ("_wrap_delete_matrix4" delete_matrix4) :void
  (self (:pointer "matrix4")))

(cffi:defcfun ("_wrap_new_path__SWIG_0" new_path) (:pointer "path"))

(cffi:defcfun ("_wrap_new_path__SWIG_1" new_path) (:pointer "path")
  (other (:pointer "path")))

(cffi:defcfun ("_wrap_new_path__SWIG_2" new_path) (:pointer "path")
  (number :double))

(cffi:defcfun ("_wrap_new_path__SWIG_3" new_path) (:pointer "path")
  (number :int))

(cffi:defcfun ("_wrap_new_path__SWIG_4" new_path) (:pointer "path")
  (number :uint))

(cffi:defcfun ("_wrap_new_path__SWIG_5" new_path) (:pointer "path")
  (number :long))

(cffi:defcfun ("_wrap_new_path__SWIG_6" new_path) (:pointer "path")
  (number :unsigned-long))

(cffi:defcfun ("_wrap_delete_path" delete_path) :void
  (self (:pointer "path")))

(cffi:defcfun ("_wrap_path___assign__" path___assign__) (:reference "path")
  (self (:pointer "path"))
  (other (:pointer "path")))

(cffi:defcfun ("_wrap_path___add__" path___add__) (:by-value "path")
  (self (:pointer "path"))
  (other (:pointer "path")))

(cffi:defcfun ("_wrap_path___aref____SWIG_0" path___aref__) (:reference "char *")
  (self (:pointer "path"))
  (index :uint))

(cffi:defcfun ("_wrap_path___aref____SWIG_1" path___aref__) :char-ref
  (self (:pointer "path"))
  (index :uint))

(cffi:defcfun ("_wrap_path___eq____SWIG_0" path___eq__) :bool
  (self (:pointer "path"))
  (str :string))

(cffi:defcfun ("_wrap_path___eq____SWIG_1" path___eq__) :bool
  (self (:pointer "path"))
  (other (:pointer "path")))

(cffi:defcfun ("_wrap_path___lt__" path___lt__) :bool
  (self (:pointer "path"))
  (other (:pointer "path")))

(cffi:defcfun ("_wrap_path___ne____SWIG_0" path___ne__) :bool
  (self (:pointer "path"))
  (str :string))

(cffi:defcfun ("_wrap_path___ne____SWIG_1" path___ne__) :bool
  (self (:pointer "path"))
  (other (:pointer "path")))

(cffi:defcfun ("_wrap_path_size" path_size) :uint
  (self (:pointer "path")))

(cffi:defcfun ("_wrap_path_empty" path_empty) :bool
  (self (:pointer "path")))

(cffi:defcfun ("_wrap_path_c_str" path_c_str) :string
  (self (:pointer "path")))

(cffi:defcfun ("_wrap_path_make_lower" path_make_lower) (:reference "path")
  (self (:pointer "path")))

(cffi:defcfun ("_wrap_path_make_upper" path_make_upper) (:reference "path")
  (self (:pointer "path")))

(cffi:defcfun ("_wrap_path_equals_ignore_case" path_equals_ignore_case) :bool
  (self (:pointer "path"))
  (other (:pointer "path")))

(cffi:defcfun ("_wrap_path_equals_substring_ignore_case__SWIG_0" path_equals_substring_ignore_case) :bool
  (self (:pointer "path"))
  (other (:pointer "path"))
  (sourcePos :int))

(cffi:defcfun ("_wrap_path_equals_substring_ignore_case__SWIG_1" path_equals_substring_ignore_case) :bool
  (self (:pointer "path"))
  (other (:pointer "path")))

(cffi:defcfun ("_wrap_path_lower_ignore_case" path_lower_ignore_case) :bool
  (self (:pointer "path"))
  (other (:pointer "path")))

(cffi:defcfun ("_wrap_path_equalsn__SWIG_0" path_equalsn) :bool
  (self (:pointer "path"))
  (other (:pointer "path"))
  (n :uint))

(cffi:defcfun ("_wrap_path_equalsn__SWIG_1" path_equalsn) :bool
  (self (:pointer "path"))
  (str :string)
  (n :uint))

(cffi:defcfun ("_wrap_path_append__SWIG_0" path_append) (:reference "path")
  (self (:pointer "path"))
  (character :char))

(cffi:defcfun ("_wrap_path_append__SWIG_1" path_append) (:reference "path")
  (self (:pointer "path"))
  (other :string)
  (length :uint))

(cffi:defcfun ("_wrap_path_append__SWIG_2" path_append) (:reference "path")
  (self (:pointer "path"))
  (other :string))

(cffi:defcfun ("_wrap_path_append__SWIG_3" path_append) (:reference "path")
  (self (:pointer "path"))
  (other (:pointer "path")))

(cffi:defcfun ("_wrap_path_append__SWIG_4" path_append) (:reference "path")
  (self (:pointer "path"))
  (other (:pointer "path"))
  (length :uint))

(cffi:defcfun ("_wrap_path_reserve" path_reserve) :void
  (self (:pointer "path"))
  (count :uint))

(cffi:defcfun ("_wrap_path_findFirst" path_findFirst) :int
  (self (:pointer "path"))
  (c :char))

(cffi:defcfun ("_wrap_path_findFirstChar__SWIG_0" path_findFirstChar) :int
  (self (:pointer "path"))
  (c :string)
  (count :uint))

(cffi:defcfun ("_wrap_path_findFirstChar__SWIG_1" path_findFirstChar) :int
  (self (:pointer "path"))
  (c :string))

(cffi:defcfun ("_wrap_path_findNext" path_findNext) :int
  (self (:pointer "path"))
  (c :char)
  (startPos :uint))

(cffi:defcfun ("_wrap_path_findLast__SWIG_0" path_findLast) :int
  (self (:pointer "path"))
  (c :char)
  (start :int))

(cffi:defcfun ("_wrap_path_findLast__SWIG_1" path_findLast) :int
  (self (:pointer "path"))
  (c :char))

(cffi:defcfun ("_wrap_path_findLastChar__SWIG_0" path_findLastChar) :int
  (self (:pointer "path"))
  (c :string)
  (count :uint))

(cffi:defcfun ("_wrap_path_findLastChar__SWIG_1" path_findLastChar) :int
  (self (:pointer "path"))
  (c :string))

(cffi:defcfun ("_wrap_path_subString__SWIG_0" path_subString) (:by-value "path")
  (self (:pointer "path"))
  (begin :uint)
  (length :int)
  (make_lower :bool))

(cffi:defcfun ("_wrap_path_subString__SWIG_1" path_subString) (:by-value "path")
  (self (:pointer "path"))
  (begin :uint)
  (length :int))

(cffi:defcfun ("_wrap_path___add_assign____SWIG_0" path___add_assign__) (:reference "path")
  (self (:pointer "path"))
  (c :char))

(cffi:defcfun ("_wrap_path___add_assign____SWIG_1" path___add_assign__) (:reference "path")
  (self (:pointer "path"))
  (c :string))

(cffi:defcfun ("_wrap_path___add_assign____SWIG_2" path___add_assign__) (:reference "path")
  (self (:pointer "path"))
  (other (:pointer "path")))

(cffi:defcfun ("_wrap_path___add_assign____SWIG_3" path___add_assign__) (:reference "path")
  (self (:pointer "path"))
  (i :int))

(cffi:defcfun ("_wrap_path___add_assign____SWIG_4" path___add_assign__) (:reference "path")
  (self (:pointer "path"))
  (i :uint))

(cffi:defcfun ("_wrap_path___add_assign____SWIG_5" path___add_assign__) (:reference "path")
  (self (:pointer "path"))
  (i :long))

(cffi:defcfun ("_wrap_path___add_assign____SWIG_6" path___add_assign__) (:reference "path")
  (self (:pointer "path"))
  (i :unsigned-long))

(cffi:defcfun ("_wrap_path___add_assign____SWIG_7" path___add_assign__) (:reference "path")
  (self (:pointer "path"))
  (i :double))

(cffi:defcfun ("_wrap_path___add_assign____SWIG_8" path___add_assign__) (:reference "path")
  (self (:pointer "path"))
  (i :float))

(cffi:defcfun ("_wrap_path_replace__SWIG_0" path_replace) (:reference "path")
  (self (:pointer "path"))
  (toReplace :char)
  (replaceWith :char))

(cffi:defcfun ("_wrap_path_replace__SWIG_1" path_replace) (:reference "path")
  (self (:pointer "path"))
  (toReplace (:pointer "path"))
  (replaceWith (:pointer "path")))

(cffi:defcfun ("_wrap_path_remove__SWIG_0" path_remove) (:reference "path")
  (self (:pointer "path"))
  (c :char))

(cffi:defcfun ("_wrap_path_remove__SWIG_1" path_remove) (:reference "path")
  (self (:pointer "path"))
  (toRemove (:pointer "path")))

(cffi:defcfun ("_wrap_path_removeChars" path_removeChars) (:reference "path")
  (self (:pointer "path"))
  (characters (:pointer "path")))

(cffi:defcfun ("_wrap_path_trim__SWIG_0" path_trim) (:reference "path")
  (self (:pointer "path"))
  (whitespace (:pointer "path")))

(cffi:defcfun ("_wrap_path_trim__SWIG_1" path_trim) (:reference "path")
  (self (:pointer "path")))

(cffi:defcfun ("_wrap_path_erase" path_erase) (:reference "path")
  (self (:pointer "path"))
  (index :uint))

(cffi:defcfun ("_wrap_path_validate" path_validate) (:reference "path")
  (self (:pointer "path")))

(cffi:defcfun ("_wrap_path_lastChar" path_lastChar) :char
  (self (:pointer "path")))

(cffi:defcfun ("_wrap_new_fromCString__SWIG_0" new_fromCString) (:pointer "path")
  (c :string)
  (length :uint))

(cffi:defcfun ("_wrap_new_fromCString__SWIG_1" new_fromCString) (:pointer "path")
  (c :string))

(cffi:defcfun ("_wrap_new_plane3df__SWIG_0" new_plane3df) (:pointer "plane3df"))

(cffi:defcfun ("_wrap_new_plane3df__SWIG_1" new_plane3df) (:pointer "plane3df")
  (MPoint (:pointer "vector3df"))
  (Normal (:pointer "vector3df")))

(cffi:defcfun ("_wrap_new_plane3df__SWIG_2" new_plane3df) (:pointer "plane3df")
  (px :float)
  (py :float)
  (pz :float)
  (nx :float)
  (ny :float)
  (nz :float))

(cffi:defcfun ("_wrap_new_plane3df__SWIG_3" new_plane3df) (:pointer "plane3df")
  (point1 (:pointer "vector3df"))
  (point2 (:pointer "vector3df"))
  (point3 (:pointer "vector3df")))

(cffi:defcfun ("_wrap_new_plane3df__SWIG_4" new_plane3df) (:pointer "plane3df")
  (normal (:pointer "vector3df"))
  (d :float))

(cffi:defcfun ("_wrap_plane3df___eq__" plane3df___eq__) :bool
  (self (:pointer "plane3df"))
  (other (:pointer "plane3df")))

(cffi:defcfun ("_wrap_plane3df___ne__" plane3df___ne__) :bool
  (self (:pointer "plane3df"))
  (other (:pointer "plane3df")))

(cffi:defcfun ("_wrap_plane3df_setPlane__SWIG_0" plane3df_setPlane) :void
  (self (:pointer "plane3df"))
  (point (:pointer "vector3df"))
  (nvector (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_setPlane__SWIG_1" plane3df_setPlane) :void
  (self (:pointer "plane3df"))
  (nvect (:pointer "vector3df"))
  (d :float))

(cffi:defcfun ("_wrap_plane3df_setPlane__SWIG_2" plane3df_setPlane) :void
  (self (:pointer "plane3df"))
  (point1 (:pointer "vector3df"))
  (point2 (:pointer "vector3df"))
  (point3 (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_getIntersectionWithLine" plane3df_getIntersectionWithLine) :bool
  (self (:pointer "plane3df"))
  (linePoint (:pointer "vector3df"))
  (lineVect (:pointer "vector3df"))
  (outIntersection (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_getKnownIntersectionWithLine" plane3df_getKnownIntersectionWithLine) :float
  (self (:pointer "plane3df"))
  (linePoint1 (:pointer "vector3df"))
  (linePoint2 (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_getIntersectionWithLimitedLine" plane3df_getIntersectionWithLimitedLine) :bool
  (self (:pointer "plane3df"))
  (linePoint1 (:pointer "vector3df"))
  (linePoint2 (:pointer "vector3df"))
  (outIntersection (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_classifyPointRelation" plane3df_classifyPointRelation) :enum
  (self (:pointer "plane3df"))
  (point (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_recalculateD" plane3df_recalculateD) :void
  (self (:pointer "plane3df"))
  (MPoint (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_getMemberPoint" plane3df_getMemberPoint) (:by-value "vector3df")
  (self (:pointer "plane3df")))

(cffi:defcfun ("_wrap_plane3df_existsIntersection" plane3df_existsIntersection) :bool
  (self (:pointer "plane3df"))
  (other (:pointer "plane3df")))

(cffi:defcfun ("_wrap_plane3df_getIntersectionWithPlane" plane3df_getIntersectionWithPlane) :bool
  (self (:pointer "plane3df"))
  (other (:pointer "plane3df"))
  (outLinePoint (:pointer "vector3df"))
  (outLineVect (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_getIntersectionWithPlanes" plane3df_getIntersectionWithPlanes) :bool
  (self (:pointer "plane3df"))
  (o1 (:pointer "plane3df"))
  (o2 (:pointer "plane3df"))
  (outPoint (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_isFrontFacing" plane3df_isFrontFacing) :bool
  (self (:pointer "plane3df"))
  (lookDirection (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_getDistanceTo" plane3df_getDistanceTo) :float
  (self (:pointer "plane3df"))
  (point (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_Normal_set" plane3df_Normal_set) :void
  (self (:pointer "plane3df"))
  (Normal (:pointer "vector3df")))

(cffi:defcfun ("_wrap_plane3df_Normal_get" plane3df_Normal_get) (:pointer "vector3df")
  (self (:pointer "plane3df")))

(cffi:defcfun ("_wrap_plane3df_D_set" plane3df_D_set) :void
  (self (:pointer "plane3df"))
  (D :float))

(cffi:defcfun ("_wrap_plane3df_D_get" plane3df_D_get) :float
  (self (:pointer "plane3df")))

(cffi:defcfun ("_wrap_delete_plane3df" delete_plane3df) :void
  (self (:pointer "plane3df")))

(cffi:defcfun ("_wrap_new_plane3di__SWIG_0" new_plane3di) (:pointer "plane3di"))

(cffi:defcfun ("_wrap_new_plane3di__SWIG_1" new_plane3di) (:pointer "plane3di")
  (MPoint (:pointer "vector3di"))
  (Normal (:pointer "vector3di")))

(cffi:defcfun ("_wrap_new_plane3di__SWIG_2" new_plane3di) (:pointer "plane3di")
  (px :int)
  (py :int)
  (pz :int)
  (nx :int)
  (ny :int)
  (nz :int))

(cffi:defcfun ("_wrap_new_plane3di__SWIG_3" new_plane3di) (:pointer "plane3di")
  (point1 (:pointer "vector3di"))
  (point2 (:pointer "vector3di"))
  (point3 (:pointer "vector3di")))

(cffi:defcfun ("_wrap_new_plane3di__SWIG_4" new_plane3di) (:pointer "plane3di")
  (normal (:pointer "vector3di"))
  (d :int))

(cffi:defcfun ("_wrap_plane3di___eq__" plane3di___eq__) :bool
  (self (:pointer "plane3di"))
  (other (:pointer "plane3di")))

(cffi:defcfun ("_wrap_plane3di___ne__" plane3di___ne__) :bool
  (self (:pointer "plane3di"))
  (other (:pointer "plane3di")))

(cffi:defcfun ("_wrap_plane3di_setPlane__SWIG_0" plane3di_setPlane) :void
  (self (:pointer "plane3di"))
  (point (:pointer "vector3di"))
  (nvector (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_setPlane__SWIG_1" plane3di_setPlane) :void
  (self (:pointer "plane3di"))
  (nvect (:pointer "vector3di"))
  (d :int))

(cffi:defcfun ("_wrap_plane3di_setPlane__SWIG_2" plane3di_setPlane) :void
  (self (:pointer "plane3di"))
  (point1 (:pointer "vector3di"))
  (point2 (:pointer "vector3di"))
  (point3 (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_getIntersectionWithLine" plane3di_getIntersectionWithLine) :bool
  (self (:pointer "plane3di"))
  (linePoint (:pointer "vector3di"))
  (lineVect (:pointer "vector3di"))
  (outIntersection (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_getKnownIntersectionWithLine" plane3di_getKnownIntersectionWithLine) :float
  (self (:pointer "plane3di"))
  (linePoint1 (:pointer "vector3di"))
  (linePoint2 (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_getIntersectionWithLimitedLine" plane3di_getIntersectionWithLimitedLine) :bool
  (self (:pointer "plane3di"))
  (linePoint1 (:pointer "vector3di"))
  (linePoint2 (:pointer "vector3di"))
  (outIntersection (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_classifyPointRelation" plane3di_classifyPointRelation) :enum
  (self (:pointer "plane3di"))
  (point (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_recalculateD" plane3di_recalculateD) :void
  (self (:pointer "plane3di"))
  (MPoint (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_getMemberPoint" plane3di_getMemberPoint) (:by-value "vector3di")
  (self (:pointer "plane3di")))

(cffi:defcfun ("_wrap_plane3di_existsIntersection" plane3di_existsIntersection) :bool
  (self (:pointer "plane3di"))
  (other (:pointer "plane3di")))

(cffi:defcfun ("_wrap_plane3di_getIntersectionWithPlane" plane3di_getIntersectionWithPlane) :bool
  (self (:pointer "plane3di"))
  (other (:pointer "plane3di"))
  (outLinePoint (:pointer "vector3di"))
  (outLineVect (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_getIntersectionWithPlanes" plane3di_getIntersectionWithPlanes) :bool
  (self (:pointer "plane3di"))
  (o1 (:pointer "plane3di"))
  (o2 (:pointer "plane3di"))
  (outPoint (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_isFrontFacing" plane3di_isFrontFacing) :bool
  (self (:pointer "plane3di"))
  (lookDirection (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_getDistanceTo" plane3di_getDistanceTo) :int
  (self (:pointer "plane3di"))
  (point (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_Normal_set" plane3di_Normal_set) :void
  (self (:pointer "plane3di"))
  (Normal (:pointer "vector3di")))

(cffi:defcfun ("_wrap_plane3di_Normal_get" plane3di_Normal_get) (:pointer "vector3di")
  (self (:pointer "plane3di")))

(cffi:defcfun ("_wrap_plane3di_D_set" plane3di_D_set) :void
  (self (:pointer "plane3di"))
  (D :int))

(cffi:defcfun ("_wrap_plane3di_D_get" plane3di_D_get) :int
  (self (:pointer "plane3di")))

(cffi:defcfun ("_wrap_delete_plane3di" delete_plane3di) :void
  (self (:pointer "plane3di")))

(cffi:defcfun ("_wrap_new_rectf__SWIG_0" new_rectf) (:pointer "rectf"))

(cffi:defcfun ("_wrap_new_rectf__SWIG_1" new_rectf) (:pointer "rectf")
  (x :float)
  (y :float)
  (x2 :float)
  (y2 :float))

(cffi:defcfun ("_wrap_new_rectf__SWIG_2" new_rectf) (:pointer "rectf")
  (upperLeft (:pointer "vector2df"))
  (lowerRight (:pointer "vector2df")))

(cffi:defcfun ("_wrap_rectf___add__" rectf___add__) (:by-value "rectf")
  (self (:pointer "rectf"))
  (pos (:pointer "vector2df")))

(cffi:defcfun ("_wrap_rectf___add_assign__" rectf___add_assign__) (:reference "rectf")
  (self (:pointer "rectf"))
  (pos (:pointer "vector2df")))

(cffi:defcfun ("_wrap_rectf___sub__" rectf___sub__) (:by-value "rectf")
  (self (:pointer "rectf"))
  (pos (:pointer "vector2df")))

(cffi:defcfun ("_wrap_rectf___sub_assign__" rectf___sub_assign__) (:reference "rectf")
  (self (:pointer "rectf"))
  (pos (:pointer "vector2df")))

(cffi:defcfun ("_wrap_rectf___eq__" rectf___eq__) :bool
  (self (:pointer "rectf"))
  (other (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf___ne__" rectf___ne__) :bool
  (self (:pointer "rectf"))
  (other (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf___lt__" rectf___lt__) :bool
  (self (:pointer "rectf"))
  (other (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_getArea" rectf_getArea) :float
  (self (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_isPointInside" rectf_isPointInside) :bool
  (self (:pointer "rectf"))
  (pos (:pointer "vector2df")))

(cffi:defcfun ("_wrap_rectf_isRectCollided" rectf_isRectCollided) :bool
  (self (:pointer "rectf"))
  (other (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_clipAgainst" rectf_clipAgainst) :void
  (self (:pointer "rectf"))
  (other (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_constrainTo" rectf_constrainTo) :bool
  (self (:pointer "rectf"))
  (other (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_getWidth" rectf_getWidth) :float
  (self (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_getHeight" rectf_getHeight) :float
  (self (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_repair" rectf_repair) :void
  (self (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_isValid" rectf_isValid) :bool
  (self (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_getCenter" rectf_getCenter) (:by-value "vector2df")
  (self (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_getSize" rectf_getSize) (:by-value "dimension2df")
  (self (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_addInternalPoint__SWIG_0" rectf_addInternalPoint) :void
  (self (:pointer "rectf"))
  (p (:pointer "vector2df")))

(cffi:defcfun ("_wrap_rectf_addInternalPoint__SWIG_1" rectf_addInternalPoint) :void
  (self (:pointer "rectf"))
  (x :float)
  (y :float))

(cffi:defcfun ("_wrap_rectf_UpperLeftCorner_set" rectf_UpperLeftCorner_set) :void
  (self (:pointer "rectf"))
  (UpperLeftCorner (:pointer "vector2df")))

(cffi:defcfun ("_wrap_rectf_UpperLeftCorner_get" rectf_UpperLeftCorner_get) (:pointer "vector2df")
  (self (:pointer "rectf")))

(cffi:defcfun ("_wrap_rectf_LowerRightCorner_set" rectf_LowerRightCorner_set) :void
  (self (:pointer "rectf"))
  (LowerRightCorner (:pointer "vector2df")))

(cffi:defcfun ("_wrap_rectf_LowerRightCorner_get" rectf_LowerRightCorner_get) (:pointer "vector2df")
  (self (:pointer "rectf")))

(cffi:defcfun ("_wrap_delete_rectf" delete_rectf) :void
  (self (:pointer "rectf")))

(cffi:defcfun ("_wrap_new_recti__SWIG_0" new_recti) (:pointer "recti"))

(cffi:defcfun ("_wrap_new_recti__SWIG_1" new_recti) (:pointer "recti")
  (x :int)
  (y :int)
  (x2 :int)
  (y2 :int))

(cffi:defcfun ("_wrap_new_recti__SWIG_2" new_recti) (:pointer "recti")
  (upperLeft (:pointer "vector2di"))
  (lowerRight (:pointer "vector2di")))

(cffi:defcfun ("_wrap_recti___add__" recti___add__) (:by-value "recti")
  (self (:pointer "recti"))
  (pos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_recti___add_assign__" recti___add_assign__) (:reference "recti")
  (self (:pointer "recti"))
  (pos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_recti___sub__" recti___sub__) (:by-value "recti")
  (self (:pointer "recti"))
  (pos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_recti___sub_assign__" recti___sub_assign__) (:reference "recti")
  (self (:pointer "recti"))
  (pos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_recti___eq__" recti___eq__) :bool
  (self (:pointer "recti"))
  (other (:pointer "recti")))

(cffi:defcfun ("_wrap_recti___ne__" recti___ne__) :bool
  (self (:pointer "recti"))
  (other (:pointer "recti")))

(cffi:defcfun ("_wrap_recti___lt__" recti___lt__) :bool
  (self (:pointer "recti"))
  (other (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_getArea" recti_getArea) :int
  (self (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_isPointInside" recti_isPointInside) :bool
  (self (:pointer "recti"))
  (pos (:pointer "vector2di")))

(cffi:defcfun ("_wrap_recti_isRectCollided" recti_isRectCollided) :bool
  (self (:pointer "recti"))
  (other (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_clipAgainst" recti_clipAgainst) :void
  (self (:pointer "recti"))
  (other (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_constrainTo" recti_constrainTo) :bool
  (self (:pointer "recti"))
  (other (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_getWidth" recti_getWidth) :int
  (self (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_getHeight" recti_getHeight) :int
  (self (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_repair" recti_repair) :void
  (self (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_isValid" recti_isValid) :bool
  (self (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_getCenter" recti_getCenter) (:by-value "vector2di")
  (self (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_getSize" recti_getSize) (:by-value "dimension2di")
  (self (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_addInternalPoint__SWIG_0" recti_addInternalPoint) :void
  (self (:pointer "recti"))
  (p (:pointer "vector2di")))

(cffi:defcfun ("_wrap_recti_addInternalPoint__SWIG_1" recti_addInternalPoint) :void
  (self (:pointer "recti"))
  (x :int)
  (y :int))

(cffi:defcfun ("_wrap_recti_UpperLeftCorner_set" recti_UpperLeftCorner_set) :void
  (self (:pointer "recti"))
  (UpperLeftCorner (:pointer "vector2di")))

(cffi:defcfun ("_wrap_recti_UpperLeftCorner_get" recti_UpperLeftCorner_get) (:pointer "vector2di")
  (self (:pointer "recti")))

(cffi:defcfun ("_wrap_recti_LowerRightCorner_set" recti_LowerRightCorner_set) :void
  (self (:pointer "recti"))
  (LowerRightCorner (:pointer "vector2di")))

(cffi:defcfun ("_wrap_recti_LowerRightCorner_get" recti_LowerRightCorner_get) (:pointer "vector2di")
  (self (:pointer "recti")))

(cffi:defcfun ("_wrap_delete_recti" delete_recti) :void
  (self (:pointer "recti")))

(cffi:defcfun ("_wrap_new_triangle3df__SWIG_0" new_triangle3df) (:pointer "triangle3df"))

(cffi:defcfun ("_wrap_new_triangle3df__SWIG_1" new_triangle3df) (:pointer "triangle3df")
  (v1 (:pointer "vector3df"))
  (v2 (:pointer "vector3df"))
  (v3 (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df___eq__" triangle3df___eq__) :bool
  (self (:pointer "triangle3df"))
  (other (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_triangle3df___ne__" triangle3df___ne__) :bool
  (self (:pointer "triangle3df"))
  (other (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_triangle3df_isTotalInsideBox" triangle3df_isTotalInsideBox) :bool
  (self (:pointer "triangle3df"))
  (box (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_triangle3df_isTotalOutsideBox" triangle3df_isTotalOutsideBox) :bool
  (self (:pointer "triangle3df"))
  (box (:pointer "aabbox3df")))

(cffi:defcfun ("_wrap_triangle3df_closestPointOnTriangle" triangle3df_closestPointOnTriangle) (:by-value "vector3df")
  (self (:pointer "triangle3df"))
  (p (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df_isPointInside" triangle3df_isPointInside) :bool
  (self (:pointer "triangle3df"))
  (p (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df_isPointInsideFast" triangle3df_isPointInsideFast) :bool
  (self (:pointer "triangle3df"))
  (p (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df_getIntersectionWithLimitedLine" triangle3df_getIntersectionWithLimitedLine) :bool
  (self (:pointer "triangle3df"))
  (line (:pointer "line3df"))
  (outIntersection (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df_getIntersectionWithLine" triangle3df_getIntersectionWithLine) :bool
  (self (:pointer "triangle3df"))
  (linePoint (:pointer "vector3df"))
  (lineVect (:pointer "vector3df"))
  (outIntersection (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df_getIntersectionOfPlaneWithLine" triangle3df_getIntersectionOfPlaneWithLine) :bool
  (self (:pointer "triangle3df"))
  (linePoint (:pointer "vector3df"))
  (lineVect (:pointer "vector3df"))
  (outIntersection (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df_getNormal" triangle3df_getNormal) (:by-value "vector3df")
  (self (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_triangle3df_isFrontFacing" triangle3df_isFrontFacing) :bool
  (self (:pointer "triangle3df"))
  (lookDirection (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df_getPlane" triangle3df_getPlane) (:by-value "plane3df")
  (self (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_triangle3df_getArea" triangle3df_getArea) :float
  (self (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_triangle3df_set" triangle3df_set) :void
  (self (:pointer "triangle3df"))
  (a (:pointer "vector3df"))
  (b (:pointer "vector3df"))
  (c (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df_pointA_set" triangle3df_pointA_set) :void
  (self (:pointer "triangle3df"))
  (pointA (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df_pointA_get" triangle3df_pointA_get) (:pointer "vector3df")
  (self (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_triangle3df_pointB_set" triangle3df_pointB_set) :void
  (self (:pointer "triangle3df"))
  (pointB (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df_pointB_get" triangle3df_pointB_get) (:pointer "vector3df")
  (self (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_triangle3df_pointC_set" triangle3df_pointC_set) :void
  (self (:pointer "triangle3df"))
  (pointC (:pointer "vector3df")))

(cffi:defcfun ("_wrap_triangle3df_pointC_get" triangle3df_pointC_get) (:pointer "vector3df")
  (self (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_delete_triangle3df" delete_triangle3df) :void
  (self (:pointer "triangle3df")))

(cffi:defcfun ("_wrap_new_triangle3di__SWIG_0" new_triangle3di) (:pointer "triangle3di"))

(cffi:defcfun ("_wrap_new_triangle3di__SWIG_1" new_triangle3di) (:pointer "triangle3di")
  (v1 (:pointer "vector3di"))
  (v2 (:pointer "vector3di"))
  (v3 (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di___eq__" triangle3di___eq__) :bool
  (self (:pointer "triangle3di"))
  (other (:pointer "triangle3di")))

(cffi:defcfun ("_wrap_triangle3di___ne__" triangle3di___ne__) :bool
  (self (:pointer "triangle3di"))
  (other (:pointer "triangle3di")))

(cffi:defcfun ("_wrap_triangle3di_isTotalInsideBox" triangle3di_isTotalInsideBox) :bool
  (self (:pointer "triangle3di"))
  (box (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_triangle3di_isTotalOutsideBox" triangle3di_isTotalOutsideBox) :bool
  (self (:pointer "triangle3di"))
  (box (:pointer "aabbox3di")))

(cffi:defcfun ("_wrap_triangle3di_closestPointOnTriangle" triangle3di_closestPointOnTriangle) (:by-value "vector3di")
  (self (:pointer "triangle3di"))
  (p (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di_isPointInside" triangle3di_isPointInside) :bool
  (self (:pointer "triangle3di"))
  (p (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di_isPointInsideFast" triangle3di_isPointInsideFast) :bool
  (self (:pointer "triangle3di"))
  (p (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di_getIntersectionWithLimitedLine" triangle3di_getIntersectionWithLimitedLine) :bool
  (self (:pointer "triangle3di"))
  (line (:pointer "line3di"))
  (outIntersection (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di_getIntersectionWithLine" triangle3di_getIntersectionWithLine) :bool
  (self (:pointer "triangle3di"))
  (linePoint (:pointer "vector3di"))
  (lineVect (:pointer "vector3di"))
  (outIntersection (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di_getIntersectionOfPlaneWithLine" triangle3di_getIntersectionOfPlaneWithLine) :bool
  (self (:pointer "triangle3di"))
  (linePoint (:pointer "vector3di"))
  (lineVect (:pointer "vector3di"))
  (outIntersection (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di_getNormal" triangle3di_getNormal) (:by-value "vector3di")
  (self (:pointer "triangle3di")))

(cffi:defcfun ("_wrap_triangle3di_isFrontFacing" triangle3di_isFrontFacing) :bool
  (self (:pointer "triangle3di"))
  (lookDirection (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di_getPlane" triangle3di_getPlane) (:by-value "plane3di")
  (self (:pointer "triangle3di")))

(cffi:defcfun ("_wrap_triangle3di_getArea" triangle3di_getArea) :int
  (self (:pointer "triangle3di")))

(cffi:defcfun ("_wrap_triangle3di_set" triangle3di_set) :void
  (self (:pointer "triangle3di"))
  (a (:pointer "vector3di"))
  (b (:pointer "vector3di"))
  (c (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di_pointA_set" triangle3di_pointA_set) :void
  (self (:pointer "triangle3di"))
  (pointA (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di_pointA_get" triangle3di_pointA_get) (:pointer "vector3di")
  (self (:pointer "triangle3di")))

(cffi:defcfun ("_wrap_triangle3di_pointB_set" triangle3di_pointB_set) :void
  (self (:pointer "triangle3di"))
  (pointB (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di_pointB_get" triangle3di_pointB_get) (:pointer "vector3di")
  (self (:pointer "triangle3di")))

(cffi:defcfun ("_wrap_triangle3di_pointC_set" triangle3di_pointC_set) :void
  (self (:pointer "triangle3di"))
  (pointC (:pointer "vector3di")))

(cffi:defcfun ("_wrap_triangle3di_pointC_get" triangle3di_pointC_get) (:pointer "vector3di")
  (self (:pointer "triangle3di")))

(cffi:defcfun ("_wrap_delete_triangle3di" delete_triangle3di) :void
  (self (:pointer "triangle3di")))

(cffi:defcfun ("_wrap_new_vector2df__SWIG_0" new_vector2df) (:pointer "vector2df"))

(cffi:defcfun ("_wrap_new_vector2df__SWIG_1" new_vector2df) (:pointer "vector2df")
  (nx :float)
  (ny :float))

(cffi:defcfun ("_wrap_new_vector2df__SWIG_2" new_vector2df) (:pointer "vector2df")
  (n :float))

(cffi:defcfun ("_wrap_new_vector2df__SWIG_3" new_vector2df) (:pointer "vector2df")
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_new_vector2df__SWIG_4" new_vector2df) (:pointer "vector2df")
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_vector2df___neg__" vector2df___neg__) (:by-value "vector2df")
  (self (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___assign____SWIG_0" vector2df___assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___assign____SWIG_1" vector2df___assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_vector2df___add____SWIG_0" vector2df___add__) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___add____SWIG_1" vector2df___add__) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_vector2df___add_assign____SWIG_0" vector2df___add_assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___add____SWIG_2" vector2df___add__) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (v :float))

(cffi:defcfun ("_wrap_vector2df___add_assign____SWIG_1" vector2df___add_assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (v :float))

(cffi:defcfun ("_wrap_vector2df___add_assign____SWIG_2" vector2df___add_assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_vector2df___sub____SWIG_0" vector2df___sub__) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___sub____SWIG_1" vector2df___sub__) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_vector2df___sub_assign____SWIG_0" vector2df___sub_assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___sub____SWIG_2" vector2df___sub__) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (v :float))

(cffi:defcfun ("_wrap_vector2df___sub_assign____SWIG_1" vector2df___sub_assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (v :float))

(cffi:defcfun ("_wrap_vector2df___sub_assign____SWIG_2" vector2df___sub_assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "dimension2df")))

(cffi:defcfun ("_wrap_vector2df___mul____SWIG_0" vector2df___mul__) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___mul_assign____SWIG_0" vector2df___mul_assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___mul____SWIG_1" vector2df___mul__) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (v :float))

(cffi:defcfun ("_wrap_vector2df___mul_assign____SWIG_1" vector2df___mul_assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (v :float))

(cffi:defcfun ("_wrap_vector2df___div____SWIG_0" vector2df___div__) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___div_assign____SWIG_0" vector2df___div_assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___div____SWIG_1" vector2df___div__) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (v :float))

(cffi:defcfun ("_wrap_vector2df___div_assign____SWIG_1" vector2df___div_assign__) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (v :float))

(cffi:defcfun ("_wrap_vector2df___lte__" vector2df___lte__) :bool
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___gte__" vector2df___gte__) :bool
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___lt__" vector2df___lt__) :bool
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___gt__" vector2df___gt__) :bool
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___eq__" vector2df___eq__) :bool
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df___ne__" vector2df___ne__) :bool
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_equals" vector2df_equals) :bool
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_set__SWIG_0" vector2df_set) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (nx :float)
  (ny :float))

(cffi:defcfun ("_wrap_vector2df_set__SWIG_1" vector2df_set) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (p (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_getLength" vector2df_getLength) :float
  (self (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_getLengthSQ" vector2df_getLengthSQ) :float
  (self (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_dotProduct" vector2df_dotProduct) :float
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_getDistanceFrom" vector2df_getDistanceFrom) :float
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_getDistanceFromSQ" vector2df_getDistanceFromSQ) :float
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_rotateBy__SWIG_0" vector2df_rotateBy) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (degrees :double)
  (center (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_rotateBy__SWIG_1" vector2df_rotateBy) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (degrees :double))

(cffi:defcfun ("_wrap_vector2df_normalize" vector2df_normalize) (:reference "vector2df")
  (self (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_getAngleTrig" vector2df_getAngleTrig) :double
  (self (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_getAngle" vector2df_getAngle) :double
  (self (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_getAngleWith" vector2df_getAngleWith) :double
  (self (:pointer "vector2df"))
  (b (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_isBetweenPoints" vector2df_isBetweenPoints) :bool
  (self (:pointer "vector2df"))
  (begin (:pointer "vector2df"))
  (end (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_getInterpolated" vector2df_getInterpolated) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (other (:pointer "vector2df"))
  (d :double))

(cffi:defcfun ("_wrap_vector2df_getInterpolated_quadratic" vector2df_getInterpolated_quadratic) (:by-value "vector2df")
  (self (:pointer "vector2df"))
  (v2 (:pointer "vector2df"))
  (v3 (:pointer "vector2df"))
  (d :double))

(cffi:defcfun ("_wrap_vector2df_interpolate" vector2df_interpolate) (:reference "vector2df")
  (self (:pointer "vector2df"))
  (a (:pointer "vector2df"))
  (b (:pointer "vector2df"))
  (d :double))

(cffi:defcfun ("_wrap_vector2df_X_set" vector2df_X_set) :void
  (self (:pointer "vector2df"))
  (X :float))

(cffi:defcfun ("_wrap_vector2df_X_get" vector2df_X_get) :float
  (self (:pointer "vector2df")))

(cffi:defcfun ("_wrap_vector2df_Y_set" vector2df_Y_set) :void
  (self (:pointer "vector2df"))
  (Y :float))

(cffi:defcfun ("_wrap_vector2df_Y_get" vector2df_Y_get) :float
  (self (:pointer "vector2df")))

(cffi:defcfun ("_wrap_delete_vector2df" delete_vector2df) :void
  (self (:pointer "vector2df")))

(cffi:defcfun ("_wrap_new_vector2di__SWIG_0" new_vector2di) (:pointer "vector2di"))

(cffi:defcfun ("_wrap_new_vector2di__SWIG_1" new_vector2di) (:pointer "vector2di")
  (nx :int)
  (ny :int))

(cffi:defcfun ("_wrap_new_vector2di__SWIG_2" new_vector2di) (:pointer "vector2di")
  (n :int))

(cffi:defcfun ("_wrap_new_vector2di__SWIG_3" new_vector2di) (:pointer "vector2di")
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_new_vector2di__SWIG_4" new_vector2di) (:pointer "vector2di")
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_vector2di___neg__" vector2di___neg__) (:by-value "vector2di")
  (self (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___assign____SWIG_0" vector2di___assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___assign____SWIG_1" vector2di___assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_vector2di___add____SWIG_0" vector2di___add__) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___add____SWIG_1" vector2di___add__) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_vector2di___add_assign____SWIG_0" vector2di___add_assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___add____SWIG_2" vector2di___add__) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (v :int))

(cffi:defcfun ("_wrap_vector2di___add_assign____SWIG_1" vector2di___add_assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (v :int))

(cffi:defcfun ("_wrap_vector2di___add_assign____SWIG_2" vector2di___add_assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_vector2di___sub____SWIG_0" vector2di___sub__) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___sub____SWIG_1" vector2di___sub__) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_vector2di___sub_assign____SWIG_0" vector2di___sub_assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___sub____SWIG_2" vector2di___sub__) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (v :int))

(cffi:defcfun ("_wrap_vector2di___sub_assign____SWIG_1" vector2di___sub_assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (v :int))

(cffi:defcfun ("_wrap_vector2di___sub_assign____SWIG_2" vector2di___sub_assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "dimension2di")))

(cffi:defcfun ("_wrap_vector2di___mul____SWIG_0" vector2di___mul__) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___mul_assign____SWIG_0" vector2di___mul_assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___mul____SWIG_1" vector2di___mul__) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (v :int))

(cffi:defcfun ("_wrap_vector2di___mul_assign____SWIG_1" vector2di___mul_assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (v :int))

(cffi:defcfun ("_wrap_vector2di___div____SWIG_0" vector2di___div__) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___div_assign____SWIG_0" vector2di___div_assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___div____SWIG_1" vector2di___div__) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (v :int))

(cffi:defcfun ("_wrap_vector2di___div_assign____SWIG_1" vector2di___div_assign__) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (v :int))

(cffi:defcfun ("_wrap_vector2di___lte__" vector2di___lte__) :bool
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___gte__" vector2di___gte__) :bool
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___lt__" vector2di___lt__) :bool
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___gt__" vector2di___gt__) :bool
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___eq__" vector2di___eq__) :bool
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di___ne__" vector2di___ne__) :bool
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_equals" vector2di_equals) :bool
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_set__SWIG_0" vector2di_set) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (nx :int)
  (ny :int))

(cffi:defcfun ("_wrap_vector2di_set__SWIG_1" vector2di_set) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (p (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_getLength" vector2di_getLength) :int
  (self (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_getLengthSQ" vector2di_getLengthSQ) :int
  (self (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_dotProduct" vector2di_dotProduct) :int
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_getDistanceFrom" vector2di_getDistanceFrom) :int
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_getDistanceFromSQ" vector2di_getDistanceFromSQ) :int
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_rotateBy__SWIG_0" vector2di_rotateBy) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (degrees :double)
  (center (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_rotateBy__SWIG_1" vector2di_rotateBy) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (degrees :double))

(cffi:defcfun ("_wrap_vector2di_normalize" vector2di_normalize) (:reference "vector2di")
  (self (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_getAngleTrig" vector2di_getAngleTrig) :double
  (self (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_getAngle" vector2di_getAngle) :double
  (self (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_getAngleWith" vector2di_getAngleWith) :double
  (self (:pointer "vector2di"))
  (b (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_isBetweenPoints" vector2di_isBetweenPoints) :bool
  (self (:pointer "vector2di"))
  (begin (:pointer "vector2di"))
  (end (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_getInterpolated" vector2di_getInterpolated) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (other (:pointer "vector2di"))
  (d :double))

(cffi:defcfun ("_wrap_vector2di_getInterpolated_quadratic" vector2di_getInterpolated_quadratic) (:by-value "vector2di")
  (self (:pointer "vector2di"))
  (v2 (:pointer "vector2di"))
  (v3 (:pointer "vector2di"))
  (d :double))

(cffi:defcfun ("_wrap_vector2di_interpolate" vector2di_interpolate) (:reference "vector2di")
  (self (:pointer "vector2di"))
  (a (:pointer "vector2di"))
  (b (:pointer "vector2di"))
  (d :double))

(cffi:defcfun ("_wrap_vector2di_X_set" vector2di_X_set) :void
  (self (:pointer "vector2di"))
  (X :int))

(cffi:defcfun ("_wrap_vector2di_X_get" vector2di_X_get) :int
  (self (:pointer "vector2di")))

(cffi:defcfun ("_wrap_vector2di_Y_set" vector2di_Y_set) :void
  (self (:pointer "vector2di"))
  (Y :int))

(cffi:defcfun ("_wrap_vector2di_Y_get" vector2di_Y_get) :int
  (self (:pointer "vector2di")))

(cffi:defcfun ("_wrap_delete_vector2di" delete_vector2di) :void
  (self (:pointer "vector2di")))

(cffi:defcfun ("_wrap_new_vector3df__SWIG_0" new_vector3df) (:pointer "vector3df"))

(cffi:defcfun ("_wrap_new_vector3df__SWIG_1" new_vector3df) (:pointer "vector3df")
  (nx :float)
  (ny :float)
  (nz :float))

(cffi:defcfun ("_wrap_new_vector3df__SWIG_2" new_vector3df) (:pointer "vector3df")
  (n :float))

(cffi:defcfun ("_wrap_new_vector3df__SWIG_3" new_vector3df) (:pointer "vector3df")
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___neg__" vector3df___neg__) (:by-value "vector3df")
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___assign__" vector3df___assign__) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___add____SWIG_0" vector3df___add__) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___add_assign____SWIG_0" vector3df___add_assign__) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___add____SWIG_1" vector3df___add__) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (val :float))

(cffi:defcfun ("_wrap_vector3df___add_assign____SWIG_1" vector3df___add_assign__) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (val :float))

(cffi:defcfun ("_wrap_vector3df___sub____SWIG_0" vector3df___sub__) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___sub_assign____SWIG_0" vector3df___sub_assign__) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___sub____SWIG_1" vector3df___sub__) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (val :float))

(cffi:defcfun ("_wrap_vector3df___sub_assign____SWIG_1" vector3df___sub_assign__) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (val :float))

(cffi:defcfun ("_wrap_vector3df___mul____SWIG_0" vector3df___mul__) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___mul_assign____SWIG_0" vector3df___mul_assign__) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___mul____SWIG_1" vector3df___mul__) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (v :float))

(cffi:defcfun ("_wrap_vector3df___mul_assign____SWIG_1" vector3df___mul_assign__) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (v :float))

(cffi:defcfun ("_wrap_vector3df___div____SWIG_0" vector3df___div__) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___div_assign____SWIG_0" vector3df___div_assign__) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___div____SWIG_1" vector3df___div__) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (v :float))

(cffi:defcfun ("_wrap_vector3df___div_assign____SWIG_1" vector3df___div_assign__) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (v :float))

(cffi:defcfun ("_wrap_vector3df___lte__" vector3df___lte__) :bool
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___gte__" vector3df___gte__) :bool
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___lt__" vector3df___lt__) :bool
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___gt__" vector3df___gt__) :bool
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___eq__" vector3df___eq__) :bool
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df___ne__" vector3df___ne__) :bool
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_equals__SWIG_0" vector3df_equals) :bool
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df"))
  (tolerance :float))

(cffi:defcfun ("_wrap_vector3df_equals__SWIG_1" vector3df_equals) :bool
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_set__SWIG_0" vector3df_set) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (nx :float)
  (ny :float)
  (nz :float))

(cffi:defcfun ("_wrap_vector3df_set__SWIG_1" vector3df_set) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (p (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_getLength" vector3df_getLength) :float
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_getLengthSQ" vector3df_getLengthSQ) :float
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_dotProduct" vector3df_dotProduct) :float
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_getDistanceFrom" vector3df_getDistanceFrom) :float
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_getDistanceFromSQ" vector3df_getDistanceFromSQ) :float
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_crossProduct" vector3df_crossProduct) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (p (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_isBetweenPoints" vector3df_isBetweenPoints) :bool
  (self (:pointer "vector3df"))
  (begin (:pointer "vector3df"))
  (end (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_normalize" vector3df_normalize) (:reference "vector3df")
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_setLength" vector3df_setLength) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (newlength :float))

(cffi:defcfun ("_wrap_vector3df_invert" vector3df_invert) (:reference "vector3df")
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_rotateXZBy__SWIG_0" vector3df_rotateXZBy) :void
  (self (:pointer "vector3df"))
  (degrees :double)
  (center (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_rotateXZBy__SWIG_1" vector3df_rotateXZBy) :void
  (self (:pointer "vector3df"))
  (degrees :double))

(cffi:defcfun ("_wrap_vector3df_rotateXYBy__SWIG_0" vector3df_rotateXYBy) :void
  (self (:pointer "vector3df"))
  (degrees :double)
  (center (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_rotateXYBy__SWIG_1" vector3df_rotateXYBy) :void
  (self (:pointer "vector3df"))
  (degrees :double))

(cffi:defcfun ("_wrap_vector3df_rotateYZBy__SWIG_0" vector3df_rotateYZBy) :void
  (self (:pointer "vector3df"))
  (degrees :double)
  (center (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_rotateYZBy__SWIG_1" vector3df_rotateYZBy) :void
  (self (:pointer "vector3df"))
  (degrees :double))

(cffi:defcfun ("_wrap_vector3df_getInterpolated" vector3df_getInterpolated) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (other (:pointer "vector3df"))
  (d :double))

(cffi:defcfun ("_wrap_vector3df_getInterpolated_quadratic" vector3df_getInterpolated_quadratic) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (v2 (:pointer "vector3df"))
  (v3 (:pointer "vector3df"))
  (d :double))

(cffi:defcfun ("_wrap_vector3df_interpolate" vector3df_interpolate) (:reference "vector3df")
  (self (:pointer "vector3df"))
  (a (:pointer "vector3df"))
  (b (:pointer "vector3df"))
  (d :double))

(cffi:defcfun ("_wrap_vector3df_getHorizontalAngle" vector3df_getHorizontalAngle) (:by-value "vector3df")
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_getSphericalCoordinateAngles" vector3df_getSphericalCoordinateAngles) (:by-value "vector3df")
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_rotationToDirection__SWIG_0" vector3df_rotationToDirection) (:by-value "vector3df")
  (self (:pointer "vector3df"))
  (forwards (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_rotationToDirection__SWIG_1" vector3df_rotationToDirection) (:by-value "vector3df")
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_getAs4Values" vector3df_getAs4Values) :void
  (self (:pointer "vector3df"))
  (array (:pointer "float *")))

(cffi:defcfun ("_wrap_vector3df_getAs3Values" vector3df_getAs3Values) :void
  (self (:pointer "vector3df"))
  (array (:pointer "float *")))

(cffi:defcfun ("_wrap_vector3df_X_set" vector3df_X_set) :void
  (self (:pointer "vector3df"))
  (X :float))

(cffi:defcfun ("_wrap_vector3df_X_get" vector3df_X_get) :float
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_Y_set" vector3df_Y_set) :void
  (self (:pointer "vector3df"))
  (Y :float))

(cffi:defcfun ("_wrap_vector3df_Y_get" vector3df_Y_get) :float
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_vector3df_Z_set" vector3df_Z_set) :void
  (self (:pointer "vector3df"))
  (Z :float))

(cffi:defcfun ("_wrap_vector3df_Z_get" vector3df_Z_get) :float
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_delete_vector3df" delete_vector3df) :void
  (self (:pointer "vector3df")))

(cffi:defcfun ("_wrap_new_vector3di__SWIG_0" new_vector3di) (:pointer "vector3di"))

(cffi:defcfun ("_wrap_new_vector3di__SWIG_1" new_vector3di) (:pointer "vector3di")
  (nx :int)
  (ny :int)
  (nz :int))

(cffi:defcfun ("_wrap_new_vector3di__SWIG_2" new_vector3di) (:pointer "vector3di")
  (n :int))

(cffi:defcfun ("_wrap_new_vector3di__SWIG_3" new_vector3di) (:pointer "vector3di")
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___neg__" vector3di___neg__) (:by-value "vector3di")
  (self (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___assign__" vector3di___assign__) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___add____SWIG_0" vector3di___add__) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___add_assign____SWIG_0" vector3di___add_assign__) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___add____SWIG_1" vector3di___add__) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (val :int))

(cffi:defcfun ("_wrap_vector3di___add_assign____SWIG_1" vector3di___add_assign__) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (val :int))

(cffi:defcfun ("_wrap_vector3di___sub____SWIG_0" vector3di___sub__) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___sub_assign____SWIG_0" vector3di___sub_assign__) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___sub____SWIG_1" vector3di___sub__) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (val :int))

(cffi:defcfun ("_wrap_vector3di___sub_assign____SWIG_1" vector3di___sub_assign__) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (val :int))

(cffi:defcfun ("_wrap_vector3di___mul____SWIG_0" vector3di___mul__) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___mul_assign____SWIG_0" vector3di___mul_assign__) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___mul____SWIG_1" vector3di___mul__) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (v :int))

(cffi:defcfun ("_wrap_vector3di___mul_assign____SWIG_1" vector3di___mul_assign__) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (v :int))

(cffi:defcfun ("_wrap_vector3di___div____SWIG_0" vector3di___div__) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___div_assign____SWIG_0" vector3di___div_assign__) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___div____SWIG_1" vector3di___div__) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (v :int))

(cffi:defcfun ("_wrap_vector3di___div_assign____SWIG_1" vector3di___div_assign__) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (v :int))

(cffi:defcfun ("_wrap_vector3di___lte__" vector3di___lte__) :bool
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___gte__" vector3di___gte__) :bool
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___lt__" vector3di___lt__) :bool
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___gt__" vector3di___gt__) :bool
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___eq__" vector3di___eq__) :bool
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di___ne__" vector3di___ne__) :bool
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_equals__SWIG_0" vector3di_equals) :bool
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di"))
  (tolerance :int))

(cffi:defcfun ("_wrap_vector3di_equals__SWIG_1" vector3di_equals) :bool
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_set__SWIG_0" vector3di_set) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (nx :int)
  (ny :int)
  (nz :int))

(cffi:defcfun ("_wrap_vector3di_set__SWIG_1" vector3di_set) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (p (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_getLength" vector3di_getLength) :int
  (self (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_getLengthSQ" vector3di_getLengthSQ) :int
  (self (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_dotProduct" vector3di_dotProduct) :int
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_getDistanceFrom" vector3di_getDistanceFrom) :int
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_getDistanceFromSQ" vector3di_getDistanceFromSQ) :int
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_crossProduct" vector3di_crossProduct) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (p (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_isBetweenPoints" vector3di_isBetweenPoints) :bool
  (self (:pointer "vector3di"))
  (begin (:pointer "vector3di"))
  (end (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_normalize" vector3di_normalize) (:reference "vector3di")
  (self (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_setLength" vector3di_setLength) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (newlength :int))

(cffi:defcfun ("_wrap_vector3di_invert" vector3di_invert) (:reference "vector3di")
  (self (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_rotateXZBy__SWIG_0" vector3di_rotateXZBy) :void
  (self (:pointer "vector3di"))
  (degrees :double)
  (center (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_rotateXZBy__SWIG_1" vector3di_rotateXZBy) :void
  (self (:pointer "vector3di"))
  (degrees :double))

(cffi:defcfun ("_wrap_vector3di_rotateXYBy__SWIG_0" vector3di_rotateXYBy) :void
  (self (:pointer "vector3di"))
  (degrees :double)
  (center (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_rotateXYBy__SWIG_1" vector3di_rotateXYBy) :void
  (self (:pointer "vector3di"))
  (degrees :double))

(cffi:defcfun ("_wrap_vector3di_rotateYZBy__SWIG_0" vector3di_rotateYZBy) :void
  (self (:pointer "vector3di"))
  (degrees :double)
  (center (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_rotateYZBy__SWIG_1" vector3di_rotateYZBy) :void
  (self (:pointer "vector3di"))
  (degrees :double))

(cffi:defcfun ("_wrap_vector3di_getInterpolated" vector3di_getInterpolated) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (other (:pointer "vector3di"))
  (d :double))

(cffi:defcfun ("_wrap_vector3di_getInterpolated_quadratic" vector3di_getInterpolated_quadratic) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (v2 (:pointer "vector3di"))
  (v3 (:pointer "vector3di"))
  (d :double))

(cffi:defcfun ("_wrap_vector3di_interpolate" vector3di_interpolate) (:reference "vector3di")
  (self (:pointer "vector3di"))
  (a (:pointer "vector3di"))
  (b (:pointer "vector3di"))
  (d :double))

(cffi:defcfun ("_wrap_vector3di_getHorizontalAngle" vector3di_getHorizontalAngle) (:by-value "vector3di")
  (self (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_getSphericalCoordinateAngles" vector3di_getSphericalCoordinateAngles) (:by-value "vector3di")
  (self (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_rotationToDirection__SWIG_0" vector3di_rotationToDirection) (:by-value "vector3di")
  (self (:pointer "vector3di"))
  (forwards (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_rotationToDirection__SWIG_1" vector3di_rotationToDirection) (:by-value "vector3di")
  (self (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_getAs4Values" vector3di_getAs4Values) :void
  (self (:pointer "vector3di"))
  (array (:pointer "int *")))

(cffi:defcfun ("_wrap_vector3di_getAs3Values" vector3di_getAs3Values) :void
  (self (:pointer "vector3di"))
  (array (:pointer "int *")))

(cffi:defcfun ("_wrap_vector3di_X_set" vector3di_X_set) :void
  (self (:pointer "vector3di"))
  (X :int))

(cffi:defcfun ("_wrap_vector3di_X_get" vector3di_X_get) :int
  (self (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_Y_set" vector3di_Y_set) :void
  (self (:pointer "vector3di"))
  (Y :int))

(cffi:defcfun ("_wrap_vector3di_Y_get" vector3di_Y_get) :int
  (self (:pointer "vector3di")))

(cffi:defcfun ("_wrap_vector3di_Z_set" vector3di_Z_set) :void
  (self (:pointer "vector3di"))
  (Z :int))

(cffi:defcfun ("_wrap_vector3di_Z_get" vector3di_Z_get) :int
  (self (:pointer "vector3di")))

(cffi:defcfun ("_wrap_delete_vector3di" delete_vector3di) :void
  (self (:pointer "vector3di")))


